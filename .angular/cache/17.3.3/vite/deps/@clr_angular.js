import {
  animate,
  keyframes,
  state,
  style,
  transition,
  trigger
} from "./chunk-X6CBFUMC.js";
import {
  RouterLinkActive
} from "./chunk-AMEZSJFN.js";
import {
  AsyncPipe,
  CommonModule,
  DOCUMENT,
  FormStyle,
  FormatWidth,
  NgClass,
  NgForOf,
  NgIf,
  NgSwitch,
  NgSwitchCase,
  NgTemplateOutlet,
  TranslationWidth,
  getDOM,
  getLocaleDateFormat,
  getLocaleDayNames,
  getLocaleFirstDayOfWeek,
  getLocaleMonthNames,
  isPlatformBrowser
} from "./chunk-CSAY4AE2.js";
import {
  APP_ID,
  Attribute,
  BehaviorSubject,
  CSP_NONCE,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  Component,
  ComponentFactoryResolver$1,
  ConnectableObservable,
  ContentChild,
  ContentChildren,
  Directive,
  ElementRef,
  EventEmitter,
  Host,
  HostBinding,
  HostListener,
  Inject,
  Injectable,
  InjectionToken,
  Injector,
  Input,
  InputFlags,
  IterableDiffers,
  KeyValueDiffers,
  LOCALE_ID,
  NgModule,
  NgZone,
  Observable,
  Optional,
  Output,
  PLATFORM_ID,
  Renderer2,
  RendererFactory2,
  ReplaySubject,
  RuntimeError,
  Self,
  SkipSelf,
  Subject,
  Subscription,
  TemplateRef,
  Type,
  Version,
  ViewChild,
  ViewContainerRef,
  ViewEncapsulation$1,
  __async,
  __decorate,
  __spreadProps,
  __spreadValues,
  animationFrameScheduler,
  asapScheduler,
  auditTime,
  booleanAttribute,
  combineLatest,
  concat,
  debounceTime,
  distinctUntilChanged,
  filter,
  first,
  forkJoin,
  forwardRef,
  from,
  fromEvent,
  inject,
  interval,
  isObservable,
  isPromise,
  isSubscribable,
  map,
  merge,
  of,
  pairwise,
  setClassMetadata,
  shareReplay,
  skip,
  skipUntil,
  startWith,
  switchMap,
  take,
  takeUntil,
  tap,
  ɵɵHostDirectivesFeature,
  ɵɵInheritDefinitionFeature,
  ɵɵInputTransformsFeature,
  ɵɵNgOnChangesFeature,
  ɵɵProvidersFeature,
  ɵɵStandaloneFeature,
  ɵɵadvance,
  ɵɵattribute,
  ɵɵclassMap,
  ɵɵclassProp,
  ɵɵcontentQuery,
  ɵɵdefineComponent,
  ɵɵdefineDirective,
  ɵɵdefineInjectable,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdirectiveInject,
  ɵɵelement,
  ɵɵelementContainer,
  ɵɵelementContainerEnd,
  ɵɵelementContainerStart,
  ɵɵelementEnd,
  ɵɵelementStart,
  ɵɵgetCurrentView,
  ɵɵgetInheritedFactory,
  ɵɵhostProperty,
  ɵɵinject,
  ɵɵinjectAttribute,
  ɵɵlistener,
  ɵɵloadQuery,
  ɵɵnextContext,
  ɵɵpipe,
  ɵɵpipeBind1,
  ɵɵprojection,
  ɵɵprojectionDef,
  ɵɵproperty,
  ɵɵpropertyInterpolate,
  ɵɵpropertyInterpolate1,
  ɵɵpureFunction1,
  ɵɵqueryRefresh,
  ɵɵreference,
  ɵɵresetView,
  ɵɵresolveDocument,
  ɵɵresolveWindow,
  ɵɵrestoreView,
  ɵɵstyleProp,
  ɵɵsyntheticHostListener,
  ɵɵsyntheticHostProperty,
  ɵɵtemplate,
  ɵɵtemplateRefExtractor,
  ɵɵtext,
  ɵɵtextInterpolate,
  ɵɵtextInterpolate1,
  ɵɵtextInterpolate2,
  ɵɵtextInterpolate3,
  ɵɵtwoWayBindingSet,
  ɵɵtwoWayListener,
  ɵɵtwoWayProperty,
  ɵɵviewQuery
} from "./chunk-UH4WWT23.js";

// node_modules/@cds/core/polyfills/at.js
var t = false;
function e(t161) {
  if ((t161 = Math.trunc(t161) || 0) < 0 && (t161 += this.length), !(t161 < 0 || t161 >= this.length))
    return this[t161];
}
if (!t) {
  t = true;
  const r94 = Reflect.getPrototypeOf(Int8Array);
  for (const t161 of [Array, String, r94])
    Object.defineProperty(t161.prototype, "at", { value: e, writable: true, enumerable: false, configurable: true });
}

// node_modules/@cds/core/polyfills/aria-reflect.js
var e2 = false;
var t2 = false;
function o(e83, t161, o88) {
  Object.defineProperty(e83, o88, { configurable: true, enumerable: true, get: function() {
    return this.hasAttribute(t161) ? this.getAttribute(t161) : null;
  }, set: function(e84) {
    null !== e84 ? this.setAttribute(t161, e84) : this.removeAttribute(t161);
  } });
}
e2 || Element.prototype.hasOwnProperty("role") || (o(Element.prototype, "role", "role"), e2 = true), t2 || Element.prototype.hasOwnProperty("ariaLabel") || (t2 = true, ["ActiveDescendant", "Atomic", "AutoComplete", "Busy", "Checked", "ColCount", "ColIndex", "ColSpan", "Controls", "Current", "DescribedBy", "Details", "Disabled", "ErrorMessage", "Expanded", "FlowTo", "HasPopup", "Hidden", "Invalid", "KeyShortcuts", "Label", "LabelledBy", "Level", "Live", "Modal", "MultiLine", "MultiSelectable", "Orientation", "Owns", "Placeholder", "PosInSet", "Pressed", "ReadOnly", "Relevant", "Required", "RoleDescription", "RowCount", "RowIndex", "RowSpan", "Selected", "SetSize", "Sort", "ValueMax", "ValueMin", "ValueNow", "ValueText"].forEach((e83) => o(Element.prototype, "aria-" + e83.toLowerCase(), "aria" + e83)));

// node_modules/@lit/reactive-element/development/css-tag.js
var NODE_MODE = false;
var global = NODE_MODE ? globalThis : window;
var supportsAdoptingStyleSheets = global.ShadowRoot && (global.ShadyCSS === void 0 || global.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
var constructionToken = Symbol();
var cssTagCache = /* @__PURE__ */ new WeakMap();
var CSSResult = class {
  constructor(cssText, strings, safeToken) {
    this["_$cssResult$"] = true;
    if (safeToken !== constructionToken) {
      throw new Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    }
    this.cssText = cssText;
    this._strings = strings;
  }
  // This is a getter so that it's lazy. In practice, this means stylesheets
  // are not created until the first element instance is made.
  get styleSheet() {
    let styleSheet = this._styleSheet;
    const strings = this._strings;
    if (supportsAdoptingStyleSheets && styleSheet === void 0) {
      const cacheable = strings !== void 0 && strings.length === 1;
      if (cacheable) {
        styleSheet = cssTagCache.get(strings);
      }
      if (styleSheet === void 0) {
        (this._styleSheet = styleSheet = new CSSStyleSheet()).replaceSync(this.cssText);
        if (cacheable) {
          cssTagCache.set(strings, styleSheet);
        }
      }
    }
    return styleSheet;
  }
  toString() {
    return this.cssText;
  }
};
var textFromCSSResult = (value) => {
  if (value["_$cssResult$"] === true) {
    return value.cssText;
  } else if (typeof value === "number") {
    return value;
  } else {
    throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.`);
  }
};
var unsafeCSS = (value) => new CSSResult(typeof value === "string" ? value : String(value), void 0, constructionToken);
var css = (strings, ...values) => {
  const cssText = strings.length === 1 ? strings[0] : values.reduce((acc, v13, idx) => acc + textFromCSSResult(v13) + strings[idx + 1], strings[0]);
  return new CSSResult(cssText, strings, constructionToken);
};
var adoptStyles = (renderRoot, styles) => {
  if (supportsAdoptingStyleSheets) {
    renderRoot.adoptedStyleSheets = styles.map((s27) => s27 instanceof CSSStyleSheet ? s27 : s27.styleSheet);
  } else {
    styles.forEach((s27) => {
      const style2 = document.createElement("style");
      const nonce = global["litNonce"];
      if (nonce !== void 0) {
        style2.setAttribute("nonce", nonce);
      }
      style2.textContent = s27.cssText;
      renderRoot.appendChild(style2);
    });
  }
};
var cssResultFromStyleSheet = (sheet) => {
  let cssText = "";
  for (const rule of sheet.cssRules) {
    cssText += rule.cssText;
  }
  return unsafeCSS(cssText);
};
var getCompatibleStyle = supportsAdoptingStyleSheets || NODE_MODE && global.CSSStyleSheet === void 0 ? (s27) => s27 : (s27) => s27 instanceof CSSStyleSheet ? cssResultFromStyleSheet(s27) : s27;

// node_modules/@lit/reactive-element/development/reactive-element.js
var _a;
var _b;
var _c;
var _d;
var _e;
var NODE_MODE2 = false;
var global2 = NODE_MODE2 ? globalThis : window;
if (NODE_MODE2) {
  (_a = global2.customElements) !== null && _a !== void 0 ? _a : global2.customElements = customElements;
}
var DEV_MODE = true;
var requestUpdateThenable;
var issueWarning;
var trustedTypes = global2.trustedTypes;
var emptyStringForBooleanAttribute = trustedTypes ? trustedTypes.emptyScript : "";
var polyfillSupport = DEV_MODE ? global2.reactiveElementPolyfillSupportDevMode : global2.reactiveElementPolyfillSupport;
if (DEV_MODE) {
  const issuedWarnings = (_b = global2.litIssuedWarnings) !== null && _b !== void 0 ? _b : global2.litIssuedWarnings = /* @__PURE__ */ new Set();
  issueWarning = (code, warning) => {
    warning += ` See https://lit.dev/msg/${code} for more information.`;
    if (!issuedWarnings.has(warning)) {
      console.warn(warning);
      issuedWarnings.add(warning);
    }
  };
  issueWarning("dev-mode", `Lit is in dev mode. Not recommended for production!`);
  if (((_c = global2.ShadyDOM) === null || _c === void 0 ? void 0 : _c.inUse) && polyfillSupport === void 0) {
    issueWarning("polyfill-support-missing", `Shadow DOM is being polyfilled via \`ShadyDOM\` but the \`polyfill-support\` module has not been loaded.`);
  }
  requestUpdateThenable = (name) => ({
    then: (onfulfilled, _onrejected) => {
      issueWarning("request-update-promise", `The \`requestUpdate\` method should no longer return a Promise but does so on \`${name}\`. Use \`updateComplete\` instead.`);
      if (onfulfilled !== void 0) {
        onfulfilled(false);
      }
    }
  });
}
var debugLogEvent = DEV_MODE ? (event) => {
  const shouldEmit = global2.emitLitDebugLogEvents;
  if (!shouldEmit) {
    return;
  }
  global2.dispatchEvent(new CustomEvent("lit-debug", {
    detail: event
  }));
} : void 0;
var JSCompiler_renameProperty = (prop, _obj) => prop;
var defaultConverter = {
  toAttribute(value, type3) {
    switch (type3) {
      case Boolean:
        value = value ? emptyStringForBooleanAttribute : null;
        break;
      case Object:
      case Array:
        value = value == null ? value : JSON.stringify(value);
        break;
    }
    return value;
  },
  fromAttribute(value, type3) {
    let fromValue = value;
    switch (type3) {
      case Boolean:
        fromValue = value !== null;
        break;
      case Number:
        fromValue = value === null ? null : Number(value);
        break;
      case Object:
      case Array:
        try {
          fromValue = JSON.parse(value);
        } catch (e83) {
          fromValue = null;
        }
        break;
    }
    return fromValue;
  }
};
var notEqual = (value, old) => {
  return old !== value && (old === old || value === value);
};
var defaultPropertyDeclaration = {
  attribute: true,
  type: String,
  converter: defaultConverter,
  reflect: false,
  hasChanged: notEqual
};
var finalized = "finalized";
var ReactiveElement = class extends HTMLElement {
  constructor() {
    super();
    this.__instanceProperties = /* @__PURE__ */ new Map();
    this.isUpdatePending = false;
    this.hasUpdated = false;
    this.__reflectingProperty = null;
    this.__initialize();
  }
  /**
   * Adds an initializer function to the class that is called during instance
   * construction.
   *
   * This is useful for code that runs against a `ReactiveElement`
   * subclass, such as a decorator, that needs to do work for each
   * instance, such as setting up a `ReactiveController`.
   *
   * ```ts
   * const myDecorator = (target: typeof ReactiveElement, key: string) => {
   *   target.addInitializer((instance: ReactiveElement) => {
   *     // This is run during construction of the element
   *     new MyController(instance);
   *   });
   * }
   * ```
   *
   * Decorating a field will then cause each instance to run an initializer
   * that adds a controller:
   *
   * ```ts
   * class MyElement extends LitElement {
   *   @myDecorator foo;
   * }
   * ```
   *
   * Initializers are stored per-constructor. Adding an initializer to a
   * subclass does not add it to a superclass. Since initializers are run in
   * constructors, initializers will run in order of the class hierarchy,
   * starting with superclasses and progressing to the instance's class.
   *
   * @nocollapse
   */
  static addInitializer(initializer) {
    var _a4;
    this.finalize();
    ((_a4 = this._initializers) !== null && _a4 !== void 0 ? _a4 : this._initializers = []).push(initializer);
  }
  /**
   * Returns a list of attributes corresponding to the registered properties.
   * @nocollapse
   * @category attributes
   */
  static get observedAttributes() {
    this.finalize();
    const attributes = [];
    this.elementProperties.forEach((v13, p14) => {
      const attr = this.__attributeNameForProperty(p14, v13);
      if (attr !== void 0) {
        this.__attributeToPropertyMap.set(attr, p14);
        attributes.push(attr);
      }
    });
    return attributes;
  }
  /**
   * Creates a property accessor on the element prototype if one does not exist
   * and stores a {@linkcode PropertyDeclaration} for the property with the
   * given options. The property setter calls the property's `hasChanged`
   * property option or uses a strict identity check to determine whether or not
   * to request an update.
   *
   * This method may be overridden to customize properties; however,
   * when doing so, it's important to call `super.createProperty` to ensure
   * the property is setup correctly. This method calls
   * `getPropertyDescriptor` internally to get a descriptor to install.
   * To customize what properties do when they are get or set, override
   * `getPropertyDescriptor`. To customize the options for a property,
   * implement `createProperty` like this:
   *
   * ```ts
   * static createProperty(name, options) {
   *   options = Object.assign(options, {myOption: true});
   *   super.createProperty(name, options);
   * }
   * ```
   *
   * @nocollapse
   * @category properties
   */
  static createProperty(name, options = defaultPropertyDeclaration) {
    var _a4;
    if (options.state) {
      options.attribute = false;
    }
    this.finalize();
    this.elementProperties.set(name, options);
    if (!options.noAccessor && !this.prototype.hasOwnProperty(name)) {
      const key = typeof name === "symbol" ? Symbol() : `__${name}`;
      const descriptor = this.getPropertyDescriptor(name, key, options);
      if (descriptor !== void 0) {
        Object.defineProperty(this.prototype, name, descriptor);
        if (DEV_MODE) {
          if (!this.hasOwnProperty("__reactivePropertyKeys")) {
            this.__reactivePropertyKeys = new Set((_a4 = this.__reactivePropertyKeys) !== null && _a4 !== void 0 ? _a4 : []);
          }
          this.__reactivePropertyKeys.add(name);
        }
      }
    }
  }
  /**
   * Returns a property descriptor to be defined on the given named property.
   * If no descriptor is returned, the property will not become an accessor.
   * For example,
   *
   * ```ts
   * class MyElement extends LitElement {
   *   static getPropertyDescriptor(name, key, options) {
   *     const defaultDescriptor =
   *         super.getPropertyDescriptor(name, key, options);
   *     const setter = defaultDescriptor.set;
   *     return {
   *       get: defaultDescriptor.get,
   *       set(value) {
   *         setter.call(this, value);
   *         // custom action.
   *       },
   *       configurable: true,
   *       enumerable: true
   *     }
   *   }
   * }
   * ```
   *
   * @nocollapse
   * @category properties
   */
  static getPropertyDescriptor(name, key, options) {
    return {
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      get() {
        return this[key];
      },
      set(value) {
        const oldValue = this[name];
        this[key] = value;
        this.requestUpdate(name, oldValue, options);
      },
      configurable: true,
      enumerable: true
    };
  }
  /**
   * Returns the property options associated with the given property.
   * These options are defined with a `PropertyDeclaration` via the `properties`
   * object or the `@property` decorator and are registered in
   * `createProperty(...)`.
   *
   * Note, this method should be considered "final" and not overridden. To
   * customize the options for a given property, override
   * {@linkcode createProperty}.
   *
   * @nocollapse
   * @final
   * @category properties
   */
  static getPropertyOptions(name) {
    return this.elementProperties.get(name) || defaultPropertyDeclaration;
  }
  /**
   * Creates property accessors for registered properties, sets up element
   * styling, and ensures any superclasses are also finalized. Returns true if
   * the element was finalized.
   * @nocollapse
   */
  static finalize() {
    if (this.hasOwnProperty(finalized)) {
      return false;
    }
    this[finalized] = true;
    const superCtor = Object.getPrototypeOf(this);
    superCtor.finalize();
    if (superCtor._initializers !== void 0) {
      this._initializers = [...superCtor._initializers];
    }
    this.elementProperties = new Map(superCtor.elementProperties);
    this.__attributeToPropertyMap = /* @__PURE__ */ new Map();
    if (this.hasOwnProperty(JSCompiler_renameProperty("properties", this))) {
      const props = this.properties;
      const propKeys = [
        ...Object.getOwnPropertyNames(props),
        ...Object.getOwnPropertySymbols(props)
      ];
      for (const p14 of propKeys) {
        this.createProperty(p14, props[p14]);
      }
    }
    this.elementStyles = this.finalizeStyles(this.styles);
    if (DEV_MODE) {
      const warnRemovedOrRenamed = (name, renamed = false) => {
        if (this.prototype.hasOwnProperty(name)) {
          issueWarning(renamed ? "renamed-api" : "removed-api", `\`${name}\` is implemented on class ${this.name}. It has been ${renamed ? "renamed" : "removed"} in this version of LitElement.`);
        }
      };
      warnRemovedOrRenamed("initialize");
      warnRemovedOrRenamed("requestUpdateInternal");
      warnRemovedOrRenamed("_getUpdateComplete", true);
    }
    return true;
  }
  /**
   * Takes the styles the user supplied via the `static styles` property and
   * returns the array of styles to apply to the element.
   * Override this method to integrate into a style management system.
   *
   * Styles are deduplicated preserving the _last_ instance in the list. This
   * is a performance optimization to avoid duplicated styles that can occur
   * especially when composing via subclassing. The last item is kept to try
   * to preserve the cascade order with the assumption that it's most important
   * that last added styles override previous styles.
   *
   * @nocollapse
   * @category styles
   */
  static finalizeStyles(styles) {
    const elementStyles = [];
    if (Array.isArray(styles)) {
      const set = new Set(styles.flat(Infinity).reverse());
      for (const s27 of set) {
        elementStyles.unshift(getCompatibleStyle(s27));
      }
    } else if (styles !== void 0) {
      elementStyles.push(getCompatibleStyle(styles));
    }
    return elementStyles;
  }
  /**
   * Returns the property name for the given attribute `name`.
   * @nocollapse
   */
  static __attributeNameForProperty(name, options) {
    const attribute = options.attribute;
    return attribute === false ? void 0 : typeof attribute === "string" ? attribute : typeof name === "string" ? name.toLowerCase() : void 0;
  }
  /**
   * Internal only override point for customizing work done when elements
   * are constructed.
   */
  __initialize() {
    var _a4;
    this.__updatePromise = new Promise((res) => this.enableUpdating = res);
    this._$changedProperties = /* @__PURE__ */ new Map();
    this.__saveInstanceProperties();
    this.requestUpdate();
    (_a4 = this.constructor._initializers) === null || _a4 === void 0 ? void 0 : _a4.forEach((i35) => i35(this));
  }
  /**
   * Registers a `ReactiveController` to participate in the element's reactive
   * update cycle. The element automatically calls into any registered
   * controllers during its lifecycle callbacks.
   *
   * If the element is connected when `addController()` is called, the
   * controller's `hostConnected()` callback will be immediately called.
   * @category controllers
   */
  addController(controller) {
    var _a4, _b4;
    ((_a4 = this.__controllers) !== null && _a4 !== void 0 ? _a4 : this.__controllers = []).push(controller);
    if (this.renderRoot !== void 0 && this.isConnected) {
      (_b4 = controller.hostConnected) === null || _b4 === void 0 ? void 0 : _b4.call(controller);
    }
  }
  /**
   * Removes a `ReactiveController` from the element.
   * @category controllers
   */
  removeController(controller) {
    var _a4;
    (_a4 = this.__controllers) === null || _a4 === void 0 ? void 0 : _a4.splice(this.__controllers.indexOf(controller) >>> 0, 1);
  }
  /**
   * Fixes any properties set on the instance before upgrade time.
   * Otherwise these would shadow the accessor and break these properties.
   * The properties are stored in a Map which is played back after the
   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
   * (<=41), properties created for native platform properties like (`id` or
   * `name`) may not have default values set in the element constructor. On
   * these browsers native properties appear on instances and therefore their
   * default value will overwrite any element default (e.g. if the element sets
   * this.id = 'id' in the constructor, the 'id' will become '' since this is
   * the native platform default).
   */
  __saveInstanceProperties() {
    this.constructor.elementProperties.forEach((_v, p14) => {
      if (this.hasOwnProperty(p14)) {
        this.__instanceProperties.set(p14, this[p14]);
        delete this[p14];
      }
    });
  }
  /**
   * Returns the node into which the element should render and by default
   * creates and returns an open shadowRoot. Implement to customize where the
   * element's DOM is rendered. For example, to render into the element's
   * childNodes, return `this`.
   *
   * @return Returns a node into which to render.
   * @category rendering
   */
  createRenderRoot() {
    var _a4;
    const renderRoot = (_a4 = this.shadowRoot) !== null && _a4 !== void 0 ? _a4 : this.attachShadow(this.constructor.shadowRootOptions);
    adoptStyles(renderRoot, this.constructor.elementStyles);
    return renderRoot;
  }
  /**
   * On first connection, creates the element's renderRoot, sets up
   * element styling, and enables updating.
   * @category lifecycle
   */
  connectedCallback() {
    var _a4;
    if (this.renderRoot === void 0) {
      this.renderRoot = this.createRenderRoot();
    }
    this.enableUpdating(true);
    (_a4 = this.__controllers) === null || _a4 === void 0 ? void 0 : _a4.forEach((c45) => {
      var _a5;
      return (_a5 = c45.hostConnected) === null || _a5 === void 0 ? void 0 : _a5.call(c45);
    });
  }
  /**
   * Note, this method should be considered final and not overridden. It is
   * overridden on the element instance with a function that triggers the first
   * update.
   * @category updates
   */
  enableUpdating(_requestedUpdate) {
  }
  /**
   * Allows for `super.disconnectedCallback()` in extensions while
   * reserving the possibility of making non-breaking feature additions
   * when disconnecting at some point in the future.
   * @category lifecycle
   */
  disconnectedCallback() {
    var _a4;
    (_a4 = this.__controllers) === null || _a4 === void 0 ? void 0 : _a4.forEach((c45) => {
      var _a5;
      return (_a5 = c45.hostDisconnected) === null || _a5 === void 0 ? void 0 : _a5.call(c45);
    });
  }
  /**
   * Synchronizes property values when attributes change.
   *
   * Specifically, when an attribute is set, the corresponding property is set.
   * You should rarely need to implement this callback. If this method is
   * overridden, `super.attributeChangedCallback(name, _old, value)` must be
   * called.
   *
   * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)
   * on MDN for more information about the `attributeChangedCallback`.
   * @category attributes
   */
  attributeChangedCallback(name, _old, value) {
    this._$attributeToProperty(name, value);
  }
  __propertyToAttribute(name, value, options = defaultPropertyDeclaration) {
    var _a4;
    const attr = this.constructor.__attributeNameForProperty(name, options);
    if (attr !== void 0 && options.reflect === true) {
      const converter = ((_a4 = options.converter) === null || _a4 === void 0 ? void 0 : _a4.toAttribute) !== void 0 ? options.converter : defaultConverter;
      const attrValue = converter.toAttribute(value, options.type);
      if (DEV_MODE && this.constructor.enabledWarnings.indexOf("migration") >= 0 && attrValue === void 0) {
        issueWarning("undefined-attribute-value", `The attribute value for the ${name} property is undefined on element ${this.localName}. The attribute will be removed, but in the previous version of \`ReactiveElement\`, the attribute would not have changed.`);
      }
      this.__reflectingProperty = name;
      if (attrValue == null) {
        this.removeAttribute(attr);
      } else {
        this.setAttribute(attr, attrValue);
      }
      this.__reflectingProperty = null;
    }
  }
  /** @internal */
  _$attributeToProperty(name, value) {
    var _a4;
    const ctor = this.constructor;
    const propName = ctor.__attributeToPropertyMap.get(name);
    if (propName !== void 0 && this.__reflectingProperty !== propName) {
      const options = ctor.getPropertyOptions(propName);
      const converter = typeof options.converter === "function" ? { fromAttribute: options.converter } : ((_a4 = options.converter) === null || _a4 === void 0 ? void 0 : _a4.fromAttribute) !== void 0 ? options.converter : defaultConverter;
      this.__reflectingProperty = propName;
      this[propName] = converter.fromAttribute(
        value,
        options.type
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
      );
      this.__reflectingProperty = null;
    }
  }
  /**
   * Requests an update which is processed asynchronously. This should be called
   * when an element should update based on some state not triggered by setting
   * a reactive property. In this case, pass no arguments. It should also be
   * called when manually implementing a property setter. In this case, pass the
   * property `name` and `oldValue` to ensure that any configured property
   * options are honored.
   *
   * @param name name of requesting property
   * @param oldValue old value of requesting property
   * @param options property options to use instead of the previously
   *     configured options
   * @category updates
   */
  requestUpdate(name, oldValue, options) {
    let shouldRequestUpdate = true;
    if (name !== void 0) {
      options = options || this.constructor.getPropertyOptions(name);
      const hasChanged = options.hasChanged || notEqual;
      if (hasChanged(this[name], oldValue)) {
        if (!this._$changedProperties.has(name)) {
          this._$changedProperties.set(name, oldValue);
        }
        if (options.reflect === true && this.__reflectingProperty !== name) {
          if (this.__reflectingProperties === void 0) {
            this.__reflectingProperties = /* @__PURE__ */ new Map();
          }
          this.__reflectingProperties.set(name, options);
        }
      } else {
        shouldRequestUpdate = false;
      }
    }
    if (!this.isUpdatePending && shouldRequestUpdate) {
      this.__updatePromise = this.__enqueueUpdate();
    }
    return DEV_MODE ? requestUpdateThenable(this.localName) : void 0;
  }
  /**
   * Sets up the element to asynchronously update.
   */
  __enqueueUpdate() {
    return __async(this, null, function* () {
      this.isUpdatePending = true;
      try {
        yield this.__updatePromise;
      } catch (e83) {
        Promise.reject(e83);
      }
      const result = this.scheduleUpdate();
      if (result != null) {
        yield result;
      }
      return !this.isUpdatePending;
    });
  }
  /**
   * Schedules an element update. You can override this method to change the
   * timing of updates by returning a Promise. The update will await the
   * returned Promise, and you should resolve the Promise to allow the update
   * to proceed. If this method is overridden, `super.scheduleUpdate()`
   * must be called.
   *
   * For instance, to schedule updates to occur just before the next frame:
   *
   * ```ts
   * override protected async scheduleUpdate(): Promise<unknown> {
   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
   *   super.scheduleUpdate();
   * }
   * ```
   * @category updates
   */
  scheduleUpdate() {
    return this.performUpdate();
  }
  /**
   * Performs an element update. Note, if an exception is thrown during the
   * update, `firstUpdated` and `updated` will not be called.
   *
   * Call `performUpdate()` to immediately process a pending update. This should
   * generally not be needed, but it can be done in rare cases when you need to
   * update synchronously.
   *
   * Note: To ensure `performUpdate()` synchronously completes a pending update,
   * it should not be overridden. In LitElement 2.x it was suggested to override
   * `performUpdate()` to also customizing update scheduling. Instead, you should now
   * override `scheduleUpdate()`. For backwards compatibility with LitElement 2.x,
   * scheduling updates via `performUpdate()` continues to work, but will make
   * also calling `performUpdate()` to synchronously process updates difficult.
   *
   * @category updates
   */
  performUpdate() {
    var _a4, _b4;
    if (!this.isUpdatePending) {
      return;
    }
    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({ kind: "update" });
    if (!this.hasUpdated) {
      if (DEV_MODE) {
        const shadowedProperties = [];
        (_a4 = this.constructor.__reactivePropertyKeys) === null || _a4 === void 0 ? void 0 : _a4.forEach((p14) => {
          var _a5;
          if (this.hasOwnProperty(p14) && !((_a5 = this.__instanceProperties) === null || _a5 === void 0 ? void 0 : _a5.has(p14))) {
            shadowedProperties.push(p14);
          }
        });
        if (shadowedProperties.length) {
          throw new Error(`The following properties on element ${this.localName} will not trigger updates as expected because they are set using class fields: ${shadowedProperties.join(", ")}. Native class fields and some compiled output will overwrite accessors used for detecting changes. See https://lit.dev/msg/class-field-shadowing for more information.`);
        }
      }
    }
    if (this.__instanceProperties) {
      this.__instanceProperties.forEach((v13, p14) => this[p14] = v13);
      this.__instanceProperties = void 0;
    }
    let shouldUpdate = false;
    const changedProperties = this._$changedProperties;
    try {
      shouldUpdate = this.shouldUpdate(changedProperties);
      if (shouldUpdate) {
        this.willUpdate(changedProperties);
        (_b4 = this.__controllers) === null || _b4 === void 0 ? void 0 : _b4.forEach((c45) => {
          var _a5;
          return (_a5 = c45.hostUpdate) === null || _a5 === void 0 ? void 0 : _a5.call(c45);
        });
        this.update(changedProperties);
      } else {
        this.__markUpdated();
      }
    } catch (e83) {
      shouldUpdate = false;
      this.__markUpdated();
      throw e83;
    }
    if (shouldUpdate) {
      this._$didUpdate(changedProperties);
    }
  }
  /**
   * Invoked before `update()` to compute values needed during the update.
   *
   * Implement `willUpdate` to compute property values that depend on other
   * properties and are used in the rest of the update process.
   *
   * ```ts
   * willUpdate(changedProperties) {
   *   // only need to check changed properties for an expensive computation.
   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {
   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);
   *   }
   * }
   *
   * render() {
   *   return html`SHA: ${this.sha}`;
   * }
   * ```
   *
   * @category updates
   */
  willUpdate(_changedProperties) {
  }
  // Note, this is an override point for polyfill-support.
  // @internal
  _$didUpdate(changedProperties) {
    var _a4;
    (_a4 = this.__controllers) === null || _a4 === void 0 ? void 0 : _a4.forEach((c45) => {
      var _a5;
      return (_a5 = c45.hostUpdated) === null || _a5 === void 0 ? void 0 : _a5.call(c45);
    });
    if (!this.hasUpdated) {
      this.hasUpdated = true;
      this.firstUpdated(changedProperties);
    }
    this.updated(changedProperties);
    if (DEV_MODE && this.isUpdatePending && this.constructor.enabledWarnings.indexOf("change-in-update") >= 0) {
      issueWarning("change-in-update", `Element ${this.localName} scheduled an update (generally because a property was set) after an update completed, causing a new update to be scheduled. This is inefficient and should be avoided unless the next update can only be scheduled as a side effect of the previous update.`);
    }
  }
  __markUpdated() {
    this._$changedProperties = /* @__PURE__ */ new Map();
    this.isUpdatePending = false;
  }
  /**
   * Returns a Promise that resolves when the element has completed updating.
   * The Promise value is a boolean that is `true` if the element completed the
   * update without triggering another update. The Promise result is `false` if
   * a property was set inside `updated()`. If the Promise is rejected, an
   * exception was thrown during the update.
   *
   * To await additional asynchronous work, override the `getUpdateComplete`
   * method. For example, it is sometimes useful to await a rendered element
   * before fulfilling this Promise. To do this, first await
   * `super.getUpdateComplete()`, then any subsequent state.
   *
   * @return A promise of a boolean that resolves to true if the update completed
   *     without triggering another update.
   * @category updates
   */
  get updateComplete() {
    return this.getUpdateComplete();
  }
  /**
   * Override point for the `updateComplete` promise.
   *
   * It is not safe to override the `updateComplete` getter directly due to a
   * limitation in TypeScript which means it is not possible to call a
   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target
   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).
   * This method should be overridden instead. For example:
   *
   * ```ts
   * class MyElement extends LitElement {
   *   override async getUpdateComplete() {
   *     const result = await super.getUpdateComplete();
   *     await this._myChild.updateComplete;
   *     return result;
   *   }
   * }
   * ```
   *
   * @return A promise of a boolean that resolves to true if the update completed
   *     without triggering another update.
   * @category updates
   */
  getUpdateComplete() {
    return this.__updatePromise;
  }
  /**
   * Controls whether or not `update()` should be called when the element requests
   * an update. By default, this method always returns `true`, but this can be
   * customized to control when to update.
   *
   * @param _changedProperties Map of changed properties with old values
   * @category updates
   */
  shouldUpdate(_changedProperties) {
    return true;
  }
  /**
   * Updates the element. This method reflects property values to attributes.
   * It can be overridden to render and keep updated element DOM.
   * Setting properties inside this method will *not* trigger
   * another update.
   *
   * @param _changedProperties Map of changed properties with old values
   * @category updates
   */
  update(_changedProperties) {
    if (this.__reflectingProperties !== void 0) {
      this.__reflectingProperties.forEach((v13, k4) => this.__propertyToAttribute(k4, this[k4], v13));
      this.__reflectingProperties = void 0;
    }
    this.__markUpdated();
  }
  /**
   * Invoked whenever the element is updated. Implement to perform
   * post-updating tasks via DOM APIs, for example, focusing an element.
   *
   * Setting properties inside this method will trigger the element to update
   * again after this update cycle completes.
   *
   * @param _changedProperties Map of changed properties with old values
   * @category updates
   */
  updated(_changedProperties) {
  }
  /**
   * Invoked when the element is first updated. Implement to perform one time
   * work on the element after update.
   *
   * ```ts
   * firstUpdated() {
   *   this.renderRoot.getElementById('my-text-area').focus();
   * }
   * ```
   *
   * Setting properties inside this method will trigger the element to update
   * again after this update cycle completes.
   *
   * @param _changedProperties Map of changed properties with old values
   * @category updates
   */
  firstUpdated(_changedProperties) {
  }
};
_e = finalized;
ReactiveElement[_e] = true;
ReactiveElement.elementProperties = /* @__PURE__ */ new Map();
ReactiveElement.elementStyles = [];
ReactiveElement.shadowRootOptions = { mode: "open" };
polyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport({ ReactiveElement });
if (DEV_MODE) {
  ReactiveElement.enabledWarnings = ["change-in-update"];
  const ensureOwnWarnings = function(ctor) {
    if (!ctor.hasOwnProperty(JSCompiler_renameProperty("enabledWarnings", ctor))) {
      ctor.enabledWarnings = ctor.enabledWarnings.slice();
    }
  };
  ReactiveElement.enableWarning = function(warning) {
    ensureOwnWarnings(this);
    if (this.enabledWarnings.indexOf(warning) < 0) {
      this.enabledWarnings.push(warning);
    }
  };
  ReactiveElement.disableWarning = function(warning) {
    ensureOwnWarnings(this);
    const i35 = this.enabledWarnings.indexOf(warning);
    if (i35 >= 0) {
      this.enabledWarnings.splice(i35, 1);
    }
  };
}
((_d = global2.reactiveElementVersions) !== null && _d !== void 0 ? _d : global2.reactiveElementVersions = []).push("1.6.3");
if (DEV_MODE && global2.reactiveElementVersions.length > 1) {
  issueWarning("multiple-versions", `Multiple versions of Lit loaded. Loading multiple versions is not recommended.`);
}

// node_modules/lit-html/development/lit-html.js
var _a2;
var _b2;
var _c2;
var _d2;
var DEV_MODE2 = true;
var ENABLE_EXTRA_SECURITY_HOOKS = true;
var ENABLE_SHADYDOM_NOPATCH = true;
var NODE_MODE3 = false;
var global3 = NODE_MODE3 ? globalThis : window;
var debugLogEvent2 = DEV_MODE2 ? (event) => {
  const shouldEmit = global3.emitLitDebugLogEvents;
  if (!shouldEmit) {
    return;
  }
  global3.dispatchEvent(new CustomEvent("lit-debug", {
    detail: event
  }));
} : void 0;
var debugLogRenderId = 0;
var issueWarning2;
if (DEV_MODE2) {
  (_a2 = global3.litIssuedWarnings) !== null && _a2 !== void 0 ? _a2 : global3.litIssuedWarnings = /* @__PURE__ */ new Set();
  issueWarning2 = (code, warning) => {
    warning += code ? ` See https://lit.dev/msg/${code} for more information.` : "";
    if (!global3.litIssuedWarnings.has(warning)) {
      console.warn(warning);
      global3.litIssuedWarnings.add(warning);
    }
  };
  issueWarning2("dev-mode", `Lit is in dev mode. Not recommended for production!`);
}
var wrap = ENABLE_SHADYDOM_NOPATCH && ((_b2 = global3.ShadyDOM) === null || _b2 === void 0 ? void 0 : _b2.inUse) && ((_c2 = global3.ShadyDOM) === null || _c2 === void 0 ? void 0 : _c2.noPatch) === true ? global3.ShadyDOM.wrap : (node) => node;
var trustedTypes2 = global3.trustedTypes;
var policy = trustedTypes2 ? trustedTypes2.createPolicy("lit-html", {
  createHTML: (s27) => s27
}) : void 0;
var identityFunction = (value) => value;
var noopSanitizer = (_node, _name, _type) => identityFunction;
var setSanitizer = (newSanitizer) => {
  if (!ENABLE_EXTRA_SECURITY_HOOKS) {
    return;
  }
  if (sanitizerFactoryInternal !== noopSanitizer) {
    throw new Error(`Attempted to overwrite existing lit-html security policy. setSanitizeDOMValueFactory should be called at most once.`);
  }
  sanitizerFactoryInternal = newSanitizer;
};
var _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {
  sanitizerFactoryInternal = noopSanitizer;
};
var createSanitizer = (node, name, type3) => {
  return sanitizerFactoryInternal(node, name, type3);
};
var boundAttributeSuffix = "$lit$";
var marker = `lit$${String(Math.random()).slice(9)}$`;
var markerMatch = "?" + marker;
var nodeMarker = `<${markerMatch}>`;
var d = NODE_MODE3 && global3.document === void 0 ? {
  createTreeWalker() {
    return {};
  }
} : document;
var createMarker = () => d.createComment("");
var isPrimitive = (value) => value === null || typeof value != "object" && typeof value != "function";
var isArray = Array.isArray;
var isIterable = (value) => isArray(value) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
typeof (value === null || value === void 0 ? void 0 : value[Symbol.iterator]) === "function";
var SPACE_CHAR = `[ 	
\f\r]`;
var ATTR_VALUE_CHAR = `[^ 	
\f\r"'\`<>=]`;
var NAME_CHAR = `[^\\s"'>=/]`;
var textEndRegex = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
var COMMENT_START = 1;
var TAG_NAME = 2;
var DYNAMIC_TAG_NAME = 3;
var commentEndRegex = /-->/g;
var comment2EndRegex = />/g;
var tagEndRegex = new RegExp(`>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|("|')|))|$)`, "g");
var ENTIRE_MATCH = 0;
var ATTRIBUTE_NAME = 1;
var SPACES_AND_EQUALS = 2;
var QUOTE_CHAR = 3;
var singleQuoteAttrEndRegex = /'/g;
var doubleQuoteAttrEndRegex = /"/g;
var rawTextElement = /^(?:script|style|textarea|title)$/i;
var HTML_RESULT = 1;
var SVG_RESULT = 2;
var ATTRIBUTE_PART = 1;
var CHILD_PART = 2;
var PROPERTY_PART = 3;
var BOOLEAN_ATTRIBUTE_PART = 4;
var EVENT_PART = 5;
var ELEMENT_PART = 6;
var COMMENT_PART = 7;
var tag = (type3) => (strings, ...values) => {
  if (DEV_MODE2 && strings.some((s27) => s27 === void 0)) {
    console.warn("Some template strings are undefined.\nThis is probably caused by illegal octal escape sequences.");
  }
  return {
    // This property needs to remain unminified.
    ["_$litType$"]: type3,
    strings,
    values
  };
};
var html = tag(HTML_RESULT);
var svg = tag(SVG_RESULT);
var noChange = Symbol.for("lit-noChange");
var nothing = Symbol.for("lit-nothing");
var templateCache = /* @__PURE__ */ new WeakMap();
var walker = d.createTreeWalker(d, 129, null, false);
var sanitizerFactoryInternal = noopSanitizer;
function trustFromTemplateString(tsa, stringFromTSA) {
  if (!Array.isArray(tsa) || !tsa.hasOwnProperty("raw")) {
    let message = "invalid template strings array";
    if (DEV_MODE2) {
      message = `
          Internal Error: expected template strings to be an array
          with a 'raw' field. Faking a template strings array by
          calling html or svg like an ordinary function is effectively
          the same as calling unsafeHtml and can lead to major security
          issues, e.g. opening your code up to XSS attacks.
          If you're using the html or svg tagged template functions normally
          and still seeing this error, please file a bug at
          https://github.com/lit/lit/issues/new?template=bug_report.md
          and include information about your build tooling, if any.
        `.trim().replace(/\n */g, "\n");
    }
    throw new Error(message);
  }
  return policy !== void 0 ? policy.createHTML(stringFromTSA) : stringFromTSA;
}
var getTemplateHtml = (strings, type3) => {
  const l96 = strings.length - 1;
  const attrNames = [];
  let html2 = type3 === SVG_RESULT ? "<svg>" : "";
  let rawTextEndRegex;
  let regex = textEndRegex;
  for (let i35 = 0; i35 < l96; i35++) {
    const s27 = strings[i35];
    let attrNameEndIndex = -1;
    let attrName;
    let lastIndex = 0;
    let match;
    while (lastIndex < s27.length) {
      regex.lastIndex = lastIndex;
      match = regex.exec(s27);
      if (match === null) {
        break;
      }
      lastIndex = regex.lastIndex;
      if (regex === textEndRegex) {
        if (match[COMMENT_START] === "!--") {
          regex = commentEndRegex;
        } else if (match[COMMENT_START] !== void 0) {
          regex = comment2EndRegex;
        } else if (match[TAG_NAME] !== void 0) {
          if (rawTextElement.test(match[TAG_NAME])) {
            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, "g");
          }
          regex = tagEndRegex;
        } else if (match[DYNAMIC_TAG_NAME] !== void 0) {
          if (DEV_MODE2) {
            throw new Error("Bindings in tag names are not supported. Please use static templates instead. See https://lit.dev/docs/templates/expressions/#static-expressions");
          }
          regex = tagEndRegex;
        }
      } else if (regex === tagEndRegex) {
        if (match[ENTIRE_MATCH] === ">") {
          regex = rawTextEndRegex !== null && rawTextEndRegex !== void 0 ? rawTextEndRegex : textEndRegex;
          attrNameEndIndex = -1;
        } else if (match[ATTRIBUTE_NAME] === void 0) {
          attrNameEndIndex = -2;
        } else {
          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;
          attrName = match[ATTRIBUTE_NAME];
          regex = match[QUOTE_CHAR] === void 0 ? tagEndRegex : match[QUOTE_CHAR] === '"' ? doubleQuoteAttrEndRegex : singleQuoteAttrEndRegex;
        }
      } else if (regex === doubleQuoteAttrEndRegex || regex === singleQuoteAttrEndRegex) {
        regex = tagEndRegex;
      } else if (regex === commentEndRegex || regex === comment2EndRegex) {
        regex = textEndRegex;
      } else {
        regex = tagEndRegex;
        rawTextEndRegex = void 0;
      }
    }
    if (DEV_MODE2) {
      console.assert(attrNameEndIndex === -1 || regex === tagEndRegex || regex === singleQuoteAttrEndRegex || regex === doubleQuoteAttrEndRegex, "unexpected parse state B");
    }
    const end = regex === tagEndRegex && strings[i35 + 1].startsWith("/>") ? " " : "";
    html2 += regex === textEndRegex ? s27 + nodeMarker : attrNameEndIndex >= 0 ? (attrNames.push(attrName), s27.slice(0, attrNameEndIndex) + boundAttributeSuffix + s27.slice(attrNameEndIndex)) + marker + end : s27 + marker + (attrNameEndIndex === -2 ? (attrNames.push(void 0), i35) : end);
  }
  const htmlResult = html2 + (strings[l96] || "<?>") + (type3 === SVG_RESULT ? "</svg>" : "");
  return [trustFromTemplateString(strings, htmlResult), attrNames];
};
var Template = class _Template {
  constructor({ strings, ["_$litType$"]: type3 }, options) {
    this.parts = [];
    let node;
    let nodeIndex = 0;
    let attrNameIndex = 0;
    const partCount = strings.length - 1;
    const parts = this.parts;
    const [html2, attrNames] = getTemplateHtml(strings, type3);
    this.el = _Template.createElement(html2, options);
    walker.currentNode = this.el.content;
    if (type3 === SVG_RESULT) {
      const content = this.el.content;
      const svgElement = content.firstChild;
      svgElement.remove();
      content.append(...svgElement.childNodes);
    }
    while ((node = walker.nextNode()) !== null && parts.length < partCount) {
      if (node.nodeType === 1) {
        if (DEV_MODE2) {
          const tag2 = node.localName;
          if (/^(?:textarea|template)$/i.test(tag2) && node.innerHTML.includes(marker)) {
            const m8 = `Expressions are not supported inside \`${tag2}\` elements. See https://lit.dev/msg/expression-in-${tag2} for more information.`;
            if (tag2 === "template") {
              throw new Error(m8);
            } else
              issueWarning2("", m8);
          }
        }
        if (node.hasAttributes()) {
          const attrsToRemove = [];
          for (const name of node.getAttributeNames()) {
            if (name.endsWith(boundAttributeSuffix) || name.startsWith(marker)) {
              const realName = attrNames[attrNameIndex++];
              attrsToRemove.push(name);
              if (realName !== void 0) {
                const value = node.getAttribute(realName.toLowerCase() + boundAttributeSuffix);
                const statics = value.split(marker);
                const m8 = /([.?@])?(.*)/.exec(realName);
                parts.push({
                  type: ATTRIBUTE_PART,
                  index: nodeIndex,
                  name: m8[2],
                  strings: statics,
                  ctor: m8[1] === "." ? PropertyPart : m8[1] === "?" ? BooleanAttributePart : m8[1] === "@" ? EventPart : AttributePart
                });
              } else {
                parts.push({
                  type: ELEMENT_PART,
                  index: nodeIndex
                });
              }
            }
          }
          for (const name of attrsToRemove) {
            node.removeAttribute(name);
          }
        }
        if (rawTextElement.test(node.tagName)) {
          const strings2 = node.textContent.split(marker);
          const lastIndex = strings2.length - 1;
          if (lastIndex > 0) {
            node.textContent = trustedTypes2 ? trustedTypes2.emptyScript : "";
            for (let i35 = 0; i35 < lastIndex; i35++) {
              node.append(strings2[i35], createMarker());
              walker.nextNode();
              parts.push({ type: CHILD_PART, index: ++nodeIndex });
            }
            node.append(strings2[lastIndex], createMarker());
          }
        }
      } else if (node.nodeType === 8) {
        const data = node.data;
        if (data === markerMatch) {
          parts.push({ type: CHILD_PART, index: nodeIndex });
        } else {
          let i35 = -1;
          while ((i35 = node.data.indexOf(marker, i35 + 1)) !== -1) {
            parts.push({ type: COMMENT_PART, index: nodeIndex });
            i35 += marker.length - 1;
          }
        }
      }
      nodeIndex++;
    }
    debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
      kind: "template prep",
      template: this,
      clonableTemplate: this.el,
      parts: this.parts,
      strings
    });
  }
  // Overridden via `litHtmlPolyfillSupport` to provide platform support.
  /** @nocollapse */
  static createElement(html2, _options) {
    const el = d.createElement("template");
    el.innerHTML = html2;
    return el;
  }
};
function resolveDirective(part, value, parent = part, attributeIndex) {
  var _a4, _b4, _c100;
  var _d3;
  if (value === noChange) {
    return value;
  }
  let currentDirective = attributeIndex !== void 0 ? (_a4 = parent.__directives) === null || _a4 === void 0 ? void 0 : _a4[attributeIndex] : parent.__directive;
  const nextDirectiveConstructor = isPrimitive(value) ? void 0 : (
    // This property needs to remain unminified.
    value["_$litDirective$"]
  );
  if ((currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective.constructor) !== nextDirectiveConstructor) {
    (_b4 = currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective["_$notifyDirectiveConnectionChanged"]) === null || _b4 === void 0 ? void 0 : _b4.call(currentDirective, false);
    if (nextDirectiveConstructor === void 0) {
      currentDirective = void 0;
    } else {
      currentDirective = new nextDirectiveConstructor(part);
      currentDirective._$initialize(part, parent, attributeIndex);
    }
    if (attributeIndex !== void 0) {
      ((_c100 = (_d3 = parent).__directives) !== null && _c100 !== void 0 ? _c100 : _d3.__directives = [])[attributeIndex] = currentDirective;
    } else {
      parent.__directive = currentDirective;
    }
  }
  if (currentDirective !== void 0) {
    value = resolveDirective(part, currentDirective._$resolve(part, value.values), currentDirective, attributeIndex);
  }
  return value;
}
var TemplateInstance = class {
  constructor(template, parent) {
    this._$parts = [];
    this._$disconnectableChildren = void 0;
    this._$template = template;
    this._$parent = parent;
  }
  // Called by ChildPart parentNode getter
  get parentNode() {
    return this._$parent.parentNode;
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    return this._$parent._$isConnected;
  }
  // This method is separate from the constructor because we need to return a
  // DocumentFragment and we don't want to hold onto it with an instance field.
  _clone(options) {
    var _a4;
    const { el: { content }, parts } = this._$template;
    const fragment = ((_a4 = options === null || options === void 0 ? void 0 : options.creationScope) !== null && _a4 !== void 0 ? _a4 : d).importNode(content, true);
    walker.currentNode = fragment;
    let node = walker.nextNode();
    let nodeIndex = 0;
    let partIndex = 0;
    let templatePart = parts[0];
    while (templatePart !== void 0) {
      if (nodeIndex === templatePart.index) {
        let part;
        if (templatePart.type === CHILD_PART) {
          part = new ChildPart(node, node.nextSibling, this, options);
        } else if (templatePart.type === ATTRIBUTE_PART) {
          part = new templatePart.ctor(node, templatePart.name, templatePart.strings, this, options);
        } else if (templatePart.type === ELEMENT_PART) {
          part = new ElementPart(node, this, options);
        }
        this._$parts.push(part);
        templatePart = parts[++partIndex];
      }
      if (nodeIndex !== (templatePart === null || templatePart === void 0 ? void 0 : templatePart.index)) {
        node = walker.nextNode();
        nodeIndex++;
      }
    }
    walker.currentNode = d;
    return fragment;
  }
  _update(values) {
    let i35 = 0;
    for (const part of this._$parts) {
      if (part !== void 0) {
        debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
          kind: "set part",
          part,
          value: values[i35],
          valueIndex: i35,
          values,
          templateInstance: this
        });
        if (part.strings !== void 0) {
          part._$setValue(values, part, i35);
          i35 += part.strings.length - 2;
        } else {
          part._$setValue(values[i35]);
        }
      }
      i35++;
    }
  }
};
var ChildPart = class _ChildPart {
  constructor(startNode, endNode, parent, options) {
    var _a4;
    this.type = CHILD_PART;
    this._$committedValue = nothing;
    this._$disconnectableChildren = void 0;
    this._$startNode = startNode;
    this._$endNode = endNode;
    this._$parent = parent;
    this.options = options;
    this.__isConnected = (_a4 = options === null || options === void 0 ? void 0 : options.isConnected) !== null && _a4 !== void 0 ? _a4 : true;
    if (ENABLE_EXTRA_SECURITY_HOOKS) {
      this._textSanitizer = void 0;
    }
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    var _a4, _b4;
    return (_b4 = (_a4 = this._$parent) === null || _a4 === void 0 ? void 0 : _a4._$isConnected) !== null && _b4 !== void 0 ? _b4 : this.__isConnected;
  }
  /**
   * The parent node into which the part renders its content.
   *
   * A ChildPart's content consists of a range of adjacent child nodes of
   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and
   * `.endNode`).
   *
   * - If both `.startNode` and `.endNode` are non-null, then the part's content
   * consists of all siblings between `.startNode` and `.endNode`, exclusively.
   *
   * - If `.startNode` is non-null but `.endNode` is null, then the part's
   * content consists of all siblings following `.startNode`, up to and
   * including the last child of `.parentNode`. If `.endNode` is non-null, then
   * `.startNode` will always be non-null.
   *
   * - If both `.endNode` and `.startNode` are null, then the part's content
   * consists of all child nodes of `.parentNode`.
   */
  get parentNode() {
    let parentNode = wrap(this._$startNode).parentNode;
    const parent = this._$parent;
    if (parent !== void 0 && (parentNode === null || parentNode === void 0 ? void 0 : parentNode.nodeType) === 11) {
      parentNode = parent.parentNode;
    }
    return parentNode;
  }
  /**
   * The part's leading marker node, if any. See `.parentNode` for more
   * information.
   */
  get startNode() {
    return this._$startNode;
  }
  /**
   * The part's trailing marker node, if any. See `.parentNode` for more
   * information.
   */
  get endNode() {
    return this._$endNode;
  }
  _$setValue(value, directiveParent = this) {
    var _a4;
    if (DEV_MODE2 && this.parentNode === null) {
      throw new Error(`This \`ChildPart\` has no \`parentNode\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \`innerHTML\` or \`textContent\` can do this.`);
    }
    value = resolveDirective(this, value, directiveParent);
    if (isPrimitive(value)) {
      if (value === nothing || value == null || value === "") {
        if (this._$committedValue !== nothing) {
          debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
            kind: "commit nothing to child",
            start: this._$startNode,
            end: this._$endNode,
            parent: this._$parent,
            options: this.options
          });
          this._$clear();
        }
        this._$committedValue = nothing;
      } else if (value !== this._$committedValue && value !== noChange) {
        this._commitText(value);
      }
    } else if (value["_$litType$"] !== void 0) {
      this._commitTemplateResult(value);
    } else if (value.nodeType !== void 0) {
      if (DEV_MODE2 && ((_a4 = this.options) === null || _a4 === void 0 ? void 0 : _a4.host) === value) {
        this._commitText(`[probable mistake: rendered a template's host in itself (commonly caused by writing \${this} in a template]`);
        console.warn(`Attempted to render the template host`, value, `inside itself. This is almost always a mistake, and in dev mode `, `we render some warning text. In production however, we'll `, `render it, which will usually result in an error, and sometimes `, `in the element disappearing from the DOM.`);
        return;
      }
      this._commitNode(value);
    } else if (isIterable(value)) {
      this._commitIterable(value);
    } else {
      this._commitText(value);
    }
  }
  _insert(node) {
    return wrap(wrap(this._$startNode).parentNode).insertBefore(node, this._$endNode);
  }
  _commitNode(value) {
    var _a4;
    if (this._$committedValue !== value) {
      this._$clear();
      if (ENABLE_EXTRA_SECURITY_HOOKS && sanitizerFactoryInternal !== noopSanitizer) {
        const parentNodeName = (_a4 = this._$startNode.parentNode) === null || _a4 === void 0 ? void 0 : _a4.nodeName;
        if (parentNodeName === "STYLE" || parentNodeName === "SCRIPT") {
          let message = "Forbidden";
          if (DEV_MODE2) {
            if (parentNodeName === "STYLE") {
              message = `Lit does not support binding inside style nodes. This is a security risk, as style injection attacks can exfiltrate data and spoof UIs. Consider instead using css\`...\` literals to compose styles, and make do dynamic styling with css custom properties, ::parts, <slot>s, and by mutating the DOM rather than stylesheets.`;
            } else {
              message = `Lit does not support binding inside script nodes. This is a security risk, as it could allow arbitrary code execution.`;
            }
          }
          throw new Error(message);
        }
      }
      debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
        kind: "commit node",
        start: this._$startNode,
        parent: this._$parent,
        value,
        options: this.options
      });
      this._$committedValue = this._insert(value);
    }
  }
  _commitText(value) {
    if (this._$committedValue !== nothing && isPrimitive(this._$committedValue)) {
      const node = wrap(this._$startNode).nextSibling;
      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        if (this._textSanitizer === void 0) {
          this._textSanitizer = createSanitizer(node, "data", "property");
        }
        value = this._textSanitizer(value);
      }
      debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
        kind: "commit text",
        node,
        value,
        options: this.options
      });
      node.data = value;
    } else {
      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        const textNode = d.createTextNode("");
        this._commitNode(textNode);
        if (this._textSanitizer === void 0) {
          this._textSanitizer = createSanitizer(textNode, "data", "property");
        }
        value = this._textSanitizer(value);
        debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
          kind: "commit text",
          node: textNode,
          value,
          options: this.options
        });
        textNode.data = value;
      } else {
        this._commitNode(d.createTextNode(value));
        debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
          kind: "commit text",
          node: wrap(this._$startNode).nextSibling,
          value,
          options: this.options
        });
      }
    }
    this._$committedValue = value;
  }
  _commitTemplateResult(result) {
    var _a4;
    const { values, ["_$litType$"]: type3 } = result;
    const template = typeof type3 === "number" ? this._$getTemplate(result) : (type3.el === void 0 && (type3.el = Template.createElement(trustFromTemplateString(type3.h, type3.h[0]), this.options)), type3);
    if (((_a4 = this._$committedValue) === null || _a4 === void 0 ? void 0 : _a4._$template) === template) {
      debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
        kind: "template updating",
        template,
        instance: this._$committedValue,
        parts: this._$committedValue._$parts,
        options: this.options,
        values
      });
      this._$committedValue._update(values);
    } else {
      const instance = new TemplateInstance(template, this);
      const fragment = instance._clone(this.options);
      debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
        kind: "template instantiated",
        template,
        instance,
        parts: instance._$parts,
        options: this.options,
        fragment,
        values
      });
      instance._update(values);
      debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
        kind: "template instantiated and updated",
        template,
        instance,
        parts: instance._$parts,
        options: this.options,
        fragment,
        values
      });
      this._commitNode(fragment);
      this._$committedValue = instance;
    }
  }
  // Overridden via `litHtmlPolyfillSupport` to provide platform support.
  /** @internal */
  _$getTemplate(result) {
    let template = templateCache.get(result.strings);
    if (template === void 0) {
      templateCache.set(result.strings, template = new Template(result));
    }
    return template;
  }
  _commitIterable(value) {
    if (!isArray(this._$committedValue)) {
      this._$committedValue = [];
      this._$clear();
    }
    const itemParts = this._$committedValue;
    let partIndex = 0;
    let itemPart;
    for (const item of value) {
      if (partIndex === itemParts.length) {
        itemParts.push(itemPart = new _ChildPart(this._insert(createMarker()), this._insert(createMarker()), this, this.options));
      } else {
        itemPart = itemParts[partIndex];
      }
      itemPart._$setValue(item);
      partIndex++;
    }
    if (partIndex < itemParts.length) {
      this._$clear(itemPart && wrap(itemPart._$endNode).nextSibling, partIndex);
      itemParts.length = partIndex;
    }
  }
  /**
   * Removes the nodes contained within this Part from the DOM.
   *
   * @param start Start node to clear from, for clearing a subset of the part's
   *     DOM (used when truncating iterables)
   * @param from  When `start` is specified, the index within the iterable from
   *     which ChildParts are being removed, used for disconnecting directives in
   *     those Parts.
   *
   * @internal
   */
  _$clear(start = wrap(this._$startNode).nextSibling, from2) {
    var _a4;
    (_a4 = this._$notifyConnectionChanged) === null || _a4 === void 0 ? void 0 : _a4.call(this, false, true, from2);
    while (start && start !== this._$endNode) {
      const n40 = wrap(start).nextSibling;
      wrap(start).remove();
      start = n40;
    }
  }
  /**
   * Implementation of RootPart's `isConnected`. Note that this metod
   * should only be called on `RootPart`s (the `ChildPart` returned from a
   * top-level `render()` call). It has no effect on non-root ChildParts.
   * @param isConnected Whether to set
   * @internal
   */
  setConnected(isConnected) {
    var _a4;
    if (this._$parent === void 0) {
      this.__isConnected = isConnected;
      (_a4 = this._$notifyConnectionChanged) === null || _a4 === void 0 ? void 0 : _a4.call(this, isConnected);
    } else if (DEV_MODE2) {
      throw new Error("part.setConnected() may only be called on a RootPart returned from render().");
    }
  }
};
var AttributePart = class {
  constructor(element, name, strings, parent, options) {
    this.type = ATTRIBUTE_PART;
    this._$committedValue = nothing;
    this._$disconnectableChildren = void 0;
    this.element = element;
    this.name = name;
    this._$parent = parent;
    this.options = options;
    if (strings.length > 2 || strings[0] !== "" || strings[1] !== "") {
      this._$committedValue = new Array(strings.length - 1).fill(new String());
      this.strings = strings;
    } else {
      this._$committedValue = nothing;
    }
    if (ENABLE_EXTRA_SECURITY_HOOKS) {
      this._sanitizer = void 0;
    }
  }
  get tagName() {
    return this.element.tagName;
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    return this._$parent._$isConnected;
  }
  /**
   * Sets the value of this part by resolving the value from possibly multiple
   * values and static strings and committing it to the DOM.
   * If this part is single-valued, `this._strings` will be undefined, and the
   * method will be called with a single value argument. If this part is
   * multi-value, `this._strings` will be defined, and the method is called
   * with the value array of the part's owning TemplateInstance, and an offset
   * into the value array from which the values should be read.
   * This method is overloaded this way to eliminate short-lived array slices
   * of the template instance values, and allow a fast-path for single-valued
   * parts.
   *
   * @param value The part value, or an array of values for multi-valued parts
   * @param valueIndex the index to start reading values from. `undefined` for
   *   single-valued parts
   * @param noCommit causes the part to not commit its value to the DOM. Used
   *   in hydration to prime attribute parts with their first-rendered value,
   *   but not set the attribute, and in SSR to no-op the DOM operation and
   *   capture the value for serialization.
   *
   * @internal
   */
  _$setValue(value, directiveParent = this, valueIndex, noCommit) {
    const strings = this.strings;
    let change = false;
    if (strings === void 0) {
      value = resolveDirective(this, value, directiveParent, 0);
      change = !isPrimitive(value) || value !== this._$committedValue && value !== noChange;
      if (change) {
        this._$committedValue = value;
      }
    } else {
      const values = value;
      value = strings[0];
      let i35, v13;
      for (i35 = 0; i35 < strings.length - 1; i35++) {
        v13 = resolveDirective(this, values[valueIndex + i35], directiveParent, i35);
        if (v13 === noChange) {
          v13 = this._$committedValue[i35];
        }
        change || (change = !isPrimitive(v13) || v13 !== this._$committedValue[i35]);
        if (v13 === nothing) {
          value = nothing;
        } else if (value !== nothing) {
          value += (v13 !== null && v13 !== void 0 ? v13 : "") + strings[i35 + 1];
        }
        this._$committedValue[i35] = v13;
      }
    }
    if (change && !noCommit) {
      this._commitValue(value);
    }
  }
  /** @internal */
  _commitValue(value) {
    if (value === nothing) {
      wrap(this.element).removeAttribute(this.name);
    } else {
      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        if (this._sanitizer === void 0) {
          this._sanitizer = sanitizerFactoryInternal(this.element, this.name, "attribute");
        }
        value = this._sanitizer(value !== null && value !== void 0 ? value : "");
      }
      debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
        kind: "commit attribute",
        element: this.element,
        name: this.name,
        value,
        options: this.options
      });
      wrap(this.element).setAttribute(this.name, value !== null && value !== void 0 ? value : "");
    }
  }
};
var PropertyPart = class extends AttributePart {
  constructor() {
    super(...arguments);
    this.type = PROPERTY_PART;
  }
  /** @internal */
  _commitValue(value) {
    if (ENABLE_EXTRA_SECURITY_HOOKS) {
      if (this._sanitizer === void 0) {
        this._sanitizer = sanitizerFactoryInternal(this.element, this.name, "property");
      }
      value = this._sanitizer(value);
    }
    debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
      kind: "commit property",
      element: this.element,
      name: this.name,
      value,
      options: this.options
    });
    this.element[this.name] = value === nothing ? void 0 : value;
  }
};
var emptyStringForBooleanAttribute2 = trustedTypes2 ? trustedTypes2.emptyScript : "";
var BooleanAttributePart = class extends AttributePart {
  constructor() {
    super(...arguments);
    this.type = BOOLEAN_ATTRIBUTE_PART;
  }
  /** @internal */
  _commitValue(value) {
    debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
      kind: "commit boolean attribute",
      element: this.element,
      name: this.name,
      value: !!(value && value !== nothing),
      options: this.options
    });
    if (value && value !== nothing) {
      wrap(this.element).setAttribute(this.name, emptyStringForBooleanAttribute2);
    } else {
      wrap(this.element).removeAttribute(this.name);
    }
  }
};
var EventPart = class extends AttributePart {
  constructor(element, name, strings, parent, options) {
    super(element, name, strings, parent, options);
    this.type = EVENT_PART;
    if (DEV_MODE2 && this.strings !== void 0) {
      throw new Error(`A \`<${element.localName}>\` has a \`@${name}=...\` listener with invalid content. Event listeners in templates must have exactly one expression and no surrounding text.`);
    }
  }
  // EventPart does not use the base _$setValue/_resolveValue implementation
  // since the dirty checking is more complex
  /** @internal */
  _$setValue(newListener, directiveParent = this) {
    var _a4;
    newListener = (_a4 = resolveDirective(this, newListener, directiveParent, 0)) !== null && _a4 !== void 0 ? _a4 : nothing;
    if (newListener === noChange) {
      return;
    }
    const oldListener = this._$committedValue;
    const shouldRemoveListener = newListener === nothing && oldListener !== nothing || newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive;
    const shouldAddListener = newListener !== nothing && (oldListener === nothing || shouldRemoveListener);
    debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
      kind: "commit event listener",
      element: this.element,
      name: this.name,
      value: newListener,
      options: this.options,
      removeListener: shouldRemoveListener,
      addListener: shouldAddListener,
      oldListener
    });
    if (shouldRemoveListener) {
      this.element.removeEventListener(this.name, this, oldListener);
    }
    if (shouldAddListener) {
      this.element.addEventListener(this.name, this, newListener);
    }
    this._$committedValue = newListener;
  }
  handleEvent(event) {
    var _a4, _b4;
    if (typeof this._$committedValue === "function") {
      this._$committedValue.call((_b4 = (_a4 = this.options) === null || _a4 === void 0 ? void 0 : _a4.host) !== null && _b4 !== void 0 ? _b4 : this.element, event);
    } else {
      this._$committedValue.handleEvent(event);
    }
  }
};
var ElementPart = class {
  constructor(element, parent, options) {
    this.element = element;
    this.type = ELEMENT_PART;
    this._$disconnectableChildren = void 0;
    this._$parent = parent;
    this.options = options;
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    return this._$parent._$isConnected;
  }
  _$setValue(value) {
    debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
      kind: "commit to element binding",
      element: this.element,
      value,
      options: this.options
    });
    resolveDirective(this, value);
  }
};
var polyfillSupport2 = DEV_MODE2 ? global3.litHtmlPolyfillSupportDevMode : global3.litHtmlPolyfillSupport;
polyfillSupport2 === null || polyfillSupport2 === void 0 ? void 0 : polyfillSupport2(Template, ChildPart);
((_d2 = global3.litHtmlVersions) !== null && _d2 !== void 0 ? _d2 : global3.litHtmlVersions = []).push("2.8.0");
if (DEV_MODE2 && global3.litHtmlVersions.length > 1) {
  issueWarning2("multiple-versions", `Multiple versions of Lit loaded. Loading multiple versions is not recommended.`);
}
var render = (value, container, options) => {
  var _a4, _b4;
  if (DEV_MODE2 && container == null) {
    throw new TypeError(`The container to render into may not be ${container}`);
  }
  const renderId = DEV_MODE2 ? debugLogRenderId++ : 0;
  const partOwnerNode = (_a4 = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _a4 !== void 0 ? _a4 : container;
  let part = partOwnerNode["_$litPart$"];
  debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
    kind: "begin render",
    id: renderId,
    value,
    container,
    options,
    part
  });
  if (part === void 0) {
    const endNode = (_b4 = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _b4 !== void 0 ? _b4 : null;
    partOwnerNode["_$litPart$"] = part = new ChildPart(container.insertBefore(createMarker(), endNode), endNode, void 0, options !== null && options !== void 0 ? options : {});
  }
  part._$setValue(value);
  debugLogEvent2 === null || debugLogEvent2 === void 0 ? void 0 : debugLogEvent2({
    kind: "end render",
    id: renderId,
    value,
    container,
    options,
    part
  });
  return part;
};
if (ENABLE_EXTRA_SECURITY_HOOKS) {
  render.setSanitizer = setSanitizer;
  render.createSanitizer = createSanitizer;
  if (DEV_MODE2) {
    render._testOnlyClearSanitizerFactoryDoNotCallOrElse = _testOnlyClearSanitizerFactoryDoNotCallOrElse;
  }
}

// node_modules/lit-element/development/lit-element.js
var _a3;
var _b3;
var _c3;
var DEV_MODE3 = true;
var issueWarning3;
if (DEV_MODE3) {
  const issuedWarnings = (_a3 = globalThis.litIssuedWarnings) !== null && _a3 !== void 0 ? _a3 : globalThis.litIssuedWarnings = /* @__PURE__ */ new Set();
  issueWarning3 = (code, warning) => {
    warning += ` See https://lit.dev/msg/${code} for more information.`;
    if (!issuedWarnings.has(warning)) {
      console.warn(warning);
      issuedWarnings.add(warning);
    }
  };
}
var LitElement = class extends ReactiveElement {
  constructor() {
    super(...arguments);
    this.renderOptions = { host: this };
    this.__childPart = void 0;
  }
  /**
   * @category rendering
   */
  createRenderRoot() {
    var _a4;
    var _b4;
    const renderRoot = super.createRenderRoot();
    (_a4 = (_b4 = this.renderOptions).renderBefore) !== null && _a4 !== void 0 ? _a4 : _b4.renderBefore = renderRoot.firstChild;
    return renderRoot;
  }
  /**
   * Updates the element. This method reflects property values to attributes
   * and calls `render` to render DOM via lit-html. Setting properties inside
   * this method will *not* trigger another update.
   * @param changedProperties Map of changed properties with old values
   * @category updates
   */
  update(changedProperties) {
    const value = this.render();
    if (!this.hasUpdated) {
      this.renderOptions.isConnected = this.isConnected;
    }
    super.update(changedProperties);
    this.__childPart = render(value, this.renderRoot, this.renderOptions);
  }
  /**
   * Invoked when the component is added to the document's DOM.
   *
   * In `connectedCallback()` you should setup tasks that should only occur when
   * the element is connected to the document. The most common of these is
   * adding event listeners to nodes external to the element, like a keydown
   * event handler added to the window.
   *
   * ```ts
   * connectedCallback() {
   *   super.connectedCallback();
   *   addEventListener('keydown', this._handleKeydown);
   * }
   * ```
   *
   * Typically, anything done in `connectedCallback()` should be undone when the
   * element is disconnected, in `disconnectedCallback()`.
   *
   * @category lifecycle
   */
  connectedCallback() {
    var _a4;
    super.connectedCallback();
    (_a4 = this.__childPart) === null || _a4 === void 0 ? void 0 : _a4.setConnected(true);
  }
  /**
   * Invoked when the component is removed from the document's DOM.
   *
   * This callback is the main signal to the element that it may no longer be
   * used. `disconnectedCallback()` should ensure that nothing is holding a
   * reference to the element (such as event listeners added to nodes external
   * to the element), so that it is free to be garbage collected.
   *
   * ```ts
   * disconnectedCallback() {
   *   super.disconnectedCallback();
   *   window.removeEventListener('keydown', this._handleKeydown);
   * }
   * ```
   *
   * An element may be re-connected after being disconnected.
   *
   * @category lifecycle
   */
  disconnectedCallback() {
    var _a4;
    super.disconnectedCallback();
    (_a4 = this.__childPart) === null || _a4 === void 0 ? void 0 : _a4.setConnected(false);
  }
  /**
   * Invoked on each update to perform rendering tasks. This method may return
   * any value renderable by lit-html's `ChildPart` - typically a
   * `TemplateResult`. Setting properties inside this method will *not* trigger
   * the element to update.
   * @category rendering
   */
  render() {
    return noChange;
  }
};
LitElement["finalized"] = true;
LitElement["_$litElement$"] = true;
(_b3 = globalThis.litElementHydrateSupport) === null || _b3 === void 0 ? void 0 : _b3.call(globalThis, { LitElement });
var polyfillSupport3 = DEV_MODE3 ? globalThis.litElementPolyfillSupportDevMode : globalThis.litElementPolyfillSupport;
polyfillSupport3 === null || polyfillSupport3 === void 0 ? void 0 : polyfillSupport3({ LitElement });
if (DEV_MODE3) {
  LitElement["finalize"] = function() {
    const finalized2 = ReactiveElement.finalize.call(this);
    if (!finalized2) {
      return false;
    }
    const warnRemovedOrRenamed = (obj, name, renamed = false) => {
      if (obj.hasOwnProperty(name)) {
        const ctorName = (typeof obj === "function" ? obj : obj.constructor).name;
        issueWarning3(renamed ? "renamed-api" : "removed-api", `\`${name}\` is implemented on class ${ctorName}. It has been ${renamed ? "renamed" : "removed"} in this version of LitElement.`);
      }
    };
    warnRemovedOrRenamed(this, "render");
    warnRemovedOrRenamed(this, "getStyles", true);
    warnRemovedOrRenamed(this.prototype, "adoptStyles");
    return true;
  };
}
((_c3 = globalThis.litElementVersions) !== null && _c3 !== void 0 ? _c3 : globalThis.litElementVersions = []).push("3.3.3");
if (DEV_MODE3 && globalThis.litElementVersions.length > 1) {
  issueWarning3("multiple-versions", `Multiple versions of Lit loaded. Loading multiple versions is not recommended.`);
}

// node_modules/@cds/core/internal/base/base.element.scss.js
var a = css`@charset "UTF-8";:host,:root{--δ2:var(--cds-global-layout-space-xxs, calc(4 * 1rem / var(--cds-global-base, 20)));--δ3:var(--cds-global-layout-space-xs, calc(8 * 1rem / var(--cds-global-base, 20)));--δ4:var(--cds-global-layout-space-sm, calc(12 * 1rem / var(--cds-global-base, 20)));--δ5:var(--cds-global-layout-space-md, calc(16 * 1rem / var(--cds-global-base, 20)));--δ6:var(--cds-global-layout-space-lg, calc(24 * 1rem / var(--cds-global-base, 20)));--δ7:var(--cds-global-layout-space-xl, calc(32 * 1rem / var(--cds-global-base, 20)))}[cds-layout~="wrap:none"]{flex-wrap:nowrap!important}[cds-layout*="align:stretch"]{flex-grow:1!important}[cds-layout*="align:shrink"]{flex-shrink:1!important;flex-grow:0!important}[cds-layout~=horizontal]{display:flex;flex-direction:row;flex-wrap:wrap;justify-items:flex-start;align-items:flex-start;width:100%;margin:0;min-height:0}[cds-layout~=horizontal]>[cds-layout~=horizontal],[cds-layout~=horizontal]>[cds-layout~=vertical],[cds-layout~=horizontal]>[cds-text]{width:initial!important}[cds-layout~=horizontal][cds-layout*="align:top"]{align-items:flex-start}[cds-layout~=horizontal][cds-layout*="align:left"]{justify-content:flex-start}[cds-layout~=horizontal][cds-layout*="align:right"]{justify-content:flex-end}[cds-layout~=horizontal][cds-layout*="align:vertical-center"]{align-items:center;align-content:center}[cds-layout~=horizontal][cds-layout*="align:horizontal-center"]{justify-content:center}[cds-layout~=horizontal][cds-layout*="align:center"]{align-items:center;align-content:center;justify-content:center}[cds-layout~=horizontal][cds-layout*="order:reverse"]{flex-direction:row-reverse}[cds-layout~=horizontal][cds-layout*="align:horizontal-stretch"]{justify-content:stretch;flex-grow:1}[cds-layout~=horizontal][cds-layout*="align:horizontal-stretch"]>*{flex-grow:1}[cds-layout~=horizontal][cds-layout*="align:stretch"]{align-items:stretch;align-content:stretch;flex-grow:1}[cds-layout~=horizontal][cds-layout*="align:stretch"]>*{flex-grow:1}[cds-layout~=horizontal]>[cds-layout*="align:center"],[cds-layout~=horizontal]>[cds-layout*="align:vertical-center"]{align-self:center}[cds-layout~=horizontal]>[cds-layout*="align:center"],[cds-layout~=horizontal]>[cds-layout*="align:horizontal-center"]{margin-left:auto!important;margin-right:auto!important}[cds-layout~=horizontal]>[cds-layout*="align:top"]{align-self:flex-start}[cds-layout~=horizontal]>[cds-layout*="align:right"]{margin-left:auto!important}[cds-layout~=horizontal]>[cds-layout*="align:left"]{margin-right:auto!important}[cds-layout~=vertical]{width:100%;display:flex;flex-direction:column;align-items:flex-start}[cds-layout~=vertical],[cds-layout~=vertical][cds-layout*="align:top"]{justify-content:flex-start}[cds-layout~=vertical][cds-layout*="align:left"]{align-items:flex-start}[cds-layout~=vertical][cds-layout*="align:right"]{align-items:flex-end}[cds-layout~=vertical][cds-layout*="align:vertical-center"]{justify-content:center}[cds-layout~=vertical][cds-layout*="align:horizontal-center"]{align-items:center}[cds-layout~=vertical][cds-layout*="align:center"]{align-items:center;justify-content:center}[cds-layout~=vertical][cds-layout*="order:reverse"]{flex-direction:column-reverse}[cds-layout~=vertical][cds-layout*="align:horizontal-stretch"]{align-items:stretch}[cds-layout~=vertical][cds-layout*="align:stretch"]{align-items:stretch;justify-content:stretch}[cds-layout~=vertical][cds-layout*="align:stretch"]>*{flex-grow:1}[cds-layout~=vertical]>[cds-layout*="align:center"],[cds-layout~=vertical]>[cds-layout*="align:vertical-center"]{margin-top:auto;margin-bottom:auto}[cds-layout~=vertical]>[cds-layout*="align:center"],[cds-layout~=vertical]>[cds-layout*="align:horizontal-center"]{align-self:center}[cds-layout~=vertical]>[cds-layout*="align:top"]{margin-bottom:auto!important}[cds-layout~=vertical]>[cds-layout*="align:right"]{margin-left:auto}[cds-layout~=vertical]>[cds-layout*="align:left"]{margin-right:auto}[cds-layout~=grid]{display:grid;align-items:start;align-content:start;grid-template-columns:repeat(var(--cds-global-layout-grid-cols,12),1fr);width:100%}[cds-layout~=grid][cds-layout*=rows]{grid-template-rows:repeat(12,auto)}[cds-layout~=grid]>[cds-layout*=row]{align-self:stretch}[cds-layout~=grid][cds-layout*="align:top"]{align-content:start}[cds-layout~=grid][cds-layout*="align:right"]{justify-content:end}[cds-layout~=grid][cds-layout*="align:left"]{justify-content:start}[cds-layout~=grid][cds-layout*="align:horizontal-stretch"]{justify-items:stretch;justify-content:stretch}[cds-layout~=grid][cds-layout*="align:stretch"]{align-items:stretch;align-content:stretch;justify-items:stretch;justify-content:stretch}[cds-layout~=grid][cds-layout*="align:vertical-center"]{align-items:center;align-content:center}[cds-layout~=grid][cds-layout*="align:horizontal-center"]{justify-items:center;justify-content:center}[cds-layout~=grid][cds-layout*="align:center"]{align-items:center;align-content:center;justify-items:center;justify-content:center}::slotted([cds-layout~="display:screen-reader-only"]),[cds-layout~="display:screen-reader-only"]{position:absolute!important;clip:rect(1px,1px,1px,1px);clip-path:inset(50%);padding:0;border:0;height:1px;width:1px;overflow:hidden;white-space:nowrap;top:0;left:0;display:block!important}[cds-layout*="gap:none"]{gap:0}[cds-layout*="gap:xxs"]{gap:var(--δ2)}[cds-layout*="gap:xs"]{gap:var(--δ3)}[cds-layout*="gap:sm"]{gap:var(--δ4)}[cds-layout*="gap:md"]{gap:var(--δ5)}[cds-layout*="gap:lg"]{gap:var(--δ6)}[cds-layout~="p:none"]{padding:0!important}[cds-layout~="p:xxs"]{padding:var(--δ2)!important}[cds-layout~="p:xs"]{padding:var(--δ3)!important}[cds-layout~="p:sm"]{padding:var(--δ4)!important}[cds-layout~="p:md"]{padding:var(--δ5)!important}[cds-layout~="m:md"]{margin:var(--δ5)!important}[cds-layout~="p:lg"]{padding:var(--δ6)!important}[cds-layout~="p-y:xs"]{padding-top:var(--δ3)!important;padding-bottom:var(--δ3)!important}[cds-layout~="p-x:lg"]{padding-left:var(--δ6)!important;padding-right:var(--δ6)!important}[cds-layout~="p-y:lg"]{padding-top:var(--δ6)!important;padding-bottom:var(--δ6)!important}[cds-layout~="p-l:md"]{padding-left:var(--δ5)!important}@media (min-width:992px){[cds-layout*="gap@md:lg"]{gap:var(--δ6)}[cds-layout~="p@md:lg"]{padding:var(--δ6)!important}[cds-layout~="m@md:xl"]{margin:var(--δ7)!important}}[cds-layout~=fill]{width:100%!important}*,:after,:before{box-sizing:border-box}[cds-layout~=horizontal][cds-layout*="align:horizontal-stretch"]>::slotted(*),[cds-layout~=horizontal][cds-layout*="align:stretch"]>::slotted(*),[cds-layout~=vertical][cds-layout*="align:stretch"]>::slotted(*){flex-grow:1}[cds-layout~=vertical] ::slotted([cds-layout*="align:center"]),[cds-layout~=vertical] ::slotted([cds-layout*="align:vertical-center"]){margin-top:auto;margin-bottom:auto}[cds-layout~=vertical] ::slotted([cds-layout*="align:center"]),[cds-layout~=vertical] ::slotted([cds-layout*="align:horizontal-center"]){align-self:center}[cds-layout~=vertical] ::slotted([cds-layout*="align:top"]){margin-bottom:auto!important}[cds-layout~=vertical] ::slotted([cds-layout*="align:bottom"]){margin-top:auto!important}[cds-layout~=vertical] ::slotted([cds-layout*="align:right"]){margin-left:auto}[cds-layout~=vertical] ::slotted([cds-layout*="align:left"]),[cds-layout~=vertical]>[cds-layout*="align:left"]{margin-right:auto}@media (min-width:576px){[cds-layout~=vertical] ::slotted([cds-layout*="align@xs:center"]),[cds-layout~=vertical] ::slotted([cds-layout*="align@xs:vertical-center"]){margin-top:auto;margin-bottom:auto}[cds-layout~=vertical] ::slotted([cds-layout*="align@xs:center"]),[cds-layout~=vertical] ::slotted([cds-layout*="align@xs:horizontal-center"]){align-self:center}[cds-layout~=vertical] ::slotted([cds-layout*="align@xs:top"]){margin-bottom:auto!important}[cds-layout~=vertical] ::slotted([cds-layout*="align@xs:bottom"]){margin-top:auto!important}[cds-layout~=vertical] ::slotted([cds-layout*="align@xs:right"]){margin-left:auto}[cds-layout~=vertical] ::slotted([cds-layout*="align@xs:left"]){margin-right:auto}}@media (min-width:768px){[cds-layout~=vertical] ::slotted([cds-layout*="align@sm:center"]),[cds-layout~=vertical] ::slotted([cds-layout*="align@sm:vertical-center"]){margin-top:auto;margin-bottom:auto}[cds-layout~=vertical] ::slotted([cds-layout*="align@sm:center"]),[cds-layout~=vertical] ::slotted([cds-layout*="align@sm:horizontal-center"]){align-self:center}[cds-layout~=vertical] ::slotted([cds-layout*="align@sm:top"]){margin-bottom:auto!important}[cds-layout~=vertical] ::slotted([cds-layout*="align@sm:bottom"]){margin-top:auto!important}[cds-layout~=vertical] ::slotted([cds-layout*="align@sm:right"]){margin-left:auto}[cds-layout~=vertical] ::slotted([cds-layout*="align@sm:left"]){margin-right:auto}}@media (min-width:992px){[cds-layout~=vertical] ::slotted([cds-layout*="align@md:center"]),[cds-layout~=vertical] ::slotted([cds-layout*="align@md:vertical-center"]){margin-top:auto;margin-bottom:auto}[cds-layout~=vertical] ::slotted([cds-layout*="align@md:center"]),[cds-layout~=vertical] ::slotted([cds-layout*="align@md:horizontal-center"]){align-self:center}[cds-layout~=vertical] ::slotted([cds-layout*="align@md:top"]){margin-bottom:auto!important}[cds-layout~=vertical] ::slotted([cds-layout*="align@md:bottom"]){margin-top:auto!important}[cds-layout~=vertical] ::slotted([cds-layout*="align@md:right"]){margin-left:auto}[cds-layout~=vertical] ::slotted([cds-layout*="align@md:left"]){margin-right:auto}}@media (min-width:1200px){[cds-layout~=vertical] ::slotted([cds-layout*="align@lg:center"]),[cds-layout~=vertical] ::slotted([cds-layout*="align@lg:vertical-center"]){margin-top:auto;margin-bottom:auto}[cds-layout~=vertical] ::slotted([cds-layout*="align@lg:center"]),[cds-layout~=vertical] ::slotted([cds-layout*="align@lg:horizontal-center"]){align-self:center}[cds-layout~=vertical] ::slotted([cds-layout*="align@lg:top"]){margin-bottom:auto!important}[cds-layout~=vertical] ::slotted([cds-layout*="align@lg:bottom"]){margin-top:auto!important}[cds-layout~=vertical] ::slotted([cds-layout*="align@lg:right"]){margin-left:auto}[cds-layout~=vertical] ::slotted([cds-layout*="align@lg:left"]){margin-right:auto}}@media (min-width:1440px){[cds-layout~=vertical] ::slotted([cds-layout*="align@xl:center"]),[cds-layout~=vertical] ::slotted([cds-layout*="align@xl:vertical-center"]){margin-top:auto;margin-bottom:auto}[cds-layout~=vertical] ::slotted([cds-layout*="align@xl:center"]),[cds-layout~=vertical] ::slotted([cds-layout*="align@xl:horizontal-center"]){align-self:center}[cds-layout~=vertical] ::slotted([cds-layout*="align@xl:top"]){margin-bottom:auto!important}[cds-layout~=vertical] ::slotted([cds-layout*="align@xl:bottom"]){margin-top:auto!important}[cds-layout~=vertical] ::slotted([cds-layout*="align@xl:right"]){margin-left:auto}[cds-layout~=vertical] ::slotted([cds-layout*="align@xl:left"]){margin-right:auto}}[cds-layout~=horizontal] ::slotted([cds-layout*="align:center"]),[cds-layout~=horizontal] ::slotted([cds-layout*="align:vertical-center"]){align-self:center}[cds-layout~=horizontal] ::slotted([cds-layout*="align:center"]),[cds-layout~=horizontal] ::slotted([cds-layout*="align:horizontal-center"]){margin-left:auto!important;margin-right:auto!important}[cds-layout~=horizontal] ::slotted([cds-layout*="align:top"]){align-self:flex-start}[cds-layout~=horizontal] ::slotted([cds-layout*="align:bottom"]){align-self:flex-end}[cds-layout~=horizontal] ::slotted([cds-layout*="align:right"]){margin-left:auto!important}[cds-layout~=horizontal] ::slotted([cds-layout*="align:left"]){margin-right:auto!important}@media (min-width:576px){[cds-layout~=horizontal] ::slotted([cds-layout*="align@xs:center"]),[cds-layout~=horizontal] ::slotted([cds-layout*="align@xs:vertical-center"]){align-self:center}[cds-layout~=horizontal] ::slotted([cds-layout*="align@xs:center"]),[cds-layout~=horizontal] ::slotted([cds-layout*="align@xs:horizontal-center"]){margin-left:auto!important;margin-right:auto!important}[cds-layout~=horizontal] ::slotted([cds-layout*="align@xs:top"]){align-self:flex-start}[cds-layout~=horizontal] ::slotted([cds-layout*="align@xs:bottom"]){align-self:flex-end}[cds-layout~=horizontal] ::slotted([cds-layout*="align@xs:right"]){margin-left:auto!important}[cds-layout~=horizontal] ::slotted([cds-layout*="align@xs:left"]){margin-right:auto!important}}@media (min-width:768px){[cds-layout~=horizontal] ::slotted([cds-layout*="align@sm:center"]),[cds-layout~=horizontal] ::slotted([cds-layout*="align@sm:vertical-center"]){align-self:center}[cds-layout~=horizontal] ::slotted([cds-layout*="align@sm:center"]),[cds-layout~=horizontal] ::slotted([cds-layout*="align@sm:horizontal-center"]){margin-left:auto!important;margin-right:auto!important}[cds-layout~=horizontal] ::slotted([cds-layout*="align@sm:top"]){align-self:flex-start}[cds-layout~=horizontal] ::slotted([cds-layout*="align@sm:bottom"]){align-self:flex-end}[cds-layout~=horizontal] ::slotted([cds-layout*="align@sm:right"]){margin-left:auto!important}[cds-layout~=horizontal] ::slotted([cds-layout*="align@sm:left"]){margin-right:auto!important}}@media (min-width:992px){[cds-layout~=horizontal] ::slotted([cds-layout*="align@md:center"]),[cds-layout~=horizontal] ::slotted([cds-layout*="align@md:vertical-center"]){align-self:center}[cds-layout~=horizontal] ::slotted([cds-layout*="align@md:center"]),[cds-layout~=horizontal] ::slotted([cds-layout*="align@md:horizontal-center"]){margin-left:auto!important;margin-right:auto!important}[cds-layout~=horizontal] ::slotted([cds-layout*="align@md:top"]){align-self:flex-start}[cds-layout~=horizontal] ::slotted([cds-layout*="align@md:bottom"]){align-self:flex-end}[cds-layout~=horizontal] ::slotted([cds-layout*="align@md:right"]){margin-left:auto!important}[cds-layout~=horizontal] ::slotted([cds-layout*="align@md:left"]){margin-right:auto!important}}@media (min-width:1200px){[cds-layout~=horizontal] ::slotted([cds-layout*="align@lg:center"]),[cds-layout~=horizontal] ::slotted([cds-layout*="align@lg:vertical-center"]){align-self:center}[cds-layout~=horizontal] ::slotted([cds-layout*="align@lg:center"]),[cds-layout~=horizontal] ::slotted([cds-layout*="align@lg:horizontal-center"]){margin-left:auto!important;margin-right:auto!important}[cds-layout~=horizontal] ::slotted([cds-layout*="align@lg:top"]){align-self:flex-start}[cds-layout~=horizontal] ::slotted([cds-layout*="align@lg:bottom"]){align-self:flex-end}[cds-layout~=horizontal] ::slotted([cds-layout*="align@lg:right"]){margin-left:auto!important}[cds-layout~=horizontal] ::slotted([cds-layout*="align@lg:left"]){margin-right:auto!important}}@media (min-width:1440px){[cds-layout~=horizontal] ::slotted([cds-layout*="align@xl:center"]),[cds-layout~=horizontal] ::slotted([cds-layout*="align@xl:vertical-center"]){align-self:center}[cds-layout~=horizontal] ::slotted([cds-layout*="align@xl:center"]),[cds-layout~=horizontal] ::slotted([cds-layout*="align@xl:horizontal-center"]){margin-left:auto!important;margin-right:auto!important}[cds-layout~=horizontal] ::slotted([cds-layout*="align@xl:top"]){align-self:flex-start}[cds-layout~=horizontal] ::slotted([cds-layout*="align@xl:bottom"]){align-self:flex-end}[cds-layout~=horizontal] ::slotted([cds-layout*="align@xl:right"]){margin-left:auto!important}[cds-layout~=horizontal] ::slotted([cds-layout*="align@xl:left"]){margin-right:auto!important}}[cds-text]{font-family:var(--cds-global-typography-font-family, "Clarity City", "Avenir Next", sans-serif);margin-top:0;margin-bottom:0}[cds-text][cds-layout~=grid]::after,[cds-text][cds-layout~=grid]::before,[cds-text][cds-layout~=horizontal]::after,[cds-text][cds-layout~=horizontal]::before,[cds-text][cds-layout~=vertical]::after,[cds-text][cds-layout~=vertical]::before{display:none}[cds-text*=display],[cds-text*=section],[cds-text*=subsection],[cds-text*=title]{font-family:var(--cds-global-typography-header-font-family, "Clarity City", "Avenir Next", sans-serif);color:var(--cds-global-typography-color-400,var(--cds-global-color-construction-900,#21333b))}[cds-text*=body],[cds-text*=message],[cds-text*=secondary]{color:var(--cds-global-typography-color-500,var(--cds-global-color-black,#000))}[cds-text*=inline]{width:auto!important;display:inline-block!important}[cds-text*=display]{font-size:var(--cds-global-typography-display-font-size,calc(40 * 1rem / var(--cds-global-base,20)));font-weight:var(--cds-global-typography-display-font-weight,500);line-height:var(--cds-global-typography-display-line-height,1.1em);letter-spacing:var(--cds-global-typography-display-letter-spacing,-.0125em)}[cds-text*=display]::before{content:"";display:block;height:0;width:0;margin-bottom:calc(((var(--cds-global-typography-top-gap-height,.1475em) + calc((var(--cds-global-typography-display-line-height,1.1em) - 1em)/ 2))*-1) + .037em)}[cds-text*=display]::after{content:"";display:block;height:0;width:0;margin-top:calc((((1em - var(--cds-global-typography-top-gap-height,.1475em) - var(--cds-global-typography-ascender-height,.1703em) - var(--cds-global-typography-x-height,.517em)) + calc((var(--cds-global-typography-display-line-height,1.1em) - 1em)/ 2))*-1) - .044em)}[cds-text*=title]{font-size:var(--cds-global-typography-title-font-size,calc(24 * 1rem / var(--cds-global-base,20)));font-weight:var(--cds-global-typography-title-font-weight,500);line-height:var(--cds-global-typography-title-line-height,1.333333em);letter-spacing:var(--cds-global-typography-title-letter-spacing,-.00833333em)}[cds-text*=title]::before{content:"";display:block;height:0;width:0;margin-bottom:calc(((var(--cds-global-typography-top-gap-height,.1475em) + calc((var(--cds-global-typography-title-line-height,1.333333em) - 1em)/ 2))*-1) + .037em)}[cds-text*=title]::after{content:"";display:block;height:0;width:0;margin-top:calc((((1em - var(--cds-global-typography-top-gap-height,.1475em) - var(--cds-global-typography-ascender-height,.1703em) - var(--cds-global-typography-x-height,.517em)) + calc((var(--cds-global-typography-title-line-height,1.333333em) - 1em)/ 2))*-1) - .044em)}[cds-text*=section]{font-size:var(--cds-global-typography-section-font-size,calc(20 * 1rem / var(--cds-global-base,20)));font-weight:var(--cds-global-typography-section-font-weight,500);line-height:var(--cds-global-typography-section-line-height,1.2em);letter-spacing:var(--cds-global-typography-section-letter-spacing,-.01em)}[cds-text*=section]::before{content:"";display:block;height:0;width:0;margin-bottom:calc(((var(--cds-global-typography-top-gap-height,.1475em) + calc((var(--cds-global-typography-section-line-height,1.2em) - 1em)/ 2))*-1) + .037em)}[cds-text*=section]::after{content:"";display:block;height:0;width:0;margin-top:calc((((1em - var(--cds-global-typography-top-gap-height,.1475em) - var(--cds-global-typography-ascender-height,.1703em) - var(--cds-global-typography-x-height,.517em)) + calc((var(--cds-global-typography-section-line-height,1.2em) - 1em)/ 2))*-1) - .044em)}[cds-text*=subsection]{font-size:var(--cds-global-typography-subsection-font-size,calc(16 * 1rem / var(--cds-global-base,20)));font-weight:var(--cds-global-typography-subsection-font-weight,500);line-height:var(--cds-global-typography-subsection-line-height,1.5em);letter-spacing:var(--cds-global-typography-subsection-letter-spacing,-.0125em)}[cds-text*=subsection]::before{content:"";display:block;height:0;width:0;margin-bottom:calc(((var(--cds-global-typography-top-gap-height,.1475em) + calc((var(--cds-global-typography-subsection-line-height,1.5em) - 1em)/ 2))*-1) + .037em)}[cds-text*=subsection]::after{content:"";display:block;height:0;width:0;margin-top:calc((((1em - var(--cds-global-typography-top-gap-height,.1475em) - var(--cds-global-typography-ascender-height,.1703em) - var(--cds-global-typography-x-height,.517em)) + calc((var(--cds-global-typography-subsection-line-height,1.5em) - 1em)/ 2))*-1) - .044em)}[cds-text*=body]{font-weight:var(--cds-global-typography-body-font-weight,400);font-size:var(--cds-global-typography-body-font-size,calc(14 * 1rem / var(--cds-global-base,20)));letter-spacing:var(--cds-global-typography-body-letter-spacing,-.00714286em);line-height:var(--cds-global-typography-body-line-height,1.4285714em)}[cds-text*=body]::before{content:"";display:block;height:0;width:0;margin-bottom:calc(((var(--cds-global-typography-top-gap-height,.1475em) + calc((var(--cds-global-typography-body-line-height,1.4285714em) - 1em)/ 2))*-1) + .1em)}[cds-text*=body]::after{content:"";display:block;height:0;width:0;margin-top:calc((((1em - var(--cds-global-typography-top-gap-height,.1475em) - var(--cds-global-typography-ascender-height,.1703em) - var(--cds-global-typography-x-height,.517em)) + calc((var(--cds-global-typography-body-line-height,1.4285714em) - 1em)/ 2))*-1) - .044em)}body[cds-text*=body]::after,body[cds-text*=body]::before{content:none}[cds-text*=message]{font-size:var(--cds-global-typography-message-font-size,calc(16 * 1rem / var(--cds-global-base,20)));font-weight:var(--cds-global-typography-message-font-weight,calc(400 * 1rem / var(--cds-global-base,20)));line-height:var(--cds-global-typography-message-line-height,1.5em);letter-spacing:var(--cds-global-typography-message-letter-spacing,-.0125em)}[cds-text*=message]::before{content:"";display:block;height:0;width:0;margin-bottom:calc(((var(--cds-global-typography-top-gap-height,.1475em) + calc((var(--cds-global-typography-message-line-height,1.5em) - 1em)/ 2))*-1) + .037em)}[cds-text*=message]::after{content:"";display:block;height:0;width:0;margin-top:calc((((1em - var(--cds-global-typography-top-gap-height,.1475em) - var(--cds-global-typography-ascender-height,.1703em) - var(--cds-global-typography-x-height,.517em)) + calc((var(--cds-global-typography-message-line-height,1.5em) - 1em)/ 2))*-1) - .044em)}[cds-text*=secondary]{font-size:var(--cds-global-typography-secondary-font-size,calc(13 * 1rem / var(--cds-global-base,20)));font-weight:var(--cds-global-typography-secondary-font-weight,400);line-height:var(--cds-global-typography-secondary-line-height,1.23077em);letter-spacing:var(--cds-global-typography-secondary-letter-spacing,-.007692em)}[cds-text*=secondary]::before{content:"";display:block;height:0;width:0;margin-bottom:calc(((var(--cds-global-typography-top-gap-height,.1475em) + calc((var(--cds-global-typography-secondary-line-height,1.23077em) - 1em)/ 2))*-1) + .037em)}[cds-text*=secondary]::after{content:"";display:block;height:0;width:0;margin-top:calc((((1em - var(--cds-global-typography-top-gap-height,.1475em) - var(--cds-global-typography-ascender-height,.1703em) - var(--cds-global-typography-x-height,.517em)) + calc((var(--cds-global-typography-secondary-line-height,1.23077em) - 1em)/ 2))*-1) - .044em)}[cds-text~=link]{color:var(--cds-global-typography-link-color,var(--cds-global-color-blue-700,#0079ad))!important;text-decoration:underline!important;line-height:inherit!important;font-size:inherit!important}[cds-text~=link]:focus{outline:var(--cds-alias-object-interaction-outline,Highlight solid 2px);outline-offset:var(--cds-alias-object-interaction-outline-offset,1px)}[cds-text~=link]:hover{color:var(--cds-global-typography-link-color-hover,var(--cds-global-color-blue-800,#00608a))!important}[cds-text~=link]:visited:not([cds-text~=static]){color:var(--cds-global-typography-link-color-visited,var(--cds-global-color-lavender-600,#3b40ce))!important}[cds-text~=link]:visited:not([cds-text~=static]):hover{color:var(--cds-global-typography-link-color-visited-hover,var(--cds-global-color-lavender-700,#2429c2))!important}@media (-webkit-min-device-pixel-ratio:0){[cds-text=link]:focus{outline:var(--cds-alias-object-interaction-outline-webkit,5px auto -webkit-focus-ring-color)}}[cds-text~=code]{color:var(--cds-alias-status-danger,var(--cds-global-color-red-700,#e02200));font-family:monospace;font-size:1.1em}[cds-divider]{display:block;height:var(--cds-alias-object-border-width-100,calc(1 * 1rem / var(--cds-global-base,20)));overflow:hidden;box-shadow:var(--cds-alias-object-border-color,var(--cds-global-color-construction-200,#cbd4d8)) 0 0 0 var(--cds-alias-object-border-width-100,calc(1 * 1rem / var(--cds-global-base,20))) inset}[cds-text~=light]{font-weight:var(--cds-global-typography-font-weight-light,300)!important}[cds-text~=justify]{text-align:justify!important}[cds-text~=left]{text-align:left!important}[cds-text~=right]{text-align:right!important}[cds-text~=center]{text-align:center!important}[cds-text~=lhe]{padding:.05px 0}[cds-text~=lhe]::before{content:"";margin-top:-.124em;display:block;height:0}[cds-text~=lhe]::after{content:"";margin-bottom:-.221em;display:block;height:0}[cds-text*=h2],[cds-text*=h3]{font-family:var(--cds-global-typography-header-font-family, "Clarity City", "Avenir Next", sans-serif);font-size:1.4rem;font-weight:200;color:var(--cds-global-typography-color-400);line-height:1.7143em;letter-spacing:-.017857em}[cds-text*=h2]::before{content:"";display:block;height:0;width:0;margin-bottom:calc(((var(--cds-global-typography-top-gap-height,.1475em) + calc((1.7143em - 1em)/ 2))*-1) + .037em)}[cds-text*=h2]::after{content:"";display:block;height:0;width:0;margin-top:calc((((1em - var(--cds-global-typography-top-gap-height,.1475em) - var(--cds-global-typography-ascender-height,.1703em) - var(--cds-global-typography-x-height,.517em)) + calc((1.7143em - 1em)/ 2))*-1) - .044em)}[cds-text*=h3]{font-size:1.1rem;line-height:1.0909em;letter-spacing:-.013636em}[cds-text*=h3]::before{content:"";display:block;height:0;width:0;margin-bottom:calc(((var(--cds-global-typography-top-gap-height,.1475em) + calc((1.0909em - 1em)/ 2))*-1) + .037em)}[cds-text*=h3]::after{content:"";display:block;height:0;width:0;margin-top:calc((((1em - var(--cds-global-typography-top-gap-height,.1475em) - var(--cds-global-typography-ascender-height,.1703em) - var(--cds-global-typography-x-height,.517em)) + calc((1.0909em - 1em)/ 2))*-1) - .044em)}:host{all:initial;display:block;visibility:inherit;font-family:var(--cds-global-typography-font-family, "Clarity City", "Avenir Next", sans-serif);contain:layout;box-sizing:border-box!important;-webkit-appearance:none!important}*,:after,:before{box-sizing:inherit!important}slot{font-family:var(--cds-global-typography-font-family, "Clarity City", "Avenir Next", sans-serif);display:contents!important}::slotted(*){font-family:inherit;box-sizing:inherit}::slotted(*)::placeholder{color:var(--cds-global-typography-color-200,var(--cds-global-color-construction-600,#4f6169))}:host([_is-anchor]),:host([role=button]){cursor:pointer!important}:host([_is-anchor]) ::slotted(*),:host([role=button]) ::slotted(*){cursor:pointer!important}:host([role=button][disabled]){cursor:not-allowed!important}:host([role=button][disabled]) ::slotted(*){cursor:not-allowed!important;pointer-events:none}:host([hidden]),[hidden]{display:none!important}:host([hidden*=false]){display:block!important}:host([role=dialog][hidden]),:host([role=dialog][hidden]) ::slotted(*){display:block!important;visibility:hidden!important}:host([role=dialog][hidden*=false]),:host([role=dialog][hidden*=false]) ::slotted(*){visibility:visible!important}:host([_focused]) .input,:host([_focused]) [focusable],:host([tabindex="0"]:focus),:host([tabindex="0"]:focus) [focusable],[tabindex="0"][focusable]:focus{outline:Highlight solid 2px;outline:5px auto -webkit-focus-ring-color;outline-offset:var(--cds-alias-object-interaction-outline-offset,1px)}`;

// node_modules/@lit/reactive-element/development/decorators/property.js
var standardProperty = (options, element) => {
  if (element.kind === "method" && element.descriptor && !("value" in element.descriptor)) {
    return __spreadProps(__spreadValues({}, element), {
      finisher(clazz) {
        clazz.createProperty(element.key, options);
      }
    });
  } else {
    return {
      kind: "field",
      key: Symbol(),
      placement: "own",
      descriptor: {},
      // store the original key so subsequent decorators have access to it.
      originalKey: element.key,
      // When @babel/plugin-proposal-decorators implements initializers,
      // do this instead of the initializer below. See:
      // https://github.com/babel/babel/issues/9260 extras: [
      //   {
      //     kind: 'initializer',
      //     placement: 'own',
      //     initializer: descriptor.initializer,
      //   }
      // ],
      initializer() {
        if (typeof element.initializer === "function") {
          this[element.key] = element.initializer.call(this);
        }
      },
      finisher(clazz) {
        clazz.createProperty(element.key, options);
      }
    };
  }
};
var legacyProperty = (options, proto, name) => {
  proto.constructor.createProperty(name, options);
};
function property(options) {
  return (protoOrDescriptor, name) => name !== void 0 ? legacyProperty(options, protoOrDescriptor, name) : standardProperty(options, protoOrDescriptor);
}

// node_modules/ramda/es/internal/_isPlaceholder.js
function _isPlaceholder(a103) {
  return a103 != null && typeof a103 === "object" && a103["@@functional/placeholder"] === true;
}

// node_modules/ramda/es/internal/_curry1.js
function _curry1(fn) {
  return function f1(a103) {
    if (arguments.length === 0 || _isPlaceholder(a103)) {
      return f1;
    } else {
      return fn.apply(this, arguments);
    }
  };
}

// node_modules/ramda/es/internal/_curry2.js
function _curry2(fn) {
  return function f22(a103, b8) {
    switch (arguments.length) {
      case 0:
        return f22;
      case 1:
        return _isPlaceholder(a103) ? f22 : _curry1(function(_b4) {
          return fn(a103, _b4);
        });
      default:
        return _isPlaceholder(a103) && _isPlaceholder(b8) ? f22 : _isPlaceholder(a103) ? _curry1(function(_a4) {
          return fn(_a4, b8);
        }) : _isPlaceholder(b8) ? _curry1(function(_b4) {
          return fn(a103, _b4);
        }) : fn(a103, b8);
    }
  };
}

// node_modules/ramda/es/is.js
var is = _curry2(function is2(Ctor, val) {
  return val instanceof Ctor || val != null && (val.constructor === Ctor || Ctor.name === "Object" && typeof val === "object");
});
var is_default = is;

// node_modules/ramda/es/internal/_has.js
function _has(prop, obj) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

// node_modules/ramda/es/internal/_isArguments.js
var toString = Object.prototype.toString;
var _isArguments = function() {
  return toString.call(arguments) === "[object Arguments]" ? function _isArguments2(x6) {
    return toString.call(x6) === "[object Arguments]";
  } : function _isArguments2(x6) {
    return _has("callee", x6);
  };
}();
var isArguments_default = _isArguments;

// node_modules/ramda/es/internal/_isArray.js
var isArray_default = Array.isArray || function _isArray(val) {
  return val != null && val.length >= 0 && Object.prototype.toString.call(val) === "[object Array]";
};

// node_modules/ramda/es/internal/_isObject.js
function _isObject(x6) {
  return Object.prototype.toString.call(x6) === "[object Object]";
}

// node_modules/ramda/es/internal/_isString.js
function _isString(x6) {
  return Object.prototype.toString.call(x6) === "[object String]";
}

// node_modules/ramda/es/internal/_isTypedArray.js
function _isTypedArray(val) {
  var type3 = Object.prototype.toString.call(val);
  return type3 === "[object Uint8ClampedArray]" || type3 === "[object Int8Array]" || type3 === "[object Uint8Array]" || type3 === "[object Int16Array]" || type3 === "[object Uint16Array]" || type3 === "[object Int32Array]" || type3 === "[object Uint32Array]" || type3 === "[object Float32Array]" || type3 === "[object Float64Array]" || type3 === "[object BigInt64Array]" || type3 === "[object BigUint64Array]";
}

// node_modules/ramda/es/empty.js
var empty = _curry1(function empty2(x6) {
  return x6 != null && typeof x6["fantasy-land/empty"] === "function" ? x6["fantasy-land/empty"]() : x6 != null && x6.constructor != null && typeof x6.constructor["fantasy-land/empty"] === "function" ? x6.constructor["fantasy-land/empty"]() : x6 != null && typeof x6.empty === "function" ? x6.empty() : x6 != null && x6.constructor != null && typeof x6.constructor.empty === "function" ? x6.constructor.empty() : isArray_default(x6) ? [] : _isString(x6) ? "" : _isObject(x6) ? {} : isArguments_default(x6) ? /* @__PURE__ */ function() {
    return arguments;
  }() : _isTypedArray(x6) ? x6.constructor.from("") : void 0;
});
var empty_default = empty;

// node_modules/ramda/es/internal/_arrayFromIterator.js
function _arrayFromIterator(iter) {
  var list = [];
  var next;
  while (!(next = iter.next()).done) {
    list.push(next.value);
  }
  return list;
}

// node_modules/ramda/es/internal/_includesWith.js
function _includesWith(pred, x6, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    if (pred(x6, list[idx])) {
      return true;
    }
    idx += 1;
  }
  return false;
}

// node_modules/ramda/es/internal/_functionName.js
function _functionName(f10) {
  var match = String(f10).match(/^function (\w*)/);
  return match == null ? "" : match[1];
}

// node_modules/ramda/es/internal/_objectIs.js
function _objectIs(a103, b8) {
  if (a103 === b8) {
    return a103 !== 0 || 1 / a103 === 1 / b8;
  } else {
    return a103 !== a103 && b8 !== b8;
  }
}
var objectIs_default = typeof Object.is === "function" ? Object.is : _objectIs;

// node_modules/ramda/es/keys.js
var hasEnumBug = !{
  toString: null
}.propertyIsEnumerable("toString");
var nonEnumerableProps = ["constructor", "valueOf", "isPrototypeOf", "toString", "propertyIsEnumerable", "hasOwnProperty", "toLocaleString"];
var hasArgsEnumBug = function() {
  "use strict";
  return arguments.propertyIsEnumerable("length");
}();
var contains = function contains2(list, item) {
  var idx = 0;
  while (idx < list.length) {
    if (list[idx] === item) {
      return true;
    }
    idx += 1;
  }
  return false;
};
var keys = typeof Object.keys === "function" && !hasArgsEnumBug ? _curry1(function keys2(obj) {
  return Object(obj) !== obj ? [] : Object.keys(obj);
}) : _curry1(function keys3(obj) {
  if (Object(obj) !== obj) {
    return [];
  }
  var prop, nIdx;
  var ks = [];
  var checkArgsLength = hasArgsEnumBug && isArguments_default(obj);
  for (prop in obj) {
    if (_has(prop, obj) && (!checkArgsLength || prop !== "length")) {
      ks[ks.length] = prop;
    }
  }
  if (hasEnumBug) {
    nIdx = nonEnumerableProps.length - 1;
    while (nIdx >= 0) {
      prop = nonEnumerableProps[nIdx];
      if (_has(prop, obj) && !contains(ks, prop)) {
        ks[ks.length] = prop;
      }
      nIdx -= 1;
    }
  }
  return ks;
});
var keys_default = keys;

// node_modules/ramda/es/type.js
var type = _curry1(function type2(val) {
  return val === null ? "Null" : val === void 0 ? "Undefined" : Object.prototype.toString.call(val).slice(8, -1);
});
var type_default = type;

// node_modules/ramda/es/internal/_equals.js
function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
  var a103 = _arrayFromIterator(aIterator);
  var b8 = _arrayFromIterator(bIterator);
  function eq(_a4, _b4) {
    return _equals(_a4, _b4, stackA.slice(), stackB.slice());
  }
  return !_includesWith(function(b9, aItem) {
    return !_includesWith(eq, aItem, b9);
  }, b8, a103);
}
function _equals(a103, b8, stackA, stackB) {
  if (objectIs_default(a103, b8)) {
    return true;
  }
  var typeA = type_default(a103);
  if (typeA !== type_default(b8)) {
    return false;
  }
  if (typeof a103["fantasy-land/equals"] === "function" || typeof b8["fantasy-land/equals"] === "function") {
    return typeof a103["fantasy-land/equals"] === "function" && a103["fantasy-land/equals"](b8) && typeof b8["fantasy-land/equals"] === "function" && b8["fantasy-land/equals"](a103);
  }
  if (typeof a103.equals === "function" || typeof b8.equals === "function") {
    return typeof a103.equals === "function" && a103.equals(b8) && typeof b8.equals === "function" && b8.equals(a103);
  }
  switch (typeA) {
    case "Arguments":
    case "Array":
    case "Object":
      if (typeof a103.constructor === "function" && _functionName(a103.constructor) === "Promise") {
        return a103 === b8;
      }
      break;
    case "Boolean":
    case "Number":
    case "String":
      if (!(typeof a103 === typeof b8 && objectIs_default(a103.valueOf(), b8.valueOf()))) {
        return false;
      }
      break;
    case "Date":
      if (!objectIs_default(a103.valueOf(), b8.valueOf())) {
        return false;
      }
      break;
    case "Error":
      return a103.name === b8.name && a103.message === b8.message;
    case "RegExp":
      if (!(a103.source === b8.source && a103.global === b8.global && a103.ignoreCase === b8.ignoreCase && a103.multiline === b8.multiline && a103.sticky === b8.sticky && a103.unicode === b8.unicode)) {
        return false;
      }
      break;
  }
  var idx = stackA.length - 1;
  while (idx >= 0) {
    if (stackA[idx] === a103) {
      return stackB[idx] === b8;
    }
    idx -= 1;
  }
  switch (typeA) {
    case "Map":
      if (a103.size !== b8.size) {
        return false;
      }
      return _uniqContentEquals(a103.entries(), b8.entries(), stackA.concat([a103]), stackB.concat([b8]));
    case "Set":
      if (a103.size !== b8.size) {
        return false;
      }
      return _uniqContentEquals(a103.values(), b8.values(), stackA.concat([a103]), stackB.concat([b8]));
    case "Arguments":
    case "Array":
    case "Object":
    case "Boolean":
    case "Number":
    case "String":
    case "Date":
    case "Error":
    case "RegExp":
    case "Int8Array":
    case "Uint8Array":
    case "Uint8ClampedArray":
    case "Int16Array":
    case "Uint16Array":
    case "Int32Array":
    case "Uint32Array":
    case "Float32Array":
    case "Float64Array":
    case "ArrayBuffer":
      break;
    default:
      return false;
  }
  var keysA = keys_default(a103);
  if (keysA.length !== keys_default(b8).length) {
    return false;
  }
  var extendedStackA = stackA.concat([a103]);
  var extendedStackB = stackB.concat([b8]);
  idx = keysA.length - 1;
  while (idx >= 0) {
    var key = keysA[idx];
    if (!(_has(key, b8) && _equals(b8[key], a103[key], extendedStackA, extendedStackB))) {
      return false;
    }
    idx -= 1;
  }
  return true;
}

// node_modules/ramda/es/equals.js
var equals = _curry2(function equals2(a103, b8) {
  return _equals(a103, b8, [], []);
});
var equals_default = equals;

// node_modules/ramda/es/isEmpty.js
var isEmpty = _curry1(function isEmpty2(x6) {
  return x6 != null && equals_default(x6, empty_default(x6));
});
var isEmpty_default = isEmpty;

// node_modules/@cds/core/internal/utils/identity.js
function r(t161) {
  return null == t161;
}
function e3(t161) {
  return r(t161) || isEmpty_default(t161);
}
function u(n40) {
  return is_default(String, n40);
}
function i(t161) {
  return u(t161) && !isEmpty_default(t161.trim()) && +t161 == +t161;
}
function c(n40) {
  return is_default(String, n40) || r(n40);
}
function f(n40) {
  return is_default(Object, n40);
}
function a2(n40) {
  return is_default(Map, n40);
}
function l(t161, n40) {
  return t161 !== n40;
}
function d2(t161, n40) {
  return c(t161) && l(t161, n40);
}
function h(t161, n40) {
  return !e3(t161) && l(t161, n40);
}
function p(t161 = "_") {
  return `${t161}${Math.random().toString(36).substr(2, 9)}`;
}
function g(t161, n40) {
  return JSON.stringify(t161) === JSON.stringify(n40);
}
function y(t161, n40, r94 = `\${${t161}}`) {
  return t161.split(".").reduce((t162, n41) => {
    try {
      const e83 = t162[n41];
      switch (true) {
        case null === e83:
        case false === e83:
        case "" === e83:
        case 0 === e83:
          return e83;
        default:
          return e83 || r94;
      }
    } catch {
      return r94;
    }
  }, n40);
}
function A(t161) {
  const n40 = /* @__PURE__ */ new Map();
  for (const [r94, e83] of t161)
    a2(e83) ? n40.set(r94, A(e83)) : n40.set(r94, e83);
  return n40;
}
function b(t161) {
  switch (true) {
    case a2(t161):
      return A(t161);
    case (f(t161) && !Array.isArray(t161)):
      return x({}, t161);
    default:
      return JSON.parse(JSON.stringify(t161));
  }
}
function x(...t161) {
  const n40 = {};
  return t161.map((t162) => f(t162) ? __spreadValues({}, t162) : {}).forEach((t162) => {
    Object.keys(t162).forEach((r94) => {
      const e83 = t162[r94];
      Array.isArray(e83) ? n40[r94] = Array.from(e83) : f(e83) ? n40[r94] = x(n40[r94] || {}, e83) : n40[r94] = e83;
    });
  }), n40;
}

// node_modules/@cds/core/internal/utils/string.js
function c2(t161) {
  return t161.replace(/[A-Z]/g, (t162) => "-" + t162.toLowerCase());
}
function o2(t161) {
  return t161.split("-").map((t162, n40) => n40 ? t162.charAt(0).toUpperCase() + t162.slice(1).toLowerCase() : t162).join("");
}
function f2(t161) {
  return a3(o2(t161));
}
function a3(t161) {
  return t161.charAt(0).toUpperCase() + t161.slice(1);
}
function w(t161, n40, r94 = "") {
  const e83 = t161.split(" "), u11 = "" === r94 ? e83.filter((t162) => t162 !== n40) : e83.map((t162) => t162 === n40 ? r94 : t162);
  return u11.length > 0 ? u11.join(" ") : "";
}
function P(t161, n40, e83) {
  return t161.replace(/\$\{.+?\}/g, (t162) => {
    const u11 = t162.substr(2, t162.length - 3).trim();
    return y(u11, n40, e83);
  });
}

// node_modules/ramda/es/internal/_arity.js
function _arity(n40, fn) {
  switch (n40) {
    case 0:
      return function() {
        return fn.apply(this, arguments);
      };
    case 1:
      return function(a0) {
        return fn.apply(this, arguments);
      };
    case 2:
      return function(a0, a1) {
        return fn.apply(this, arguments);
      };
    case 3:
      return function(a0, a1, a210) {
        return fn.apply(this, arguments);
      };
    case 4:
      return function(a0, a1, a210, a310) {
        return fn.apply(this, arguments);
      };
    case 5:
      return function(a0, a1, a210, a310, a410) {
        return fn.apply(this, arguments);
      };
    case 6:
      return function(a0, a1, a210, a310, a410, a510) {
        return fn.apply(this, arguments);
      };
    case 7:
      return function(a0, a1, a210, a310, a410, a510, a610) {
        return fn.apply(this, arguments);
      };
    case 8:
      return function(a0, a1, a210, a310, a410, a510, a610, a710) {
        return fn.apply(this, arguments);
      };
    case 9:
      return function(a0, a1, a210, a310, a410, a510, a610, a710, a810) {
        return fn.apply(this, arguments);
      };
    case 10:
      return function(a0, a1, a210, a310, a410, a510, a610, a710, a810, a910) {
        return fn.apply(this, arguments);
      };
    default:
      throw new Error("First argument to _arity must be a non-negative integer no greater than ten");
  }
}

// node_modules/ramda/es/internal/_curryN.js
function _curryN(length, received, fn) {
  return function() {
    var combined = [];
    var argsIdx = 0;
    var left = length;
    var combinedIdx = 0;
    var hasPlaceholder = false;
    while (combinedIdx < received.length || argsIdx < arguments.length) {
      var result;
      if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
        result = received[combinedIdx];
      } else {
        result = arguments[argsIdx];
        argsIdx += 1;
      }
      combined[combinedIdx] = result;
      if (!_isPlaceholder(result)) {
        left -= 1;
      } else {
        hasPlaceholder = true;
      }
      combinedIdx += 1;
    }
    return !hasPlaceholder && left <= 0 ? fn.apply(this, combined) : _arity(Math.max(0, left), _curryN(length, combined, fn));
  };
}

// node_modules/ramda/es/curryN.js
var curryN = _curry2(function curryN2(length, fn) {
  if (length === 1) {
    return _curry1(fn);
  }
  return _arity(length, _curryN(length, [], fn));
});
var curryN_default = curryN;

// node_modules/ramda/es/internal/_isInteger.js
var isInteger_default = Number.isInteger || function _isInteger(n40) {
  return n40 << 0 === n40;
};

// node_modules/ramda/es/nth.js
var nth = _curry2(function nth2(offset, list) {
  var idx = offset < 0 ? list.length + offset : offset;
  return _isString(list) ? list.charAt(idx) : list[idx];
});
var nth_default = nth;

// node_modules/ramda/es/paths.js
var paths = _curry2(function paths2(pathsArray, obj) {
  return pathsArray.map(function(paths3) {
    var val = obj;
    var idx = 0;
    var p14;
    while (idx < paths3.length) {
      if (val == null) {
        return;
      }
      p14 = paths3[idx];
      val = isInteger_default(p14) ? nth_default(p14, val) : val[p14];
      idx += 1;
    }
    return val;
  });
});
var paths_default = paths;

// node_modules/ramda/es/path.js
var path = _curry2(function path2(pathAr, obj) {
  return paths_default([pathAr], obj)[0];
});
var path_default = path;

// node_modules/@cds/core/internal/utils/__.js
var a4 = { "@@functional/placeholder": true };

// node_modules/@cds/core/internal/utils/exists.js
var m = curryN_default(2, (o88, t161) => void 0 !== path_default(o88, t161));
function n(o88, r94) {
  return r94 || (r94 = window && window.customElements), !r94 || !!r94.get(o88);
}
var i2 = m(a4, window);

// node_modules/@cds/core/internal/services/log.service.js
var n2 = class {
  static log(...o88) {
    t3() && r2() && console.log(...o88);
  }
  static warn(...o88) {
    t3() && r2() && console.warn(...o88);
  }
  static error(...o88) {
    t3() && r2() && console.error(...o88);
  }
};
function r2() {
  return !i2(["jasmine"]);
}
function t3() {
  return !window.CDS.environment.production;
}

// node_modules/@cds/core/internal/utils/framework.js
var n3;
var e4;
var o3;
var t4;
function r3(e83 = true) {
  if (!e83 || !n3) {
    const e84 = document && document.querySelector("[ng-version]");
    n3 = e84 ? "" + e84.getAttribute("ng-version") : void 0;
  }
  return n3;
}
function i3(o88 = true) {
  return o88 && n3 || (e4 = window?.angular?.version?.full), e4;
}
function u2(n40 = true) {
  return n40 && o3 || (o3 = window?.CDS?._react?.version ? window.CDS._react.version : document.querySelector("[data-reactroot], [data-reactid]") ? "unknown version" : void 0), o3;
}
function c3(n40 = true) {
  if (!n40 || !t4) {
    const n41 = document.querySelectorAll("*");
    let e83;
    for (let o88 = 0; o88 < n41.length; o88++)
      if (n41[o88].__vue__) {
        e83 = n41[o88];
        break;
      }
    t4 = e83 ? "unknown version" : void 0;
  }
  return t4;
}
function l2() {
  return window?.location?.href?.includes("localhost:6006");
}

// node_modules/ramda/es/internal/_indexOf.js
function _indexOf(list, a103, idx) {
  var inf, item;
  if (typeof list.indexOf === "function") {
    switch (typeof a103) {
      case "number":
        if (a103 === 0) {
          inf = 1 / a103;
          while (idx < list.length) {
            item = list[idx];
            if (item === 0 && 1 / item === inf) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        } else if (a103 !== a103) {
          while (idx < list.length) {
            item = list[idx];
            if (typeof item === "number" && item !== item) {
              return idx;
            }
            idx += 1;
          }
          return -1;
        }
        return list.indexOf(a103, idx);
      case "string":
      case "boolean":
      case "function":
      case "undefined":
        return list.indexOf(a103, idx);
      case "object":
        if (a103 === null) {
          return list.indexOf(a103, idx);
        }
    }
  }
  while (idx < list.length) {
    if (equals_default(list[idx], a103)) {
      return idx;
    }
    idx += 1;
  }
  return -1;
}

// node_modules/ramda/es/internal/_includes.js
function _includes(a103, list) {
  return _indexOf(list, a103, 0) >= 0;
}

// node_modules/ramda/es/includes.js
var includes = _curry2(_includes);

// node_modules/ramda/es/internal/_Set.js
var _Set = function() {
  function _Set2() {
    this._nativeSet = typeof Set === "function" ? /* @__PURE__ */ new Set() : null;
    this._items = {};
  }
  _Set2.prototype.add = function(item) {
    return !hasOrAdd(item, true, this);
  };
  _Set2.prototype.has = function(item) {
    return hasOrAdd(item, false, this);
  };
  return _Set2;
}();
function hasOrAdd(item, shouldAdd, set) {
  var type3 = typeof item;
  var prevSize, newSize;
  switch (type3) {
    case "string":
    case "number":
      if (item === 0 && 1 / item === -Infinity) {
        if (set._items["-0"]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items["-0"] = true;
          }
          return false;
        }
      }
      if (set._nativeSet !== null) {
        if (shouldAdd) {
          prevSize = set._nativeSet.size;
          set._nativeSet.add(item);
          newSize = set._nativeSet.size;
          return newSize === prevSize;
        } else {
          return set._nativeSet.has(item);
        }
      } else {
        if (!(type3 in set._items)) {
          if (shouldAdd) {
            set._items[type3] = {};
            set._items[type3][item] = true;
          }
          return false;
        } else if (item in set._items[type3]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items[type3][item] = true;
          }
          return false;
        }
      }
    case "boolean":
      if (type3 in set._items) {
        var bIdx = item ? 1 : 0;
        if (set._items[type3][bIdx]) {
          return true;
        } else {
          if (shouldAdd) {
            set._items[type3][bIdx] = true;
          }
          return false;
        }
      } else {
        if (shouldAdd) {
          set._items[type3] = item ? [false, true] : [true, false];
        }
        return false;
      }
    case "function":
      if (set._nativeSet !== null) {
        if (shouldAdd) {
          prevSize = set._nativeSet.size;
          set._nativeSet.add(item);
          newSize = set._nativeSet.size;
          return newSize === prevSize;
        } else {
          return set._nativeSet.has(item);
        }
      } else {
        if (!(type3 in set._items)) {
          if (shouldAdd) {
            set._items[type3] = [item];
          }
          return false;
        }
        if (!_includes(item, set._items[type3])) {
          if (shouldAdd) {
            set._items[type3].push(item);
          }
          return false;
        }
        return true;
      }
    case "undefined":
      if (set._items[type3]) {
        return true;
      } else {
        if (shouldAdd) {
          set._items[type3] = true;
        }
        return false;
      }
    case "object":
      if (item === null) {
        if (!set._items["null"]) {
          if (shouldAdd) {
            set._items["null"] = true;
          }
          return false;
        }
        return true;
      }
    default:
      type3 = Object.prototype.toString.call(item);
      if (!(type3 in set._items)) {
        if (shouldAdd) {
          set._items[type3] = [item];
        }
        return false;
      }
      if (!_includes(item, set._items[type3])) {
        if (shouldAdd) {
          set._items[type3].push(item);
        }
        return false;
      }
      return true;
  }
}
var Set_default = _Set;

// node_modules/ramda/es/internal/_complement.js
function _complement(f10) {
  return function() {
    return !f10.apply(this, arguments);
  };
}

// node_modules/ramda/es/internal/_arrayReduce.js
function _arrayReduce(reducer, acc, list) {
  var index = 0;
  var length = list.length;
  while (index < length) {
    acc = reducer(acc, list[index]);
    index += 1;
  }
  return acc;
}

// node_modules/ramda/es/internal/_isTransformer.js
function _isTransformer(obj) {
  return obj != null && typeof obj["@@transducer/step"] === "function";
}

// node_modules/ramda/es/internal/_dispatchable.js
function _dispatchable(methodNames, transducerCreator, fn) {
  return function() {
    if (arguments.length === 0) {
      return fn();
    }
    var obj = arguments[arguments.length - 1];
    if (!isArray_default(obj)) {
      var idx = 0;
      while (idx < methodNames.length) {
        if (typeof obj[methodNames[idx]] === "function") {
          return obj[methodNames[idx]].apply(obj, Array.prototype.slice.call(arguments, 0, -1));
        }
        idx += 1;
      }
      if (_isTransformer(obj)) {
        var transducer = transducerCreator.apply(null, Array.prototype.slice.call(arguments, 0, -1));
        return transducer(obj);
      }
    }
    return fn.apply(this, arguments);
  };
}

// node_modules/ramda/es/internal/_filter.js
function _filter(fn, list) {
  var idx = 0;
  var len = list.length;
  var result = [];
  while (idx < len) {
    if (fn(list[idx])) {
      result[result.length] = list[idx];
    }
    idx += 1;
  }
  return result;
}

// node_modules/ramda/es/internal/_xfBase.js
var xfBase_default = {
  init: function() {
    return this.xf["@@transducer/init"]();
  },
  result: function(result) {
    return this.xf["@@transducer/result"](result);
  }
};

// node_modules/ramda/es/internal/_xfilter.js
var XFilter = function() {
  function XFilter2(f10, xf) {
    this.xf = xf;
    this.f = f10;
  }
  XFilter2.prototype["@@transducer/init"] = xfBase_default.init;
  XFilter2.prototype["@@transducer/result"] = xfBase_default.result;
  XFilter2.prototype["@@transducer/step"] = function(result, input) {
    return this.f(input) ? this.xf["@@transducer/step"](result, input) : result;
  };
  return XFilter2;
}();
function _xfilter(f10) {
  return function(xf) {
    return new XFilter(f10, xf);
  };
}

// node_modules/ramda/es/filter.js
var filter2 = _curry2(
  _dispatchable(["fantasy-land/filter", "filter"], _xfilter, function(pred, filterable) {
    return _isObject(filterable) ? _arrayReduce(function(acc, key) {
      if (pred(filterable[key])) {
        acc[key] = filterable[key];
      }
      return acc;
    }, {}, keys_default(filterable)) : (
      // else
      _filter(pred, filterable)
    );
  })
);
var filter_default = filter2;

// node_modules/ramda/es/reject.js
var reject = _curry2(function reject2(pred, filterable) {
  return filter_default(_complement(pred), filterable);
});
var reject_default = reject;

// node_modules/ramda/es/without.js
var without = _curry2(function without2(xs, list) {
  var toRemove = new Set_default();
  for (var i35 = 0; i35 < xs.length; i35 += 1) {
    toRemove.add(xs[i35]);
  }
  return reject_default(toRemove.has.bind(toRemove), list);
});

// node_modules/@cds/core/internal/utils/css.js
function u3(t161, ...e83) {
  return e83.forEach(([e84, n40]) => {
    t161.style[e84] = n40;
  }), t161;
}
function a5(t161, ...e83) {
  return e83.forEach((e84) => {
    t161.style[e84] = "";
  }), t161;
}
function c4(t161) {
  return `calc((${t161} / var(--cds-global-base)) * 1rem)`;
}

// node_modules/@cds/core/internal/utils/dom.js
var d3 = ["a[href]", "area[href]", "audio[controls]", "button:not([disabled])", 'input:not([type="hidden"]):not([disabled]):not([readonly])', "iframe", "object", "embed", "select:not([disabled])", "textarea:not([disabled])", "video[controls]", "*[contenteditable=true]", "[role=button]:not([disabled])"];
var l3 = ["*[tabindex]", ...d3];
var f3 = ['*[tabindex]:not([tabindex="-1"])', ...d3];
function L2(t161) {
  return null != t161 && "" + t161 != "false";
}

// node_modules/@cds/core/internal/decorators/property.js
function f4(t161, e83) {
  switch (e83 ? e83.type : e83) {
    case Array:
    case Object:
      return __spreadValues({ reflect: false }, e83);
    case String:
      return __spreadValues({ reflect: true, attribute: c2(t161), converter: { toAttribute: (t162) => t162 || null } }, e83);
    case Number:
      return __spreadValues({ reflect: true, attribute: c2(t161) }, e83);
    case Boolean:
      return __spreadValues({ reflect: true, attribute: c2(t161), converter: { toAttribute: (t162) => t162 ? "" : null, fromAttribute: (t162) => L2(t162) } }, e83);
    case Date:
      return __spreadValues({ reflect: false, converter: { fromAttribute: (t162) => new Date(t162) } }, e83);
    default:
      return __spreadValues({}, e83);
  }
}
function l4(t161, a103, f10) {
  const l96 = t161.firstUpdated;
  t161.firstUpdated = function(t162) {
    if (f10 && f10.required && e3(this[a103])) {
      const t163 = f10.requiredMessage || function(t164 = "warning", n40, s27) {
        const a104 = s27.toLocaleLowerCase();
        return `${a3(t164)}: ${n40} is required to use ${a104} component. Set the JS Property or HTML Attribute.

` + (r3() ? `Angular: <${a104} [${n40}]="..."></${a104}>
` : "") + (c3() ? `Vue: <${a104} :${n40}="..."></${a104}>
` : "") + (u2() ? `React: <${f2(a104)} ${function(t165) {
          return t165.startsWith("aria") ? c2(t165) : t165;
        }(n40)}={...} />
` : "") + `HTML: <${a104} ${c2(n40)}="..."></${a104}>
JavaScript: document.querySelector('${a104}').${n40} = '...';

`;
      }(f10.required, a103, this.tagName);
      if ("error" === f10.required)
        throw Error(t163);
      n2.warn(t163, this);
    }
    l96 && l96.call(this, t162);
  };
}
function m2(r94) {
  return (e83, i35) => (r94?.required && l4(e83, i35, r94), property(f4(i35, r94))(e83, i35));
}
function p2(e83) {
  return (i35, n40) => {
    const o88 = f4(n40, e83);
    return o88 && (o88.reflect = !!e83?.reflect && e83.reflect, o88.reflect && !e83?.attribute && (o88.attribute = "_" + c2(n40))), property(o88)(i35, n40);
  };
}

// node_modules/@cds/core/internal/controllers/active.controller.js
function t5() {
  return (t161) => t161.addInitializer((t162) => new e5(t162));
}
var e5 = class {
  constructor(t161) {
    this.host = t161, this.host.addController(this);
  }
  hostConnected() {
    return __async(this, null, function* () {
      yield this.host.updateComplete, this.host.addEventListener("keydown", (t161) => this.emulateActive(t161)), this.host.addEventListener("mousedown", (t161) => this.emulateActive(t161)), this.host.addEventListener("keyup", () => this.emulateInactive()), this.host.addEventListener("blur", () => this.emulateInactive()), this.host.addEventListener("mouseup", () => this.emulateInactive());
    });
  }
  emulateActive(t161) {
    this.host.disabled || this.host?.setAttribute("cds-active", ""), "Space" === t161.code && t161.target === this.host && t161.preventDefault();
  }
  emulateInactive() {
    this.host.removeAttribute("cds-active");
  }
};

// node_modules/@cds/core/internal/controllers/aria-popup-trigger.controller.js
function t6() {
  return (t161) => t161.addInitializer((t162) => new s3(t162));
}
var s3 = class {
  constructor(t161) {
    this.host = t161, this.host.addController(this);
  }
  hostConnected() {
    (this.host.hasAttribute("aria-controls") || this.host.ariaControls) && (this.host.ariaHasPopup = "true", this.host.ariaExpanded = "false");
  }
};

// node_modules/@cds/core/internal/controllers/aria-disabled.controller.js
function t7() {
  return (t161) => t161.addInitializer((t162) => new s4(t162));
}
var s4 = class {
  constructor(t161) {
    this.host = t161, this.host.addController(this);
  }
  hostUpdated() {
    null !== this.host.disabled && (this.host.ariaDisabled = this.host.disabled), this.host.readonly && (this.host.ariaDisabled = null);
  }
};

// node_modules/@cds/core/internal/controllers/aria-pressed.controller.js
function s5() {
  return (s27) => s27.addInitializer((s28) => new t8(s28));
}
var t8 = class {
  constructor(s27) {
    this.host = s27, this.host.addController(this);
  }
  hostUpdated() {
    null !== this.host.pressed && void 0 !== this.host.pressed && (this.host.ariaPressed = this.host.pressed ? "true" : "false"), this.host.readonly && (this.host.ariaPressed = null);
  }
};

// node_modules/@cds/core/internal/controllers/aria-button.controller.js
function t9() {
  return (t161) => t161.addInitializer((t162) => new s6(t162));
}
var s6 = class {
  constructor(t161) {
    this.host = t161, this.host.addController(this);
  }
  hostConnected() {
    this.host.tabIndex = 0;
  }
  hostUpdated() {
    this.host.role = this.host.readonly ? null : "button", this.host.tabIndex = this.host.disabled ? -1 : 0, this.host.readonly && this.host.removeAttribute("tabindex");
  }
};

// node_modules/@cds/core/internal/controllers/button-anchor.controller.js
function t10() {
  return (t161) => t161.addInitializer((t162) => new r4(t162));
}
var r4 = class {
  constructor(t161) {
    this.host = t161, this.host.addController(this);
  }
  get currentAnchor() {
    return "A" === this.host.parentElement?.tagName ? this.host.parentElement : null;
  }
  hostConnected() {
    this.setAnchor();
  }
  hostUpdated() {
    this.setAnchor();
  }
  setAnchor() {
    this.currentAnchor && this.currentAnchor !== this.previousAnchor && (this.previousAnchor = this.currentAnchor, this.host.readonly = true, this.currentAnchor.style.lineHeight = "0", this.currentAnchor.style.textDecoration = "none");
  }
};

// node_modules/lit-html/development/directives/if-defined.js
var ifDefined = (value) => value !== null && value !== void 0 ? value : nothing;

// node_modules/@cds/core/internal/utils/environment.js
function o4(o88 = window) {
  return !r(o88);
}

// node_modules/@cds/core/internal/utils/events.js
function t11(e83) {
  e83.preventDefault(), e83.stopPropagation();
}
function s7(e83, t161, n40) {
  const r94 = new MutationObserver((r95) => {
    r95.find((e84) => e84.attributeName === t161) && n40(e83.getAttribute(t161));
  });
  return r94.observe(e83, { attributes: true }), r94;
}

// node_modules/@cds/core/internal/services/keycodes.service.js
var r5 = /* @__PURE__ */ new Map([["arrow-left", "ArrowLeft"], ["arrow-right", "ArrowRight"], ["arrow-up", "ArrowUp"], ["arrow-down", "ArrowDown"], ["tab", "Tab"], ["enter", "Enter"], ["escape", "Escape"], ["space", " "], ["home", "Home"], ["end", "End"]]);
var e7 = class {
  static get keycodes() {
    return b(r5);
  }
  static add(t161, e83) {
    r5.set(t161, e83);
  }
  static has(t161) {
    return r5.has(t161);
  }
  static getCode(t161, r94 = this.keycodes) {
    return o5(t161, r94);
  }
};
function o5(t161, r94) {
  return r94.get(t161) || "";
}

// node_modules/@cds/core/internal/utils/keycodes.js
function r6(r94, t161) {
  return e7.getCode(t161) === r94.key;
}
function n4(e83, t161, n40) {
  e83.filter((e84) => r6(t161, e84)).length > 0 && n40();
}
var w2;
!function(e83) {
  e83.ArrowUp = "ArrowUp", e83.ArrowDown = "ArrowDown", e83.ArrowLeft = "ArrowLeft", e83.ArrowRight = "ArrowRight", e83.End = "End", e83.Home = "Home", e83.PageUp = "PageUp", e83.PageDown = "PageDown";
}(w2 || (w2 = {}));

// node_modules/@cds/core/internal/utils/lit.js
function c5(r94, n40, o88) {
  const t161 = document.createElement("div");
  n40.prepend(t161), render(r94, n40, __spreadValues({ renderBefore: t161 }, o88));
  const i35 = t161.previousSibling;
  return t161.remove(), i35;
}
function f5(r94, n40, o88) {
  const t161 = document.createElement("div");
  n40.appendChild(t161), render(r94, n40, __spreadValues({ renderBefore: t161 }, o88));
  const i35 = t161.previousSibling;
  return t161.remove(), i35;
}

// node_modules/@cds/core/internal/controllers/button-submit.controller.js
function r7() {
  return (t161) => t161.addInitializer((t162) => new h2(t162));
}
var h2 = class {
  constructor(t161) {
    this.host = t161, this.triggerNativeButtonBehaviorHandler = this.triggerNativeButtonBehavior.bind(this), this.emulateKeyBoardEventBehaviorHandler = this.emulateKeyBoardEventBehavior.bind(this), this.host.addController(this);
  }
  hostUpdated() {
    this.setButtonType(), this.setupNativeButtonBehavior();
  }
  setButtonType() {
    !this.host.type && this.host.closest("form") && (this.host.type = "submit");
  }
  setupNativeButtonBehavior() {
    this.host.readonly || this.host.disabled ? (this.host.removeEventListener("click", this.triggerNativeButtonBehaviorHandler), this.host.removeEventListener("keyup", this.emulateKeyBoardEventBehaviorHandler)) : (this.host.addEventListener("click", this.triggerNativeButtonBehaviorHandler), this.host.addEventListener("keyup", this.emulateKeyBoardEventBehaviorHandler));
  }
  emulateKeyBoardEventBehavior(t161) {
    n4(["enter", "space"], t161, () => {
      "submit" === this.host.type ? this.triggerNativeButtonBehavior(t161) : this.host.click(), t11(t161);
    });
  }
  triggerNativeButtonBehavior(s27) {
    if (this.host.disabled)
      t11(s27);
    else if (!s27.defaultPrevented) {
      const i35 = f5(html`<button aria-hidden="true" role="presentation" ?disabled="${this.host.disabled}" tabindex="-1" style="display:none!important" value="${ifDefined(this.host.value)}" name="${ifDefined(this.host.name)}" type="${ifDefined(this.host.type)}"></button>`, this.host);
      i35?.dispatchEvent(new MouseEvent("click", { relatedTarget: this.host, composed: true })), i35?.remove();
    }
  }
};

// node_modules/@cds/core/internal/controllers/aria-expanded.controller.js
function t12() {
  return (t161) => t161.addInitializer((t162) => new s8(t162));
}
var s8 = class {
  constructor(t161) {
    this.host = t161, this.host.addController(this);
  }
  hostUpdated() {
    null !== this.host.expanded && void 0 !== this.host.expanded && (this.host.ariaExpanded = this.host.expanded ? "true" : "false"), this.host.readonly && (this.host.ariaExpanded = null);
  }
};

// node_modules/@cds/core/internal/base/button.base.js
var m3 = class extends LitElement {
  constructor() {
    super(...arguments);
    this._disabled = false;
  }
  get disabled() {
    return this._disabled;
  }
  set disabled(o88) {
    const r94 = this._disabled;
    this._disabled = o88, this.requestUpdate("disabled", r94);
  }
};
__decorate([m2({ type: Boolean })], m3.prototype, "pressed", void 0), __decorate([m2({ type: Boolean })], m3.prototype, "expanded", void 0), __decorate([m2({ type: Boolean })], m3.prototype, "readonly", void 0), __decorate([m2({ type: String })], m3.prototype, "type", void 0), __decorate([m2({ type: String })], m3.prototype, "name", void 0), __decorate([m2({ type: String })], m3.prototype, "value", void 0), __decorate([m2({ type: Boolean })], m3.prototype, "disabled", null), __decorate([m2({ type: String })], m3.prototype, "popup", void 0), m3 = __decorate([t5(), t9(), s5(), t12(), t7(), t6(), r7(), t10()], m3);

// node_modules/@cds/core/internal/utils/focus.js
function t13(e83) {
  return e83.matches("a[href],area[href],input:not([disabled]),button:not([disabled]),select:not([disabled]),textarea:not([disabled]),iframe,object,embed,*[tabindex],*[contenteditable=true],[role=button]:not([disabled])");
}
function a6(e83) {
  e83 && !t13(e83) ? (e83.setAttribute("tabindex", "-1"), e83.focus(), e83.addEventListener("blur", () => e83.removeAttribute("tabindex"), { once: true })) : e83?.focus();
}
function d4(e83, t161) {
  e83.addEventListener("focusout", (n40) => {
    !e83.contains(n40.relatedTarget) && document.hasFocus() && t161();
  });
}
function i4(t161, n40) {
  t161.addEventListener("keyup", (t162) => {
    "Escape" === t162.code && (t11(t162), n40());
  });
}
function c6(e83) {
  return true === e83.cdsIgnoreFocus || e83.hasAttribute("cds-ignore-focus") || e83.hasAttribute("_demo-mode");
}

// node_modules/@cds/core/internal/utils/traversal.js
function r8(r94, t161 = 10) {
  return n5(r94, t161).filter((r95) => t13(r95));
}
function n5(e83, r94 = 10) {
  return Array.from(t14(e83)).reduce((e84, o88) => [...e84, [o88, [...Array.from(t14(o88)).map((e85) => [e85, n5(e85, r94)])]]], []).flat(r94);
}
function t14(e83) {
  if (e83.documentElement)
    return e83.documentElement.children;
  if (e83.shadowRoot)
    return e83.shadowRoot.children;
  if (e83.assignedElements) {
    const r94 = e83.assignedElements();
    return r94.length ? r94 : e83.children;
  }
  return e83.children;
}

// node_modules/@cds/core/internal/controllers/first-focus.controller.js
var e8 = class {
  constructor(s27, t161 = { fallback: "focusable" }) {
    this.host = s27, this.config = t161, this.host.addController(this);
  }
  hostConnected() {
    return __async(this, null, function* () {
      yield this.host.updateComplete, this.observer = s7(this.host, "hidden", () => this.cdsFocusFirst()), this.cdsFocusFirst();
    });
  }
  hostDisconnected() {
    this.observer?.disconnect();
  }
  cdsFocusFirst() {
    if (!c6(this.host)) {
      const s27 = this.host.shadowRoot ? this.host.shadowRoot : this.host, i35 = s27.querySelector(".private-host") ?? this.host, h89 = n5(s27).filter((s28) => !s28.hasAttribute("cds-focus-boundary")), e83 = h89.find((s28) => s28.hasAttribute("cds-first-focus")), r94 = "focusable" === this.config.fallback ? h89.find((s28) => t13(s28) && !s28.classList.contains("private-host")) : null, a103 = "none" === this.config.fallback ? null : i35, n40 = e83 ?? r94 ?? a103;
      n40 && a6(n40);
    }
  }
};

// node_modules/@cds/core/internal/controllers/closable.controller.js
var e9 = class {
  constructor(s27, t161 = {}) {
    this.host = s27, this.config = __spreadValues({ escape: true, focusout: false }, t161), this.host.addController(this);
  }
  hostConnected() {
    this.config.escape && i4(this.host, () => this.close("escape-keypress")), this.config.focusout && (this.host.tabIndex = 0, d4(this.host, () => this.close("focusout")));
  }
  close(s27) {
    this.host.dispatchEvent(new CustomEvent("closeChange", { detail: s27 }));
  }
};

// node_modules/@cds/core/internal/controllers/inline-focus-trap.controller.js
var e10 = class {
  constructor(t161) {
    this.host = t161, this.host.addController(this);
  }
  get focusableItems() {
    return r8(this.root).filter((t161) => !t161.hasAttribute("cds-focus-boundary") && (this.root.contains(t161) || t161.closest("[cds-focus-trap]") === this.host));
  }
  get root() {
    return this.host.shadowRoot ? this.host.shadowRoot : this.host;
  }
  get styles() {
    return html`<style cds-focus-style>:host(:focus-within) [cds-focus-boundary],:host(:host:focus-within) [cds-focus-boundary]{display:block!important}</style>`;
  }
  boundary(s27) {
    return html`<div @focusin="${() => this.focusableItems.at(s27)?.focus()}" test="${s27}" cds-focus-boundary tabindex="0" style="display:none;position:absolute;width:1px;height:1px;clip:rect(0,0,0,0)">boundary</div>`;
  }
  hostConnected() {
    return __async(this, null, function* () {
      yield this.host.updateComplete, c6(this.host) || (c5(this.styles, this.root), c5(this.boundary(-1), this.root), f5(this.boundary(0), this.root), this.host.setAttribute("cds-focus-trap", ""));
    });
  }
};

// node_modules/@cds/core/internal/base/focus-trap.base.js
var p3 = class extends LitElement {
  constructor() {
    super();
    this.firstFocusController = new e8(this), this.closableController = new e9(this), this.inlineFocusTrapController = new e10(this), this.demoMode = false, this.focusTrapId = p();
  }
  render() {
    return html`<slot></slot>`;
  }
};
__decorate([p2({ type: Boolean, reflect: true })], p3.prototype, "demoMode", void 0), __decorate([p2({ type: String })], p3.prototype, "focusTrapId", void 0);

// node_modules/@cds/core/internal/utils/supports.js
var s9 = new class {
  constructor() {
    if (this.supports = { js: true }, !document.body.hasAttribute("cds-supports") || "no-js" === document.body.getAttribute("cds-supports")) {
      const s27 = c2(Object.keys(this.supports).reduce((t161, s28) => `${t161} ${this.supports[s28] ? s28 : "no-" + s28}`, "")).trim();
      document.body.setAttribute("cds-supports", s27);
    }
  }
}();

// node_modules/@cds/core/internal/utils/global.js
function w3() {
  o4() && (window.CDS = window.CDS || { _version: [], _react: { version: void 0 }, _supports: s9.supports, _isStateProxied: false, _state: { focusTrapItems: [], layerElements: [], i18nRegistry: {}, elementRegistry: {}, iconRegistry: {}, motionRegistry: {} }, environment: { production: false }, getDetails: a7, logDetails: d5 }, function() {
    const e83 = "6.10.0";
    window.CDS._version.indexOf(e83) < 0 && (window.CDS._version.push(e83), document.querySelector("body")?.setAttribute("cds-version", window.CDS._version.join(" "))), window.CDS._version.length > 1 && n2.warn("Running more than one version of Clarity can cause unexpected issues. Please ensure only one version is loaded.");
  }(), window.CDS._isStateProxied || (window.CDS._isStateProxied = true, window.CDS._state = new Proxy(window.CDS._state, { set: (e83, n40, o88) => {
    const t161 = { key: n40, prev: window.CDS._state[n40], current: o88 };
    return e83[n40] = o88, document.dispatchEvent(new CustomEvent("CDS_STATE_UPDATE", { detail: t161 })), true;
  } })));
}
function a7() {
  return { versions: window.CDS._version, environment: window.CDS.environment, userAgent: navigator.userAgent, supports: window.CDS._supports, angularVersion: r3(false), angularJSVersion: i3(false), reactVersion: u2(false), vueVersion: c3(false), state: __spreadProps(__spreadValues({}, window.CDS._state), { iconRegistry: Object.keys(window.CDS._state.iconRegistry), motionRegistry: Object.keys(window.CDS._state.motionRegistry), focusTrapRegistry: Object.keys(window.CDS._state.focusTrapItems.map((e83) => e83.focusTrapId)) }) };
}
function d5() {
  n2.log(JSON.stringify(a7(), null, 2));
}

// node_modules/@cds/core/internal/utils/registration.js
var n6 = curryN_default(3, (e83, t161, o88) => {
  n(e83) && !l2() ? n2.warn(e83 + " has already been registered") : (o88.define(e83, t161), w3(), window && !Object.keys(window.CDS._state.elementRegistry).some((t162) => t162 === e83) && (window.CDS._state.elementRegistry = __spreadProps(__spreadValues({}, window.CDS._state.elementRegistry), { [e83]: {} })));
});
function w4(e83, r94) {
  o4() && i2(["customElements"]) && n6(e83, r94, window.customElements);
}

// node_modules/@cds/core/internal/utils/event-subject.js
var s10 = class {
  constructor(s27, i35) {
    this.fn = s27, this.subscriptions = i35;
  }
  unsubscribe() {
    const s27 = this.subscriptions.indexOf(this);
    -1 !== s27 && this.subscriptions.splice(s27, 1);
  }
};
var i5 = class {
  constructor() {
    this.subscriptions = [];
  }
  subscribe(i35) {
    const t161 = new s10(i35, this.subscriptions);
    return this.subscriptions.push(t161), t161;
  }
  emit(s27) {
    this.subscriptions.forEach((i35) => i35.fn(s27));
  }
  toEventObservable() {
    return this;
  }
};

// node_modules/@cds/core/internal/services/global.service.js
var a8 = new i5();
a8.listener = document.addEventListener("CDS_STATE_UPDATE", (t161) => a8.emit(t161.detail));
var i6 = class _i {
  static get state() {
    return w3(), window.CDS._state;
  }
  static getValue(t161) {
    return _i.state[t161];
  }
  static setValue(t161, e83) {
    _i.state[t161] = e83;
  }
  static log() {
    n2.log(JSON.stringify(_i.state, null, 2));
  }
};
i6.stateUpdates = a8.toEventObservable();

// node_modules/ramda/es/isNil.js
var isNil = _curry1(function isNil2(x6) {
  return x6 == null;
});

// node_modules/ramda/es/add.js
var add = _curry2(function add2(a103, b8) {
  return Number(a103) + Number(b8);
});
var add_default = add;

// node_modules/ramda/es/internal/_curry3.js
function _curry3(fn) {
  return function f32(a103, b8, c45) {
    switch (arguments.length) {
      case 0:
        return f32;
      case 1:
        return _isPlaceholder(a103) ? f32 : _curry2(function(_b4, _c100) {
          return fn(a103, _b4, _c100);
        });
      case 2:
        return _isPlaceholder(a103) && _isPlaceholder(b8) ? f32 : _isPlaceholder(a103) ? _curry2(function(_a4, _c100) {
          return fn(_a4, b8, _c100);
        }) : _isPlaceholder(b8) ? _curry2(function(_b4, _c100) {
          return fn(a103, _b4, _c100);
        }) : _curry1(function(_c100) {
          return fn(a103, b8, _c100);
        });
      default:
        return _isPlaceholder(a103) && _isPlaceholder(b8) && _isPlaceholder(c45) ? f32 : _isPlaceholder(a103) && _isPlaceholder(b8) ? _curry2(function(_a4, _b4) {
          return fn(_a4, _b4, c45);
        }) : _isPlaceholder(a103) && _isPlaceholder(c45) ? _curry2(function(_a4, _c100) {
          return fn(_a4, b8, _c100);
        }) : _isPlaceholder(b8) && _isPlaceholder(c45) ? _curry2(function(_b4, _c100) {
          return fn(a103, _b4, _c100);
        }) : _isPlaceholder(a103) ? _curry1(function(_a4) {
          return fn(_a4, b8, c45);
        }) : _isPlaceholder(b8) ? _curry1(function(_b4) {
          return fn(a103, _b4, c45);
        }) : _isPlaceholder(c45) ? _curry1(function(_c100) {
          return fn(a103, b8, _c100);
        }) : fn(a103, b8, c45);
    }
  };
}

// node_modules/ramda/es/internal/_isArrayLike.js
var _isArrayLike = _curry1(function isArrayLike(x6) {
  if (isArray_default(x6)) {
    return true;
  }
  if (!x6) {
    return false;
  }
  if (typeof x6 !== "object") {
    return false;
  }
  if (_isString(x6)) {
    return false;
  }
  if (x6.length === 0) {
    return true;
  }
  if (x6.length > 0) {
    return x6.hasOwnProperty(0) && x6.hasOwnProperty(x6.length - 1);
  }
  return false;
});
var isArrayLike_default = _isArrayLike;

// node_modules/ramda/es/internal/_createReduce.js
var symIterator = typeof Symbol !== "undefined" ? Symbol.iterator : "@@iterator";
function _createReduce(arrayReduce, methodReduce, iterableReduce) {
  return function _reduce(xf, acc, list) {
    if (isArrayLike_default(list)) {
      return arrayReduce(xf, acc, list);
    }
    if (list == null) {
      return acc;
    }
    if (typeof list["fantasy-land/reduce"] === "function") {
      return methodReduce(xf, acc, list, "fantasy-land/reduce");
    }
    if (list[symIterator] != null) {
      return iterableReduce(xf, acc, list[symIterator]());
    }
    if (typeof list.next === "function") {
      return iterableReduce(xf, acc, list);
    }
    if (typeof list.reduce === "function") {
      return methodReduce(xf, acc, list, "reduce");
    }
    throw new TypeError("reduce: list must be array or iterable");
  };
}

// node_modules/ramda/es/internal/_xArrayReduce.js
function _xArrayReduce(xf, acc, list) {
  var idx = 0;
  var len = list.length;
  while (idx < len) {
    acc = xf["@@transducer/step"](acc, list[idx]);
    if (acc && acc["@@transducer/reduced"]) {
      acc = acc["@@transducer/value"];
      break;
    }
    idx += 1;
  }
  return xf["@@transducer/result"](acc);
}

// node_modules/ramda/es/bind.js
var bind = _curry2(function bind2(fn, thisObj) {
  return _arity(fn.length, function() {
    return fn.apply(thisObj, arguments);
  });
});
var bind_default = bind;

// node_modules/ramda/es/internal/_xReduce.js
function _xIterableReduce(xf, acc, iter) {
  var step = iter.next();
  while (!step.done) {
    acc = xf["@@transducer/step"](acc, step.value);
    if (acc && acc["@@transducer/reduced"]) {
      acc = acc["@@transducer/value"];
      break;
    }
    step = iter.next();
  }
  return xf["@@transducer/result"](acc);
}
function _xMethodReduce(xf, acc, obj, methodName) {
  return xf["@@transducer/result"](obj[methodName](bind_default(xf["@@transducer/step"], xf), acc));
}
var _xReduce = _createReduce(_xArrayReduce, _xMethodReduce, _xIterableReduce);
var xReduce_default = _xReduce;

// node_modules/ramda/es/internal/_xwrap.js
var XWrap = function() {
  function XWrap2(fn) {
    this.f = fn;
  }
  XWrap2.prototype["@@transducer/init"] = function() {
    throw new Error("init not implemented on XWrap");
  };
  XWrap2.prototype["@@transducer/result"] = function(acc) {
    return acc;
  };
  XWrap2.prototype["@@transducer/step"] = function(acc, x6) {
    return this.f(acc, x6);
  };
  return XWrap2;
}();
function _xwrap(fn) {
  return new XWrap(fn);
}

// node_modules/ramda/es/reduce.js
var reduce = _curry3(function(xf, acc, list) {
  return xReduce_default(typeof xf === "function" ? _xwrap(xf) : xf, acc, list);
});
var reduce_default = reduce;

// node_modules/ramda/es/sum.js
var sum = reduce_default(add_default, 0);
var sum_default = sum;

// node_modules/@cds/core/internal/utils/math.js
var a9 = curryN_default(3, (r94, t161, o88) => (r94 || 0) + sum_default(t161 || []) - sum_default(o88 || []));
var e12 = curryN_default(4, (r94, m8, t161, o88) => !!o88 && o88(a9(r94, m8, t161)));

// node_modules/@cds/core/internal/motion/interfaces.js
var e13;
!function(e83) {
  e83.ready = "ready", e83.active = "active", e83.start = "starting", e83.end = "done";
}(e13 || (e13 = {}));

// node_modules/ramda/es/internal/_cloneRegExp.js
function _cloneRegExp(pattern) {
  return new RegExp(pattern.source, pattern.flags ? pattern.flags : (pattern.global ? "g" : "") + (pattern.ignoreCase ? "i" : "") + (pattern.multiline ? "m" : "") + (pattern.sticky ? "y" : "") + (pattern.unicode ? "u" : "") + (pattern.dotAll ? "s" : ""));
}

// node_modules/ramda/es/internal/_clone.js
function _clone(value, deep, map2) {
  map2 || (map2 = new _ObjectMap());
  if (_isPrimitive(value)) {
    return value;
  }
  var copy = function copy2(copiedValue) {
    var cachedCopy = map2.get(value);
    if (cachedCopy) {
      return cachedCopy;
    }
    map2.set(value, copiedValue);
    for (var key in value) {
      if (Object.prototype.hasOwnProperty.call(value, key)) {
        copiedValue[key] = deep ? _clone(value[key], true, map2) : value[key];
      }
    }
    return copiedValue;
  };
  switch (type_default(value)) {
    case "Object":
      return copy(Object.create(Object.getPrototypeOf(value)));
    case "Array":
      return copy([]);
    case "Date":
      return new Date(value.valueOf());
    case "RegExp":
      return _cloneRegExp(value);
    case "Int8Array":
    case "Uint8Array":
    case "Uint8ClampedArray":
    case "Int16Array":
    case "Uint16Array":
    case "Int32Array":
    case "Uint32Array":
    case "Float32Array":
    case "Float64Array":
    case "BigInt64Array":
    case "BigUint64Array":
      return value.slice();
    default:
      return value;
  }
}
function _isPrimitive(param) {
  var type3 = typeof param;
  return param == null || type3 != "object" && type3 != "function";
}
var _ObjectMap = function() {
  function _ObjectMap2() {
    this.map = {};
    this.length = 0;
  }
  _ObjectMap2.prototype.set = function(key, value) {
    const hashedKey = this.hash(key);
    let bucket = this.map[hashedKey];
    if (!bucket) {
      this.map[hashedKey] = bucket = [];
    }
    bucket.push([key, value]);
    this.length += 1;
  };
  _ObjectMap2.prototype.hash = function(key) {
    let hashedKey = [];
    for (var value in key) {
      hashedKey.push(Object.prototype.toString.call(key[value]));
    }
    return hashedKey.join();
  };
  _ObjectMap2.prototype.get = function(key) {
    if (this.length <= 180) {
      for (const p14 in this.map) {
        const bucket2 = this.map[p14];
        for (let i35 = 0; i35 < bucket2.length; i35 += 1) {
          const element = bucket2[i35];
          if (element[0] === key) {
            return element[1];
          }
        }
      }
      return;
    }
    const hashedKey = this.hash(key);
    const bucket = this.map[hashedKey];
    if (!bucket) {
      return;
    }
    for (let i35 = 0; i35 < bucket.length; i35 += 1) {
      const element = bucket[i35];
      if (element[0] === key) {
        return element[1];
      }
    }
  };
  return _ObjectMap2;
}();

// node_modules/ramda/es/clone.js
var clone = _curry1(function clone2(value) {
  return value != null && typeof value.clone === "function" ? value.clone() : _clone(value, true);
});

// node_modules/lit-html/development/directive.js
var directive = (c45) => (...values) => ({
  // This property needs to remain unminified.
  ["_$litDirective$"]: c45,
  values
});
var Directive2 = class {
  constructor(_partInfo) {
  }
  // See comment in Disconnectable interface for why this is a getter
  get _$isConnected() {
    return this._$parent._$isConnected;
  }
  /** @internal */
  _$initialize(part, parent, attributeIndex) {
    this.__part = part;
    this._$parent = parent;
    this.__attributeIndex = attributeIndex;
  }
  /** @internal */
  _$resolve(part, props) {
    return this.update(part, props);
  }
  update(_part, props) {
    return this.render(...props);
  }
};

// node_modules/@cds/core/internal/directives/spread-props.js
var t18 = class extends Directive2 {
  render() {
    return "";
  }
  update(e83, r94) {
    return Object.entries(r94[0]).filter(([r95, t161]) => t161 !== e83.element[r95]).forEach(([r95, t161]) => e83.element[r95] = t161), this.render();
  }
};
var n11 = directive(t18);

// node_modules/@cds/core/internal/services/i18n.service.js
var i9 = { actions: { sort: "Sort", expand: "Expand", close: "Close", resize: "Resize", filter: "Filter" }, alert: { closeButtonAriaLabel: "Close", loading: "Loading", info: "Info", success: "Success", warning: "Warning", danger: "Error" }, dropdown: { open: "Open" }, file: { browse: "browse", files: "files", removeFile: "remove file" }, modal: { closeButtonAriaLabel: "Close modal", contentStart: "Beginning of modal content", contentBox: "Scrollable modal body", contentEnd: "End of modal content" }, navigation: { navigationElement: "navigation", navigationLabel: "navigation menu", navigationAbridgedText: "View abridged menu", navigationUnabridgedText: "View unabridged menu" }, overlay: { closeButtonAriaLabel: "Close dialog", contentStart: "Beginning of dialog content", contentEnd: "End of dialog content" }, popup: { closeButtonAriaLabel: "Close popup", contentStart: "Beginning of popup content", contentEnd: "End of popup content" }, password: { showButtonAriaLabel: "Show password", hideButtonAriaLabel: "Hide password" }, progress: { loading: "Loading", looping: "Loading" }, treeview: { loading: "Loading" }, grid: { resizeColumn: "Resize Column", closeDetails: "Close Details", noData: "No Results Found", rowDetailStart: "Start of row details", rowDetailEnd: "End of row details", footerEnd: "End of grid rows", action: "Action", dropTarget: "Drop Item", pagination: { label: "grid pagination", firstPage: "go to first page", previousPage: "go to previous page", nextPage: "go to next page", lastPage: "go to last page", pageSize: "rows per page", page: "page" } } };
var a11 = class _a4 {
  static get keys() {
    return 0 === Object.keys(i6.state.i18nRegistry).length && (i6.state.i18nRegistry = x(i9, i6.state.i18nRegistry)), x(i9, i6.state.i18nRegistry);
  }
  static findKey(e83) {
    const t161 = _a4.keys;
    return Object.keys(t161).find((o88) => g(t161[o88], e83));
  }
  static get(e83) {
    return e83 && _a4.keys[e83] || {};
  }
  static reset() {
    i6.state.i18nRegistry = x({}, i9);
  }
  static hydrate(e83, o88) {
    return JSON.parse(P(JSON.stringify(e83), o88));
  }
  static localize(t161) {
    i6.state.i18nRegistry = x(i9, i6.state.i18nRegistry, t161);
  }
};

// node_modules/@cds/core/internal/decorators/i18n.js
function o9() {
  return (n40, r94) => {
    const c45 = n40.connectedCallback, o88 = n40.disconnectedCallback;
    n40.connectedCallback = function() {
      n40.__i18nSub = i6.stateUpdates.subscribe((e83) => {
        "i18nRegistry" === e83.key && this.requestUpdate(r94);
      }), c45 && c45.apply(this);
    }, n40.disconnectedCallback = function() {
      n40.__i18nSub.unsubscribe(), o88 && o88.apply(this);
    };
    const d39 = { get() {
      const e83 = x(a11.keys[this.__i18nKey], this.__i18n || {});
      return a11.hydrate(e83, this);
    }, set(e83) {
      const t161 = u5(e83, this), s27 = a12(a11.findKey(t161) || "", this.__i18nKey, t161, this.__i18n);
      void 0 !== s27.key && (this.__i18nKey = s27.key + ""), void 0 !== s27.values && (this.__i18n = __spreadValues({}, s27.values)), true === s27.update && this.requestUpdate(), this.requestUpdate(r94);
    }, enumerable: true, configurable: true };
    return void 0 !== r94 ? function(t161, i35, s27) {
      const n41 = Object.defineProperty(i35, s27, t161);
      return m2({ type: Object, attribute: "cds-i18n" })(n41, s27);
    }(d39, n40, r94) : function(t161, i35) {
      const s27 = { kind: "method", placement: "prototype", key: i35.key, descriptor: t161 };
      return m2({ type: Object })(s27);
    }(d39, n40);
  };
}
function u5(e83, t161) {
  if (e3(e83)) {
    let e84 = {};
    if (t161.hasAttribute("cds-i18n")) {
      const i35 = t161.getAttribute("cds-i18n") + "";
      if (e3(i35))
        e84 = {};
      else
        try {
          e84 = JSON.parse(i35);
        } catch {
          n2.warn("Clarity i18n: Invalid JSON passed to cds-i18n"), e84 = {};
        }
    }
    return e84;
  }
  return e83;
}
function a12(e83, t161, i35, s27) {
  return e3(e83) ? g(i35, s27) ? { update: false } : { update: true, values: i35 } : e83 === t161 ? { update: false, values: {} } : { update: true, key: e83, values: {} };
}

// node_modules/@cds/core/internal/positioning/interfaces.js
var t20;
!function(t161) {
  t161[t161.Responsive = 0] = "Responsive", t161[t161.Top = 1] = "Top", t161[t161.Left = 2] = "Left", t161[t161.TopOrLeft = 3] = "TopOrLeft", t161[t161.Right = 4] = "Right", t161[t161.TopOrRight = 5] = "TopOrRight", t161[t161.Horizontal = 6] = "Horizontal", t161[t161.TopOrHorizontal = 7] = "TopOrHorizontal", t161[t161.Bottom = 8] = "Bottom", t161[t161.Vertical = 9] = "Vertical", t161[t161.BottomOrLeft = 10] = "BottomOrLeft", t161[t161.VerticalOrLeft = 11] = "VerticalOrLeft", t161[t161.BottomOrRight = 12] = "BottomOrRight", t161[t161.VerticalOrRight = 13] = "VerticalOrRight", t161[t161.BottomOrHorizontal = 14] = "BottomOrHorizontal", t161[t161.All = 15] = "All";
}(t20 || (t20 = {}));

// node_modules/@cds/core/internal/utils/size.js
function o10(t161) {
  return ["xxs", "xs", "sm", "md", "lg", "xl", "xxl"].indexOf(t161) > -1;
}

// node_modules/@cds/core/internal/index.js
var o27 = a;

// node_modules/@lit/reactive-element/development/decorators/base.js
var decorateProperty = ({ finisher, descriptor }) => (protoOrDescriptor, name) => {
  var _a4;
  if (name !== void 0) {
    const ctor = protoOrDescriptor.constructor;
    if (descriptor !== void 0) {
      Object.defineProperty(protoOrDescriptor, name, descriptor(name));
    }
    finisher === null || finisher === void 0 ? void 0 : finisher(ctor, name);
  } else {
    const key = (
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      (_a4 = protoOrDescriptor.originalKey) !== null && _a4 !== void 0 ? _a4 : protoOrDescriptor.key
    );
    const info = descriptor != void 0 ? {
      kind: "method",
      placement: "prototype",
      key,
      descriptor: descriptor(protoOrDescriptor.key)
    } : __spreadProps(__spreadValues({}, protoOrDescriptor), { key });
    if (finisher != void 0) {
      info.finisher = function(ctor) {
        finisher(ctor, key);
      };
    }
    return info;
  }
};

// node_modules/@lit/reactive-element/development/decorators/query.js
function query(selector, cache) {
  return decorateProperty({
    descriptor: (name) => {
      const descriptor = {
        get() {
          var _a4, _b4;
          return (_b4 = (_a4 = this.renderRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector(selector)) !== null && _b4 !== void 0 ? _b4 : null;
        },
        enumerable: true,
        configurable: true
      };
      if (cache) {
        const key = typeof name === "symbol" ? Symbol() : `__${name}`;
        descriptor.get = function() {
          var _a4, _b4;
          if (this[key] === void 0) {
            this[key] = (_b4 = (_a4 = this.renderRoot) === null || _a4 === void 0 ? void 0 : _a4.querySelector(selector)) !== null && _b4 !== void 0 ? _b4 : null;
          }
          return this[key];
        };
      }
      return descriptor;
    }
  });
}

// node_modules/@cds/core/icon/icon.element.scss.js
var s20 = css`@keyframes fadeInAndOut{0%,to{opacity:0}75%{opacity:1}}:host{--color:currentColor;display:inline-block;height:var(--cds-global-space-7,calc(16 * 1rem / var(--cds-global-base,20)));width:var(--cds-global-space-7,calc(16 * 1rem / var(--cds-global-base,20)));min-height:var(--cds-global-space-7,calc(16 * 1rem / var(--cds-global-base,20)));min-width:var(--cds-global-space-7,calc(16 * 1rem / var(--cds-global-base,20)));margin:0;vertical-align:middle;fill:var(--color);color:var(--color);contain:strict;cursor:inherit}svg{display:block}:host([size*=xs]){height:var(--cds-global-space-5,calc(8 * 1rem / var(--cds-global-base,20)));width:var(--cds-global-space-5,calc(8 * 1rem / var(--cds-global-base,20)));min-height:var(--cds-global-space-5,calc(8 * 1rem / var(--cds-global-base,20)));min-width:var(--cds-global-space-5,calc(8 * 1rem / var(--cds-global-base,20)))}:host([size*=sm]){height:var(--cds-global-space-7,calc(16 * 1rem / var(--cds-global-base,20)));width:var(--cds-global-space-7,calc(16 * 1rem / var(--cds-global-base,20)));min-height:var(--cds-global-space-7,calc(16 * 1rem / var(--cds-global-base,20)));min-width:var(--cds-global-space-7,calc(16 * 1rem / var(--cds-global-base,20)))}:host([size*=md]){height:var(--cds-global-space-9,calc(24 * 1rem / var(--cds-global-base,20)));width:var(--cds-global-space-9,calc(24 * 1rem / var(--cds-global-base,20)));min-height:var(--cds-global-space-9,calc(24 * 1rem / var(--cds-global-base,20)));min-width:var(--cds-global-space-9,calc(24 * 1rem / var(--cds-global-base,20)))}:host([size*=lg]){height:var(--cds-global-space-11,calc(36 * 1rem / var(--cds-global-base,20)));width:var(--cds-global-space-11,calc(36 * 1rem / var(--cds-global-base,20)));min-height:var(--cds-global-space-11,calc(36 * 1rem / var(--cds-global-base,20)));min-width:var(--cds-global-space-11,calc(36 * 1rem / var(--cds-global-base,20)))}:host([size*=xl]){height:var(--cds-global-space-12,calc(48 * 1rem / var(--cds-global-base,20)));width:var(--cds-global-space-12,calc(48 * 1rem / var(--cds-global-base,20)));min-height:var(--cds-global-space-12,calc(48 * 1rem / var(--cds-global-base,20)));min-width:var(--cds-global-space-12,calc(48 * 1rem / var(--cds-global-base,20)))}:host([size*=xxl]){height:calc(var(--cds-global-space-13,calc(64 * 1rem / var(--cds-global-base,20))) - var(--cds-global-space-5,calc(8 * 1rem / var(--cds-global-base,20))));width:calc(var(--cds-global-space-13,calc(64 * 1rem / var(--cds-global-base,20))) - var(--cds-global-space-5,calc(8 * 1rem / var(--cds-global-base,20))));min-height:calc(var(--cds-global-space-13,calc(64 * 1rem / var(--cds-global-base,20))) - var(--cds-global-space-5,calc(8 * 1rem / var(--cds-global-base,20))));min-width:calc(var(--cds-global-space-13,calc(64 * 1rem / var(--cds-global-base,20))) - var(--cds-global-space-5,calc(8 * 1rem / var(--cds-global-base,20))))}:host([size*=fit]){height:auto;width:auto;contain:layout}:host([status=success]){--color:var(--cds-alias-status-success, var(--cds-global-color-green-700, #42810e))}:host([status=danger]){--color:var(--cds-alias-status-danger, var(--cds-global-color-red-700, #e02200))}:host([status=warning]){--color:var(--cds-alias-status-warning-dark, var(--cds-global-color-ochre-800, #a36500))}:host([status=info]){--color:var(--cds-alias-status-info, var(--cds-global-color-blue-700, #0079ad))}:host([status=neutral]){--color:var(--cds-alias-status-neutral, var(--cds-global-color-construction-600, #4f6169))}:host([inverse]){--color:var(--cds-global-color-construction-200, #cbd4d8)}:host([direction=up]){transform:rotate(0)}:host([direction=down]){transform:rotate(180deg)}:host([direction=right]){transform:rotate(90deg)}:host([direction=left]){transform:rotate(270deg)}:host([flip=horizontal]){transform:scale(-1) rotateX(180deg)}:host([flip=vertical]){transform:scale(-1) rotateY(180deg)}.alert,.badge{fill:var(--badge-color,var(--cds-alias-status-danger,var(--cds-global-color-red-700,#e02200)))}:host([badge=success]){--badge-color:var(--cds-alias-status-success, var(--cds-global-color-green-700, #42810e))}:host([badge=danger]){--badge-color:var(--cds-alias-status-danger, var(--cds-global-color-red-700, #e02200))}:host([badge*=warning]){--badge-color:var(--cds-alias-status-warning-dark, var(--cds-global-color-ochre-800, #a36500))}:host([badge=inherit]){--badge-color:currentColor}:host([badge=info]){--badge-color:var(--cds-alias-status-info, var(--cds-global-color-blue-700, #0079ad))}:host([badge=neutral]){--badge-color:var(--cds-alias-status-neutral, var(--cds-global-color-construction-600, #4f6169))}:host([badge=inherit-triangle]){--badge-color:currentColor}:host([badge][inverse]){--badge-color:var(--cds-alias-status-danger, var(--cds-global-color-red-700, #e02200))}:host([badge=success][inverse]){--badge-color:var(--cds-alias-status-success, var(--cds-global-color-green-700, #42810e))}:host([badge*=warning][inverse]){--badge-color:var(--cds-alias-status-warning-dark, var(--cds-global-color-ochre-800, #a36500))}:host([badge*=inherit][inverse]){--badge-color:currentColor}:host([badge=info][inverse]){--badge-color:var(--cds-alias-status-info, var(--cds-global-color-blue-700, #0079ad))}.cds-internal-dot-1{animation:fadeInAndOut 1.8s ease-in 0s infinite}.cds-internal-dot-2{animation:fadeInAndOut 1.8s ease-out .422s infinite}.cds-internal-dot-3{animation:fadeInAndOut 1.8s ease-out .675s infinite}@media (prefers-reduced-motion){.cds-internal-dot-1,.cds-internal-dot-2,.cds-internal-dot-3{animation:none}}`;

// node_modules/@cds/core/icon/icon.renderer.js
function n23(n40) {
  return n40;
}

// node_modules/@cds/core/icon/shapes/unknown.js
var r23 = ["unknown", n23({ outline: '<circle class="cds-internal-dot-3" cx="31.1" cy="18" r="2.9"/><circle class="cds-internal-dot-2" cx="18" cy="18" r="2.9"/><circle class="cds-internal-dot-1" cx="4.9" cy="18" r="2.9"/>' })];

// node_modules/@cds/core/icon/icon.service.js
var r24 = class _r {
  static get registry() {
    return __spreadValues({ unknown: r23[1] }, i6.state.iconRegistry);
  }
  static addIcons(...e83) {
    i6.state.iconRegistry = __spreadValues(__spreadValues({}, i6.state.iconRegistry), Object.fromEntries(e83.filter(([t161]) => !_r.registry[t161])));
  }
  static addAliases(...e83) {
    const s27 = e83.filter(([t161]) => _r.registry[t161]).flatMap(([t161, e84]) => e84.map((e85) => [e85, _r.registry[t161]]));
    i6.state.iconRegistry = __spreadValues(__spreadValues({}, i6.state.iconRegistry), Object.fromEntries(s27));
  }
  static getIconNameFromShape(t161) {
    return t161[0];
  }
};

// node_modules/@cds/core/icon/utils/icon.classnames.js
var d10;
function c10(n40) {
  switch (true) {
    case e3(n40):
      return d10.NilSizeValue;
    case o10(n40):
      return d10.ValidSizeString;
    case i(n40):
      return d10.ValidNumericString;
    default:
      return d10.BadSizeValue;
  }
}
function h8(i35) {
  return e3(i35) ? "" : w(i35, "fit");
}
function s21(i35, e83) {
  return !r(i35) && i35.indexOf("fit") > -1 ? [["width", "auto"], ["height", "auto"], ["min-width", e83], ["min-height", e83]] : [["width", e83], ["height", e83], ["min-width", e83], ["min-height", e83]];
}
function S4(i35, e83) {
  let t161 = "";
  switch (c10(h8(e83))) {
    case d10.ValidNumericString:
      return t161 = c4(parseInt(e83)), void u3(i35, ...s21(e83, t161));
    case d10.ValidSizeString:
    case d10.NilSizeValue:
      return void a5(i35, "width", "height", "min-width", "min-height");
    case d10.BadSizeValue:
    default:
      return;
  }
}
!function(i35) {
  i35.BadSizeValue = "bad-value", i35.ValidSizeString = "value-is-string", i35.ValidNumericString = "value-is-numeric", i35.NilSizeValue = "value-is-nil";
}(d10 || (d10 = {}));

// node_modules/@cds/core/icon/utils/icon.svg-helpers.js
function i22(e83) {
  return e83.badge && ("inherit-triangle" === e83.badge || "warning-triangle" === e83.badge);
}
function r25(e83) {
  let r94 = "";
  return e83.badge && i22(e83) ? r94 = '<path d="M26.85 1.14L21.13 11a1.28 1.28 0 001.1 2h11.45a1.28 1.28 0 001.1-2l-5.72-9.86a1.28 1.28 0 00-2.21 0z" class="alert" />' : e83.badge && (r94 = '<circle cx="30" cy="6" r="5" class="badge" />'), r94;
}
function t41(r94) {
  const t161 = r24.registry[r94.shape] ?? r24.registry.unknown;
  let n40 = r94.solid && t161.solid ? t161.solid : t161.outline;
  return r94.badge && !i22(r94) && (n40 = r94.solid ? t161.solidBadged ?? n40 : t161.outlineBadged ?? n40), i22(r94) && (n40 = r94.solid ? t161.solidAlerted ?? n40 : t161.outlineAlerted ?? n40), n40;
}

// node_modules/@cds/core/icon/icon.element.js
var v5 = class extends LitElement {
  constructor() {
    super(...arguments);
    this._shape = "unknown", this.solid = false, this.inverse = false;
  }
  static get styles() {
    return [o27, s20];
  }
  get shape() {
    return this._shape;
  }
  set shape(t161) {
    if (h(t161, this._shape)) {
      const s27 = this._shape;
      this._shape = t161, this.requestUpdate("shape", s27);
    }
  }
  get size() {
    return this._size;
  }
  set size(t161) {
    if (d2(t161, this._size)) {
      const s27 = this._size;
      this._size = t161, S4(this, t161), this.requestUpdate("size", s27);
    }
  }
  updated(t161) {
    if (t161.has("innerOffset") && this.innerOffset > 0) {
      const t162 = c4(-1 * this.innerOffset), s27 = `calc(100% + ${c4(2 * this.innerOffset)})`;
      this.svg.style.width = s27, this.svg.style.height = s27, this.svg.style.margin = `${t162} 0 0 ${t162}`;
    }
  }
  firstUpdated(t161) {
    if (super.firstUpdated(t161), this.isConnected) {
      let t162 = "unknown";
      this.subscription = i6.stateUpdates.subscribe((s27) => {
        "iconRegistry" === s27.key && r24.registry[this.shape] && t162 !== this.shape && (t162 = this.shape, this.requestUpdate("shape"));
      });
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this.subscription?.unsubscribe();
  }
  render() {
    return u(r24.registry[this.shape]) ? html`<span .innerHTML="${r24.registry[this.shape]}"></span>` : svg`<svg .innerHTML="${t41(this) + r25(this)}" viewBox="0 0 36 36" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"></svg>`;
  }
};
__decorate([m2({ type: String })], v5.prototype, "shape", null), __decorate([m2({ type: String })], v5.prototype, "size", null), __decorate([m2({ type: String })], v5.prototype, "direction", void 0), __decorate([m2({ type: String })], v5.prototype, "flip", void 0), __decorate([m2({ type: Boolean })], v5.prototype, "solid", void 0), __decorate([m2({ type: String })], v5.prototype, "status", void 0), __decorate([m2({ type: Boolean })], v5.prototype, "inverse", void 0), __decorate([m2({ type: String })], v5.prototype, "badge", void 0), __decorate([p2({ type: Number })], v5.prototype, "innerOffset", void 0), __decorate([query("svg")], v5.prototype, "svg", void 0);

// node_modules/@cds/core/icon/shapes/angle.js
var o28 = ["angle", n23({ outline: '<path d="M29.52,22.52,18,10.6,6.48,22.52a1.7,1.7,0,0,0,2.45,2.36L18,15.49l9.08,9.39a1.7,1.7,0,0,0,2.45-2.36Z"/>' })];

// node_modules/@cds/core/icon/shapes/angle-double.js
var o29 = ["angle-double", n23({ outline: '<path d="M29,19.41a1,1,0,0,1-.71-.29L18,8.83,7.71,19.12a1,1,0,0,1-1.41-1.41L18,6,29.71,17.71A1,1,0,0,1,29,19.41Z"/><path d="M29,30.41a1,1,0,0,1-.71-.29L18,19.83,7.71,30.12a1,1,0,0,1-1.41-1.41L18,17,29.71,28.71A1,1,0,0,1,29,30.41Z"/>' })];

// node_modules/@cds/core/icon/shapes/arrow.js
var a20 = ["arrow", n23({ outline: '<path d="M27.66,15.61,18,6,8.34,15.61A1,1,0,1,0,9.75,17L17,9.81V28.94a1,1,0,1,0,2,0V9.81L26.25,17a1,1,0,0,0,1.41-1.42Z"/>' })];

// node_modules/@cds/core/icon/shapes/bars.js
var t42 = ["bars", n23({ outline: '<path d="M32,29H4a1,1,0,0,1,0-2H32a1,1,0,0,1,0,2Z"/><path d="M32,19H4a1,1,0,0,1,0-2H32a1,1,0,0,1,0,2Z"/><path d="M32,9H4A1,1,0,0,1,4,7H32a1,1,0,0,1,0,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/bell.js
var V = ["bell", n23({ outline: '<path d="M32.51,27.83A14.4,14.4,0,0,1,30,24.9a12.63,12.63,0,0,1-1.35-4.81V15.15A10.81,10.81,0,0,0,19.21,4.4V3.11a1.33,1.33,0,1,0-2.67,0V4.42A10.81,10.81,0,0,0,7.21,15.15v4.94A12.63,12.63,0,0,1,5.86,24.9a14.4,14.4,0,0,1-2.47,2.93,1,1,0,0,0-.34.75v1.36a1,1,0,0,0,1,1h27.8a1,1,0,0,0,1-1V28.58A1,1,0,0,0,32.51,27.83ZM5.13,28.94a16.17,16.17,0,0,0,2.44-3,14.24,14.24,0,0,0,1.65-5.85V15.15a8.74,8.74,0,1,1,17.47,0v4.94a14.24,14.24,0,0,0,1.65,5.85,16.17,16.17,0,0,0,2.44,3Z"/><path d="M18,34.28A2.67,2.67,0,0,0,20.58,32H15.32A2.67,2.67,0,0,0,18,34.28Z"/>', outlineBadged: '<path d="M18,34.28A2.67,2.67,0,0,0,20.58,32H15.32A2.67,2.67,0,0,0,18,34.28Z"/><path d="M32.51,27.83A14.4,14.4,0,0,1,30,24.9a12.63,12.63,0,0,1-1.35-4.81V15.15a10.92,10.92,0,0,0-.16-1.79,7.44,7.44,0,0,1-2.24-.84,8.89,8.89,0,0,1,.4,2.64v4.94a14.24,14.24,0,0,0,1.65,5.85,16.17,16.17,0,0,0,2.44,3H5.13a16.17,16.17,0,0,0,2.44-3,14.24,14.24,0,0,0,1.65-5.85V15.15A8.8,8.8,0,0,1,18,6.31a8.61,8.61,0,0,1,4.76,1.44A7.49,7.49,0,0,1,22.5,6c0-.21,0-.42,0-.63a10.58,10.58,0,0,0-3.32-1V3.11a1.33,1.33,0,1,0-2.67,0V4.42A10.81,10.81,0,0,0,7.21,15.15v4.94A12.63,12.63,0,0,1,5.86,24.9a14.4,14.4,0,0,1-2.47,2.93,1,1,0,0,0-.34.75v1.36a1,1,0,0,0,1,1h27.8a1,1,0,0,0,1-1V28.58A1,1,0,0,0,32.51,27.83Z"/>', solid: '<path d="M32.85,28.13l-.34-.3A14.37,14.37,0,0,1,30,24.9a12.63,12.63,0,0,1-1.35-4.81V15.15A10.81,10.81,0,0,0,19.21,4.4V3.11a1.33,1.33,0,1,0-2.67,0V4.42A10.81,10.81,0,0,0,7.21,15.15v4.94A12.63,12.63,0,0,1,5.86,24.9a14.4,14.4,0,0,1-2.47,2.93l-.34.3v2.82H32.85Z"/><path d="M15.32,32a2.65,2.65,0,0,0,5.25,0Z"/>', solidBadged: '<path d="M18,34.28A2.67,2.67,0,0,0,20.58,32H15.32A2.67,2.67,0,0,0,18,34.28Z"/><path d="M32.85,28.13l-.34-.3A14.37,14.37,0,0,1,30,24.9a12.63,12.63,0,0,1-1.35-4.81V15.15a10.92,10.92,0,0,0-.16-1.79A7.5,7.5,0,0,1,22.5,6c0-.21,0-.42,0-.63a10.57,10.57,0,0,0-3.32-1V3.11a1.33,1.33,0,1,0-2.67,0V4.42A10.81,10.81,0,0,0,7.21,15.15v4.94A12.63,12.63,0,0,1,5.86,24.9a14.4,14.4,0,0,1-2.47,2.93l-.34.3v2.82H32.85Z"/>' })];

// node_modules/@cds/core/icon/shapes/calendar.js
var e28 = ["calendar", n23({ outline: '<path d="M32.25,6H29V8h3V30H4V8H7V6H3.75A1.78,1.78,0,0,0,2,7.81V30.19A1.78,1.78,0,0,0,3.75,32h28.5A1.78,1.78,0,0,0,34,30.19V7.81A1.78,1.78,0,0,0,32.25,6Z"/><rect x="8" y="14" width="2" height="2"/><rect x="14" y="14" width="2" height="2"/><rect x="20" y="14" width="2" height="2"/><rect x="26" y="14" width="2" height="2"/><rect x="8" y="19" width="2" height="2"/><rect x="14" y="19" width="2" height="2"/><rect x="20" y="19" width="2" height="2"/><rect x="26" y="19" width="2" height="2"/><rect x="8" y="24" width="2" height="2"/><rect" x="14" y="24" width="2" height="2"/><rect x="20" y="24" width="2" height="2"/><rect x="26" y="24" width="2" height="2"/><path d="M10,10a1,1,0,0,0,1-1V3A1,1,0,0,0,9,3V9A1,1,0,0,0,10,10Z"/><path d="M26,10a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V9A1,1,0,0,0,26,10Z"/><rect x="13" y="6" width="10" height="2"/>', outlineAlerted: '<path d="M33.68,15.4H32V30H4V8H7V6H3.75A1.78,1.78,0,0,0,2,7.81V30.19A1.78,1.78,0,0,0,3.75,32h28.5A1.78,1.78,0,0,0,34,30.19V15.38Z"/><rect x="8" y="14" width="2" height="2"/><rect x="14" y="14" width="2" height="2"/><rect x="8" y="19" width="2" height="2"/><rect x="14" y="19" width="2" height="2"/><rect x="20" y="19" width="2" height="2"/><rect x="26" y="19" width="2" height="2"/><rect x="8" y="24" width="2" height="2"/><rect x="14" y="24" width="2" height="2"/><rect x="20" y="24" width="2" height="2"/><rect x="26" y="24" width="2" height="2"/><path d="M10,10a1,1,0,0,0,1-1V3A1,1,0,0,0,9,3V9A1,1,0,0,0,10,10Z"/><polygon points="21.29 6 13 6 13 8 20.14 8 21.29 6"/>', outlineBadged: '<path d="M32,13.22V30H4V8H7V6H3.75A1.78,1.78,0,0,0,2,7.81V30.19A1.78,1.78,0,0,0,3.75,32h28.5A1.78,1.78,0,0,0,34,30.19V12.34A7.45,7.45,0,0,1,32,13.22Z"/><rect x="8" y="14" width="2" height="2"/><rect x="14" y="14" width="2" height="2"/><rect x="20" y="14" width="2" height="2"/><rect x="26" y="14" width="2" height="2"/><rect x="8" y="19" width="2" height="2"/><rect x="14" y="19" width="2" height="2"/><rect x="20" y="19" width="2" height="2"/><rect x="26" y="19" width="2" height="2"/><rect x="8" y="24" width="2" height="2"/><rect x="14" y="24" width="2" height="2"/><rect x="20" y="24" width="2" height="2"/><rect x="26" y="24" width="2" height="2"/><path d="M10,10a1,1,0,0,0,1-1V3A1,1,0,0,0,9,3V9A1,1,0,0,0,10,10Z"/><path d="M22.5,6H13V8h9.78A7.49,7.49,0,0,1,22.5,6Z"/>', solid: '<path d="M32.25,6h-4V9a2.2,2.2,0,1,1-4.4,0V6H12.2V9A2.2,2.2,0,0,1,7.8,9V6h-4A1.78,1.78,0,0,0,2,7.81V30.19A1.78,1.78,0,0,0,3.75,32h28.5A1.78,1.78,0,0,0,34,30.19V7.81A1.78,1.78,0,0,0,32.25,6ZM10,26H8V24h2Zm0-5H8V19h2Zm0-5H8V14h2Zm6,10H14V24h2Zm0-5H14V19h2Zm0-5H14V14h2Zm6,10H20V24h2Zm0-5H20V19h2Zm0-5H20V14h2Zm6,10H26V24h2Zm0-5H26V19h2Zm0-5H26V14h2Z"/><path d="M10,10a1,1,0,0,0,1-1V3A1,1,0,0,0,9,3V9A1,1,0,0,0,10,10Z"/><path d="M26,10a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V9A1,1,0,0,0,26,10Z"/>', solidAlerted: '<path d="M33.68,15.4H22.23A3.68,3.68,0,0,1,19,9.89L21.29,6H12.2V9A2.2,2.2,0,0,1,7.8,9V6h-4A1.78,1.78,0,0,0,2,7.81V30.19A1.78,1.78,0,0,0,3.75,32h28.5A1.78,1.78,0,0,0,34,30.19V15.38ZM10,26H8V24h2Zm0-5H8V19h2Zm0-5H8V14h2Zm6,10H14V24h2Zm0-5H14V19h2Zm0-5H14V14h2Zm6,10H20V24h2Zm0-5H20V19h2Zm6,5H26V24h2Zm0-5H26V19h2Z"/><path d="M10,10a1,1,0,0,0,1-1V3A1,1,0,0,0,9,3V9A1,1,0,0,0,10,10Z"/>', solidBadged: '<path d="M10,10a1,1,0,0,0,1-1V3A1,1,0,0,0,9,3V9A1,1,0,0,0,10,10Z"/><path d="M30,13.5A7.5,7.5,0,0,1,22.5,6H12.2V9A2.2,2.2,0,0,1,7.8,9V6h-4A1.78,1.78,0,0,0,2,7.81V30.19A1.78,1.78,0,0,0,3.75,32h28.5A1.78,1.78,0,0,0,34,30.19V12.34A7.45,7.45,0,0,1,30,13.5ZM10,26H8V24h2Zm0-5H8V19h2Zm0-5H8V14h2Zm6,10H14V24h2Zm0-5H14V19h2Zm0-5H14V14h2Zm6,10H20V24h2Zm0-5H20V19h2Zm0-5H20V14h2Zm6,10H26V24h2Zm0-5H26V19h2Zm0-5H26V14h2Z"/>' })];

// node_modules/@cds/core/icon/shapes/check.js
var o30 = ["check", n23({ outline: '<path d="M13.72,27.69,3.29,17.27a1,1,0,0,1,1.41-1.41l9,9L31.29,7.29a1,1,0,0,1,1.41,1.41Z"/>' })];

// node_modules/@cds/core/icon/shapes/check-circle.js
var l7 = ["check-circle", n23({ outline: '<path d="M18,6A12,12,0,1,0,30,18,12,12,0,0,0,18,6Zm0,22A10,10,0,1,1,28,18,10,10,0,0,1,18,28Z"/><path d="M16.34,23.74l-5-5a1,1,0,0,1,1.41-1.41l3.59,3.59,6.78-6.78a1,1,0,0,1,1.41,1.41Z"/>', solid: '<path d="M30,18A12,12,0,1,1,18,6,12,12,0,0,1,30,18Zm-4.77-2.16a1.4,1.4,0,0,0-2-2l-6.77,6.77L13,17.16a1.4,1.4,0,0,0-2,2l5.45,5.45Z"/>' })];

// node_modules/@cds/core/icon/shapes/cloud.js
var l8 = ["cloud", n23({ outline: '<path d="M27.14,33H10.62C5.67,33,1,28.19,1,23.1a10,10,0,0,1,8-9.75,10.19,10.19,0,0,1,20.33,1.06A10.07,10.07,0,0,1,29,16.66a8.29,8.29,0,0,1,6,8C35,29.1,31.33,33,27.14,33ZM19.09,6.23a8.24,8.24,0,0,0-8.19,8l0,.87-.86.1A7.94,7.94,0,0,0,3,23.1c0,4,3.77,7.9,7.62,7.9H27.14C30.21,31,33,28,33,24.65a6.31,6.31,0,0,0-5.37-6.26l-1.18-.18.39-1.13A8.18,8.18,0,0,0,19.09,6.23Z"/>', outlineAlerted: '<path d="M29,16.66a10.14,10.14,0,0,0,.2-1.3h-2a8.28,8.28,0,0,1-.37,1.72l-.39,1.13,1.18.18a6.31,6.31,0,0,1,5.37,6.26C32.95,28,30.16,31,27.09,31H10.57c-3.84,0-7.62-3.91-7.62-7.9a7.94,7.94,0,0,1,7-7.89l.86-.1,0-.87A8.16,8.16,0,0,1,21,6.47l1-1.8A10.19,10.19,0,0,0,8.91,13.36a10,10,0,0,0-8,9.75c0,5.09,4.67,9.9,9.62,9.9H27.09c4.19,0,7.86-3.9,7.86-8.35A8.29,8.29,0,0,0,29,16.66Z"/>', outlineBadged: '<path d="M29,16.66a10.07,10.07,0,0,0,.25-2.24c0-.33,0-.65,0-1a7.45,7.45,0,0,1-2.1-.54,8,8,0,0,1-.3,4.16l-.39,1.13,1.18.18a6.31,6.31,0,0,1,5.37,6.26C32.95,28,30.16,31,27.09,31H10.57c-3.84,0-7.62-3.91-7.62-7.9a7.94,7.94,0,0,1,7-7.89l.86-.1,0-.87a8.24,8.24,0,0,1,8.19-8A8.13,8.13,0,0,1,22.58,7a7.53,7.53,0,0,1-.08-1,7.51,7.51,0,0,1,.09-1.12A10.13,10.13,0,0,0,19,4.23,10.26,10.26,0,0,0,8.91,13.36a10,10,0,0,0-8,9.75c0,5.09,4.67,9.9,9.62,9.9H27.09c4.19,0,7.86-3.9,7.86-8.35A8.29,8.29,0,0,0,29,16.66Z"/>', solid: '<path d="M29,16.66a10.07,10.07,0,0,0,.25-2.24A10.19,10.19,0,0,0,8.91,13.36,10,10,0,0,0,1,23.1C1,28.19,5.62,33,10.57,33H27.09C31.28,33,35,29.1,35,24.65A8.29,8.29,0,0,0,29,16.66Z"/>', solidAlerted: '<path d="M29,16.66a10.15,10.15,0,0,0,.2-1.26h-7A3.68,3.68,0,0,1,19,9.89l3-5.21A10.19,10.19,0,0,0,8.91,13.36,10,10,0,0,0,1,23.1C1,28.19,5.62,33,10.57,33H27.09C31.28,33,35,29.1,35,24.65A8.29,8.29,0,0,0,29,16.66Z"/>', solidBadged: '<path d="M29,16.66a10.07,10.07,0,0,0,.25-2.24c0-.33,0-.65,0-1a7.44,7.44,0,0,1-6.6-8.58A10.13,10.13,0,0,0,19,4.23,10.26,10.26,0,0,0,8.91,13.36,10,10,0,0,0,1,23.1C1,28.19,5.62,33,10.57,33H27.09C31.28,33,35,29.1,35,24.65A8.29,8.29,0,0,0,29,16.66Z"/>' })];

// node_modules/@cds/core/icon/shapes/cog.js
var a21 = ["cog", n23({ outline: '<path d="M18.1,11c-3.9,0-7,3.1-7,7s3.1,7,7,7c3.9,0,7-3.1,7-7S22,11,18.1,11z M18.1,23c-2.8,0-5-2.2-5-5s2.2-5,5-5c2.8,0,5,2.2,5,5S20.9,23,18.1,23z"/><path d="M32.8,14.7L30,13.8l-0.6-1.5l1.4-2.6c0.3-0.6,0.2-1.4-0.3-1.9l-2.4-2.4c-0.5-0.5-1.3-0.6-1.9-0.3l-2.6,1.4l-1.5-0.6l-0.9-2.8C21,2.5,20.4,2,19.7,2h-3.4c-0.7,0-1.3,0.5-1.4,1.2L14,6c-0.6,0.1-1.1,0.3-1.6,0.6L9.8,5.2C9.2,4.9,8.4,5,7.9,5.5L5.5,7.9C5,8.4,4.9,9.2,5.2,9.8l1.3,2.5c-0.2,0.5-0.4,1.1-0.6,1.6l-2.8,0.9C2.5,15,2,15.6,2,16.3v3.4c0,0.7,0.5,1.3,1.2,1.5L6,22.1l0.6,1.5l-1.4,2.6c-0.3,0.6-0.2,1.4,0.3,1.9l2.4,2.4c0.5,0.5,1.3,0.6,1.9,0.3l2.6-1.4l1.5,0.6l0.9,2.9c0.2,0.6,0.8,1.1,1.5,1.1h3.4c0.7,0,1.3-0.5,1.5-1.1l0.9-2.9l1.5-0.6l2.6,1.4c0.6,0.3,1.4,0.2,1.9-0.3l2.4-2.4c0.5-0.5,0.6-1.3,0.3-1.9l-1.4-2.6l0.6-1.5l2.9-0.9c0.6-0.2,1.1-0.8,1.1-1.5v-3.4C34,15.6,33.5,14.9,32.8,14.7z M32,19.4l-3.6,1.1L28.3,21c-0.3,0.7-0.6,1.4-0.9,2.1l-0.3,0.5l1.8,3.3l-2,2l-3.3-1.8l-0.5,0.3c-0.7,0.4-1.4,0.7-2.1,0.9l-0.5,0.1L19.4,32h-2.8l-1.1-3.6L15,28.3c-0.7-0.3-1.4-0.6-2.1-0.9l-0.5-0.3l-3.3,1.8l-2-2l1.8-3.3l-0.3-0.5c-0.4-0.7-0.7-1.4-0.9-2.1l-0.1-0.5L4,19.4v-2.8l3.4-1l0.2-0.5c0.2-0.8,0.5-1.5,0.9-2.2l0.3-0.5L7.1,9.1l2-2l3.2,1.8l0.5-0.3c0.7-0.4,1.4-0.7,2.2-0.9l0.5-0.2L16.6,4h2.8l1.1,3.5L21,7.7c0.7,0.2,1.4,0.5,2.1,0.9l0.5,0.3l3.3-1.8l2,2l-1.8,3.3l0.3,0.5c0.4,0.7,0.7,1.4,0.9,2.1l0.1,0.5l3.6,1.1V19.4z"/>', outlineAlerted: '<path d="M33.7,15.4h-5.3v0.1l3.6,1.1v2.8l-3.6,1.1L28.3,21c-0.3,0.7-0.6,1.4-0.9,2.1l-0.3,0.5l1.8,3.3l-2,2l-3.3-1.8l-0.5,0.3c-0.7,0.4-1.4,0.7-2.1,0.9l-0.5,0.1L19.4,32h-2.8l-1.1-3.6L15,28.3c-0.7-0.3-1.4-0.6-2.1-0.9l-0.5-0.3l-3.3,1.8l-2-2l1.8-3.3l-0.3-0.5c-0.4-0.7-0.7-1.4-0.9-2.1l-0.1-0.5L4,19.4v-2.8l3.4-1l0.2-0.5c0.2-0.8,0.5-1.5,0.9-2.2l0.3-0.5L7.1,9.1l2-2l3.2,1.8l0.5-0.3c0.7-0.4,1.4-0.7,2.2-0.9l0.5-0.2L16.6,4h2.8l1.1,3.4l1.4-2.3l-0.6-2C21,2.4,20.4,2,19.7,2h-3.4c-0.7,0-1.3,0.5-1.4,1.2L14,6c-0.6,0.1-1.1,0.3-1.6,0.6L9.8,5.2C9.2,4.9,8.4,5,7.9,5.5L5.5,7.9C5,8.4,4.9,9.2,5.2,9.8l1.3,2.5c-0.2,0.5-0.4,1.1-0.6,1.6l-2.8,0.9C2.5,15,2,15.6,2,16.3v3.4c0,0.7,0.5,1.3,1.2,1.5L6,22.1l0.6,1.5l-1.4,2.6c-0.3,0.6-0.2,1.4,0.3,1.9l2.4,2.4c0.5,0.5,1.3,0.6,1.9,0.3l2.6-1.4l1.5,0.6l0.9,2.9c0.2,0.6,0.8,1.1,1.5,1.1h3.4c0.7,0,1.3-0.5,1.5-1.1l0.9-2.9l1.5-0.6l2.6,1.4c0.6,0.3,1.4,0.2,1.9-0.3l2.4-2.4c0.5-0.5,0.6-1.3,0.3-1.9l-1.4-2.6l0.6-1.5l2.9-0.9c0.6-0.2,1.1-0.8,1.1-1.5v-3.4C34,16,33.9,15.7,33.7,15.4z"/><path d="M18.1,23c-2.8,0-5-2.2-5-5s2.2-5,5-5c0.2,0,0.5,0,0.7,0.1c-0.2-0.6-0.3-1.3-0.2-2h-0.5c-3.9,0-7,3.1-7,7c0,3.9,3.1,7,7,7c3.9,0,7-3.1,7-7c0-0.9-0.2-1.8-0.5-2.6h-2.2c0.5,0.8,0.7,1.6,0.7,2.5C23.1,20.8,20.9,23,18.1,23z"/>', outlineBadged: '<path d="M11.1,18c0,3.9,3.1,7,7,7c3.9,0,7-3.1,7-7s-3.1-7-7-7C14.2,11,11.1,14.1,11.1,18z M23.1,18c0,2.8-2.2,5-5,5c-2.8,0-5-2.2-5-5s2.2-5,5-5C20.9,13,23.1,15.2,23.1,18z"/><path d="M32.8,14.7L30,13.8l-0.1-0.3c-0.8,0-1.6-0.2-2.4-0.4c0.3,0.6,0.6,1.3,0.8,1.9l0.1,0.5l3.6,1.1v2.8l-3.6,1.1L28.3,21c-0.3,0.7-0.6,1.4-0.9,2.1l-0.3,0.5l1.8,3.3l-2,2l-3.3-1.8l-0.5,0.3c-0.7,0.4-1.4,0.7-2.1,0.9l-0.5,0.1L19.4,32h-2.8l-1.1-3.6L15,28.3c-0.7-0.3-1.4-0.6-2.1-0.9l-0.5-0.3l-3.3,1.8l-2-2l1.8-3.3l-0.3-0.5c-0.4-0.7-0.7-1.4-0.9-2.1l-0.1-0.5L4,19.4v-2.8l3.4-1l0.2-0.5c0.2-0.8,0.5-1.5,0.9-2.2l0.3-0.5L7.1,9.1l2-2l3.2,1.8l0.5-0.3c0.7-0.4,1.4-0.7,2.2-0.9l0.5-0.2L16.6,4h2.8l1.1,3.5L21,7.7c0.7,0.2,1.3,0.5,1.9,0.8c-0.3-0.8-0.4-1.6-0.4-2.5l-0.4-0.2l-0.9-2.8C21,2.5,20.4,2,19.7,2h-3.4c-0.7,0-1.3,0.5-1.4,1.2L14,6c-0.6,0.1-1.1,0.3-1.6,0.6L9.8,5.2C9.2,4.9,8.4,5,7.9,5.5L5.5,7.9C5,8.4,4.9,9.2,5.2,9.8l1.3,2.5c-0.2,0.5-0.4,1.1-0.6,1.6l-2.8,0.9C2.5,15,2,15.6,2,16.3v3.4c0,0.7,0.5,1.3,1.2,1.5L6,22.1l0.6,1.5l-1.4,2.6c-0.3,0.6-0.2,1.4,0.3,1.9l2.4,2.4c0.5,0.5,1.3,0.6,1.9,0.3l2.6-1.4l1.5,0.6l0.9,2.9c0.2,0.6,0.8,1.1,1.5,1.1h3.4c0.7,0,1.3-0.5,1.5-1.1l0.9-2.9l1.5-0.6l2.6,1.4c0.6,0.3,1.4,0.2,1.9-0.3l2.4-2.4c0.5-0.5,0.6-1.3,0.3-1.9l-1.4-2.6l0.6-1.5l2.9-0.9c0.6-0.2,1.1-0.8,1.1-1.5v-3.4C34,15.6,33.5,14.9,32.8,14.7z"/>', solid: '<path d="M32.57,15.72l-3.35-1a11.65,11.65,0,0,0-.95-2.33l1.64-3.07a.61.61,0,0,0-.11-.72L27.41,6.2a.61.61,0,0,0-.72-.11L23.64,7.72a11.62,11.62,0,0,0-2.36-1l-1-3.31A.61.61,0,0,0,19.69,3H16.31a.61.61,0,0,0-.58.43l-1,3.3a11.63,11.63,0,0,0-2.38,1l-3-1.62a.61.61,0,0,0-.72.11L6.2,8.59a.61.61,0,0,0-.11.72l1.62,3a11.63,11.63,0,0,0-1,2.37l-3.31,1a.61.61,0,0,0-.43.58v3.38a.61.61,0,0,0,.43.58l3.33,1a11.62,11.62,0,0,0,1,2.33L6.09,26.69a.61.61,0,0,0,.11.72L8.59,29.8a.61.61,0,0,0,.72.11l3.09-1.65a11.65,11.65,0,0,0,2.3.94l1,3.37a.61.61,0,0,0,.58.43h3.38a.61.61,0,0,0,.58-.43l1-3.38a11.63,11.63,0,0,0,2.28-.94l3.11,1.66a.61.61,0,0,0,.72-.11l2.39-2.39a.61.61,0,0,0,.11-.72l-1.66-3.1a11.63,11.63,0,0,0,.95-2.29l3.37-1a.61.61,0,0,0,.43-.58V16.31A.61.61,0,0,0,32.57,15.72ZM18,23.5A5.5,5.5,0,1,1,23.5,18,5.5,5.5,0,0,1,18,23.5Z"/>', solidAlerted: '<path d="M32.57,15.72,31.5,15.4H22.85A5.5,5.5,0,1,1,18,12.5a5.53,5.53,0,0,1,.65,0A3.68,3.68,0,0,1,19,9.89l2.09-3.62-.86-2.83A.61.61,0,0,0,19.69,3H16.31a.61.61,0,0,0-.58.43l-1,3.3a11.63,11.63,0,0,0-2.38,1l-3-1.62a.61.61,0,0,0-.72.11L6.2,8.59a.61.61,0,0,0-.11.72l1.62,3a11.63,11.63,0,0,0-1,2.37l-3.31,1a.61.61,0,0,0-.43.58v3.38a.61.61,0,0,0,.43.58l3.33,1a11.62,11.62,0,0,0,1,2.33L6.09,26.69a.61.61,0,0,0,.11.72L8.59,29.8a.61.61,0,0,0,.72.11l3.09-1.65a11.65,11.65,0,0,0,2.3.94l1,3.37a.61.61,0,0,0,.58.43h3.38a.61.61,0,0,0,.58-.43l1-3.38a11.63,11.63,0,0,0,2.28-.94l3.11,1.66a.61.61,0,0,0,.72-.11l2.39-2.39a.61.61,0,0,0,.11-.72l-1.66-3.1a11.63,11.63,0,0,0,.95-2.29l3.37-1a.61.61,0,0,0,.43-.58V16.31A.61.61,0,0,0,32.57,15.72Z"/>', solidBadged: '<path d="M32.57,15.72l-3.35-1a12.12,12.12,0,0,0-.47-1.32,7.49,7.49,0,0,1-6.14-6.16,11.82,11.82,0,0,0-1.33-.48l-1-3.31A.61.61,0,0,0,19.69,3H16.31a.61.61,0,0,0-.58.43l-1,3.3a11.63,11.63,0,0,0-2.38,1l-3-1.62a.61.61,0,0,0-.72.11L6.2,8.59a.61.61,0,0,0-.11.72l1.62,3a11.63,11.63,0,0,0-1,2.37l-3.31,1a.61.61,0,0,0-.43.58v3.38a.61.61,0,0,0,.43.58l3.33,1a11.62,11.62,0,0,0,1,2.33L6.09,26.69a.61.61,0,0,0,.11.72L8.59,29.8a.61.61,0,0,0,.72.11l3.09-1.65a11.65,11.65,0,0,0,2.3.94l1,3.37a.61.61,0,0,0,.58.43h3.38a.61.61,0,0,0,.58-.43l1-3.38a11.63,11.63,0,0,0,2.28-.94l3.11,1.66a.61.61,0,0,0,.72-.11l2.39-2.39a.61.61,0,0,0,.11-.72l-1.66-3.1a11.63,11.63,0,0,0,.95-2.29l3.37-1a.61.61,0,0,0,.43-.58V16.31A.61.61,0,0,0,32.57,15.72ZM18,23.5A5.5,5.5,0,1,1,23.5,18,5.5,5.5,0,0,1,18,23.5Z"/>' })];

// node_modules/@cds/core/icon/shapes/ellipsis-horizontal.js
var i23 = ["ellipsis-horizontal", n23({ outline: '<circle cx="31.1" cy="18" r="2.9"/><circle cx="18" cy="18" r="2.9"/><circle cx="4.9" cy="18" r="2.9"/>', outlineBadged: '<circle cx="31.1" cy="18" r="2.9"/><circle cx="18" cy="18" r="2.9"/><circle cx="4.9" cy="18" r="2.9"/>' })];

// node_modules/@cds/core/icon/shapes/ellipsis-vertical.js
var e29 = ["ellipsis-vertical", n23({ outline: '<circle cx="18" cy="4.9" r="2.9"/><circle cx="18" cy="18" r="2.9"/><circle cx="18" cy="31.1" r="2.9"/>', outlineBadged: '<circle cx="18" cy="4.9" r="2.9"/><circle cx="18" cy="18" r="2.9"/><circle cx="18" cy="31.1" r="2.9"/>' })];

// node_modules/@cds/core/icon/shapes/error-standard.js
var d11 = ["error-standard", n23({ outline: '<circle cx="18" cy="26.06" r="1.33"/><path d="M18,22.61a1,1,0,0,1-1-1v-12a1,1,0,1,1,2,0v12A1,1,0,0,1,18,22.61Z"/><path d="M18,34A16,16,0,1,1,34,18,16,16,0,0,1,18,34ZM18,4A14,14,0,1,0,32,18,14,14,0,0,0,18,4Z"/>', solid: '<path d="M18,2.1a16,16,0,1,0,16,16A16,16,0,0,0,18,2.1ZM16.6,8.8a1.4,1.4,0,0,1,2.8,0v12a1.4,1.4,0,0,1-2.8,0ZM18,28.6a1.8,1.8,0,1,1,1.8-1.8A1.8,1.8,0,0,1,18,28.6Z"/>' })];

// node_modules/@cds/core/icon/shapes/event.js
var a22 = ["event", n23({ outline: '<path d="M16.17,25.86,10.81,20.5a1,1,0,0,1,1.41-1.41L16.17,23l8.64-8.64a1,1,0,0,1,1.41,1.41Z"/><path d="M32.25,6H29V8h3V30H4V8H7V6H3.75A1.78,1.78,0,0,0,2,7.81V30.19A1.78,1.78,0,0,0,3.75,32h28.5A1.78,1.78,0,0,0,34,30.19V7.81A1.78,1.78,0,0,0,32.25,6Z"/><path d="M10,10a1,1,0,0,0,1-1V3A1,1,0,0,0,9,3V9A1,1,0,0,0,10,10Z"/><path d="M26,10a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V9A1,1,0,0,0,26,10Z"/><rect x="13" y="6" width="10" height="2"/>', outlineAlerted: '<path d="M10,10a1,1,0,0,0,1-1V3A1,1,0,0,0,9,3V9A1,1,0,0,0,10,10Z"/><path d="M10.81,20.5l5.36,5.36L26.22,15.81a1,1,0,0,0,.23-.41H23.8L16.17,23l-3.94-3.94a1,1,0,0,0-1.41,1.41Z"/><polygon points="21.29 6 13 6 13 8 20.14 8 21.29 6"/><path d="M33.68,15.4H32V30H4V8H7V6H3.75A1.78,1.78,0,0,0,2,7.81V30.19A1.78,1.78,0,0,0,3.75,32h28.5A1.78,1.78,0,0,0,34,30.19V15.38Z"/>', outlineBadged: '<path d="M10.81,20.5l5.36,5.36L26.22,15.81a1,1,0,0,0-1.41-1.41L16.17,23l-3.94-3.94a1,1,0,0,0-1.41,1.41Z"/><path d="M10,10a1,1,0,0,0,1-1V3A1,1,0,0,0,9,3V9A1,1,0,0,0,10,10Z"/><path d="M32,13.22V30H4V8H7V6H3.75A1.78,1.78,0,0,0,2,7.81V30.19A1.78,1.78,0,0,0,3.75,32h28.5A1.78,1.78,0,0,0,34,30.19V12.34A7.45,7.45,0,0,1,32,13.22Z"/><path d="M22.5,6H13V8h9.78A7.49,7.49,0,0,1,22.5,6Z"/>', solid: '<path d="M10,10a1,1,0,0,0,1-1V3A1,1,0,0,0,9,3V9A1,1,0,0,0,10,10Z"/><path d="M26,10a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V9A1,1,0,0,0,26,10Z"/><path d="M32.25,6h-4V9a2.2,2.2,0,0,1-4.4,0V6H12.2V9A2.2,2.2,0,0,1,7.8,9V6h-4A1.78,1.78,0,0,0,2,7.81V30.19A1.78,1.78,0,0,0,3.75,32h28.5A1.78,1.78,0,0,0,34,30.19V7.81A1.78,1.78,0,0,0,32.25,6ZM25.94,16.58l-9.67,9.67L11,20.94A1.36,1.36,0,0,1,12.9,19l3.38,3.38L24,14.66a1.36,1.36,0,1,1,1.93,1.93Z"/>', solidAlerted: '<path d="M10,10a1,1,0,0,0,1-1V3A1,1,0,0,0,9,3V9A1,1,0,0,0,10,10Z"/><path d="M33.68,15.4H26.3a1.34,1.34,0,0,1-.36,1.18l-9.67,9.67L11,20.94A1.36,1.36,0,0,1,12.9,19l3.38,3.38,7-7h-1A3.68,3.68,0,0,1,19,9.89L21.29,6H12.2V9A2.2,2.2,0,0,1,7.8,9V6h-4A1.78,1.78,0,0,0,2,7.81V30.19A1.78,1.78,0,0,0,3.75,32h28.5A1.78,1.78,0,0,0,34,30.19V15.38Z"/>', solidBadged: '<path d="M10,10a1,1,0,0,0,1-1V3A1,1,0,0,0,9,3V9A1,1,0,0,0,10,10Z"/><path d="M30,13.5A7.5,7.5,0,0,1,22.5,6H12.2V9A2.2,2.2,0,0,1,7.8,9V6h-4A1.78,1.78,0,0,0,2,7.81V30.19A1.78,1.78,0,0,0,3.75,32h28.5A1.78,1.78,0,0,0,34,30.19V12.34A7.45,7.45,0,0,1,30,13.5Zm-4.06,3.08-9.67,9.67L11,20.94A1.36,1.36,0,0,1,12.9,19l3.38,3.38L24,14.66a1.36,1.36,0,1,1,1.93,1.93Z"/>' })];

// node_modules/@cds/core/icon/shapes/exclamation-circle.js
var e30 = ["exclamation-circle", n23({ outline: '<path d="M18,6A12,12,0,1,0,30,18,12,12,0,0,0,18,6Zm0,22A10,10,0,1,1,28,18,10,10,0,0,1,18,28Z"/><path d="M18,20.07a1.3,1.3,0,0,1-1.3-1.3v-6a1.3,1.3,0,1,1,2.6,0v6A1.3,1.3,0,0,1,18,20.07Z"/><circle cx="17.95" cy="23.02" r="1.5"/>', solid: '<path d="M18,6A12,12,0,1,0,30,18,12,12,0,0,0,18,6Zm-1.49,6a1.49,1.49,0,0,1,3,0v6.89a1.49,1.49,0,1,1-3,0ZM18,25.5a1.72,1.72,0,1,1,1.72-1.72A1.72,1.72,0,0,1,18,25.5Z"/>' })];

// node_modules/@cds/core/icon/shapes/exclamation-triangle.js
var e31 = ["exclamation-triangle", n23({ outline: '<path d="M18,21.32a1.3,1.3,0,0,0,1.3-1.3V14a1.3,1.3,0,1,0-2.6,0v6A1.3,1.3,0,0,0,18,21.32Z"/><circle cx="17.95" cy="24.27" r="1.5"/><path d="M30.33,25.54,20.59,7.6a3,3,0,0,0-5.27,0L5.57,25.54A3,3,0,0,0,8.21,30H27.69a3,3,0,0,0,2.64-4.43Zm-1.78,1.94a1,1,0,0,1-.86.49H8.21a1,1,0,0,1-.88-1.48L17.07,8.55a1,1,0,0,1,1.76,0l9.74,17.94A1,1,0,0,1,28.55,27.48Z"/>', solid: '<path d="M30.33,25.54,20.59,7.6a3,3,0,0,0-5.27,0L5.57,25.54A3,3,0,0,0,8.21,30H27.69a3,3,0,0,0,2.64-4.43ZM16.46,12.74a1.49,1.49,0,0,1,3,0v6.89a1.49,1.49,0,1,1-3,0ZM18,26.25a1.72,1.72,0,1,1,1.72-1.72A1.72,1.72,0,0,1,18,26.25Z"/>' })];

// node_modules/@cds/core/icon/shapes/eye.js
var r26 = ["eye", n23({ outline: '<path d="M33.62,17.53c-3.37-6.23-9.28-10-15.82-10S5.34,11.3,2,17.53L1.72,18l.26.48c3.37,6.23,9.28,10,15.82,10s12.46-3.72,15.82-10l.26-.48ZM17.8,26.43C12.17,26.43,7,23.29,4,18c3-5.29,8.17-8.43,13.8-8.43S28.54,12.72,31.59,18C28.54,23.29,23.42,26.43,17.8,26.43Z"/><path d="M18.09,11.17A6.86,6.86,0,1,0,25,18,6.86,6.86,0,0,0,18.09,11.17Zm0,11.72A4.86,4.86,0,1,1,23,18,4.87,4.87,0,0,1,18.09,22.89Z"/>', solid: '<path d="M33.62,17.53c-3.37-6.23-9.28-10-15.82-10S5.34,11.3,2,17.53L1.72,18l.26.48c3.37,6.23,9.28,10,15.82,10s12.46-3.72,15.82-10l.26-.48ZM17.8,26.43C12.17,26.43,7,23.29,4,18c3-5.29,8.17-8.43,13.8-8.43S28.54,12.72,31.59,18C28.54,23.29,23.42,26.43,17.8,26.43Z"/><circle cx="18.09" cy="18.03" r="6.86"/>' })];

// node_modules/@cds/core/icon/shapes/eye-hide.js
var e32 = ["eye-hide", n23({ outline: '<path d="M25.19,20.4A6.78,6.78,0,0,0,25.62,18a6.86,6.86,0,0,0-6.86-6.86,6.79,6.79,0,0,0-2.37.43L18,13.23a4.78,4.78,0,0,1,.74-.06A4.87,4.87,0,0,1,23.62,18a4.79,4.79,0,0,1-.06.74Z"/><path d="M34.29,17.53c-3.37-6.23-9.28-10-15.82-10a16.82,16.82,0,0,0-5.24.85L14.84,10a14.78,14.78,0,0,1,3.63-.47c5.63,0,10.75,3.14,13.8,8.43a17.75,17.75,0,0,1-4.37,5.1l1.42,1.42a19.93,19.93,0,0,0,5-6l.26-.48Z"/><path d="M4.87,5.78l4.46,4.46a19.52,19.52,0,0,0-6.69,7.29L2.38,18l.26.48c3.37,6.23,9.28,10,15.82,10a16.93,16.93,0,0,0,7.37-1.69l5,5,1.75-1.5-26-26Zm9.75,9.75,6.65,6.65a4.81,4.81,0,0,1-2.5.72A4.87,4.87,0,0,1,13.9,18,4.81,4.81,0,0,1,14.62,15.53Zm-1.45-1.45a6.85,6.85,0,0,0,9.55,9.55l1.6,1.6a14.91,14.91,0,0,1-5.86,1.2c-5.63,0-10.75-3.14-13.8-8.43a17.29,17.29,0,0,1,6.12-6.3Z"/>', solid: '<path d="M18.37,11.17A6.79,6.79,0,0,0,16,11.6l8.8,8.8A6.78,6.78,0,0,0,25.23,18,6.86,6.86,0,0,0,18.37,11.17Z"/><path d="M34.29,17.53c-3.37-6.23-9.28-10-15.82-10a16.82,16.82,0,0,0-5.24.85L14.84,10a14.78,14.78,0,0,1,3.63-.47c5.63,0,10.75,3.14,13.8,8.43a17.75,17.75,0,0,1-4.37,5.1l1.42,1.42a19.93,19.93,0,0,0,5-6l.26-.48Z"/><path d="M4.87,5.78l4.46,4.46a19.52,19.52,0,0,0-6.69,7.29L2.38,18l.26.48c3.37,6.23,9.28,10,15.82,10a16.93,16.93,0,0,0,7.37-1.69l5,5,1.75-1.5-26-26Zm8.3,8.3a6.85,6.85,0,0,0,9.55,9.55l1.6,1.6a14.91,14.91,0,0,1-5.86,1.2c-5.63,0-10.75-3.14-13.8-8.43a17.29,17.29,0,0,1,6.12-6.3Z"/>' })];

// node_modules/@cds/core/icon/shapes/filter-grid.js
var r27 = ["filter-grid", n23({ outline: '<path d="M15,25.86l2,1V20.27a1,1,0,0,0-.29-.7L10.23,13H25.79l-6.47,6.57a1,1,0,0,0-.29.7L19,28l2,1V20.68L27.58,14A1.46,1.46,0,0,0,28,13V12a1,1,0,0,0-1-1H9a1,1,0,0,0-1,1v1a1.46,1.46,0,0,0,.42,1L15,20.68Z"/>', solid: '<path d="M8,11v1.12a.5.5,0,0,0,.15.35l7.28,7.36a.5.5,0,0,1,.15.35v6.89a.5.5,0,0,0,.28.45l3.95,1.41a.5.5,0,0,0,.72-.45l0-8.39a.54.54,0,0,1,.18-.35l7.12-7.25a.5.5,0,0,0,.15-.35V11Z"/>' })];

// node_modules/@cds/core/icon/shapes/filter-grid-circle.js
var r28 = ["filter-grid-circle", n23({ outline: '<path d="M15,25.86l2,1V20.27a1,1,0,0,0-.29-.7L10.23,13H25.79l-6.47,6.57a1,1,0,0,0-.29.7L19,28l2,1V20.68L27.58,14A1.46,1.46,0,0,0,28,13V12a1,1,0,0,0-1-1H9a1,1,0,0,0-1,1v1a1.46,1.46,0,0,0,.42,1L15,20.68Z"/><path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,30A14,14,0,1,1,32,18,14,14,0,0,1,18,32Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,30A14,14,0,1,1,32,18,14,14,0,0,1,18,32Z"/><path d="M8,11v1.12a.5.5,0,0,0,.15.35l7.28,7.36a.5.5,0,0,1,.15.35v6.89a.5.5,0,0,0,.28.45l3.95,1.41a.5.5,0,0,0,.72-.45l0-8.39a.54.54,0,0,1,.18-.35l7.12-7.25a.5.5,0,0,0,.15-.35V11Z"/>' })];

// node_modules/@cds/core/icon/shapes/folder.js
var V2 = ["folder", n23({ outline: '<path d="M30,9H16.42L14.11,5.82A2,2,0,0,0,12.49,5H6A2,2,0,0,0,4,7V29a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V11A2,2,0,0,0,30,9Zm0,20H6V13h7.31a2,2,0,0,0,2-2H6V7h6.49l2.61,3.59a1,1,0,0,0,.81.41H30Z"/>', outlineAlerted: '<path d="M30,15.4V29H6V13h7.31a2,2,0,0,0,2-2H6V7h6.49l2.61,3.59a1,1,0,0,0,.81.41h2.73A3.66,3.66,0,0,1,19,9.89L19.56,9H16.42L14.11,5.82A2,2,0,0,0,12.49,5H6A2,2,0,0,0,4,7V29a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V15.4Z"/>', outlineBadged: '<path d="M30,13.5V29H6V13h7.31a2,2,0,0,0,2-2H6V7h6.49l2.61,3.59a1,1,0,0,0,.81.41h8.51a7.5,7.5,0,0,1-1.29-2H16.42L14.11,5.82A2,2,0,0,0,12.49,5H6A2,2,0,0,0,4,7V29a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V13.22A7.49,7.49,0,0,1,30,13.5Z"/>', solid: '<path d="M30,9H16.42L14.11,5.82A2,2,0,0,0,12.49,5H6A2,2,0,0,0,4,7V29a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V11A2,2,0,0,0,30,9ZM6,11V7h6.49l2.72,4Z"/>', solidAlerted: '<path d="M22.23,15.4A3.68,3.68,0,0,1,19,9.89L19.56,9H16.42L14.11,5.82A2,2,0,0,0,12.49,5H6A2,2,0,0,0,4,7V29a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V15.4ZM6,11V7h6.49l2.72,4Z"/>', solidBadged: '<path d="M30,13.5A7.5,7.5,0,0,1,23.13,9H16.42L14.11,5.82A2,2,0,0,0,12.49,5H6A2,2,0,0,0,4,7V29a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V13.22A7.49,7.49,0,0,1,30,13.5ZM6,11V7h6.49l2.72,4Z"/>' })];

// node_modules/@cds/core/icon/shapes/folder-open.js
var H2 = ["folder-open", n23({ outline: '<path d="M35.32,13.74A1.71,1.71,0,0,0,33.87,13H11.17a2.59,2.59,0,0,0-2.25,1.52,1,1,0,0,0,0,.14L6,25V7h6.49l2.61,3.59a1,1,0,0,0,.81.41H32a2,2,0,0,0-2-2H16.42L14.11,5.82A2,2,0,0,0,12.49,5H6A2,2,0,0,0,4,7V29.69A1.37,1.37,0,0,0,5.41,31H30.34a1,1,0,0,0,1-.72l4.19-15.1A1.64,1.64,0,0,0,35.32,13.74ZM29.55,29H6.9l3.88-13.81a.66.66,0,0,1,.38-.24H33.49Z"/>', outlineAlerted: '<path d="M33.68,15.4h-.3L29.55,29H6.9l3.88-13.81a.66.66,0,0,1,.38-.24h9.42A3.67,3.67,0,0,1,19,13.56a3.63,3.63,0,0,1-.26-.56H11.17a2.59,2.59,0,0,0-2.25,1.52,1,1,0,0,0,0,.14L6,25V7h6.49l2.61,3.59a1,1,0,0,0,.81.41h2.73A3.66,3.66,0,0,1,19,9.89L19.56,9H16.42L14.11,5.82A2,2,0,0,0,12.49,5H6A2,2,0,0,0,4,7V29.69A1.37,1.37,0,0,0,5.41,31H30.34a1,1,0,0,0,1-.72l4.19-15.1a1.68,1.68,0,0,0,.07-.32A3.67,3.67,0,0,1,33.68,15.4Z"/>', outlineBadged: '<path d="M35.32,13.74A1.71,1.71,0,0,0,33.87,13H11.17a2.59,2.59,0,0,0-2.25,1.52,1,1,0,0,0,0,.14L6,25V7h6.49l2.61,3.59a1,1,0,0,0,.81.41h8.52a7.49,7.49,0,0,1-1.29-2H16.42L14.11,5.82A2,2,0,0,0,12.49,5H6A2,2,0,0,0,4,7V29.69A1.37,1.37,0,0,0,5.41,31H30.34a1,1,0,0,0,1-.72l4.19-15.1A1.64,1.64,0,0,0,35.32,13.74ZM29.55,29H6.9l3.88-13.81a.66.66,0,0,1,.38-.24H33.49Z"/>', solid: '<path d="M35.32,13.74A1.71,1.71,0,0,0,33.87,13H11.17a2.59,2.59,0,0,0-2.25,1.52,1,1,0,0,0,0,.14L6,25V7h6.49l2.61,3.59a1,1,0,0,0,.81.41H32a2,2,0,0,0-2-2H16.42L14.11,5.82A2,2,0,0,0,12.49,5H6A2,2,0,0,0,4,7V29.69A1.37,1.37,0,0,0,5.41,31H30.34a1,1,0,0,0,1-.72l4.19-15.1A1.64,1.64,0,0,0,35.32,13.74Z"/>', solidAlerted: '<path d="M33.68,15.4H22.23A3.69,3.69,0,0,1,19,13.56a3.63,3.63,0,0,1-.26-.56H11.17a2.59,2.59,0,0,0-2.25,1.52,1,1,0,0,0,0,.14L6,25V7h6.49l2.61,3.59a1,1,0,0,0,.81.41h2.73A3.66,3.66,0,0,1,19,9.89L19.56,9H16.42L14.11,5.82A2,2,0,0,0,12.49,5H6A2,2,0,0,0,4,7V29.69A1.37,1.37,0,0,0,5.41,31H30.34a1,1,0,0,0,1-.72l4.19-15.1a1.68,1.68,0,0,0,.07-.32A3.67,3.67,0,0,1,33.68,15.4Z"/>', solidBadged: '<path d="M35.32,13.74A1.71,1.71,0,0,0,33.87,13H11.17a2.59,2.59,0,0,0-2.25,1.52,1,1,0,0,0,0,.14L6,25V7h6.49l2.61,3.59a1,1,0,0,0,.81.41h8.52a7.49,7.49,0,0,1-1.31-2H16.42L14.11,5.82A2,2,0,0,0,12.49,5H6A2,2,0,0,0,4,7V29.69A1.37,1.37,0,0,0,5.41,31H30.34a1,1,0,0,0,1-.72l4.19-15.1A1.64,1.64,0,0,0,35.32,13.74Z"/>' })];

// node_modules/@cds/core/icon/shapes/help-info.js
var o31 = ["help-info", n23({ outline: '<path d="M25.39,25.45a1,1,0,0,0-1.38.29c-1.41,2.16-4,4.81-6.31,5.7s-4.12.57-4.84,0c-.31-.27-1.12-1-.43-3.49.46-1.66,3.32-9.48,4-11.38l-2.18.28c-.69,1.86-3.29,8.84-3.76,10.58-.68,2.49-.34,4.3,1.09,5.56A5.59,5.59,0,0,0,15,34a9.53,9.53,0,0,0,3.45-.7c2.79-1.09,5.72-4.12,7.26-6.47A1,1,0,0,0,25.39,25.45Z"/><path d="M19.3,11a4.5,4.5,0,1,0-4.5-4.5A4.5,4.5,0,0,0,19.3,11Zm0-7a2.5,2.5,0,1,1-2.5,2.5A2.5,2.5,0,0,1,19.3,4Z"/><path d="M11.81,15c.06,0,6.27-.82,7.73-1,.65-.1,1.14,0,1.3.15s.21.8-.07,1.68c-.61,1.86-3.69,11-4.59,13.71a8,8,0,0,0,1.29-.38,7.32,7.32,0,0,0,1.15-.6C19.85,25,22.15,18.1,22.67,16.52s.39-2.78-.3-3.6a3.16,3.16,0,0,0-3.08-.83c-1.43.15-7.47.94-7.73,1a1,1,0,0,0,.26,2Z"/>', solid: '<circle cx="20.75" cy="6" r="4"/><path d="M24.84,26.23a1,1,0,0,0-1.4.29,16.6,16.6,0,0,1-3.51,3.77c-.33.25-1.56,1.2-2.08,1-.36-.11-.15-.82-.08-1.12l.53-1.57c.22-.64,4.05-12,4.47-13.3.62-1.9.35-3.77-2.48-3.32-.77.08-8.58,1.09-8.72,1.1a1,1,0,0,0,.13,2s3-.39,3.33-.42a.88.88,0,0,1,.85.44,2.47,2.47,0,0,1-.07,1.71c-.26,1-4.37,12.58-4.5,13.25a2.78,2.78,0,0,0,1.18,3,5,5,0,0,0,3.08.83h0a8.53,8.53,0,0,0,3.09-.62c2.49-1,5.09-3.66,6.46-5.75A1,1,0,0,0,24.84,26.23Z"/>' })];

// node_modules/@cds/core/icon/shapes/home.js
var V3 = ["home", n23({ outline: '<path d="M33.71,17.29l-15-15a1,1,0,0,0-1.41,0l-15,15a1,1,0,0,0,1.41,1.41L18,4.41,32.29,18.71a1,1,0,0,0,1.41-1.41Z"/><path d="M28,32h-5V22H13V32H8V18L6,20V32a2,2,0,0,0,2,2h7V24h6V34h7a2,2,0,0,0,2-2V19.76l-2-2Z"/>', solid: '<path d="M33,19a1,1,0,0,1-.71-.29L18,4.41,3.71,18.71a1,1,0,0,1-1.41-1.41l15-15a1,1,0,0,1,1.41,0l15,15A1,1,0,0,1,33,19Z"/><path d="M18,7.79,6,19.83V32a2,2,0,0,0,2,2h7V24h6V34h7a2,2,0,0,0,2-2V19.76Z"/>' })];

// node_modules/@cds/core/icon/shapes/image.js
var Z = ["image", n23({ outline: '<path d="M32,4H4A2,2,0,0,0,2,6V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V6A2,2,0,0,0,32,4ZM4,30V6H32V30Z"/><path d="M8.92,14a3,3,0,1,0-3-3A3,3,0,0,0,8.92,14Zm0-4.6A1.6,1.6,0,1,1,7.33,11,1.6,1.6,0,0,1,8.92,9.41Z"/><path d="M22.78,15.37l-5.4,5.4-4-4a1,1,0,0,0-1.41,0L5.92,22.9v2.83l6.79-6.79L16,22.18l-3.75,3.75H15l8.45-8.45L30,24V21.18l-5.81-5.81A1,1,0,0,0,22.78,15.37Z"/>', outlineBadged: '<path d="M11.93,11a3,3,0,1,0-3,3A3,3,0,0,0,11.93,11Zm-4.6,0a1.6,1.6,0,1,1,1.6,1.6A1.6,1.6,0,0,1,7.33,11Z"/><path d="M17.38,20.77l-4-4a1,1,0,0,0-1.41,0L5.92,22.9v2.83l6.79-6.79L16,22.18l-3.75,3.75H15l8.45-8.45L30,24V21.18l-5.81-5.81a1,1,0,0,0-1.41,0Z"/><path d="M32,13.22V30H4V6H22.5a7.49,7.49,0,0,1,.28-2H4A2,2,0,0,0,2,6V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V12.34A7.45,7.45,0,0,1,32,13.22Z"/>', solid: '<path d="M32,4H4A2,2,0,0,0,2,6V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V6A2,2,0,0,0,32,4ZM8.92,8a3,3,0,1,1-3,3A3,3,0,0,1,8.92,8ZM6,27V22.9l6-6.08a1,1,0,0,1,1.41,0L16,19.35,8.32,27Zm24,0H11.15l6.23-6.23,5.4-5.4a1,1,0,0,1,1.41,0L30,21.18Z"/>', solidBadged: '<path d="M30,13.5A7.48,7.48,0,0,1,22.78,4H4A2,2,0,0,0,2,6V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V12.34A7.46,7.46,0,0,1,30,13.5ZM8.92,8a3,3,0,1,1-3,3A3,3,0,0,1,8.92,8ZM6,27V22.9l6-6.08a1,1,0,0,1,1.41,0L16,19.35,8.32,27Zm24,0H11.15l6.23-6.23,5.4-5.4a1,1,0,0,1,1.41,0L30,21.18Z"/>' })];

// node_modules/@cds/core/icon/shapes/info-circle.js
var r29 = ["info-circle", n23({ outline: '<circle cx="17.93" cy="11.9" r="1.4"/><path d="M21,23H19V15H16a1,1,0,0,0,0,2h1v6H15a1,1,0,1,0,0,2h6a1,1,0,0,0,0-2Z"/><path d="M18,6A12,12,0,1,0,30,18,12,12,0,0,0,18,6Zm0,22A10,10,0,1,1,28,18,10,10,0,0,1,18,28Z"/>', solid: '<path d="M18,6A12,12,0,1,0,30,18,12,12,0,0,0,18,6Zm-2,5.15a2,2,0,1,1,2,2A2,2,0,0,1,15.9,11.15ZM23,24a1,1,0,0,1-1,1H15a1,1,0,1,1,0-2h2V17H16a1,1,0,0,1,0-2h4v8h2A1,1,0,0,1,23,24Z"/>' })];

// node_modules/@cds/core/icon/shapes/info-standard.js
var d12 = ["info-standard", n23({ outline: '<circle cx="17.97" cy="10.45" r="1.4"/><path d="M21,25H19V14.1H16a1,1,0,0,0,0,2h1V25H15a1,1,0,0,0,0,2h6a1,1,0,0,0,0-2Z"/><path d="M18,34A16,16,0,1,1,34,18,16,16,0,0,1,18,34ZM18,4A14,14,0,1,0,32,18,14,14,0,0,0,18,4Z"/>', solid: '<path d="M18,2.1a16,16,0,1,0,16,16A16,16,0,0,0,18,2.1Zm-.1,5.28a2,2,0,1,1-2,2A2,2,0,0,1,17.9,7.38Zm3.6,21.25h-7a1.4,1.4,0,1,1,0-2.8h2.1v-9.2H15a1.4,1.4,0,1,1,0-2.8h4.4v12h2.1a1.4,1.4,0,1,1,0,2.8Z"/>' })];

// node_modules/@cds/core/icon/shapes/search.js
var o32 = ["search", n23({ outline: '<path d="M16.33,5.05A10.95,10.95,0,1,1,5.39,16,11,11,0,0,1,16.33,5.05m0-2.05a13,13,0,1,0,13,13,13,13,0,0,0-13-13Z"/><path d="M35,33.29l-7.37-7.42-1.42,1.41,7.37,7.42A1,1,0,1,0,35,33.29Z"/>' })];

// node_modules/@cds/core/icon/shapes/step-forward-2.js
var o33 = ["step-forward-2", n23({ outline: '<path d="M7.08,6.52a1.68,1.68,0,0,0,0,2.4L16.51,18,7.12,27.08a1.7,1.7,0,0,0,2.36,2.44h0L21.4,18,9.48,6.47A1.69,1.69,0,0,0,7.08,6.52Z"/><path d="M26.49,5a1.7,1.7,0,0,0-1.7,1.7V29.3a1.7,1.7,0,0,0,3.4,0V6.7A1.7,1.7,0,0,0,26.49,5Z"/>' })];

// node_modules/@cds/core/icon/shapes/success-standard.js
var d13 = ["success-standard", n23({ outline: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,30A14,14,0,1,1,32,18,14,14,0,0,1,18,32Z"/><path d="M28,12.1a1,1,0,0,0-1.41,0L15.49,23.15l-6-6A1,1,0,0,0,8,18.53L15.49,26,28,13.52A1,1,0,0,0,28,12.1Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2ZM28.45,12.63,15.31,25.76,7.55,18a1.4,1.4,0,0,1,2-2l5.78,5.78L26.47,10.65a1.4,1.4,0,1,1,2,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/times.js
var o34 = ["times", n23({ outline: '<path d="M19.41,18l8.29-8.29a1,1,0,0,0-1.41-1.41L18,16.59,9.71,8.29A1,1,0,0,0,8.29,9.71L16.59,18,8.29,26.29a1,1,0,1,0,1.41,1.41L18,19.41l8.29,8.29a1,1,0,0,0,1.41-1.41Z"/>' })];

// node_modules/@cds/core/icon/shapes/unknown-status.js
var o35 = ["unknown-status", n23({ outline: '<circle cx="17.58" cy="26.23" r="1.4"/><path d="M24.7,13a5.18,5.18,0,0,0-2.16-3.56,7.26,7.26,0,0,0-5.71-1.09A11.34,11.34,0,0,0,12,10.44,1,1,0,1,0,13.26,12a9.32,9.32,0,0,1,3.94-1.72,5.29,5.29,0,0,1,4.16.74,3.21,3.21,0,0,1,1.35,2.19c.33,2.69-3.19,3.75-5.32,4.14l-.82.15v4.36a1,1,0,0,0,2,0V19.17C24.61,17.79,24.88,14.41,24.7,13Z"/>' })];

// node_modules/@cds/core/icon/shapes/user.js
var d14 = ["user", n23({ outline: '<path d="M18,17a7,7,0,1,0-7-7A7,7,0,0,0,18,17ZM18,5a5,5,0,1,1-5,5A5,5,0,0,1,18,5Z"/><path d="M30.47,24.37a17.16,17.16,0,0,0-24.93,0A2,2,0,0,0,5,25.74V31a2,2,0,0,0,2,2H29a2,2,0,0,0,2-2V25.74A2,2,0,0,0,30.47,24.37ZM29,31H7V25.73a15.17,15.17,0,0,1,22,0h0Z"/>', outlineAlerted: '<path d="M30.47,24.37a17.16,17.16,0,0,0-24.93,0A2,2,0,0,0,5,25.74V31a2,2,0,0,0,2,2H29a2,2,0,0,0,2-2V25.74A2,2,0,0,0,30.47,24.37ZM29,31H7V25.73a15.17,15.17,0,0,1,22,0h0Z"/><path d="M18,17a7,7,0,0,0,4.45-1.6h-.22A3.68,3.68,0,0,1,20,14.6a5,5,0,1,1,1.24-8.42l1-1.76A7,7,0,1,0,18,17Z"/>', outlineBadged: '<path d="M30.47,24.37a17.16,17.16,0,0,0-24.93,0A2,2,0,0,0,5,25.74V31a2,2,0,0,0,2,2H29a2,2,0,0,0,2-2V25.74A2,2,0,0,0,30.47,24.37ZM29,31H7V25.73a15.17,15.17,0,0,1,22,0h0Z"/><path d="M18,17a7,7,0,0,0,6.85-5.56,7.4,7.4,0,0,1-2.24-6.69A7,7,0,1,0,18,17ZM18,5a5,5,0,1,1-5,5A5,5,0,0,1,18,5Z"/>', solid: '<path d="M30.61,24.52a17.16,17.16,0,0,0-25.22,0,1.51,1.51,0,0,0-.39,1v6A1.5,1.5,0,0,0,6.5,33h23A1.5,1.5,0,0,0,31,31.5v-6A1.51,1.51,0,0,0,30.61,24.52Z"/><circle cx="18" cy="10" r="7"/>', solidAlerted: '<path d="M30.61,24.52a17.16,17.16,0,0,0-25.22,0,1.51,1.51,0,0,0-.39,1v6A1.5,1.5,0,0,0,6.5,33h23A1.5,1.5,0,0,0,31,31.5v-6A1.51,1.51,0,0,0,30.61,24.52Z"/><path d="M18,17a7,7,0,0,0,4.45-1.6h-.22A3.68,3.68,0,0,1,19,9.89l3.16-5.47A7,7,0,1,0,18,17Z"/>', solidBadged: '<path d="M30.61,24.52a17.16,17.16,0,0,0-25.22,0,1.51,1.51,0,0,0-.39,1v6A1.5,1.5,0,0,0,6.5,33h23A1.5,1.5,0,0,0,31,31.5v-6A1.51,1.51,0,0,0,30.61,24.52Z"/><path d="M18,17a7,7,0,0,0,6.85-5.56,7.4,7.4,0,0,1-2.24-6.69A7,7,0,1,0,18,17Z"/>' })];

// node_modules/@cds/core/icon/shapes/view-columns.js
var n24 = ["view-columns", n23({ outline: '<path d="M31,5H5A2,2,0,0,0,3,7V29a2,2,0,0,0,2,2H31a2,2,0,0,0,2-2V7A2,2,0,0,0,31,5ZM13,29H5V7h8Zm10,0H15V7h8Z"/>' })];

// node_modules/@cds/core/icon/shapes/warning-standard.js
var C5 = ["warning-standard", n23({ outline: '<circle cx="18" cy="26.06" r="1.33"/><path d="M18,22.61a1,1,0,0,1-1-1v-12a1,1,0,1,1,2,0v12A1,1,0,0,1,18,22.61Z"/><path d="M15.0620782,1.681196 C15.6298819,0.649266355 16.7109091,0.0102219396 17.885,0.0102219396 C19.0590909,0.0102219396 20.1401181,0.649266355 20.7086433,1.68252129 L34.598644,27.2425225 C35.1407746,28.2401397 35.1174345,29.4495373 34.5372161,30.4254943 C33.9569977,31.4014514 32.905671,31.9996984 31.77,32 L4.02239323,31.9997492 C2.87409009,32.0254699 1.79902843,31.4375753 1.20106335,30.4569126 C0.603098265,29.4762499 0.572777899,28.2513179 1.12207818,27.241196 L15.0620782,1.681196 Z M2.87850767,28.1977282 C2.67060966,28.5800376 2.6820975,29.0441423 2.9086557,29.4156977 C3.1352139,29.7872532 3.5425354,30.0099959 4,30 L31.7697344,30 C32.1999191,29.9998858 32.5982478,29.7732208 32.8180821,29.4034482 C33.0379164,29.0336757 33.0467595,28.5754567 32.8413567,28.1974787 L18.9538739,2.64208195 C18.7394236,2.25234436 18.3298419,2.01022194 17.885,2.01022194 C17.4406889,2.01022194 17.0315538,2.25176692 16.8168946,2.64068753 L2.87850767,28.1977282 Z"/>', solid: '<path d="M34.6,29.21,20.71,3.65a3.22,3.22,0,0,0-5.66,0L1.17,29.21A3.22,3.22,0,0,0,4,34H31.77a3.22,3.22,0,0,0,2.83-4.75ZM16.6,10a1.4,1.4,0,0,1,2.8,0v12a1.4,1.4,0,0,1-2.8,0ZM18,29.85a1.8,1.8,0,1,1,1.8-1.8A1.8,1.8,0,0,1,18,29.85Z"/>' })];

// node_modules/@cds/core/icon/shapes/detail-expand.js
var t43 = ["detail-expand", n23({ outline: '<g><path d="M14.71 19.71l.68-.71-.68-.71-4.51-4.67A1 1 0 108.76 15l2.89 3H2a1 1 0 000 2h9.65l-2.89 3a1 1 0 000 1.42 1.05 1.05 0 00.7.28 1 1 0 00.72-.31l4.51-4.67z"/><path d="M33 32H9v-4a1 1 0 012 0v2h20V6H11v4a1 1 0 01-2 0V4h24z"/></g>' })];

// node_modules/@cds/core/icon/shapes/detail-collapse.js
var e33 = ["detail-collapse", n23({ outline: '<g><path d="M32 18H18.35l2.89-3a1 1 0 10-1.44-1.39l-4.51 4.67-.68.71.68.71 4.51 4.67a1 1 0 00.72.31 1.05 1.05 0 00.7-.28 1 1 0 000-1.42l-2.89-3H32a1 1 0 000-2zM7 32a1 1 0 01-1-1V5a1 1 0 012 0v26a1 1 0 01-1 1zM11 32a1 1 0 01-1-1V5a1 1 0 012 0v26a1 1 0 01-1 1z"/></g>' })];

// node_modules/@cds/core/icon/shapes/accessibility-1.js
var h9 = ["accessibility-1", n23({ outline: '<path d="M14.44,31.94a7.31,7.31,0,0,1-5.7-11.88L7.32,18.64a9.3,9.3,0,0,0,13.1,13.11L19,30.33A7.29,7.29,0,0,1,14.44,31.94Z"/><path d="M25.36,1.67a4.12,4.12,0,1,0,4.11,4.11A4.12,4.12,0,0,0,25.36,1.67Zm0,6.23a2.12,2.12,0,1,1,2.11-2.12A2.12,2.12,0,0,1,25.36,7.9Z"/><path d="M26.56,18.18h-5a1,1,0,0,0-.24.05l3.09-3.55a2.83,2.83,0,0,0-.69-4.33l-8-4.6a1,1,0,0,0-1.12.08L9.83,9.58A1,1,0,0,0,9.66,11a1,1,0,0,0,.79.38,1,1,0,0,0,.61-.21l4.27-3.34,3.11,1.77-5.08,5.78h0a9.28,9.28,0,0,0-4.53,1.83l1.43,1.43A7.3,7.3,0,0,1,20.42,28.81l1.42,1.43a9.27,9.27,0,0,0,.77-10.06h2.82l-.77,6.51a1,1,0,0,0,.88,1.11h.12a1,1,0,0,0,1-.88l.9-7.62a1,1,0,0,0-.25-.78A1,1,0,0,0,26.56,18.18Zm-6.37-7.56,2.52,1.46a.79.79,0,0,1,.4.59.81.81,0,0,1-.2.69L19.75,17A9.17,9.17,0,0,0,16,15.45Z"/>', solid: '<path d="M14.77,31.94a7.31,7.31,0,0,1-5.7-11.88L7.65,18.64a9.3,9.3,0,0,0,13.1,13.11l-1.42-1.42A7.29,7.29,0,0,1,14.77,31.94Z"/><path d="M26.65,2.1a3.12,3.12,0,1,0,3.11,3.12A3.12,3.12,0,0,0,26.65,2.1Z"/><path d="M26.81,18.18H21.47q-.31-.33-.66-.63l4.38-4.86a2.14,2.14,0,0,0-.53-3.27L20.9,7.23l0,0L17.05,5.07a1,1,0,0,0-1.11.08L11.15,8.9a1,1,0,0,0,1.23,1.58l4.27-3.34,2.87,1.63L13.6,15.39a9.33,9.33,0,0,0-4.44,1.82l1.42,1.43A7.3,7.3,0,0,1,20.75,28.81l1.43,1.43A9.27,9.27,0,0,0,23,20.18h2.74l-.77,6.51a1,1,0,0,0,.87,1.11h.12a1,1,0,0,0,1-.88l.9-7.62a1,1,0,0,0-.25-.78A1,1,0,0,0,26.81,18.18Z"/>' })];

// node_modules/@cds/core/icon/shapes/accessibility-2.js
var s22 = ["accessibility-2", n23({ outline: '<path d="M30.06,11h-24a1,1,0,1,0,0,2H14v9.65s0,0,0,0l-3.75,10a1,1,0,0,0,.58,1.29,1.13,1.13,0,0,0,.36.06,1,1,0,0,0,.93-.65L15.62,24h4.76l3.52,9.35a1,1,0,0,0,.93.65,1.13,1.13,0,0,0,.36-.06,1,1,0,0,0,.58-1.29L22,22.68s0,0,0,0V13h8.06a1,1,0,1,0,0-2ZM20,22H16V13h4Z"/><path d="M18,10a4,4,0,1,0-4-4A4,4,0,0,0,18,10Zm0-6a2,2,0,1,1-2,2A2,2,0,0,1,18,4Z"/>', solid: '<circle cx="17.96" cy="5" r="3"/><path d="M30,10H6a1,1,0,0,0,0,2h8v8.36s0,0,0,0L10.11,33.17a1,1,0,0,0,.66,1.25,1.55,1.55,0,0,0,.29,0,1,1,0,0,0,1-.71l3.29-10.84h5.38L24,33.75a1,1,0,0,0,1,.71,1.55,1.55,0,0,0,.29,0,1,1,0,0,0,.66-1.25L22,20.4s0,0,0,0V12h8a1,1,0,0,0,0-2Z"/>' })];

// node_modules/@cds/core/icon/shapes/announcement.js
var l9 = ["announcement", n23({ outline: '<path d="M3.47,28a1,1,0,0,0-1.39,1.43l4.41,4.3a1,1,0,0,0,1.4-1.46Z"/><path d="M17.29,3.32a1,1,0,0,0-1.41,0,.92.92,0,0,0-.19.25L4.19,25.91l1.5,1.47L16.85,5.7,30.18,18.93,8.46,30.11,10,31.59l3.62-1.86a5.48,5.48,0,0,0,4.54,2.42,5.43,5.43,0,0,0,5.08-7.37l9.11-4.7a1,1,0,0,0,.53-.73,1,1,0,0,0-.28-.87Zm4.06,24.6a3.45,3.45,0,0,1-4.43,2,3.5,3.5,0,0,1-1.57-1.17l6-3.1A3.53,3.53,0,0,1,21.35,27.92Z"/><path d="M27.54,9.39a1,1,0,0,0,.71-.29l4.17-4.17A1,1,0,0,0,31,3.51h0L26.83,7.69a1,1,0,0,0,0,1.41A1,1,0,0,0,27.54,9.39Z"/><path d="M33.86,12.52h0a1,1,0,0,0-1.18-.77l-1.8.36a1,1,0,0,0-.77,1.19h0a1,1,0,0,0,1,.79h.21l1.79-.37A1,1,0,0,0,33.86,12.52Z"/><path d="M22.42,5.64h.24a1,1,0,0,0,1-.8L24,3.08a1,1,0,0,0-2-.4l-.37,1.79A1,1,0,0,0,22.42,5.64Z"/>', solid: '<path d="M3.47,28a1,1,0,0,0-1.39,1.43l4.41,4.3a1,1,0,0,0,1.4-1.46Z"/><path d="M27.54,9.39a1,1,0,0,0,.71-.29l4.17-4.17A1,1,0,0,0,31,3.51h0L26.83,7.69a1,1,0,0,0,0,1.41A1,1,0,0,0,27.54,9.39Z"/><path d="M33.86,12.52h0a1,1,0,0,0-1.18-.77l-1.8.36a1,1,0,0,0-.77,1.19h0a1,1,0,0,0,1,.79h.21l1.79-.37A1,1,0,0,0,33.86,12.52Z"/><path d="M22.42,5.64h.24a1,1,0,0,0,1-.8L24,3.08a1,1,0,0,0-2-.4l-.37,1.79A1,1,0,0,0,22.42,5.64Z"/><path d="M17.29,3.32a1,1,0,0,0-1.41,0,.92.92,0,0,0-.19.25L4.19,25.91l1.5,1.47h0L8.48,30.1h0L10,31.59l3.62-1.86a5.48,5.48,0,0,0,4.54,2.42,5.43,5.43,0,0,0,5.08-7.37l9.11-4.7a1,1,0,0,0,.53-.73,1,1,0,0,0-.28-.87Zm4.06,24.6a3.45,3.45,0,0,1-4.43,2,3.5,3.5,0,0,1-1.57-1.17l6-3.1A3.53,3.53,0,0,1,21.35,27.92Z"/>' })];

// node_modules/@cds/core/icon/shapes/add-text.js
var d15 = ["add-text", n23({ outline: '<path d="M31,21H13a1,1,0,0,0,0,2H31a1,1,0,0,0,0-2Z"/><path d="M12,16a1,1,0,0,0,1,1H31a1,1,0,0,0,0-2H13A1,1,0,0,0,12,16Z"/><path d="M27,27H13a1,1,0,0,0,0,2H27a1,1,0,0,0,0-2Z"/><path d="M15.89,9a1,1,0,0,0-1-1H10V3.21a1,1,0,0,0-2,0V8H2.89a1,1,0,0,0,0,2H8v5.21a1,1,0,0,0,2,0V10h4.89A1,1,0,0,0,15.89,9Z"/>' })];

// node_modules/@cds/core/icon/shapes/alarm-clock.js
var l10 = ["alarm-clock", n23({ outline: '<path d="M31.47,3.84a5.78,5.78,0,0,0-7.37-.63,16.08,16.08,0,0,1,8.2,7.65A5.73,5.73,0,0,0,31.47,3.84Z"/><path d="M11.42,3.43a5.77,5.77,0,0,0-7.64.41,5.72,5.72,0,0,0-.38,7.64A16.08,16.08,0,0,1,11.42,3.43Z"/><path d="M16.4,4.09A14,14,0,0,0,8.11,27.88L5.56,30.43A1,1,0,1,0,7,31.84l2.66-2.66a13.9,13.9,0,0,0,16.88-.08l2.74,2.74a1,1,0,0,0,1.41-1.41L28,27.78A14,14,0,0,0,16.4,4.09ZM19.58,29.9A12,12,0,1,1,29.92,19.56,12,12,0,0,1,19.58,29.9Z"/><path d="M24.92,20.34l-6.06-3V9.5a.9.9,0,0,0-1.8,0v9L24.12,22a.9.9,0,1,0,.79-1.62Z"/>', outlineAlerted: '<path d="M11.42,3.43a5.77,5.77,0,0,0-7.64.41,5.72,5.72,0,0,0-.38,7.64A16.08,16.08,0,0,1,11.42,3.43Z"/><path d="M18.86,9.5a.9.9,0,0,0-1.8,0v9L24.12,22a.9.9,0,1,0,.79-1.62l-6.06-3Z"/><path d="M28,27.78A13.88,13.88,0,0,0,31.77,15.4h-2a12.07,12.07,0,1,1-8.67-9l1-1.8a14,14,0,0,0-14,23.27L5.56,30.43A1,1,0,1,0,7,31.84l2.66-2.66a13.9,13.9,0,0,0,16.88-.08l2.74,2.74a1,1,0,0,0,1.41-1.41Z"/>', outlineBadged: '<path d="M11.42,3.43a5.77,5.77,0,0,0-7.64.41,5.72,5.72,0,0,0-.38,7.64A16.08,16.08,0,0,1,11.42,3.43Z"/><path d="M18.86,9.5a.9.9,0,0,0-1.8,0v9L24.12,22a.9.9,0,1,0,.79-1.62l-6.06-3Z"/><path d="M28,27.78a13.89,13.89,0,0,0,3.21-14.39,7,7,0,0,1-2.11.05A12,12,0,1,1,22.56,6.9,7.54,7.54,0,0,1,22.5,6a7.52,7.52,0,0,1,.11-1.21A14,14,0,0,0,8.11,27.88L5.56,30.43A1,1,0,1,0,7,31.84l2.66-2.66a13.9,13.9,0,0,0,16.88-.08l2.74,2.74a1,1,0,0,0,1.41-1.41Z"/>', solid: '<path d="M31.47,3.84a5.78,5.78,0,0,0-7.37-.63,16.08,16.08,0,0,1,8.2,7.65A5.73,5.73,0,0,0,31.47,3.84Z"/><path d="M11.42,3.43a5.77,5.77,0,0,0-7.64.41,5.72,5.72,0,0,0-.38,7.64A16.08,16.08,0,0,1,11.42,3.43Z"/><path d="M18,4A14,14,0,0,0,8.11,27.88L5.56,30.43A1,1,0,1,0,7,31.84l2.66-2.66a13.9,13.9,0,0,0,16.88-.08l2.74,2.74a1,1,0,0,0,1.41-1.41L28,27.78A14,14,0,0,0,18,4Zm7.47,17.43a1,1,0,0,1-1.33.47L17,18.44V9.69a1,1,0,0,1,2,0v7.5L25,20.1A1,1,0,0,1,25.49,21.43Z"/>', solidAlerted: '<path d="M11.42,3.43a5.77,5.77,0,0,0-7.64.41,5.72,5.72,0,0,0-.38,7.64A16.08,16.08,0,0,1,11.42,3.43Z"/><path d="M28,27.78A13.88,13.88,0,0,0,31.77,15.4H22.23A3.69,3.69,0,0,1,19,13.56L19,13.4v3.78L25,20.1a1,1,0,1,1-.87,1.8L17,18.44V9.69a1,1,0,0,1,2,0V10L19,9.89l3-5.28a14,14,0,0,0-14,23.27L5.56,30.43A1,1,0,1,0,7,31.84l2.66-2.66a13.9,13.9,0,0,0,16.88-.08l2.74,2.74a1,1,0,0,0,1.41-1.41Z"/>', solidBadged: '<path d="M11.42,3.43a5.77,5.77,0,0,0-7.64.41,5.72,5.72,0,0,0-.38,7.64A16.08,16.08,0,0,1,11.42,3.43Z"/><path d="M28,27.78a13.89,13.89,0,0,0,3.21-14.39A7.46,7.46,0,0,1,22.5,6a7.52,7.52,0,0,1,.11-1.21A14,14,0,0,0,8.11,27.88L5.56,30.43A1,1,0,1,0,7,31.84l2.66-2.66a13.9,13.9,0,0,0,16.88-.08l2.74,2.74a1,1,0,0,0,1.41-1.41Zm-2.52-6.35a1,1,0,0,1-1.33.47L17,18.44V9.69a1,1,0,0,1,2,0v7.5L25,20.1A1,1,0,0,1,25.49,21.43Z"/>' })];

// node_modules/@cds/core/icon/shapes/alarm-off.js
var l11 = ["alarm-off", n23({ outline: '<path d="M31.47,3.84a5.78,5.78,0,0,0-7.37-.63,16.08,16.08,0,0,1,8.2,7.65A5.73,5.73,0,0,0,31.47,3.84Z"/><path d="M25.33,21.54a.9.9,0,0,0-.41-1.2l-3.2-1.56L24.89,22A.89.89,0,0,0,25.33,21.54Z"/><path d="M18,8.6a.9.9,0,0,0-.9.9v4.6l1.8,1.81V9.5A.9.9,0,0,0,18,8.6Z"/><path d="M11.42,3.43a5.8,5.8,0,0,0-5.81-.81L8.3,5.32A16,16,0,0,1,11.42,3.43Z"/><path d="M18,4a13.91,13.91,0,0,0-8.3,2.75l1.42,1.43A12,12,0,0,1,27.82,24.9l1.42,1.43A14,14,0,0,0,18,4Z"/><path d="M1.56,4.21,2.73,5.38a5.7,5.7,0,0,0,.67,6.1A15.78,15.78,0,0,1,5.46,8.12L6.88,9.55A13.94,13.94,0,0,0,8.11,27.88L5.56,30.43A1,1,0,1,0,7,31.84l2.66-2.66a13.89,13.89,0,0,0,16.8,0l4.14,4.15L32,31.9,3,2.8ZM25,27.72A11.89,11.89,0,0,1,18,30,12,12,0,0,1,6,18a11.89,11.89,0,0,1,2.29-7Z"/>', solid: '<path d="M31.47,3.84a5.78,5.78,0,0,0-7.37-.63,16.08,16.08,0,0,1,8.2,7.65A5.73,5.73,0,0,0,31.47,3.84Z"/><path d="M11.42,3.43a5.8,5.8,0,0,0-5.77-.82L8.33,5.3A16,16,0,0,1,11.42,3.43Z"/><path d="M24.92,21.94l4.34,4.36A14,14,0,0,0,9.75,6.73L17,14V9.69a1,1,0,0,1,2,0V16l2.33,2.34L25,20.1a1,1,0,0,1,.47,1.33A1,1,0,0,1,24.92,21.94Z"/><path d="M1.61,4.21,2.73,5.34a5.73,5.73,0,0,0,.67,6.15A15.88,15.88,0,0,1,5.48,8.1L6.91,9.52A13.94,13.94,0,0,0,8.11,27.88L5.56,30.43A1,1,0,1,0,7,31.84l2.66-2.66a13.89,13.89,0,0,0,16.83,0l4.16,4.17L32,31.9,3,2.8Z"/>' })];

// node_modules/@cds/core/icon/shapes/asterisk.js
var l12 = ["asterisk", n23({ outline: '<path d="M28.89,20.91l-5-2.91,4.87-2.86a3.11,3.11,0,0,0,1.14-1.08,3,3,0,0,0-4.09-4.15L21,12.76V7a3,3,0,0,0-6,0v5.76L10.15,9.91a3,3,0,1,0-3,5.18l5,2.91L7.2,20.86a3.11,3.11,0,0,0-1.14,1.08,3,3,0,0,0,4.09,4.14L15,23.24V28.9a3,3,0,0,0,2,2.94A3,3,0,0,0,21,29V23.24l4.85,2.85a3,3,0,1,0,3-5.18ZM28.24,24a1,1,0,0,1-1.37.36L19,19.75V29a1,1,0,0,1-2,0V19.75L9.13,24.36a1,1,0,0,1-1-1.72L16,18l-7.9-4.64a1,1,0,1,1,1-1.72L17,16.25V7a1,1,0,0,1,2,0v9.25l7.87-4.62a1,1,0,0,1,1,1.72L20,18l7.9,4.64A1,1,0,0,1,28.24,24Z"/>', solid: '<path d="M28.89,20.91l-5-2.91,4.87-2.86a3.11,3.11,0,0,0,1.14-1.08,3,3,0,0,0-4.09-4.15L21,12.76V7a3,3,0,0,0-6,0v5.76L10.15,9.91a3,3,0,1,0-3,5.18l5,2.91L7.2,20.86a3.11,3.11,0,0,0-1.14,1.08,3,3,0,0,0,4.09,4.14L15,23.24V28.9a3,3,0,0,0,2,2.94A3,3,0,0,0,21,29V23.24l4.85,2.85a3,3,0,1,0,3-5.18Z"/>' })];

// node_modules/@cds/core/icon/shapes/ban.js
var r30 = ["ban", n23({ outline: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2ZM4,18A13.93,13.93,0,0,1,7.43,8.85L27.15,28.57A14,14,0,0,1,4,18Zm24.57,9.15L8.85,7.43A14,14,0,0,1,28.57,27.15Z"/>' })];

// node_modules/@cds/core/icon/shapes/beta.js
var a23 = ["beta", n23({ outline: '<path d="M7.21,14.07h3a1.61,1.61,0,0,1,1.81,1.5,1.44,1.44,0,0,1-.84,1.34,1.67,1.67,0,0,1,1.1,1.53,1.75,1.75,0,0,1-2,1.63H7.21Zm2.71,2.42c.48,0,.82-.28.82-.67s-.34-.65-.82-.65H8.49v1.32Zm.2,2.48a.75.75,0,1,0,0-1.47H8.49V19Z"/><path d="M14.55,15.23v1.2h3v1.16h-3v1.32h3.33v1.16H13.26v-6h4.62v1.16Z"/><path d="M20.41,15.23H18.54V14.07h5v1.16H21.7v4.84H20.41Z"/><path d="M28,19.12H25.32l-.38.95H23.5l2.44-6h1.44l2.45,6H28.38ZM27.55,18l-.89-2.19L25.77,18Z"/><path d="M8.06,30a.84.84,0,0,1-.38-.08A1,1,0,0,1,7.06,29V25h-4a1,1,0,0,1-1-1V10a1,1,0,0,1,1-1h30a1,1,0,0,1,1,1V24a1,1,0,0,1-1,1H13.48L8.77,29.71A1,1,0,0,1,8.06,30Zm-4-7h4a1,1,0,0,1,1,1v2.59l3.3-3.3a1,1,0,0,1,.7-.29h19V11h-28Z"/>', solid: '<polygon points="25.8,18 27.5,18 26.7,15.8"/><path d="M10.4,17.5c-0.1,0-0.2,0-0.3,0H8.5V19l1.6,0c0.4,0.1,0.8-0.2,0.9-0.6C11.1,18,10.8,17.6,10.4,17.5z"/><path d="M10.7,15.8c0-0.4-0.3-0.7-0.8-0.7H8.5v1.3h1.4C10.4,16.5,10.7,16.2,10.7,15.8z"/><path d="M33.1,9h-30c-0.6,0-1,0.4-1,1v14c0,0.6,0.4,1,1,1h4v4c0,0.4,0.2,0.8,0.6,0.9C7.8,30,7.9,30,8.1,30c0.3,0,0.5-0.1,0.7-0.3l4.7-4.7h19.6c0.6,0,1-0.4,1-1V10C34.1,9.4,33.6,9,33.1,9z M10.4,20.1c-0.1,0-0.1,0-0.2,0H7.2v-6h3c0.9-0.1,1.7,0.5,1.8,1.4c0,0,0,0.1,0,0.1c0,0.6-0.3,1.1-0.8,1.3c0.6,0.2,1.1,0.8,1.1,1.5C12.2,19.4,11.4,20.1,10.4,20.1z M17.9,15.2h-3.3v1.2h3v1.2h-3v1.3h3.3v1.2h-4.6v-6h4.6V15.2z M21.7,20.1h-1.3v-4.8h-1.9v-1.2h5v1.2h-1.8V20.1z M28.4,20.1l-0.4-1h-2.7l-0.4,1h-1.4l2.4-6h1.4l2.5,6H28.4z"/>' })];

// node_modules/@cds/core/icon/shapes/birthday-cake.js
var V4 = ["birthday-cake", n23({ outline: '<path d="M28.05,16H19V12.28a1,1,0,0,0-2,0V16H8A4,4,0,0,0,4,20V32a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V20A4,4,0,0,0,28.05,16ZM6,32V25.91a2.7,2.7,0,0,0,.77.11,3.63,3.63,0,0,0,3-1.93c.59-.81,1-1.27,1.68-1.27s1.09.46,1.68,1.27a3.63,3.63,0,0,0,3,1.93,3.63,3.63,0,0,0,3-1.93c.59-.81,1-1.27,1.68-1.27s1.09.46,1.68,1.27a3.61,3.61,0,0,0,3,1.93,3.6,3.6,0,0,0,3-1.92.8.8,0,0,0-1.3-.94c-.58.81-.95,1.26-1.67,1.26s-1.1-.46-1.69-1.27a3.59,3.59,0,0,0-3-1.93,3.63,3.63,0,0,0-3,1.93c-.59.81-1,1.27-1.68,1.27S15,24,14.41,23.15a3.63,3.63,0,0,0-3-1.93,3.59,3.59,0,0,0-3,1.93c-.6.81-1,1.27-1.69,1.27A1.27,1.27,0,0,1,6,24.17V20A2,2,0,0,1,8,18h20.1A2,2,0,0,1,30,20V32Z"/><path d="M17.64,10.46l.38.2.38-.22c.12-.06,2.72-1.58,2.39-4s-3.06-4-3.18-4a.8.8,0,0,0-.77,1.4S19,5,19.21,6.64A2.61,2.61,0,0,1,18,8.79a2.52,2.52,0,0,1-1-1.34,2.56,2.56,0,0,1,.18-1.58,6.61,6.61,0,0,0-1.21-1.14,4.31,4.31,0,0,0-.54,3.05A4.47,4.47,0,0,0,17.64,10.46Z"/>', solid: '<path d="M29,16H19V12.28a1,1,0,0,0-2,0V16H7a3,3,0,0,0-3,3V32a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V19A3,3,0,0,0,29,16Zm-1.93,8.89c-2.4,0-2.4-3.2-4.8-3.2s-2.39,3.2-4.79,3.2-2.4-3.2-4.79-3.2-2.39,3.2-4.79,3.2a2.37,2.37,0,0,1-1.9-1V19a1,1,0,0,1,1-1H29a1,1,0,0,1,1,1v3.63C29.16,23.57,28.61,24.89,27.07,24.89Z"/><path d="M17.62,10.46l.39.2.38-.21c.11-.07,2.71-1.59,2.39-4s-3.07-4-3.18-4a.8.8,0,0,0-.77,1.41S19,5,19.19,6.64A2.56,2.56,0,0,1,18,8.79a2.54,2.54,0,0,1-1-1.33,2.63,2.63,0,0,1,.18-1.58,6.67,6.67,0,0,0-1.2-1.15,4.24,4.24,0,0,0-.54,3.06A4.46,4.46,0,0,0,17.62,10.46Z"/>' })];

// node_modules/@cds/core/icon/shapes/bolt.js
var t44 = ["bolt", n23({ outline: '<path d="M10.52,34h-3a1,1,0,0,1-.88-1.44L12.55,21H6a1,1,0,0,1-.85-1.54l10.68-17A1,1,0,0,1,16.64,2H30.07a1,1,0,0,1,.77,1.69L21.78,14h5.38a1,1,0,0,1,.73,1.66l-16.63,18A1,1,0,0,1,10.52,34ZM9.18,32h.91L24.86,16H19.59a1,1,0,0,1-.77-1.69L27.88,4H17.19L7.77,19H14.2a1,1,0,0,1,.88,1.44Z"/>', solid: '<path d="M30.8,2.29A.49.49,0,0,0,30.35,2H16.42a.5.5,0,0,0-.42.23l-10.71,17A.49.49,0,0,0,5.7,20h7.67L6.6,33.25a.52.52,0,0,0,.46.75h3a.5.5,0,0,0,.37-.16L28,14.85a.5.5,0,0,0-.37-.85H20.89L30.72,2.82A.49.49,0,0,0,30.8,2.29Z"/>' })];

// node_modules/@cds/core/icon/shapes/book.js
var a24 = ["book", n23({ outline: '<rect x="10" y="5.2" width="18" height="1.55"/><path d="M29,8H9.86A1.89,1.89,0,0,1,8,6,2,2,0,0,1,9.86,4H29a1,1,0,0,0,0-2H9.86A4,4,0,0,0,6,6a4.14,4.14,0,0,0,0,.49,1,1,0,0,0,0,.24V30a4,4,0,0,0,3.86,4H29a1,1,0,0,0,1-1V9.25s0-.06,0-.09,0-.06,0-.09A1.07,1.07,0,0,0,29,8ZM28,32H9.86A2,2,0,0,1,8,30V9.55A3.63,3.63,0,0,0,9.86,10H28Z"/>', solid: '<rect x="10" y="5.2" width="18" height="1.55"/><path d="M29,8H9.86A1.89,1.89,0,0,1,8,6,2,2,0,0,1,9.86,4H29a1,1,0,1,0,0-2H9.86A4,4,0,0,0,6,6a4.14,4.14,0,0,0,0,.49,1,1,0,0,0,0,.24V30a4,4,0,0,0,3.86,4H29a1,1,0,0,0,1-1V9.25s0-.06,0-.09,0-.06,0-.09A1.07,1.07,0,0,0,29,8Z"/>' })];

// node_modules/@cds/core/icon/shapes/briefcase.js
var H3 = ["briefcase", n23({ outline: '<path d="M32,28a0,0,0,0,1,0,0H4V21.32a7.1,7.1,0,0,1-2-1.43V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V19.89a6.74,6.74,0,0,1-2,1.42Z"/><path d="M25,22.4a1,1,0,0,0,1-1V15.94H24V18H14v2H24v1.4A1,1,0,0,0,25,22.4Z"/><path d="M33,6H24V4.38A2.42,2.42,0,0,0,21.55,2h-7.1A2.42,2.42,0,0,0,12,4.38V6H3A1,1,0,0,0,2,7v8a5,5,0,0,0,5,5h3v1.4a1,1,0,0,0,2,0V15.94H10V18H7a3,3,0,0,1-3-3V8H32v7a3,3,0,0,1-3,3H28v2h1a5,5,0,0,0,5-5V7A1,1,0,0,0,33,6ZM22,6H14V4.43A.45.45,0,0,1,14.45,4h7.11a.43.43,0,0,1,.44.42Z"/>', solid: '<path d="M30,18A4.06,4.06,0,0,0,34,14V6H24V4.43A2.44,2.44,0,0,0,21.55,2h-7.1A2.44,2.44,0,0,0,12,4.43V6H2v8A4.06,4.06,0,0,0,6.05,18h4V15.92h2v5.7a1,1,0,1,1-2,0V20.06H6.06A6.06,6.06,0,0,1,2,18.49v9.45a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V18.49a6,6,0,0,1-4.06,1.57H28V18ZM14,4.43A.45.45,0,0,1,14.45,4h7.1a.45.45,0,0,1,.45.43V6H14ZM26,21.62a1,1,0,1,1-2,0V20.06H14V18H24V15.92h2Z"/>' })];

// node_modules/@cds/core/icon/shapes/bubble-exclamation.js
var c11 = ["bubble-exclamation", n23({ outline: '<path d="M18,2.5c-8.82,0-16,6.28-16,14s7.18,14,16,14a18,18,0,0,0,4.88-.68l5.53,3.52a1,1,0,0,0,1.54-.84l0-6.73a13,13,0,0,0,4-9.27C34,8.78,26.82,2.5,18,2.5ZM28.29,24.61a1,1,0,0,0-.32.73l0,5.34-4.38-2.79a1,1,0,0,0-.83-.11A16,16,0,0,1,18,28.5c-7.72,0-14-5.38-14-12s6.28-12,14-12,14,5.38,14,12A11.08,11.08,0,0,1,28.29,24.61Z"/><path d="M18,20.63a1,1,0,0,0,1-1V8.48a1,1,0,1,0-2,0V19.61A1,1,0,0,0,18,20.63Z"/><circle cx="18" cy="24.04" r="1.33"/>', solid: '<path d="M18,2.5c-8.82,0-16,6.28-16,14s7.18,14,16,14a18,18,0,0,0,4.88-.68l5.53,3.52a1,1,0,0,0,1.54-.84l0-6.73a13,13,0,0,0,4-9.27C34,8.78,26.82,2.5,18,2.5ZM16.93,9.13a1.41,1.41,0,1,1,2.81,0V18.9a1.41,1.41,0,1,1-2.81,0Zm1.41,17.35a1.87,1.87,0,1,1,1.87-1.87A1.87,1.87,0,0,1,18.34,26.47Z"/>' })];

// node_modules/@cds/core/icon/shapes/bug.js
var A6 = ["bug", n23({ outline: '<circle cx="23.56" cy="17.74" r="1.95"/><circle cx="22.42" cy="25.88" r="1.58"/><circle cx="12.86" cy="17.74" r="1.95"/><circle cx="13.99" cy="25.88" r="1.58"/><path d="M30.83,20H29a19.29,19.29,0,0,0-1.18-5.73l1.46-.79a1,1,0,0,0-.95-1.76l-3,1.64A17.65,17.65,0,0,1,27,20.72C27,27,23.8,31.23,18.8,31.62V15H17.2V31.62C12.22,31.21,9,27,9,20.72a17.74,17.74,0,0,1,1.73-7.34L7.7,11.72a1,1,0,0,0-.95,1.76l1.5.8A19.38,19.38,0,0,0,7.07,20H5.17a1,1,0,0,0,0,2H7.1a14.62,14.62,0,0,0,1.66,6.17L6.87,29.49A1,1,0,1,0,8,31.12l1.84-1.29A10.38,10.38,0,0,0,18,33.66a10.38,10.38,0,0,0,8.14-3.81L28,31.12a1,1,0,1,0,1.15-1.64l-1.86-1.3A14.61,14.61,0,0,0,28.94,22h1.89a1,1,0,0,0,0-2Z"/><path d="M11.51,5.36a1.67,1.67,0,0,0,1.07-.51A3.21,3.21,0,0,1,13.76,6a16.38,16.38,0,0,0-2.65,2.89,2,2,0,0,0,1.61,3.19H23.32A2,2,0,0,0,25.1,11a2,2,0,0,0-.17-2.1A16.34,16.34,0,0,0,22.25,6a3.21,3.21,0,0,1,1.17-1.11A1.68,1.68,0,1,0,23,3.27,4.77,4.77,0,0,0,21,5a5.81,5.81,0,0,0-2.93-1,5.83,5.83,0,0,0-3,1A4.77,4.77,0,0,0,13,3.27a1.68,1.68,0,1,0-1.49,2.09ZM18,6.07c1.45,0,3.53,1.57,5.31,4h0l-10.6,0C14.49,7.63,16.56,6.07,18,6.07Z"/>', solid: '<path d="M30.83,20H29a19.29,19.29,0,0,0-1.18-5.73l1.46-.79a1,1,0,0,0-.95-1.76l-3,1.28H10.78L7.7,11.72a1,1,0,0,0-.95,1.76l1.5.8A19.38,19.38,0,0,0,7.07,20H5.17a1,1,0,0,0,0,2H7.1a14.62,14.62,0,0,0,1.66,6.17L6.87,29.49A1,1,0,1,0,8,31.12l1.84-1.29A10.29,10.29,0,0,0,17,33.6V15h2V33.6a10.29,10.29,0,0,0,7.16-3.75L28,31.12a1,1,0,1,0,1.15-1.64l-1.86-1.3A14.61,14.61,0,0,0,28.94,22h1.89a1,1,0,0,0,0-2ZM10.91,17.74a1.95,1.95,0,1,1,1.95,1.95A1.95,1.95,0,0,1,10.91,17.74ZM14,27.46a1.58,1.58,0,1,1,1.58-1.58A1.58,1.58,0,0,1,14,27.46Zm8.43,0A1.58,1.58,0,1,1,24,25.88,1.58,1.58,0,0,1,22.42,27.46Zm1.13-7.77a1.95,1.95,0,1,1,1.95-1.95A1.95,1.95,0,0,1,23.56,19.69Z"/><path d="M11.23,5.26a1.67,1.67,0,0,0,.54-.32,5.9,5.9,0,0,1,.89.58,7.44,7.44,0,0,1,.95.94A18.48,18.48,0,0,0,10.79,9.7c-.4.57.09,1.28.86,1.28H24.44c.77,0,1.26-.71.86-1.28a18.38,18.38,0,0,0-2.88-3.28,7.28,7.28,0,0,1,.91-.9,5.9,5.9,0,0,1,.89-.58,1.69,1.69,0,1,0-.56-1.51,7.49,7.49,0,0,0-1.32.83,9.06,9.06,0,0,0-1.19,1.18A5.85,5.85,0,0,0,18,4.3a5.91,5.91,0,0,0-3.17,1.19,9.2,9.2,0,0,0-1.22-1.21,7.49,7.49,0,0,0-1.32-.83,1.68,1.68,0,1,0-1.11,1.83Z"/>' })];

// node_modules/@cds/core/icon/shapes/bullseye.js
var t45 = ["bullseye", n23({ outline: '<path d="M18,2a15.92,15.92,0,0,0-4.25.59l.77,1.86a14.07,14.07,0,1,1-10,10l-1.86-.78A16,16,0,1,0,18,2Z"/><path d="M7.45,15.7a10.81,10.81,0,1,0,8.3-8.26L16.37,9A9.24,9.24,0,1,1,9,16.32Z"/><path d="M18,22.09a4.08,4.08,0,0,1-4-3.68l-1.63-.68c0,.09,0,.18,0,.27A5.69,5.69,0,1,0,18,12.31h-.24L18.43,14A4.07,4.07,0,0,1,18,22.09Z"/><path d="M8.2,13.34a.5.5,0,0,0,.35.15H12.2l5.37,5.37A1,1,0,0,0,19,17.44L13.53,12V8.51a.5.5,0,0,0-.15-.35L7.79,2.57a.5.5,0,0,0-.85.35v4H3a.5.5,0,0,0-.35.85Z"/>', solid: '<path d="M19,18.85a1,1,0,0,1-1.41,0l-3-3A4,4,0,0,0,13.91,18,4.09,4.09,0,1,0,18,13.91a4,4,0,0,0-2,.55l3,3A1,1,0,0,1,19,18.85Z"/><path d="M18,2a15.92,15.92,0,0,0-4.25.59l1.6,3.89A11.89,11.89,0,1,1,6.49,15.3L2.61,13.68A16,16,0,1,0,18,2Z"/><path d="M8,15.94A10.17,10.17,0,1,0,16,8l1.69,4.11.31,0A5.88,5.88,0,1,1,12.12,18c0-.12,0-.23,0-.35Z"/><path d="M8.2,13.34a.5.5,0,0,0,.35.15H12.2l2.35,2.35A4.09,4.09,0,0,1,16,14.46L13.53,12V8.51a.5.5,0,0,0-.15-.35L7.79,2.57a.5.5,0,0,0-.85.35v4H3a.5.5,0,0,0-.35.85Z"/>' })];

// node_modules/@cds/core/icon/shapes/child-arrow.js
var a25 = ["child-arrow", n23({ outline: '<path d="M24.82,15.8a1,1,0,0,0-1.41,0,1,1,0,0,0,0,1.41L27.2,21H9V3.78a1,1,0,1,0-2,0V21a2,2,0,0,0,2,2H27.15l-3.74,3.75a1,1,0,0,0,0,1.41,1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29L31,22Z"/>' })];

// node_modules/@cds/core/icon/shapes/circle.js
var o36 = ["circle", n23({ outline: '<path d="M18,34A16,16,0,1,1,34,18,16,16,0,0,1,18,34ZM18,4A14,14,0,1,0,32,18,14,14,0,0,0,18,4Z"/>', solid: '<path d="M18,34A16,16,0,1,1,34,18,16,16,0,0,1,18,34Z"/>' })];

// node_modules/@cds/core/icon/shapes/circle-arrow.js
var o37 = ["circle-arrow", n23({ outline: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,30A14,14,0,1,1,32,18,14,14,0,0,1,18,32Z"/><path d="M18.08,8.26l-7.61,7.61a1,1,0,1,0,1.41,1.41L17,12.18v15a1,1,0,0,0,2,0V12l5.28,5.28a1,1,0,1,0,1.41-1.41Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm8,15.57a1.43,1.43,0,0,1-2,0L19.4,13V27.14a1.4,1.4,0,0,1-2.8,0v-14l-4.43,4.43a1.4,1.4,0,0,1-2-2L18.08,7.7,26,15.59A1.4,1.4,0,0,1,26,17.57Z"/>' })];

// node_modules/@cds/core/icon/shapes/clipboard.js
var V5 = ["clipboard", n23({ outline: '<path d="M29.29,5H27V7h2V32H7V7H9V5H7A1.75,1.75,0,0,0,5,6.69V32.31A1.7,1.7,0,0,0,6.71,34H29.29A1.7,1.7,0,0,0,31,32.31V6.69A1.7,1.7,0,0,0,29.29,5Z"/><path d="M26,7.33A2.34,2.34,0,0,0,23.67,5H21.87a4,4,0,0,0-7.75,0H12.33A2.34,2.34,0,0,0,10,7.33V11H26ZM24,9H12V7.33A.33.33,0,0,1,12.33,7H16V6a2,2,0,0,1,4,0V7h3.67a.33.33,0,0,1,.33.33Z"/><rect x="11" y="14" width="14" height="2"/><rect x="11" y="18" width="14" height="2"/><rect x="11" y="22" width="14" height="2"/><rect x="11" y="26" width="14" height="2"/>', outlineBadged: '<rect x="11" y="14" width="14" height="2"/><rect x="11" y="18" width="14" height="2"/><rect x="11" y="22" width="14" height="2"/><rect x="11" y="26" width="14" height="2"/><path d="M23.13,9H12V7.33A.33.33,0,0,1,12.33,7H16V6a2,2,0,0,1,4,0V7h2.57a7.52,7.52,0,0,1-.07-1,7.52,7.52,0,0,1,.07-1h-.7a4,4,0,0,0-7.75,0H12.33A2.34,2.34,0,0,0,10,7.33V11H24.42A7.5,7.5,0,0,1,23.13,9Z"/><path d="M30,13.5a7.52,7.52,0,0,1-1-.07V32H7V7H9V5H7A1.75,1.75,0,0,0,5,6.69V32.31A1.7,1.7,0,0,0,6.71,34H29.29A1.7,1.7,0,0,0,31,32.31V13.43A7.52,7.52,0,0,1,30,13.5Z"/>', solid: '<path d="M29.29,5H22.17a4.45,4.45,0,0,0-4.11-3A4.46,4.46,0,0,0,14,5H7A1.75,1.75,0,0,0,5,6.69V32.31A1.7,1.7,0,0,0,6.71,34H29.29A1.7,1.7,0,0,0,31,32.31V6.69A1.7,1.7,0,0,0,29.29,5Zm-18,3a1,1,0,0,1,1-1h3.44V6.31a2.31,2.31,0,1,1,4.63,0V7h3.44a1,1,0,0,1,1,1v2H11.31ZM25,28H11V26H25Zm0-4H11V22H25Zm0-4H11V18H25Zm0-4H11V14H25Z"/>', solidBadged: '<path d="M30,13.5A7.49,7.49,0,0,1,23.66,10H11.31V8a1,1,0,0,1,1-1h3.44V6.31a2.31,2.31,0,1,1,4.63,0V7h2.19a7.54,7.54,0,0,1-.07-1,7.52,7.52,0,0,1,.07-1h-.4a4.45,4.45,0,0,0-4.11-3A4.46,4.46,0,0,0,14,5H7A1.75,1.75,0,0,0,5,6.69V32.31A1.7,1.7,0,0,0,6.71,34H29.29A1.7,1.7,0,0,0,31,32.31V13.43A7.52,7.52,0,0,1,30,13.5ZM25,28H11V26H25Zm0-4H11V22H25Zm0-4H11V18H25Zm0-4H11V14H25Z"/>' })];

// node_modules/@cds/core/icon/shapes/clock.js
var d16 = ["clock", n23({ outline: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,30A14,14,0,1,1,32,18,14,14,0,0,1,18,32Z"/><path d="M18.92,18.4V10.75a1,1,0,0,0-2,0v8.72l5.9,4a1,1,0,1,0,1.11-1.66Z"/><path d="M8,17.94A9.94,9.94,0,0,1,23.41,9.59l.85-1.36a11.55,11.55,0,1,0-8.53,21L16,27.7A10,10,0,0,1,8,17.94Z"/>', outlineAlerted: '<path d="M18.92,10.75a1,1,0,0,0-2,0v8.72l5.9,4a1,1,0,1,0,1.11-1.66l-5-3.39Z"/><path d="M33.77,15.39h-2A14,14,0,1,1,22.09,4.61l1-1.76A16,16,0,1,0,34,18,16,16,0,0,0,33.77,15.39Z"/><path d="M18,8a9.81,9.81,0,0,1,2,.23l.85-1.46a11.55,11.55,0,1,0-5.13,22.52L16,27.7A10,10,0,0,1,18,8Z"/>', outlineBadged: '<path d="M18.92,10.75a1,1,0,0,0-2,0v8.72l5.9,4a1,1,0,1,0,1.11-1.66l-5-3.39Z"/><path d="M33.12,12.81a7.44,7.44,0,0,1-1.91.58,14.05,14.05,0,1,1-8.6-8.6,7.44,7.44,0,0,1,.58-1.91,16.06,16.06,0,1,0,9.93,9.93Z"/><path d="M18,6.38a11.56,11.56,0,0,0-2.27,22.89L16,27.7a10,10,0,1,1,7.39-18.1h0a7.45,7.45,0,0,1-.78-2.23A11.45,11.45,0,0,0,18,6.38Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm6.2,21.18a1,1,0,0,1-1.39.28l-5.9-4V10.75a1,1,0,0,1,2,0V18.4l5,3.39A1,1,0,0,1,24.2,23.18ZM23.85,8.23a11.39,11.39,0,1,0-8.54,20.83L15,30.63a13,13,0,1,1,9.7-23.77Z"/>', solidAlerted: '<path d="M33.77,15.39H22.23A3.69,3.69,0,0,1,19,13.56c0-.09-.09-.18-.13-.27V18.4l5,3.39a1,1,0,0,1-1.11,1.66l-5.9-4V10.75a1,1,0,0,1,1.91-.41A3.65,3.65,0,0,1,19,9.89L20.74,7A11.19,11.19,0,0,0,18,6.6a11.39,11.39,0,0,0-2.69,22.47L15,30.63A13,13,0,0,1,18,5a12.8,12.8,0,0,1,3.57.51l1.53-2.66A16,16,0,1,0,34,18,16,16,0,0,0,33.77,15.39Z"/>', solidBadged: '<path d="M33.12,12.81A7.48,7.48,0,0,1,22.68,7.63,11.24,11.24,0,0,0,18,6.6a11.39,11.39,0,0,0-2.69,22.47L15,30.63A13,13,0,0,1,18,5a12.81,12.81,0,0,1,4.51.82,7.46,7.46,0,0,1,.68-2.94,16.06,16.06,0,1,0,9.93,9.93ZM24.2,23.18a1,1,0,0,1-1.39.28l-5.9-4V10.75a1,1,0,0,1,2,0V18.4l5,3.39A1,1,0,0,1,24.2,23.18Z"/>' })];

// node_modules/@cds/core/icon/shapes/clone.js
var H4 = ["clone", n23({ outline: '<path d="M6,6H22v4h2V6a2,2,0,0,0-2-2H6A2,2,0,0,0,4,6V22a2,2,0,0,0,2,2h4V22H6Z"/><path d="M30,12H14a2,2,0,0,0-2,2V30a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V14A2,2,0,0,0,30,12Zm0,18H14V14H30Z"/><polygon points="21 28 23 28 23 23 28 23 28 21 23 21 23 16 21 16 21 21 16 21 16 23 21 23 21 28"/>', solid: '<path d="M24,10V6a2,2,0,0,0-2-2H6A2,2,0,0,0,4,6V22a2,2,0,0,0,2,2h4V12a2,2,0,0,1,2-2Z"/><path d="M30,12H14a2,2,0,0,0-2,2V30a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V14A2,2,0,0,0,30,12ZM28,23H23v5H21V23H16V21h5V16h2v5h5Z"/>' })];

// node_modules/@cds/core/icon/shapes/collapse-card.js
var t46 = ["collapse-card", n23({ outline: '<path d="M33,21H3a1,1,0,0,0-1,1v6a1,1,0,0,0,1,1H33a1,1,0,0,0,1-1V22A1,1,0,0,0,33,21Zm-1,6H4V23H32Z"/><path d="M18,20.22l5.65-5.65a.81.81,0,0,0,0-1.14.8.8,0,0,0-1.13,0L18,18l-4.52-4.52a.8.8,0,0,0-1.13,0,.81.81,0,0,0,0,1.14Z"/><path d="M18,14.22l5.65-5.65a.81.81,0,0,0,0-1.14.8.8,0,0,0-1.13,0L18,12,13.48,7.43a.8.8,0,0,0-1.13,0,.81.81,0,0,0,0,1.14Z"/>', solid: '<rect x="2" y="22" width="32" height="8" rx="1" ry="1"/><path d="M18,20.7l-5.79-5.79a1,1,0,0,1,0-1.41,1,1,0,0,1,1.41,0L18,17.87l4.38-4.37a1,1,0,0,1,1.41,0,1,1,0,0,1,0,1.41Z"/><path d="M18,14.5,12.21,8.71a1,1,0,0,1,0-1.42,1,1,0,0,1,1.41,0L18,11.67l4.38-4.38a1,1,0,0,1,1.41,0,1,1,0,0,1,0,1.42Z"/>' })];

// node_modules/@cds/core/icon/shapes/color-palette.js
var c12 = ["color-palette", n23({ outline: '<path d="M21.54,23.05a3.22,3.22,0,0,1-3-1.77A3.05,3.05,0,0,1,18.5,19a3.74,3.74,0,0,1,1.95-2.06A3.4,3.4,0,0,1,25,18.3a3,3,0,0,1,.08,2.32,3.69,3.69,0,0,1-2,2.07A3.85,3.85,0,0,1,21.54,23.05Zm.54-4.91a2.41,2.41,0,0,0-1,.21h0A2.13,2.13,0,0,0,20,19.51a1.37,1.37,0,0,0,0,1.09,1.81,1.81,0,0,0,2.45.63,2.1,2.1,0,0,0,1.12-1.15,1.4,1.4,0,0,0,0-1.1A1.59,1.59,0,0,0,22.08,18.14Zm-1.29-.52h0Z"/><path d="M16.19,33.87A13.72,13.72,0,0,1,6.4,30,13.86,13.86,0,0,1,2,20c0-4.4,2-8.84,5.68-12.5a18.2,18.2,0,0,1,13.1-5.37h.12c3.33,0,6.85,1.49,7.24,4.73.21,1.77-.59,3.47-1.29,5-.55,1.17-1.11,2.39-.72,2.81s1,.12,2.09-.2a6.27,6.27,0,0,1,3.38-.36,3,3,0,0,1,1.87,1.56c.94,1.83.47,4.67-.23,6.54h0A17.38,17.38,0,0,1,29,28.74,19.43,19.43,0,0,1,16.19,33.87ZM20.78,4.16A16.22,16.22,0,0,0,9.09,9C5.79,12.23,4,16.16,4,20A11.92,11.92,0,0,0,7.8,28.6c5.38,5.25,14.62,3.55,19.87-1.33a15.52,15.52,0,0,0,3.7-5.75h0c.7-1.9.84-3.92.32-4.92a1,1,0,0,0-.61-.55,4.86,4.86,0,0,0-2.29.35c-1.31.39-3,.89-4.12-.35-1.32-1.4-.46-3.25.37-5a7.93,7.93,0,0,0,1.11-3.9c-.24-2-2.81-2.95-5.26-3Z"/><path d="M23.87,26.65A2.59,2.59,0,0,0,22.35,25L22,24.9l-.46,1.53.16,0a1,1,0,0,1,.6.61c.17.6-.41,1.31-1.26,1.55s-1.71-.07-1.88-.66l-1.54.43h0a2.83,2.83,0,0,0,2.84,1.91,4,4,0,0,0,1-.14A3,3,0,0,0,23.87,26.65Z"/><path d="M15.07,25.59h0a2.73,2.73,0,0,0-2.24-1.84l-.27,1.58a1.12,1.12,0,0,1,1,.7c.17.59-.41,1.3-1.26,1.54A1.92,1.92,0,0,1,11,27.52a1,1,0,0,1-.6-.61s0-.09,0-.13l-1.58.16a2,2,0,0,0,.06.41A2.59,2.59,0,0,0,10.37,29a3.36,3.36,0,0,0,1.31.25,3.7,3.7,0,0,0,1-.14A3,3,0,0,0,15.07,25.59Z"/><path d="M10.78,19.17a2.59,2.59,0,0,0-1.52-1.65,2.91,2.91,0,0,0-.5-.16l-.37,1.56a1.21,1.21,0,0,1,.25.08,1,1,0,0,1,.6.6c.17.6-.41,1.31-1.26,1.55s-1.71-.06-1.88-.66a.86.86,0,0,1,0-.39l-1.56-.34a2.4,2.4,0,0,0,0,1.16A2.83,2.83,0,0,0,7.4,22.83a4,4,0,0,0,1-.14A3,3,0,0,0,10.78,19.17Z"/><path d="M13.45,11.4a2.59,2.59,0,0,0-1.52-1.65,1.17,1.17,0,0,0-.2-.06l-.52,1.51a.38.38,0,0,1,.1,0,1,1,0,0,1,.6.6c.17.6-.41,1.31-1.26,1.55a2.06,2.06,0,0,1-1.28-.05,1,1,0,0,1-.6-.61.85.85,0,0,1,0-.32l-1.58-.19a2.3,2.3,0,0,0,.06.94A2.56,2.56,0,0,0,8.75,14.8a3.37,3.37,0,0,0,1.31.26,4,4,0,0,0,1-.14A3,3,0,0,0,13.45,11.4Z"/><path d="M21,6.78a2.56,2.56,0,0,0-1.52-1.65l-.3-.1L18.7,6.56l.15,0a1,1,0,0,1,.6.61c.17.6-.41,1.3-1.26,1.54s-1.71-.06-1.88-.65a.9.9,0,0,1,.06-.58L14.89,6.9a2.47,2.47,0,0,0-.12,1.63,2.84,2.84,0,0,0,2.84,1.91,3.58,3.58,0,0,0,1-.15A3,3,0,0,0,21,6.78Z"/>', solid: '<path d="M32.23,14.89c-2.1-.56-4.93,1.8-6.34.3-1.71-1.82,2.27-5.53,1.86-8.92-.33-2.78-3.51-4.08-6.66-4.1A18.5,18.5,0,0,0,7.74,7.59c-6.64,6.59-8.07,16-1.37,22.48,6.21,6,16.61,4.23,22.67-1.4a17.73,17.73,0,0,0,4.22-6.54C34.34,19.23,34.44,15.49,32.23,14.89ZM9.4,10.57a2.23,2.23,0,0,1,2.87,1.21,2.22,2.22,0,0,1-1.81,2.53A2.22,2.22,0,0,1,7.59,13.1,2.23,2.23,0,0,1,9.4,10.57ZM5.07,20.82a2.22,2.22,0,0,1,1.82-2.53A2.22,2.22,0,0,1,9.75,19.5,2.23,2.23,0,0,1,7.94,22,2.24,2.24,0,0,1,5.07,20.82Zm7,8.33a2.22,2.22,0,0,1-2.87-1.21A2.23,2.23,0,0,1,11,25.41a2.23,2.23,0,0,1,2.87,1.21A2.22,2.22,0,0,1,12,29.15ZM15,8.26a2.23,2.23,0,0,1,1.81-2.53,2.24,2.24,0,0,1,2.87,1.21,2.22,2.22,0,0,1-1.82,2.53A2.21,2.21,0,0,1,15,8.26Zm5.82,22.19a2.22,2.22,0,0,1-2.87-1.21,2.23,2.23,0,0,1,1.81-2.53,2.24,2.24,0,0,1,2.87,1.21A2.22,2.22,0,0,1,20.78,30.45Zm5-10.46a3.2,3.2,0,0,1-1.69,1.76,3.53,3.53,0,0,1-1.4.3,2.78,2.78,0,0,1-2.56-1.5,2.49,2.49,0,0,1-.07-2,3.2,3.2,0,0,1,1.69-1.76,3,3,0,0,1,4,1.2A2.54,2.54,0,0,1,25.79,20Z"/>' })];

// node_modules/@cds/core/icon/shapes/color-picker.js
var L5 = ["color-picker", n23({ outline: '<path d="M33,10.05a5.07,5.07,0,0,0,.1-7.17A5.06,5.06,0,0,0,26,3L20.78,8.15a2.13,2.13,0,0,1-3,0l-.67-.67L15.72,8.92,27.08,20.28l1.42-1.42-.67-.67a2.13,2.13,0,0,1,0-3ZM26.44,13.8a4.07,4.07,0,0,0-1.08,1.92l-5.08-5.08A4.07,4.07,0,0,0,22.2,9.56l5.16-5.17a3.09,3.09,0,0,1,4.35-.1,3.09,3.09,0,0,1-.1,4.35Z"/><path d="M7.3,31.51a2,2,0,1,1-2.83-2.83L18.58,14.57l-1.42-1.41L3.05,27.27a4,4,0,0,0-.68,4.8L.89,33.55A1,1,0,0,0,.89,35a1,1,0,0,0,1.42,0l1.43-1.44a3.93,3.93,0,0,0,2.09.6,4.06,4.06,0,0,0,2.88-1.2L22.82,18.81,21.41,17.4Z"/>', solid: '<path d="M33.73,2.11a4.09,4.09,0,0,0-5.76.1L22.81,7.38a3.13,3.13,0,0,1-4.3.11L17.09,8.91,27,18.79l1.42-1.42A3.18,3.18,0,0,1,28.46,13l5.17-5.17A4.08,4.08,0,0,0,33.73,2.11Z"/><path d="M22.18,16.79,7.46,31.51a2,2,0,1,1-2.82-2.83L19.35,14l-1.41-1.41L3.22,27.27a4,4,0,0,0-.68,4.8L1.06,33.55a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l1.44-1.44a3.93,3.93,0,0,0,2.09.6,4.06,4.06,0,0,0,2.88-1.2L23.6,18.21Z"/>' })];

// node_modules/@cds/core/icon/shapes/copy.js
var h10 = ["copy", n23({ outline: '<path d="M29.5,7h-19A1.5,1.5,0,0,0,9,8.5v24A1.5,1.5,0,0,0,10.5,34h19A1.5,1.5,0,0,0,31,32.5V8.5A1.5,1.5,0,0,0,29.5,7ZM29,32H11V9H29Z"/><path d="M26,3.5A1.5,1.5,0,0,0,24.5,2H5.5A1.5,1.5,0,0,0,4,3.5v24A1.5,1.5,0,0,0,5.5,29H6V4H26Z"/>', solid: '<path d="M27,3.56A1.56,1.56,0,0,0,25.43,2H5.57A1.56,1.56,0,0,0,4,3.56V28.44A1.56,1.56,0,0,0,5.57,30h.52V4.07H27Z"/><rect x="8" y="6" width="23" height="28" rx="1.5" ry="1.5"/>' })];

// node_modules/@cds/core/icon/shapes/copy-to-clipboard.js
var o38 = ["copy-to-clipboard", n23({ outline: '<path d="M22.6,4H21.55a3.89,3.89,0,0,0-7.31,0H13.4A2.41,2.41,0,0,0,11,6.4V10H25V6.4A2.41,2.41,0,0,0,22.6,4ZM23,8H13V6.25A.25.25,0,0,1,13.25,6h2.69l.12-1.11A1.24,1.24,0,0,1,16.61,4a2,2,0,0,1,3.15,1.18l.09.84h2.9a.25.25,0,0,1,.25.25Z"/><path d="M33.25,18.06H21.33l2.84-2.83a1,1,0,1,0-1.42-1.42L17.5,19.06l5.25,5.25a1,1,0,0,0,.71.29,1,1,0,0,0,.71-1.7l-2.84-2.84H33.25a1,1,0,0,0,0-2Z"/><path d="M29,16h2V6.68A1.66,1.66,0,0,0,29.35,5H27.08V7H29Z"/><path d="M29,31H7V7H9V5H6.64A1.66,1.66,0,0,0,5,6.67V31.32A1.66,1.66,0,0,0,6.65,33H29.36A1.66,1.66,0,0,0,31,31.33V22.06H29Z"/>' })];

// node_modules/@cds/core/icon/shapes/crosshairs.js
var t47 = ["crosshairs", n23({ outline: '<path d="M18,29A11,11,0,1,1,29,18,11,11,0,0,1,18,29ZM18,9a9,9,0,1,0,9,9A9,9,0,0,0,18,9Z"/><path d="M18,23a5,5,0,1,1,5-5A5,5,0,0,1,18,23Zm0-8a3,3,0,1,0,3,3A3,3,0,0,0,18,15Z"/><path d="M18,9a1,1,0,0,1-1-1V2.8a1,1,0,0,1,2,0V8A1,1,0,0,1,18,9Z"/><path d="M18,34a1,1,0,0,1-1-1V28a1,1,0,0,1,2,0v5A1,1,0,0,1,18,34Z"/><path d="M8,19H3.17a1,1,0,0,1,0-2H8a1,1,0,0,1,0,2Z"/><path d="M33.1,19H28a1,1,0,0,1,0-2h5.1a1,1,0,0,1,0,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/cursor-arrow.js
var l13 = ["cursor-arrow", n23({ outline: '<path d="M14.58,32.31a1,1,0,0,1-.94-.65L4,5.65A1,1,0,0,1,5.25,4.37l26,9.68a1,1,0,0,1-.05,1.89l-8.36,2.57,8.3,8.3a1,1,0,0,1,0,1.41l-3.26,3.26a1,1,0,0,1-.71.29h0a1,1,0,0,1-.71-.29l-8.33-8.33-2.6,8.45a1,1,0,0,1-.93.71Zm3.09-12a1,1,0,0,1,.71.29l8.79,8.79L29,27.51l-8.76-8.76a1,1,0,0,1,.41-1.66l7.13-2.2L6.6,7l7.89,21.2L16.71,21a1,1,0,0,1,.71-.68Z"/>', solid: '<path d="M29,12.36,3.88,3A1,1,0,0,0,2.59,4.28L12,29.44a1,1,0,0,0,1.89-.05l2.69-8.75,9.12,8.9a1,1,0,0,0,1.41,0l2.35-2.35a1,1,0,0,0,0-1.41l-9.09-8.86L29,14.25A1,1,0,0,0,29,12.36Z"/>' })];

// node_modules/@cds/core/icon/shapes/cursor-hand.js
var l14 = ["cursor-hand", n23({ outline: '<path d="M30.74,15.19a13.66,13.66,0,0,0-6.87-3.83A26,26,0,0,0,18,10.58V5.28A3.4,3.4,0,0,0,14.5,2,3.4,3.4,0,0,0,11,5.28v10L9.4,13.7a3.77,3.77,0,0,0-5.28,0A3.67,3.67,0,0,0,3,16.33a3.6,3.6,0,0,0,1,2.56l4.66,5.52a11.53,11.53,0,0,0,1.43,4,10.12,10.12,0,0,0,2,2.54v1.92a1.07,1.07,0,0,0,1,1.08H27a1.07,1.07,0,0,0,1-1.08v-2.7a12.81,12.81,0,0,0,3-8.36v-6A1,1,0,0,0,30.74,15.19ZM29,21.86a10.72,10.72,0,0,1-2.6,7.26,1.11,1.11,0,0,0-.4.72V32H14.14V30.52a1,1,0,0,0-.44-.83,7.26,7.26,0,0,1-1.82-2.23,9.14,9.14,0,0,1-1.2-3.52,1,1,0,0,0-.23-.59L5.53,17.53a1.7,1.7,0,0,1,0-2.42,1.76,1.76,0,0,1,2.47,0l3,3v3.14l2-1V5.28A1.42,1.42,0,0,1,14.5,4,1.42,1.42,0,0,1,16,5.28v11.8l2,.43V12.59a24.27,24.27,0,0,1,2.51.18V18l1.6.35V13c.41.08.83.17,1.26.28a14.88,14.88,0,0,1,1.53.49v5.15l1.6.35V14.5A11.06,11.06,0,0,1,29,16.23Z"/>', solid: '<path d="M28.69,14.33v4.83l-2-.43V13.24a16.19,16.19,0,0,0-2.33-.84v5.82l-2-.43V12c-1.1-.18-2.18-.3-3.08-.36v5.51l-2-.43V11.48h0V4.34a2.53,2.53,0,0,0-2.6-2.43,2.53,2.53,0,0,0-2.6,2.43V17.27h0v2.59l-2,1V15.6L7.75,13.21a2.83,2.83,0,0,0-4,0,2.93,2.93,0,0,0,0,4.09l6,7.1a10.82,10.82,0,0,0,1.39,4.22,8.42,8.42,0,0,0,2.21,2.73v2.56H27.79V30.62a12.54,12.54,0,0,0,3-8.5v-6A10,10,0,0,0,28.69,14.33Z"/>' })];

// node_modules/@cds/core/icon/shapes/cursor-hand-click.js
var l15 = ["cursor-hand-click", n23({ outline: '<path d="M30.4,17.6c-1.8-1.9-4.2-3.2-6.7-3.7c-1.1-0.3-2.2-0.5-3.3-0.6c2.8-3.3,2.3-8.3-1-11.1s-8.3-2.3-11.1,1s-2.3,8.3,1,11.1c0.6,0.5,1.2,0.9,1.8,1.1v2.2l-1.6-1.5c-1.4-1.4-3.7-1.4-5.2,0c-1.4,1.4-1.5,3.6-0.1,5l4.6,5.4c0.2,1.4,0.7,2.7,1.4,3.9c0.5,0.9,1.2,1.8,1.9,2.5v1.9c0,0.6,0.4,1,1,1h13.6c0.5,0,1-0.5,1-1v-2.6c1.9-2.3,2.9-5.2,2.9-8.1v-5.8C30.7,17.9,30.6,17.7,30.4,17.6z M8.4,8.2c0-3.3,2.7-5.9,6-5.8c3.3,0,5.9,2.7,5.8,6c0,1.8-0.8,3.4-2.2,4.5V7.9c-0.1-1.8-1.6-3.2-3.4-3.2c-1.8-0.1-3.4,1.4-3.4,3.2v5.2C9.5,12.1,8.5,10.2,8.4,8.2L8.4,8.2z M28.7,24c0.1,2.6-0.8,5.1-2.5,7.1c-0.2,0.2-0.4,0.4-0.4,0.7v2.1H14.2v-1.4c0-0.3-0.2-0.6-0.4-0.8c-0.7-0.6-1.3-1.3-1.8-2.2c-0.6-1-1-2.2-1.2-3.4c0-0.2-0.1-0.4-0.2-0.6l-4.8-5.7c-0.3-0.3-0.5-0.7-0.5-1.2c0-0.4,0.2-0.9,0.5-1.2c0.7-0.6,1.7-0.6,2.4,0l2.9,2.9v3l1.9-1V7.9c0.1-0.7,0.7-1.3,1.5-1.2c0.7,0,1.4,0.5,1.4,1.2v11.5l2,0.4v-4.6c0.1-0.1,0.2-0.1,0.3-0.2c0.7,0,1.4,0.1,2.1,0.2v5.1l1.6,0.3v-5.2l1.2,0.3c0.5,0.1,1,0.3,1.5,0.5v5l1.6,0.3v-4.6c0.9,0.4,1.7,1,2.4,1.7L28.7,24z"/>' })];

// node_modules/@cds/core/icon/shapes/cursor-hand-grab.js
var c13 = ["cursor-hand-grab", n23({ outline: '<path d="M28.09,9.74a4,4,0,0,0-1.16.19c-.19-1.24-1.55-2.18-3.27-2.18A4,4,0,0,0,22.13,8,3.37,3.37,0,0,0,19,6.3a3.45,3.45,0,0,0-2.87,1.32,3.65,3.65,0,0,0-1.89-.51A3.05,3.05,0,0,0,11,9.89v.91c-1.06.4-4.11,1.8-4.91,4.84s.34,8,2.69,11.78a25.21,25.21,0,0,0,5.9,6.41.9.9,0,0,0,.53.17H25.55a.92.92,0,0,0,.55-.19,13.13,13.13,0,0,0,3.75-6.13A25.8,25.8,0,0,0,31.41,18v-5.5A3.08,3.08,0,0,0,28.09,9.74ZM29.61,18a24,24,0,0,1-1.47,9.15A12.46,12.46,0,0,1,25.2,32.2H15.47a23.75,23.75,0,0,1-5.2-5.72c-2.37-3.86-3-8.23-2.48-10.39A5.7,5.7,0,0,1,11,12.76v7.65a.9.9,0,0,0,1.8,0V9.89c0-.47.59-1,1.46-1s1.49.52,1.49,1v5.72h1.8V8.81c0-.28.58-.71,1.46-.71s1.53.48,1.53.75v6.89h1.8V10l.17-.12a2.1,2.1,0,0,1,1.18-.32c.93,0,1.5.44,1.5.68l0,6.5H27V11.87a1.91,1.91,0,0,1,1.12-.33c.86,0,1.52.51,1.52.94Z"/>' })];

// node_modules/@cds/core/icon/shapes/cursor-hand-open.js
var r31 = ["cursor-hand-open", n23({ outline: '<path d="M31.46,8.57A3.11,3.11,0,0,0,27,5.75a3.19,3.19,0,0,0-4.66-2.64,3.29,3.29,0,0,0-6.42-.76,3.23,3.23,0,0,0-1.66-.46A3.27,3.27,0,0,0,11,5.18V17.84c-1.28-1.6-2.53-3.18-2.72-3.45A3.19,3.19,0,0,0,5.56,12.9a3.37,3.37,0,0,0-3.47,3.48C2.18,18.18,5.66,24.54,8,28c3.54,5.24,6.92,6,7.07,6l.18,0H25.59a.92.92,0,0,0,.55-.19,13.13,13.13,0,0,0,3.75-6.13c1-3.09,1.53-7.53,1.58-13.56ZM28.18,27.12a12.46,12.46,0,0,1-2.94,5.08H15.33c-.47-.14-3.07-1.1-5.87-5.25S3.94,17.27,3.89,16.29a1.5,1.5,0,0,1,.45-1.13,1.52,1.52,0,0,1,1.14-.46,1.43,1.43,0,0,1,1.32.71c.29.43,2.36,3,3.57,4.53L12.8,18.3V5.18a1.48,1.48,0,1,1,2.95,0V16.32h1.8v-13a1.51,1.51,0,0,1,3,0V16.45h1.8V6a1.43,1.43,0,1,1,2.85,0V17.44H27V8.54a1.33,1.33,0,0,1,2.65,0v5.55C29.62,20,29.14,24.21,28.18,27.12Z"/>' })];

// node_modules/@cds/core/icon/shapes/cursor-move.js
var a26 = ["cursor-move", n23({ outline: '<path d="M28.85,12.89a1,1,0,0,0-1.42,0,1,1,0,0,0,0,1.41L30.14,17H19V5.86l2.69,2.7a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.42L18,2,12.89,7.15a1,1,0,0,0-.29.71,1,1,0,0,0,1.71.7L17,5.86V17H5.86l2.7-2.69a1,1,0,0,0,0-1.41,1,1,0,0,0-1.42,0L2,18l5.14,5.11a1,1,0,0,0,.71.29,1,1,0,0,0,.7-1.71L5.86,19H17V30.14l-2.69-2.7a1,1,0,0,0-1.71.7,1,1,0,0,0,.29.71L18,34l5.11-5.14a1,1,0,0,0,0-1.42,1,1,0,0,0-1.41,0L19,30.14V19H30.14l-2.7,2.69a1,1,0,0,0,.7,1.71,1,1,0,0,0,.71-.29L34,18Z"/>' })];

// node_modules/@cds/core/icon/shapes/details.js
var t48 = ["details", n23({ outline: '<path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6Zm0,22H4V8H32Z"/><path d="M9,14H27a1,1,0,0,0,0-2H9a1,1,0,0,0,0,2Z"/><path d="M9,18H27a1,1,0,0,0,0-2H9a1,1,0,0,0,0,2Z"/><path d="M9,22H19a1,1,0,0,0,0-2H9a1,1,0,0,0,0,2Z"/>', solid: '<path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6ZM19,22H9a1,1,0,0,1,0-2H19a1,1,0,0,1,0,2Zm8-4H9a1,1,0,0,1,0-2H27a1,1,0,0,1,0,2Zm0-4H9a1,1,0,0,1,0-2H27a1,1,0,0,1,0,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/dot-circle.js
var t49 = ["dot-circle", n23({ outline: '<path d="M18,11a7,7,0,1,1-7,7,7,7,0,0,1,7-7"/><path d="M18,34A16,16,0,1,1,34,18,16,16,0,0,1,18,34ZM18,4A14,14,0,1,0,32,18,14,14,0,0,0,18,4Z"/>' })];

// node_modules/@cds/core/icon/shapes/download.js
var t50 = ["download", n23({ outline: '<path d="M31,31H5a1,1,0,0,0,0,2H31a1,1,0,0,0,0-2Z"/><path d="M18,29.48,28.61,18.87a1,1,0,0,0-1.41-1.41L19,25.65V5a1,1,0,0,0-2,0V25.65L8.81,17.46a1,1,0,1,0-1.41,1.41Z"/>', outlineAlerted: '<path d="M31,31H5a1,1,0,0,0,0,2H31a1,1,0,0,0,0-2Z"/><path d="M18,29.48,28.61,18.87a1,1,0,0,0-1.41-1.41L19,25.65V5a1,1,0,0,0-2,0V25.65L8.81,17.46a1,1,0,1,0-1.41,1.41Z"/>', outlineBadged: '<path d="M31,31H5a1,1,0,0,0,0,2H31a1,1,0,0,0,0-2Z"/><path d="M18,29.48,28.61,18.87a1,1,0,0,0-1.41-1.41L19,25.65V5a1,1,0,0,0-2,0V25.65L8.81,17.46a1,1,0,1,0-1.41,1.41Z"/>' })];

// node_modules/@cds/core/icon/shapes/drag-handle.js
var e34 = ["drag-handle", n23({ outline: '<circle cx="15" cy="12" r="1.5"/><circle cx="15" cy="24" r="1.5"/><circle cx="21" cy="12" r="1.5"/><circle cx="21" cy="24" r="1.5"/><circle cx="21" cy="18" r="1.5"/><circle cx="15" cy="18" r="1.5"/>' })];

// node_modules/@cds/core/icon/shapes/drag-handle-corner.js
var e35 = ["drag-handle-corner", n23({ outline: '<circle cx="12" cy="24" r="1.5"/><circle cx="18" cy="24" r="1.5"/><circle cx="18" cy="18" r="1.5"/><circle cx="24" cy="12" r="1.5"/><circle cx="24" cy="24" r="1.5"/><circle cx="24" cy="18" r="1.5"/>' })];

// node_modules/@cds/core/icon/shapes/eraser.js
var e36 = ["eraser", n23({ outline: '<path d="M35.62,12a2.82,2.82,0,0,0-.84-2L27.49,2.65a2.9,2.9,0,0,0-4,0L2.83,23.28a2.84,2.84,0,0,0,0,4L7.53,32H3a1,1,0,0,0,0,2H28a1,1,0,0,0,0-2H16.74l18-18A2.82,2.82,0,0,0,35.62,12ZM13.91,32H10.36L4.25,25.89a.84.84,0,0,1,0-1.19l5.51-5.52,8.49,8.48ZM33.37,12.54,19.66,26.25l-8.48-8.49,13.7-13.7a.86.86,0,0,1,1.19,0l7.3,7.29a.86.86,0,0,1,.25.6A.82.82,0,0,1,33.37,12.54Z"/>', solid: '<path d="M28,32H15.33L19,28.37l-9.9-9.9L3.54,24a1.83,1.83,0,0,0,0,2.6L9,32H3a1,1,0,0,0,0,2H28a1,1,0,0,0,0-2Z"/><path d="M34.08,10.65l-7.3-7.3a1.83,1.83,0,0,0-2.6,0L10.47,17.06l9.9,9.9L34.08,13.25A1.85,1.85,0,0,0,34.08,10.65Z"/>' })];

// node_modules/@cds/core/icon/shapes/expand-card.js
var l16 = ["expand-card", n23({ outline: '<path d="M33,6H3A1,1,0,0,0,2,7V29a1,1,0,0,0,1,1H33a1,1,0,0,0,1-1V7A1,1,0,0,0,33,6ZM32,28H4V8H32Z"/><path d="M13.48,15.86,18,11.34l4.52,4.52a.77.77,0,0,0,.56.24.81.81,0,0,0,.57-1.37L18,9.08l-5.65,5.65a.8.8,0,1,0,1.13,1.13Z"/><path d="M13.48,21.86,18,17.34l4.52,4.52a.77.77,0,0,0,.56.24.81.81,0,0,0,.57-1.37L18,15.08l-5.65,5.65a.8.8,0,1,0,1.13,1.13Z"/>', solid: '<path d="M33,6H3A1,1,0,0,0,2,7V29a1,1,0,0,0,1,1H33a1,1,0,0,0,1-1V7A1,1,0,0,0,33,6ZM23.79,21.41a1,1,0,0,1-1.41,0L18,17l-4.38,4.38a1,1,0,0,1-1.41,0,1,1,0,0,1,0-1.42L18,14.2,23.79,20A1,1,0,0,1,23.79,21.41Zm0-6.2a1,1,0,0,1-1.41,0L18,10.83l-4.38,4.38a1,1,0,0,1-1.41,0,1,1,0,0,1,0-1.42L18,8l5.79,5.79A1,1,0,0,1,23.79,15.21Z"/>' })];

// node_modules/@cds/core/icon/shapes/file.js
var H5 = ["file", n23({ outline: '<path d="M21.89,4H7.83A1.88,1.88,0,0,0,6,5.91V30.09A1.88,1.88,0,0,0,7.83,32H28.17A1.88,1.88,0,0,0,30,30.09V11.92Zm-.3,2.49,6,5.9h-6ZM8,30V6H20v8h8V30Z"/>', outlineAlerted: '<path d="M28,15.4V30H8V6H20V8.25l2.25-3.9L21.89,4H7.83A1.88,1.88,0,0,0,6,5.91V30.09A1.88,1.88,0,0,0,7.83,32H28.17A1.88,1.88,0,0,0,30,30.09V15.4Z"/>', outlineBadged: '<path d="M21.59,12.39V6.49l1.07,1a7.31,7.31,0,0,1,0-2.82L21.89,4H7.83A1.88,1.88,0,0,0,6,5.91V30.09A1.88,1.88,0,0,0,7.83,32H28.17A1.88,1.88,0,0,0,30,30.09V13.5a7.45,7.45,0,0,1-3.91-1.11ZM28,30H8V6H20v8h8Z"/>', solid: '<path d="M21.89,4H7.83A1.88,1.88,0,0,0,6,5.91V30.09A1.88,1.88,0,0,0,7.83,32H28.17A1.88,1.88,0,0,0,30,30.09V11.92ZM21,13V5.84L28.3,13Z"/>', solidAlerted: '<path d="M22.2,15.4c-2,0-3.7-1.6-3.7-3.6c0-0.7,0.2-1.3,0.5-1.9l3.2-5.5L21.9,4H7.8C6.8,4,6,4.9,6,5.9v24.2c0,1,0.8,1.9,1.8,1.9h20.3c1,0,1.8-0.9,1.8-1.9V15.4H22.2z"/>', solidBadged: '<path d="M27.25,13H21V5.84l1.64,1.6a7.25,7.25,0,0,1,0-2.74L21.89,4H7.83A1.88,1.88,0,0,0,6,5.91V30.09A1.88,1.88,0,0,0,7.83,32H28.17A1.88,1.88,0,0,0,30,30.09V13.5A7.47,7.47,0,0,1,27.25,13Z"/>' })];

// node_modules/@cds/core/icon/shapes/file-group.js
var V6 = ["file-group", n23({ outline: '<path d="M31,34H13a1,1,0,0,1-1-1V11a1,1,0,0,1,1-1H31a1,1,0,0,1,1,1V33A1,1,0,0,1,31,34ZM14,32H30V12H14Z"/><rect x="16" y="16" width="12" height="2"/><rect x="16" y="20" width="12" height="2"/><rect x="16" y="24" width="12" height="2"/><path d="M6,24V4H24V3a1,1,0,0,0-1-1H5A1,1,0,0,0,4,3V25a1,1,0,0,0,1,1H6Z"/><path d="M10,28V8H28V7a1,1,0,0,0-1-1H9A1,1,0,0,0,8,7V29a1,1,0,0,0,1,1h1Z"/>', solid: '<path d="M31,10H13a1,1,0,0,0-1,1V33a1,1,0,0,0,1,1H31a1,1,0,0,0,1-1V11A1,1,0,0,0,31,10ZM28,26H16V24H28Zm0-4H16V20H28Zm0-4H16V16H28Z"/><path d="M6,24V4H24V3a1,1,0,0,0-1-1H5A1,1,0,0,0,4,3V25a1,1,0,0,0,1,1H6Z"/><path d="M10,28V8H28V7a1,1,0,0,0-1-1H9A1,1,0,0,0,8,7V29a1,1,0,0,0,1,1h1Z"/>' })];

// node_modules/@cds/core/icon/shapes/file-settings.js
var A7 = ["file-settings", n23({ outline: '<path d="M33.83,23.43a1.16,1.16,0,0,0-.71-1.12l-1.68-.5c-.09-.24-.18-.48-.29-.71l.78-1.44a1.16,1.16,0,0,0-.21-1.37l-1.42-1.41a1.16,1.16,0,0,0-1.37-.2l-1.45.76a7.84,7.84,0,0,0-.76-.32l-.48-1.58a1.15,1.15,0,0,0-1.11-.77h-2a1.16,1.16,0,0,0-1.11.82l-.47,1.54a7.76,7.76,0,0,0-.77.32l-1.42-.76a1.16,1.16,0,0,0-1.36.2l-1.45,1.4a1.16,1.16,0,0,0-.21,1.38L17.08,21a7.64,7.64,0,0,0-.31.74l-1.58.47a1.15,1.15,0,0,0-.83,1.11v2a1.15,1.15,0,0,0,.83,1.1l1.59.47a7.53,7.53,0,0,0,.31.72l-.78,1.46a1.16,1.16,0,0,0,.21,1.37l1.42,1.4a1.16,1.16,0,0,0,1.37.21l1.48-.78c.23.11.47.2.72.29L22,33.18a1.16,1.16,0,0,0,1.11.81h2a1.16,1.16,0,0,0,1.11-.82l.47-1.58c.24-.08.47-.18.7-.29l1.5.79a1.16,1.16,0,0,0,1.36-.2l1.42-1.4a1.16,1.16,0,0,0,.21-1.38l-.79-1.45q.16-.34.29-.69L33,26.5a1.15,1.15,0,0,0,.83-1.11Zm-1.6,1.63-2.11.62-.12.42a6,6,0,0,1-.5,1.19l-.21.38,1,1.91-1,1-2-1-.37.2a6.21,6.21,0,0,1-1.2.49l-.42.12-.63,2.09H23.42l-.63-2.08-.42-.12a6.23,6.23,0,0,1-1.21-.49l-.37-.2-1.94,1-1-1,1-1.94-.22-.38A6,6,0,0,1,18.17,26L18,25.63,16,25V23.69L18,23.08l.13-.41a5.94,5.94,0,0,1,.53-1.23L18.9,21l-1-1.85,1-.94,1.89,1,.38-.21a6.23,6.23,0,0,1,1.26-.52l.41-.12.63-2h1.38l.62,2,.41.12A6.21,6.21,0,0,1,27.1,19l.38.21,1.92-1,1,1-1,1.89.21.38a6.08,6.08,0,0,1,.5,1.21l.12.42,2.06.61Z"/><path d="M24.12,20.35a4,4,0,1,0,4.08,4A4.06,4.06,0,0,0,24.12,20.35Zm0,6.46a2.43,2.43,0,1,1,2.48-2.43A2.46,2.46,0,0,1,24.12,26.82Z"/><path d="M14.49,31H6V5H26v7.89a3.2,3.2,0,0,1,2,1.72V5a2,2,0,0,0-2-2H6A2,2,0,0,0,4,5V31a2,2,0,0,0,2,2H16.23l-1.1-1.08A3.11,3.11,0,0,1,14.49,31Z"/>', outlineAlerted: '<path d="M24.12,20.35a4,4,0,1,0,4.08,4A4.06,4.06,0,0,0,24.12,20.35Zm0,6.46a2.43,2.43,0,1,1,2.48-2.43A2.46,2.46,0,0,1,24.12,26.82Z"/><path d="M33.83,23.43a1.16,1.16,0,0,0-.71-1.12l-1.68-.5c-.09-.24-.18-.48-.29-.71l.78-1.44a1.16,1.16,0,0,0-.21-1.37l-1.42-1.41a1.16,1.16,0,0,0-1.37-.2l-1.45.76a7.84,7.84,0,0,0-.76-.32l-.48-1.58a1.15,1.15,0,0,0-1.11-.77h-2a1.16,1.16,0,0,0-1.11.82l-.47,1.54a7.76,7.76,0,0,0-.77.32l-1.42-.76a1.16,1.16,0,0,0-1.36.2l-1.45,1.4a1.16,1.16,0,0,0-.21,1.38L17.08,21a7.64,7.64,0,0,0-.31.74l-1.58.47a1.15,1.15,0,0,0-.83,1.11v2a1.15,1.15,0,0,0,.83,1.1l1.59.47a7.53,7.53,0,0,0,.31.72l-.78,1.46a1.16,1.16,0,0,0,.21,1.37l1.42,1.4a1.16,1.16,0,0,0,1.37.21l1.48-.78c.23.11.47.2.72.29L22,33.18a1.16,1.16,0,0,0,1.11.81h2a1.16,1.16,0,0,0,1.11-.82l.47-1.58c.24-.08.47-.18.7-.29l1.5.79a1.16,1.16,0,0,0,1.36-.2l1.42-1.4a1.16,1.16,0,0,0,.21-1.38l-.79-1.45q.16-.34.29-.69L33,26.5a1.15,1.15,0,0,0,.83-1.11Zm-1.6,1.63-2.11.62-.12.42a6,6,0,0,1-.5,1.19l-.21.38,1,1.91-1,1-2-1-.37.2a6.21,6.21,0,0,1-1.2.49l-.42.12-.63,2.09H23.42l-.63-2.08-.42-.12a6.23,6.23,0,0,1-1.21-.49l-.37-.2-1.94,1-1-1,1-1.94-.22-.38A6,6,0,0,1,18.17,26L18,25.63,16,25V23.69L18,23.08l.13-.41a5.94,5.94,0,0,1,.53-1.23L18.9,21l-1-1.85,1-.94,1.89,1,.38-.21a6.23,6.23,0,0,1,1.26-.52l.41-.12.63-2h1.38l.62,2,.41.12A6.21,6.21,0,0,1,27.1,19l.38.21,1.92-1,1,1-1,1.89.21.38a6.08,6.08,0,0,1,.5,1.21l.12.42,2.06.61Z"/><path d="M14.49,31H6V5H21.87L23,3H6A2,2,0,0,0,4,5V31a2,2,0,0,0,2,2H16.23l-1.1-1.08A3.11,3.11,0,0,1,14.49,31Z"/>', outlineBadged: '<path d="M33.83,23.43a1.16,1.16,0,0,0-.71-1.12l-1.68-.5c-.09-.24-.18-.48-.29-.71l.78-1.44a1.16,1.16,0,0,0-.21-1.37l-1.42-1.41a1.16,1.16,0,0,0-1.37-.2l-1.45.76a7.84,7.84,0,0,0-.76-.32l-.48-1.58a1.15,1.15,0,0,0-1.11-.77h-2a1.16,1.16,0,0,0-1.11.82l-.47,1.54a7.76,7.76,0,0,0-.77.32l-1.42-.76a1.16,1.16,0,0,0-1.36.2l-1.45,1.4a1.16,1.16,0,0,0-.21,1.38L17.08,21a7.64,7.64,0,0,0-.31.74l-1.58.47a1.15,1.15,0,0,0-.83,1.11v2a1.15,1.15,0,0,0,.83,1.1l1.59.47a7.53,7.53,0,0,0,.31.72l-.78,1.46a1.16,1.16,0,0,0,.21,1.37l1.42,1.4a1.16,1.16,0,0,0,1.37.21l1.48-.78c.23.11.47.2.72.29L22,33.18a1.16,1.16,0,0,0,1.11.81h2a1.16,1.16,0,0,0,1.11-.82l.47-1.58c.24-.08.47-.18.7-.29l1.5.79a1.16,1.16,0,0,0,1.36-.2l1.42-1.4a1.16,1.16,0,0,0,.21-1.38l-.79-1.45q.16-.34.29-.69L33,26.5a1.15,1.15,0,0,0,.83-1.11Zm-1.6,1.63-2.11.62-.12.42a6,6,0,0,1-.5,1.19l-.21.38,1,1.91-1,1-2-1-.37.2a6.21,6.21,0,0,1-1.2.49l-.42.12-.63,2.09H23.42l-.63-2.08-.42-.12a6.23,6.23,0,0,1-1.21-.49l-.37-.2-1.94,1-1-1,1-1.94-.22-.38A6,6,0,0,1,18.17,26L18,25.63,16,25V23.69L18,23.08l.13-.41a5.94,5.94,0,0,1,.53-1.23L18.9,21l-1-1.85,1-.94,1.89,1,.38-.21a6.23,6.23,0,0,1,1.26-.52l.41-.12.63-2h1.38l.62,2,.41.12A6.21,6.21,0,0,1,27.1,19l.38.21,1.92-1,1,1-1,1.89.21.38a6.08,6.08,0,0,1,.5,1.21l.12.42,2.06.61Z"/><path d="M24.12,20.35a4,4,0,1,0,4.08,4A4.06,4.06,0,0,0,24.12,20.35Zm0,6.46a2.43,2.43,0,1,1,2.48-2.43A2.46,2.46,0,0,1,24.12,26.82Z"/><path d="M14.49,31H6V5H23.08a6.94,6.94,0,0,1,.6-2H6A2,2,0,0,0,4,5V31a2,2,0,0,0,2,2H16.23l-1.1-1.08A3.11,3.11,0,0,1,14.49,31Z"/><path d="M28,15.33V12.71a7,7,0,0,1-2-1v1.88A3.2,3.2,0,0,1,28,15.33Z"/>', solid: '<path d="M15.55,31H6V5H26v8.78a2.37,2.37,0,0,1,2,1.57V5a2,2,0,0,0-2-2H6A2,2,0,0,0,4,5V31a2,2,0,0,0,2,2H17.16l-1-1A2.38,2.38,0,0,1,15.55,31Z"/><path d="M33.54,23.47l-2-.61a7.06,7.06,0,0,0-.58-1.41l1-1.86a.37.37,0,0,0-.07-.44L30.41,17.7a.37.37,0,0,0-.44-.07l-1.85,1A7,7,0,0,0,26.69,18l-.61-2a.37.37,0,0,0-.36-.25h-2a.37.37,0,0,0-.35.26l-.61,2a7,7,0,0,0-1.44.61l-1.82-1a.37.37,0,0,0-.44.07l-1.47,1.44a.37.37,0,0,0-.07.44l1,1.82a7,7,0,0,0-.61,1.44l-2,.61a.37.37,0,0,0-.26.35v2a.37.37,0,0,0,.26.35l2,.61a7,7,0,0,0,.61,1.41l-1,1.9a.37.37,0,0,0,.07.44L19,32a.37.37,0,0,0,.44.07l1.87-1a7.06,7.06,0,0,0,1.39.57l.61,2a.37.37,0,0,0,.35.26h2a.37.37,0,0,0,.35-.26l.61-2a7,7,0,0,0,1.38-.57l1.89,1a.37.37,0,0,0,.44-.07l1.45-1.45a.37.37,0,0,0,.07-.44l-1-1.88a7.06,7.06,0,0,0,.58-1.39l2-.61a.37.37,0,0,0,.26-.35V23.83A.37.37,0,0,0,33.54,23.47ZM24.7,28.19A3.33,3.33,0,1,1,28,24.86,3.33,3.33,0,0,1,24.7,28.19Z"/>', solidAlerted: '<path d="M33.54,23.47l-2-.61a7.06,7.06,0,0,0-.58-1.41l1-1.86a.37.37,0,0,0-.07-.44L30.41,17.7a.37.37,0,0,0-.44-.07l-1.85,1A7,7,0,0,0,26.69,18l-.61-2a.37.37,0,0,0-.36-.25h-2a.37.37,0,0,0-.35.26l-.61,2a7,7,0,0,0-1.44.61l-1.82-1a.37.37,0,0,0-.44.07l-1.47,1.44a.37.37,0,0,0-.07.44l1,1.82a7,7,0,0,0-.61,1.44l-2,.61a.37.37,0,0,0-.26.35v2a.37.37,0,0,0,.26.35l2,.61a7,7,0,0,0,.61,1.41l-1,1.9a.37.37,0,0,0,.07.44L19,32a.37.37,0,0,0,.44.07l1.87-1a7.06,7.06,0,0,0,1.39.57l.61,2a.37.37,0,0,0,.35.26h2a.37.37,0,0,0,.35-.26l.61-2a7,7,0,0,0,1.38-.57l1.89,1a.37.37,0,0,0,.44-.07l1.45-1.45a.37.37,0,0,0,.07-.44l-1-1.88a7.06,7.06,0,0,0,.58-1.39l2-.61a.37.37,0,0,0,.26-.35V23.83A.37.37,0,0,0,33.54,23.47ZM24.7,28.19A3.33,3.33,0,1,1,28,24.86,3.33,3.33,0,0,1,24.7,28.19Z"/><path d="M15.55,31H6V5H21.87L23,3H6A2,2,0,0,0,4,5V31a2,2,0,0,0,2,2H17.16l-1-1A2.38,2.38,0,0,1,15.55,31Z"/>', solidBadged: '<path d="M33.54,23.47l-2-.61a7.06,7.06,0,0,0-.58-1.41l1-1.86a.37.37,0,0,0-.07-.44L30.41,17.7a.37.37,0,0,0-.44-.07l-1.85,1A7,7,0,0,0,26.69,18l-.61-2a.37.37,0,0,0-.36-.25h-2a.37.37,0,0,0-.35.26l-.61,2a7,7,0,0,0-1.44.61l-1.82-1a.37.37,0,0,0-.44.07l-1.47,1.44a.37.37,0,0,0-.07.44l1,1.82a7,7,0,0,0-.61,1.44l-2,.61a.37.37,0,0,0-.26.35v2a.37.37,0,0,0,.26.35l2,.61a7,7,0,0,0,.61,1.41l-1,1.9a.37.37,0,0,0,.07.44L19,32a.37.37,0,0,0,.44.07l1.87-1a7.06,7.06,0,0,0,1.39.57l.61,2a.37.37,0,0,0,.35.26h2a.37.37,0,0,0,.35-.26l.61-2a7,7,0,0,0,1.38-.57l1.89,1a.37.37,0,0,0,.44-.07l1.45-1.45a.37.37,0,0,0,.07-.44l-1-1.88a7.06,7.06,0,0,0,.58-1.39l2-.61a.37.37,0,0,0,.26-.35V23.83A.37.37,0,0,0,33.54,23.47ZM24.7,28.19A3.33,3.33,0,1,1,28,24.86,3.33,3.33,0,0,1,24.7,28.19Z"/><path d="M15.55,31H6V5H23.08a6.94,6.94,0,0,1,.6-2H6A2,2,0,0,0,4,5V31a2,2,0,0,0,2,2H17.16l-1-1A2.38,2.38,0,0,1,15.55,31Z"/><path d="M28,15.36V12.71a7,7,0,0,1-2-1v2A2.37,2.37,0,0,1,28,15.36Z"/>' })];

// node_modules/@cds/core/icon/shapes/file-zip.js
var H6 = ["file-zip", n23({ outline: '<path d="M30,30.2V12l-8.1-7.9H7.8C6.8,4.1,6,4.9,6,6c0,0,0,0,0,0v24.2c0,1,0.7,1.8,1.7,1.8c0,0,0.1,0,0.1,0h20.3c1,0,1.8-0.7,1.8-1.7C30,30.3,30,30.2,30,30.2z M22,6.6l5.6,5.4H22V6.6z M28,30H7.9L8,6h12v8h8V30z"/><path d="M12,24c0,1.7,1.3,3,3,3s3-1.3,3-3v-4h-6V24z M13.4,24v-2.6h3.2V24c0.1,0.9-0.6,1.7-1.5,1.7c-0.9,0.1-1.7-0.6-1.7-1.5C13.4,24.2,13.4,24.1,13.4,24z"/><path d="M18.2,9c0-0.6-0.4-1-1-1H15v2h2.2C17.8,10,18.2,9.6,18.2,9z"/><path d="M12.7,10c-0.6,0-1,0.4-1,1s0.4,1,1,1H15v-2H12.7z"/><path d="M17.2,14c0.6,0,1-0.4,1-1s-0.4-1-1-1H15v2H17.2z"/><path d="M11.7,15c0,0.6,0.4,1,1,1H15v-2h-2.3C12.2,14,11.7,14.4,11.7,15z"/><path d="M17.2,18c0.6,0,1-0.4,1-1s-0.4-1-1-1H15v2H17.2z"/>', solid: '<path d="M15,25.6c0.9,0,1.6-0.7,1.6-1.6v-2.6h-3.2V24C13.4,24.9,14.1,25.6,15,25.6z"/><path d="M21.9,4H7.8C6.8,4,6,4.9,6,5.9v24.2c0,1,0.8,1.9,1.8,1.9h20.3c1,0,1.8-0.9,1.8-1.9V11.9L21.9,4z M18,24c0,1.7-1.3,3-3,3s-3-1.3-3-3v-4h6V24z M17.2,12c0.6,0,1,0.4,1,1s-0.4,1-1,1H15v2h2.2c0.6,0,1,0.4,1,1s-0.4,1-1,1H15v-2h-2.2c-0.6,0-1-0.4-1-1s0.4-1,1-1H15v-2h-2.2c-0.6,0-1-0.4-1-1s0.4-1,1-1H15V8h2.2c0.6,0,1,0.4,1,1s-0.4,1-1,1H15v2H17.2z M21.9,12V6.5l5.7,5.5H21.9z"/>' })];

// node_modules/@cds/core/icon/shapes/filter.js
var t51 = ["filter", n23({ outline: '<path d="M33,4H3A1,1,0,0,0,2,5V6.67a1.79,1.79,0,0,0,.53,1.27L14,19.58v10.2l2,.76V19a1,1,0,0,0-.29-.71L4,6.59V6H32v.61L20.33,18.29A1,1,0,0,0,20,19l0,13.21L22,33V19.5L33.47,8A1.81,1.81,0,0,0,34,6.7V5A1,1,0,0,0,33,4Z"/>', solid: '<path d="M22,33V19.5L33.47,8A1.81,1.81,0,0,0,34,6.7V5a1,1,0,0,0-1-1H3A1,1,0,0,0,2,5V6.67a1.79,1.79,0,0,0,.53,1.27L14,19.58v10.2Z"/><path d="M33.48,4h-31A.52.52,0,0,0,2,4.52V6.24a1.33,1.33,0,0,0,.39.95l12,12v10l7.25,3.61V19.17l12-12A1.35,1.35,0,0,0,34,6.26V4.52A.52.52,0,0,0,33.48,4Z"/>' })];

// node_modules/@cds/core/icon/shapes/filter-2.js
var r32 = ["filter-2", n23({ outline: '<path d="M33,11H3a1,1,0,0,0,0,2H33a1,1,0,0,0,0-2Z"/><path d="M28,17H8a1,1,0,0,0,0,2H28a1,1,0,0,0,0-2Z"/><path d="M23,23H13a1,1,0,0,0,0,2H23a1,1,0,0,0,0-2Z"/>' })];

// node_modules/@cds/core/icon/shapes/filter-off.js
var t52 = ["filter-off", n23({ outline: '<path d="M34,6.4C34,5.6,33.3,5,32.5,5H10.3l2,2H32v0.6l-9.6,9.6l1.4,1.4L33.4,9C33.8,8.6,34,8.1,34,7.6V6.5C34,6.5,34,6.4,34,6.4z"/><path d="M2.7,3l2,2h-1C2.9,4.9,2.1,5.5,2,6.3v1.1c0,0.5,0.2,1,0.6,1.4L14,20.2v10.3l1.9,0.8V19.4L4,7.5V7h2.7L20,20.3v12.9l2,0.8c0,0,0,0,0-0.1V22.3l10.1,10.1l1.4-1.4L4.1,1.6L2.7,3z"/>', solid: '<path d="M23.9,18.6L10.3,5.1h22.2C33.3,5,34,5.6,34,6.4c0,0,0,0,0,0.1v1.1c0,0.5-0.2,1-0.6,1.4L23.9,18.6z"/><path d="M33.5,31L4.1,1.6L2.6,3l2.1,2.1H3.5C2.7,5,2,5.6,2,6.4c0,0,0,0,0,0.1v1.1c0,0.5,0.2,1,0.6,1.4L14,20.5v10.1l8,3.4V22.4l10.1,10.1L33.5,31z"/>' })];

// node_modules/@cds/core/icon/shapes/firewall.js
var h11 = ["firewall", n23({ outline: '<path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6ZM4,8H32v5.08H23.8v-4H22v4H14v-4H12v4H4Zm0,7H32v6.08H28.92V16.27H27v4.81H18.92V16.27H17v4.81H8.9V16.27H7v4.81H4ZM23.8,28V24.27H22.2V28H14V24.27h-1.6V28H4V23H32v5Z"/>', outlineAlerted: '<path d="M33.68,15.4H32v5.68H28.92V16.27H27v4.81H18.92V16.27H17v4.81H8.9V16.27H7v4.81H4V15H20.58a3.58,3.58,0,0,1-1.76-1.92H14v-4H12v4H4V8H20.14l1.15-2H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V15.38ZM23.8,28V24.27H22.2V28H14V24.27h-1.6V28H4V23H32v5Z"/>', outlineBadged: '<path d="M30,13.5a7.47,7.47,0,0,1-2.45-.42H23.8V10.22a7.5,7.5,0,0,1-.63-1.14H22v4H14v-4H12v4H4V8H22.78a7.49,7.49,0,0,1-.28-2H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V12.34A7.45,7.45,0,0,1,30,13.5ZM4,15H32v6.08H28.92V16.27H27v4.81H18.92V16.27H17v4.81H8.9V16.27H7v4.81H4ZM23.8,28V24.27H22.2V28H14V24.27h-1.6V28H4V23H32v5Z"/>', solid: '<path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6ZM14,28H12V24h2Zm10,0H22V24h2Zm8-6H4V20H7V16H9v4h8V16h2v4h8V16h2v4h3Zm0-8H4V12h8V8h2v4h8V8h2v4h8Z"/>', solidAlerted: '<path d="M33.68,15.4H22.23A3.69,3.69,0,0,1,19.35,14H4V12h8V8h2v4h4.57A3.67,3.67,0,0,1,19,9.89L21.29,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V15.38ZM14,28H12V24h2Zm10,0H22V24h2Zm8-6H4V20H7V16H9v4h8V16h2v4h8V16h2v4h3Z"/>', solidBadged: '<path d="M24,10.49V12h1.51A7.53,7.53,0,0,1,24,10.49Z"/><path d="M32,13.22V14H4V12h8V8h2v4h8V8h.78a7.49,7.49,0,0,1-.28-2H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V12.34A7.45,7.45,0,0,1,32,13.22ZM14,28H12V24h2Zm10,0H22V24h2Zm8-6H4V20H7V16H9v4h8V16h2v4h8V16h2v4h3Z"/>' })];

// node_modules/@cds/core/icon/shapes/first-aid.js
var V7 = ["first-aid", n23({ outline: '<path d="M32,6H23.91V4.5A2.5,2.5,0,0,0,21.41,2h-7a2.5,2.5,0,0,0-2.5,2.5V6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6ZM13.91,4.5a.5.5,0,0,1,.5-.5h7a.5.5,0,0,1,.5.5V6h-8ZM4,28V8H32V28Z"/><path d="M20.15,25.2H16.74a1.3,1.3,0,0,1-1.3-1.3V21.2h-2.7a1.3,1.3,0,0,1-1.3-1.3V16.5a1.3,1.3,0,0,1,1.3-1.3h2.7V12.5a1.3,1.3,0,0,1,1.3-1.3h3.41a1.3,1.3,0,0,1,1.29,1.3v2.7h2.71a1.3,1.3,0,0,1,1.29,1.3v3.4a1.3,1.3,0,0,1-1.29,1.3H21.44v2.7A1.3,1.3,0,0,1,20.15,25.2ZM17,23.6h2.81v-4h4V16.8h-4v-4H17v4H13v2.8h4Zm7.11-6.8Z"/>', solid: '<path d="M32,6H23.91V4.5A2.5,2.5,0,0,0,21.41,2h-7a2.5,2.5,0,0,0-2.5,2.5V6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6ZM13.91,4.5a.5.5,0,0,1,.5-.5h7a.5.5,0,0,1,.5.5V6h-8ZM24.64,19.9a.5.5,0,0,1-.5.5h-3.5v3.5a.5.5,0,0,1-.5.5h-3.4a.5.5,0,0,1-.5-.5V20.4h-3.5a.5.5,0,0,1-.5-.5V16.5a.5.5,0,0,1,.5-.5h3.5V12.5a.5.5,0,0,1,.5-.5h3.4a.5.5,0,0,1,.5.5V16h3.5a.5.5,0,0,1,.5.5Z"/>' })];

// node_modules/@cds/core/icon/shapes/fish.js
var l17 = ["fish", n23({ outline: '<circle cx="11.49" cy="17.5" r="1.5"/><path d="M33.48,9.29a1,1,0,0,0-1,0c-3.37,2-5.91,5.81-6.9,7.45L24.85,18s-1,1.62-1,1.62c-1.76,2.49-5.1,6.36-8.79,6.36-4.65,0-8.75-6.15-9.84-7.94,1.09-1.79,5.18-7.94,9.84-7.94,3.54,0,6.77,3.58,8.58,6.07l.28-.48s.36-.51.93-1.25C22.72,11.64,19.18,8.06,15,8.06c-6.59,0-11.67,9.07-11.88,9.46L2.89,18l.27.48c.21.39,5.29,9.46,11.88,9.46,5.06,0,9.22-5.34,11-8C26,20,27.18,18,27.18,18h0l.07-.11a18.06,18.06,0,0,1,1.88-2.75s0,0,0,0a20.31,20.31,0,0,1,2.86-3V23.88a20.93,20.93,0,0,1-3.61-4l-.16.26h0l-1,1.59a18.74,18.74,0,0,0,5.21,4.95,1,1,0,0,0,.5.14,1.13,1.13,0,0,0,.5-.13,1,1,0,0,0,.5-.87V10.16A1,1,0,0,0,33.48,9.29Z"/>' })];

// node_modules/@cds/core/icon/shapes/flame.js
var c14 = ["flame", n23({ outline: '<path d="M31.3,16.66c-1.19-2.09-7.94-14.15-7.94-14.15a1,1,0,0,0-1.75,0l-6,10.64-3-5.28a1,1,0,0,0-1.75,0S5.4,17.78,4.42,19.5A9.3,9.3,0,0,0,3,24.61C3,29.72,5.86,34,11.67,34H22.48C28.28,34,33,29,33,22.78A11.13,11.13,0,0,0,31.3,16.66ZM22.48,32H11.77C8.13,32,5,28.66,5,24.61a7.43,7.43,0,0,1,1.16-4.13c.73-1.29,4.05-7.21,5.65-10.07l3,5.28a1,1,0,0,0,.87.51h0a1,1,0,0,0,.87-.51L22.49,5c1.86,3.33,6.15,11,7.07,12.6A9.24,9.24,0,0,1,31,22.78C31,27.87,27.18,32,22.48,32Z"/><path d="M25.75,21.73c-.65-1.16-4.38-7.81-4.38-7.81a.8.8,0,0,0-1.4,0l-4.2,7.48-1.59-2.49a.8.8,0,0,0-1.35,0L9.37,24.35a4.35,4.35,0,0,0-.82,2.6,4.49,4.49,0,0,0,.5,2H11a3,3,0,0,1-.83-2,2.78,2.78,0,0,1,.56-1.73l2.8-4.38,1.66,2.6a.8.8,0,0,0,1.41-.12,7.82,7.82,0,0,1,.4-.8L20.67,16l3.69,6.57a4.83,4.83,0,0,1,.77,2.71A5,5,0,0,1,23.46,29h2.13a6.68,6.68,0,0,0,1.14-3.74,6.45,6.45,0,0,0-1-3.5Z"/>', solid: '<path d="M31.3,16.32c-1.19-2.09-7.94-14.15-7.94-14.15a1,1,0,0,0-1.75,0l-6,10.64-3-5.28a1,1,0,0,0-1.75,0S5.4,17.43,4.42,19.15A9.3,9.3,0,0,0,3,24.26c0,5.11,3.88,9.65,8.67,9.74H22.48C28.28,34,33,28.62,33,22.44A11.13,11.13,0,0,0,31.3,16.32ZM21.48,32H14.54A4.68,4.68,0,0,1,10,27.41a3.91,3.91,0,0,1,.75-2.34l3.35-5.21a.5.5,0,0,1,.84,0l1.78,2.77,0-.08c.63-1.11,4.23-7.48,4.23-7.48a.5.5,0,0,1,.87,0s3.6,6.38,4.23,7.48A5.83,5.83,0,0,1,27,25.76C27,32,22.1,32,21.48,32Z"/>' })];

// node_modules/@cds/core/icon/shapes/form.js
var h12 = ["form", n23({ outline: '<path d="M21,12H7a1,1,0,0,1-1-1V7A1,1,0,0,1,7,6H21a1,1,0,0,1,1,1v4A1,1,0,0,1,21,12ZM8,10H20V7.94H8Z"/><path d="M21,14.08H7a1,1,0,0,0-1,1V19a1,1,0,0,0,1,1H18.36L22,16.3V15.08A1,1,0,0,0,21,14.08ZM20,18H8V16H20Z"/><path d="M11.06,31.51v-.06l.32-1.39H4V4h20V14.25L26,12.36V3a1,1,0,0,0-1-1H3A1,1,0,0,0,2,3V31a1,1,0,0,0,1,1h8A3.44,3.44,0,0,1,11.06,31.51Z"/><path d="M22,19.17l-.78.79A1,1,0,0,0,22,19.17Z"/><path d="M6,26.94a1,1,0,0,0,1,1h4.84l.3-1.3.13-.55,0-.05H8V24h6.34l2-2H7a1,1,0,0,0-1,1Z"/><path d="M33.49,16.67,30.12,13.3a1.61,1.61,0,0,0-2.28,0h0L14.13,27.09,13,31.9a1.61,1.61,0,0,0,1.26,1.9,1.55,1.55,0,0,0,.31,0,1.15,1.15,0,0,0,.37,0l4.85-1.07L33.49,19a1.6,1.6,0,0,0,0-2.27ZM18.77,30.91l-3.66.81L16,28.09,26.28,17.7l2.82,2.82ZM30.23,19.39l-2.82-2.82L29,15l2.84,2.84Z"/>' })];

// node_modules/@cds/core/icon/shapes/fuel.js
var t53 = ["fuel", n23({ outline: '<path d="M20.12,34H5.9A2.81,2.81,0,0,1,3,31.19V4.86A2.9,2.9,0,0,1,6,2.07H20.22A2.72,2.72,0,0,1,23,4.86V31.19A2.82,2.82,0,0,1,20.12,34ZM5.9,4A.87.87,0,0,0,5,4.86V31.19a.87.87,0,0,0,.87.87H20.12a.94.94,0,0,0,.95-.87V4.86A.94.94,0,0,0,20.12,4Z"/><path d="M29.53,34A3.5,3.5,0,0,1,26,30.5V23a2,2,0,0,0-2-2H22.57a1,1,0,0,1,0-2H24a4,4,0,0,1,4,4V30.5a1.5,1.5,0,0,0,3,0V17.3l-3.13-7A2.29,2.29,0,0,0,25.8,9h-.73a1,1,0,1,1,0-2h.73a4.3,4.3,0,0,1,3.93,2.55l3.21,7.16a1,1,0,0,1,.09.41V30.5A3.5,3.5,0,0,1,29.53,34Z"/><path d="M18,9H8A1,1,0,1,1,8,7H18a1,1,0,0,1,0,2Z"/><path d="M18,13H8A1,1,0,1,1,8,11H18A1,1,0,1,1,18,13Z"/><path d="M25,12.08a1,1,0,0,1-1-1v-6a1,1,0,0,1,2,0v6A1,1,0,0,1,25,12.08Z"/>' })];

// node_modules/@cds/core/icon/shapes/gavel.js
var t54 = ["gavel", n23({ outline: '<path d="M23.7,10.41a1,1,0,0,1-.71-.29L15.56,2.69A1,1,0,0,1,17,1.28l7.44,7.43a1,1,0,0,1-.71,1.7Z"/><path d="M11.86,22.25a1,1,0,0,0-.29-.71L4.14,14.11a1,1,0,0,0-1.42,1.42L10.15,23a1,1,0,0,0,1.42,0A1,1,0,0,0,11.86,22.25Z"/><path d="M21.93,34H3a1,1,0,0,1-1-1.27l1.13-4a1,1,0,0,1,1-.73H20.8a1,1,0,0,1,1,.73l1.13,4a1,1,0,0,1-.17.87A1,1,0,0,1,21.93,34ZM4.31,32H20.6L20,30H4.87Z"/><path d="M33.11,27.44l-14-14,2.36-2.36L14.52,4.13,5.58,13.07,12.51,20l2.35-2.34,14,14a3,3,0,0,0,4.24,0A3,3,0,0,0,33.11,27.44ZM8.4,13.07,14.52,7l4.11,4.11-6.12,6.11Zm23.29,17.2a1,1,0,0,1-1.41,0l-14-14,1.41-1.41,14,14A1,1,0,0,1,31.69,30.27Z"/>', solid: '<path d="M23.7,10.79a1,1,0,0,1-.71-.3L15.56,3.06A1,1,0,0,1,17,1.65l7.44,7.43a1,1,0,0,1,0,1.41A1,1,0,0,1,23.7,10.79Z"/><path d="M10.69,23.79a1,1,0,0,1-.7-.29L2.55,16.07A1,1,0,1,1,4,14.65l7.43,7.43a1,1,0,0,1-.71,1.71Z"/><path d="M20.64,31l.5,1.77a.89.89,0,0,1-.85,1.12H3.67a.89.89,0,0,1-.85-1.12L3.33,31A1.51,1.51,0,0,1,4.8,29.92H19.16A1.53,1.53,0,0,1,20.64,31Z"/><path d="M32.19,28.08,18.43,14.46l3-3L14.52,4.5,5.58,13.44l6.93,6.94,3.21-3.2,13.74,13.6a1.89,1.89,0,0,0,1.36.56,1.91,1.91,0,0,0,1.37-3.26Z"/>' })];

// node_modules/@cds/core/icon/shapes/grid-view.js
var t55 = ["grid-view", n23({ outline: '<path d="M14,4H6A2,2,0,0,0,4,6v8a2,2,0,0,0,2,2h8a2,2,0,0,0,2-2V6A2,2,0,0,0,14,4ZM6,14V6h8v8Z"/><path d="M30,4H22a2,2,0,0,0-2,2v8a2,2,0,0,0,2,2h8a2,2,0,0,0,2-2V6A2,2,0,0,0,30,4ZM22,14V6h8v8Z"/><path d="M14,20H6a2,2,0,0,0-2,2v8a2,2,0,0,0,2,2h8a2,2,0,0,0,2-2V22A2,2,0,0,0,14,20ZM6,30V22h8v8Z"/><path d="M30,20H22a2,2,0,0,0-2,2v8a2,2,0,0,0,2,2h8a2,2,0,0,0,2-2V22A2,2,0,0,0,30,20ZM22,30V22h8v8Z"/>', solid: '<rect x="4" y="4" width="12" height="12" rx="2" ry="2"/><rect x="20" y="4" width="12" height="12" rx="2" ry="2"/><rect x="4" y="20" width="12" height="12" rx="2" ry="2"/><rect x="20" y="20" width="12" height="12" rx="2" ry="2"/>' })];

// node_modules/@cds/core/icon/shapes/help.js
var d17 = ["help", n23({ outline: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,30A14,14,0,1,1,32,18,14,14,0,0,1,18,32Z"/><path d="M18.29,8.92a7.38,7.38,0,0,0-5.72,2.57,1,1,0,0,0-.32.71.92.92,0,0,0,.95.92,1.08,1.08,0,0,0,.71-.29,5.7,5.7,0,0,1,4.33-2c2.36,0,3.83,1.52,3.83,3.41v.05c0,2.21-1.76,3.44-4.54,3.65a.8.8,0,0,0-.76.92s0,2.32,0,2.75a1,1,0,0,0,1,.9h.11a1,1,0,0,0,.9-1V19.45c3-.42,5.43-2,5.43-5.28v-.05C24.18,11.12,21.84,8.92,18.29,8.92Z"/><circle cx="17.78" cy="26.2" r="1.25"/>', outlineBadged: '<path d="M24.18,14.17v-.05c0-3-2.34-5.2-5.88-5.2a7.38,7.38,0,0,0-5.72,2.57,1,1,0,0,0-.32.71.92.92,0,0,0,.95.92,1.08,1.08,0,0,0,.71-.29,5.7,5.7,0,0,1,4.33-2c2.36,0,3.83,1.52,3.83,3.41v.05c0,2.21-1.76,3.44-4.54,3.65a.8.8,0,0,0-.76.92s0,2.32,0,2.75a1,1,0,0,0,1,.9h.11a1,1,0,0,0,.9-1V19.45C21.75,19,24.18,17.45,24.18,14.17Z"/><circle cx="17.78" cy="26.2" r="1.25"/><path d="M33.12,12.81a7.43,7.43,0,0,1-1.91.58,14.05,14.05,0,1,1-8.6-8.6,7.44,7.44,0,0,1,.58-1.91,16.06,16.06,0,1,0,9.93,9.93Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm-.22,25.85a1.65,1.65,0,1,1,1.65-1.65A1.65,1.65,0,0,1,17.78,27.85Zm1.37-8.06v1.72a1.37,1.37,0,0,1-1.3,1.36h-.11a1.34,1.34,0,0,1-1.39-1.3c0-.44,0-2.76,0-2.76a1.19,1.19,0,0,1,1.12-1.31c1.57-.12,4.18-.7,4.18-3.25,0-1.83-1.41-3.07-3.43-3.07a5.31,5.31,0,0,0-4,1.92,1.36,1.36,0,0,1-2.35-.9,1.43,1.43,0,0,1,.43-1,7.77,7.77,0,0,1,6-2.69c3.7,0,6.28,2.3,6.28,5.6C24.58,17.16,22.61,19.2,19.15,19.79Z"/>', solidBadged: '<path d="M33.12,12.81a7.49,7.49,0,0,1-9.93-9.93,16.06,16.06,0,1,0,9.93,9.93Zm-15.34,15a1.65,1.65,0,1,1,1.65-1.65A1.65,1.65,0,0,1,17.78,27.85Zm1.37-8.06v1.72a1.37,1.37,0,0,1-1.3,1.36h-.11a1.34,1.34,0,0,1-1.39-1.3c0-.44,0-2.76,0-2.76a1.19,1.19,0,0,1,1.12-1.31c1.57-.12,4.18-.7,4.18-3.25,0-1.83-1.41-3.07-3.43-3.07a5.31,5.31,0,0,0-4,1.92,1.36,1.36,0,0,1-2.35-.9,1.43,1.43,0,0,1,.43-1,7.77,7.77,0,0,1,6-2.69c3.7,0,6.28,2.3,6.28,5.6C24.58,17.16,22.61,19.2,19.15,19.79Z"/>' })];

// node_modules/@cds/core/icon/shapes/history.js
var t56 = ["history", n23({ outline: '<path d="M18,9.83a1,1,0,0,0-1,1v8.72l5.9,4A1,1,0,0,0,24,21.88l-5-3.39V10.83A1,1,0,0,0,18,9.83Z"/><path d="M18,2A16.09,16.09,0,0,0,4,10.26V5.2a1,1,0,0,0-2,0V14h8.8a1,1,0,0,0,0-2H5.35A14,14,0,1,1,8.58,28.35a1,1,0,0,0-1.35,1.48A16,16,0,1,0,18,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/hourglass.js
var l18 = ["hourglass", n23({ outline: '<path d="M29,32H26V24.91a6.67,6.67,0,0,0-2.69-5.33l-1.28-1A6.36,6.36,0,0,0,21,18h0a6.29,6.29,0,0,0,1-.62l1.28-1A6.67,6.67,0,0,0,26,11.09V4h3a1,1,0,0,0,0-2H7A1,1,0,0,0,7,4h3v7.09a6.67,6.67,0,0,0,2.69,5.33l1.28,1A6.36,6.36,0,0,0,15,18h0a6.27,6.27,0,0,0-1,.62l-1.28,1A6.67,6.67,0,0,0,10,24.91V32H7a1,1,0,0,0,0,2H29a1,1,0,0,0,0-2ZM12,24.91a4.66,4.66,0,0,1,1.88-3.72l1.28-1a4.66,4.66,0,0,1,1.18-.63,1,1,0,0,0,.65-.94V17.33a1,1,0,0,0-.65-.94,4.67,4.67,0,0,1-1.19-.63l-1.28-1A4.66,4.66,0,0,1,12,11.09V4H24v7.09a4.66,4.66,0,0,1-1.88,3.72l-1.28,1h0a4.66,4.66,0,0,1-1.18.63,1,1,0,0,0-.65.94v1.34a1,1,0,0,0,.65.94,4.67,4.67,0,0,1,1.19.63l1.28,1A4.66,4.66,0,0,1,24,24.91V32H12Z"/>', outlineAlerted: '<path d="M29,32H26V24.91a6.67,6.67,0,0,0-2.69-5.33l-1.28-1A6.36,6.36,0,0,0,21,18h0a6.29,6.29,0,0,0,1-.62l1.28-1a6.64,6.64,0,0,0,1.09-1H22.23a3.64,3.64,0,0,1-.78-.09l-.62.46h0a4.66,4.66,0,0,1-1.18.63,1,1,0,0,0-.65.94v1.34a1,1,0,0,0,.65.94,4.67,4.67,0,0,1,1.19.63l1.28,1A4.66,4.66,0,0,1,24,24.91V32H12V24.91a4.66,4.66,0,0,1,1.88-3.72l1.28-1a4.66,4.66,0,0,1,1.18-.63,1,1,0,0,0,.65-.94V17.33a1,1,0,0,0-.65-.94,4.67,4.67,0,0,1-1.19-.63l-1.28-1A4.66,4.66,0,0,1,12,11.09V4H22.45L23.6,2H7A1,1,0,0,0,7,4h3v7.09a6.67,6.67,0,0,0,2.69,5.33l1.28,1A6.36,6.36,0,0,0,15,18h0a6.27,6.27,0,0,0-1,.62l-1.28,1A6.67,6.67,0,0,0,10,24.91V32H7a1,1,0,0,0,0,2H29a1,1,0,0,0,0-2Z"/>', outlineBadged: '<path d="M29,32H26V24.91a6.67,6.67,0,0,0-2.69-5.33l-1.28-1A6.36,6.36,0,0,0,21,18h0a6.29,6.29,0,0,0,1-.62l1.28-1a6.68,6.68,0,0,0,2.57-4.16A7.53,7.53,0,0,1,24,10.49v.61a4.66,4.66,0,0,1-1.88,3.72l-1.28,1h0a4.66,4.66,0,0,1-1.18.63,1,1,0,0,0-.65.94v1.34a1,1,0,0,0,.65.94,4.67,4.67,0,0,1,1.19.63l1.28,1A4.66,4.66,0,0,1,24,24.91V32H12V24.91a4.66,4.66,0,0,1,1.88-3.72l1.28-1a4.66,4.66,0,0,1,1.18-.63,1,1,0,0,0,.65-.94V17.33a1,1,0,0,0-.65-.94,4.67,4.67,0,0,1-1.19-.63l-1.28-1A4.66,4.66,0,0,1,12,11.09V4H22.78a7.45,7.45,0,0,1,.89-2H7A1,1,0,0,0,7,4h3v7.09a6.67,6.67,0,0,0,2.69,5.33l1.28,1A6.36,6.36,0,0,0,15,18h0a6.27,6.27,0,0,0-1,.62l-1.28,1A6.67,6.67,0,0,0,10,24.91V32H7a1,1,0,0,0,0,2H29a1,1,0,0,0,0-2Z"/>', solid: '<path d="M6.67,4h22a1,1,0,0,0,0-2h-22a1,1,0,1,0,0,2Z"/><path d="M28.67,32h-22a1,1,0,0,0,0,2h22a1,1,0,1,0,0-2Z"/><path d="M22.55,15.67A6.07,6.07,0,0,0,25,11.12V6H10.06v5.12a6.07,6.07,0,0,0,2.45,4.55,11.48,11.48,0,0,0,2.91,1.72v1.16a11.48,11.48,0,0,0-2.91,1.72,6.07,6.07,0,0,0-2.45,4.55v5.12H25V24.82a6.07,6.07,0,0,0-2.45-4.55,11.48,11.48,0,0,0-2.91-1.72V17.39A11.48,11.48,0,0,0,22.55,15.67Z"/>', solidAlerted: '<path d="M28.67,32h-22a1,1,0,0,0,0,2h22a1,1,0,1,0,0-2Z"/><path d="M6.67,4H22.45L23.6,2H6.67a1,1,0,1,0,0,2Z"/><path d="M12.51,20.27a6.07,6.07,0,0,0-2.45,4.55v5.12H25V24.82a6.07,6.07,0,0,0-2.45-4.55,11.48,11.48,0,0,0-2.91-1.72V17.39a11.48,11.48,0,0,0,2.91-1.72l.3-.27h-.62A3.68,3.68,0,0,1,19,9.89L21.29,6H10.06v5.12a6.07,6.07,0,0,0,2.45,4.55,11.48,11.48,0,0,0,2.91,1.72v1.16A11.48,11.48,0,0,0,12.51,20.27Z"/>', solidBadged: '<path d="M28.67,32h-22a1,1,0,0,0,0,2h22a1,1,0,1,0,0-2Z"/><path d="M6.67,4H22.78a7.45,7.45,0,0,1,.89-2h-17a1,1,0,1,0,0,2Z"/><path d="M22.55,20.27a11.48,11.48,0,0,0-2.91-1.72V17.39a11.48,11.48,0,0,0,2.91-1.72A6.25,6.25,0,0,0,25,11.55,7.47,7.47,0,0,1,22.5,6H10.06v5.12a6.07,6.07,0,0,0,2.45,4.55,11.48,11.48,0,0,0,2.91,1.72v1.16a11.48,11.48,0,0,0-2.91,1.72,6.07,6.07,0,0,0-2.45,4.55v5.12H25V24.82A6.07,6.07,0,0,0,22.55,20.27Z"/>' })];

// node_modules/@cds/core/icon/shapes/id-badge.js
var h13 = ["id-badge", n23({ outline: '<path d="M18,22a4.23,4.23,0,1,0-4.23-4.23A4.23,4.23,0,0,0,18,22Zm0-6.86a2.63,2.63,0,1,1-2.63,2.63A2.63,2.63,0,0,1,18,15.14Z"/><path d="M22,4a2,2,0,0,0-2-2H16a2,2,0,0,0-2,2v7h8ZM20,9H16V4h4Z"/><path d="M26,30V27.7a1.12,1.12,0,0,0-.26-.73A9.9,9.9,0,0,0,18,23.69,9.9,9.9,0,0,0,10.26,27a1.13,1.13,0,0,0-.26.73V30h1.6V27.87A8.33,8.33,0,0,1,18,25.29a8.33,8.33,0,0,1,6.4,2.59V30Z"/><path d="M28,6H24V8h4V32H8V8h4V6H8A2,2,0,0,0,6,8V32a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V8A2,2,0,0,0,28,6Z"/>', outlineAlerted: '<path d="M18,22a4.23,4.23,0,1,0-4.23-4.23A4.23,4.23,0,0,0,18,22Zm0-6.86a2.63,2.63,0,1,1-2.63,2.63A2.63,2.63,0,0,1,18,15.14Z"/><path d="M10.26,27a1.13,1.13,0,0,0-.26.73V30h1.6V27.87A8.33,8.33,0,0,1,18,25.29a8.33,8.33,0,0,1,6.4,2.59V30H26V27.7a1.12,1.12,0,0,0-.26-.73A9.9,9.9,0,0,0,18,23.69,9.9,9.9,0,0,0,10.26,27Z"/><path d="M19,9.89,19.56,9H16V4h4V8.24l2-3.46V4a2,2,0,0,0-2-2H16a2,2,0,0,0-2,2v7h4.64A3.66,3.66,0,0,1,19,9.89Z"/><path d="M28,15.4V32H8V8h4V6H8A2,2,0,0,0,6,8V32a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V15.4Z"/>', outlineBadged: '<path d="M18,22a4.23,4.23,0,1,0-4.23-4.23A4.23,4.23,0,0,0,18,22Zm0-6.86a2.63,2.63,0,1,1-2.63,2.63A2.63,2.63,0,0,1,18,15.14Z"/><path d="M22,4a2,2,0,0,0-2-2H16a2,2,0,0,0-2,2v7h8ZM20,9H16V4h4Z"/><path d="M10.26,27a1.13,1.13,0,0,0-.26.73V30h1.6V27.87A8.33,8.33,0,0,1,18,25.29a8.33,8.33,0,0,1,6.4,2.59V30H26V27.7a1.12,1.12,0,0,0-.26-.73A9.9,9.9,0,0,0,18,23.69,9.9,9.9,0,0,0,10.26,27Z"/><path d="M28,13.22V32H8V8h4V6H8A2,2,0,0,0,6,8V32a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V13.5A7.49,7.49,0,0,1,28,13.22Z"/>', solid: '<circle cx="18" cy="17.77" r="4.23"/><path d="M21,4a2,2,0,0,0-2-2H17a2,2,0,0,0-2,2v6h6Z"/><path d="M10.26,27a1.13,1.13,0,0,0-.26.73V30H26V27.7a1.12,1.12,0,0,0-.26-.73A9.9,9.9,0,0,0,18,23.69,9.9,9.9,0,0,0,10.26,27Z"/><path d="M28,6H23V8h5V32H8V8h5V6H8A2,2,0,0,0,6,8V32a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V8A2,2,0,0,0,28,6Z"/>', solidAlerted: '<path d="M19,9.89,21,6.5V4a2,2,0,0,0-2-2H17a2,2,0,0,0-2,2v6h4Z"/><circle cx="18" cy="17.77" r="4.23"/><path d="M10.26,27a1.13,1.13,0,0,0-.26.73V30H26V27.7a1.12,1.12,0,0,0-.26-.73A9.9,9.9,0,0,0,18,23.69,9.9,9.9,0,0,0,10.26,27Z"/><path d="M28,15.4V32H8V8h5V6H8A2,2,0,0,0,6,8V32a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V15.4Z"/>', solidBadged: '<circle cx="18" cy="17.77" r="4.23"/><path d="M21,4a2,2,0,0,0-2-2H17a2,2,0,0,0-2,2v6h6Z"/><path d="M10.26,27a1.13,1.13,0,0,0-.26.73V30H26V27.7a1.12,1.12,0,0,0-.26-.73A9.9,9.9,0,0,0,18,23.69,9.9,9.9,0,0,0,10.26,27Z"/><path d="M28,13.22V32H8V8h5V6H8A2,2,0,0,0,6,8V32a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V13.5A7.49,7.49,0,0,1,28,13.22Z"/>' })];

// node_modules/@cds/core/icon/shapes/key.js
var L6 = ["key", n23({ outline: '<rect x="6.33" y="10.71" width="9.71" height="2.57" rx="1" ry="1" transform="translate(-5.21 11.43) rotate(-45)"/><path d="M23.35,16.8l.63-.63A5,5,0,0,0,24,9.1L18.71,3.84a5,5,0,0,0-7.07,0L3.09,12.39a5,5,0,0,0,0,7.07l5.26,5.26a5,5,0,0,0,7.07,0l.4-.4L18,26.48h3.44v3h3.69v1.63L28,34h6V27.45ZM32,32H28.86l-1.77-1.76v-2.8H23.41v-3H18.8l-3-3L14,23.31a3,3,0,0,1-4.24,0L4.5,18a3,3,0,0,1,0-4.24l8.56-8.56a3,3,0,0,1,4.24,0l5.26,5.26a3,3,0,0,1,0,4.24l-2,2L32,28.28Z"/>', outlineAlerted: '<rect x="6.33" y="10.71" width="9.71" height="2.57" rx="1" ry="1" transform="translate(-5.21 11.43) rotate(-45)"/><path d="M23.35,16.8l.63-.63a5,5,0,0,0,.63-.77H22.23l-.29,0L20.52,16.8,32,28.28V32H28.86l-1.77-1.76v-2.8H23.41v-3H18.8l-3-3L14,23.31a3,3,0,0,1-4.24,0L4.5,18a3,3,0,0,1,0-4.24l8.56-8.56a3,3,0,0,1,4.24,0L20.1,8.06l1-1.79L18.71,3.84a5,5,0,0,0-7.07,0L3.09,12.39a5,5,0,0,0,0,7.07l5.26,5.26a5,5,0,0,0,7.07,0l.4-.4L18,26.48h3.44v3h3.69v1.63L28,34h6V27.45Z"/>', outlineBadged: '<rect x="6.33" y="10.71" width="9.71" height="2.57" rx="1" ry="1" transform="translate(-5.21 11.43) rotate(-45)"/><path d="M23.35,16.8l.63-.63A5,5,0,0,0,24,9.1L18.71,3.84a5,5,0,0,0-7.07,0L3.09,12.39a5,5,0,0,0,0,7.07l5.26,5.26a5,5,0,0,0,7.07,0l.4-.4L18,26.48h3.44v3h3.69v1.63L28,34h6V27.45ZM32,32H28.86l-1.77-1.76v-2.8H23.41v-3H18.8l-3-3L14,23.31a3,3,0,0,1-4.24,0L4.5,18a3,3,0,0,1,0-4.24l8.56-8.56a3,3,0,0,1,4.24,0l5.26,5.26a3,3,0,0,1,0,4.24l-2,2L32,28.28Z"/>', solid: '<path d="M23.38,16.77l.6-.6A5,5,0,0,0,24,9.1L18.71,3.84a5,5,0,0,0-7.07,0L3.09,12.39a5,5,0,0,0,0,7.07l5.26,5.26a5,5,0,0,0,7.07,0l.45-.45,2.1,2.2h3.44v3h3.69v1.63L28,34h6V27.45Zm-8.56-6.59L9.37,15.64a1,1,0,0,1-1.41,0l-.4-.4a1,1,0,0,1,0-1.41L13,8.36a1,1,0,0,1,1.41,0l.4.4A1,1,0,0,1,14.82,10.18ZM32,32H28.86l-1.77-1.76v-2.8H23.41v-3H18.8l-1.52-1.61L22,18.18,32,28.28Z"/>', solidAlerted: '<path d="M23.38,16.77l.6-.6a5,5,0,0,0,.63-.77H22.23A3.68,3.68,0,0,1,19,9.89l2.09-3.62L18.71,3.84a5,5,0,0,0-7.07,0L3.09,12.39a5,5,0,0,0,0,7.07l5.26,5.26a5,5,0,0,0,7.07,0l.45-.45,2.1,2.2h3.44v3h3.69v1.63L28,34h6V27.45Zm-8.56-6.59L9.37,15.64a1,1,0,0,1-1.41,0l-.4-.4a1,1,0,0,1,0-1.41L13,8.36a1,1,0,0,1,1.41,0l.4.4A1,1,0,0,1,14.82,10.18ZM32,32H28.86l-1.77-1.76v-2.8H23.41v-3H18.8l-1.52-1.61L22,18.18,32,28.28Z"/>', solidBadged: '<path d="M23.38,16.77l.6-.6A5,5,0,0,0,24,9.1L18.71,3.84a5,5,0,0,0-7.07,0L3.09,12.39a5,5,0,0,0,0,7.07l5.26,5.26a5,5,0,0,0,7.07,0l.45-.45,2.1,2.2h3.44v3h3.69v1.63L28,34h6V27.45Zm-8.56-6.59L9.37,15.64a1,1,0,0,1-1.41,0l-.4-.4a1,1,0,0,1,0-1.41L13,8.36a1,1,0,0,1,1.41,0l.4.4A1,1,0,0,1,14.82,10.18ZM32,32H28.86l-1.77-1.76v-2.8H23.41v-3H18.8l-1.52-1.61L22,18.18,32,28.28Z"/>' })];

// node_modules/@cds/core/icon/shapes/landscape.js
var H7 = ["landscape", n23({ outline: '<path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6Zm0,22H4V8H32Z"/><path d="M9,22a.82.82,0,0,0,.55-.21.8.8,0,0,0,0-1.13L7.83,18.8H28.17l-1.72,1.86a.8.8,0,0,0,0,1.13A.82.82,0,0,0,27,22a.78.78,0,0,0,.58-.26L31.09,18l-3.47-3.74a.79.79,0,0,0-1.13,0,.8.8,0,0,0,0,1.13l1.72,1.86H7.83l1.72-1.86a.8.8,0,0,0,0-1.13.79.79,0,0,0-1.13,0L4.91,18l3.47,3.74A.78.78,0,0,0,9,22Z"/>', solid: '<path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6ZM27.77,21.88a1,1,0,0,1-.73.32,1,1,0,0,1-.68-.27,1,1,0,0,1-.06-1.41L27.71,19H8.29L9.7,20.52a1,1,0,0,1-.06,1.41A1,1,0,0,1,9,22.2a1,1,0,0,1-.73-.32L4.64,18l3.59-3.88A1,1,0,0,1,9.7,15.48L8.29,17H27.71L26.3,15.48a1,1,0,0,1,1.47-1.36L31.36,18Z"/>' })];

// node_modules/@cds/core/icon/shapes/launchpad.js
var c15 = ["launchpad", n23({ outline: '<path d="M28,34H8a1,1,0,0,0,0,2H28a1,1,0,0,0,0-2Z"/><path d="M18,9.53a2.75,2.75,0,1,0,2.75,2.75A2.75,2.75,0,0,0,18,9.53Zm0,3.89a1.15,1.15,0,0,1,0-2.29,1.15,1.15,0,1,1,0,2.29Z"/><path d="M28.75,22.45a15.46,15.46,0,0,0-2.85-5.52l-.28-.35c0-.34,0-.68-.05-1C24.89,4.36,18.79.6,18.54.44a1,1,0,0,0-1,0c-.26.16-6.35,3.92-7,15.1,0,.32,0,.65-.05,1l-.33.41A15.6,15.6,0,0,0,6.72,28.09a1,1,0,0,0,1,.91h4.43a16.31,16.31,0,0,0,1,2.5,1,1,0,0,0,.87.51H22a1,1,0,0,0,.87-.51,16,16,0,0,0,1-2.5h4.39a1,1,0,0,0,1-.91A15.55,15.55,0,0,0,28.75,22.45ZM21.37,30H14.68a25.46,25.46,0,0,1-1.59-5.23l-2,.4c.14.65.28,1.25.43,1.82H8.66a13.18,13.18,0,0,1,1.8-7c0,.55.07,1.1.13,1.66l2-.21a33.88,33.88,0,0,1-.11-5.77C13,7.35,16.65,3.64,18,2.53c1.38,1.12,5.05,4.82,5.56,13.15A32.86,32.86,0,0,1,21.37,30Zm3.12-3a37.19,37.19,0,0,0,1.09-6.94A13.17,13.17,0,0,1,27.34,27Z"/>', solid: '<path d="M18,15.54A3.29,3.29,0,0,1,18,9v1.6a1.69,1.69,0,1,0,0,3.38Z"/><path d="M28,34H8a1,1,0,0,0,0,2H28a1,1,0,0,0,0-2Z"/><path d="M17.94,10.56h0v3.38h0a1.69,1.69,0,0,0,0-3.38Z"/><path d="M28.75,22.45a15.46,15.46,0,0,0-2.85-5.52l-.38-.47c0-.3,0-.61,0-.91C24.79,4.36,18.7.6,18.44.44a1,1,0,0,0-1,0c-.26.16-6.35,3.92-7,15.1,0,.36,0,.73-.05,1.1l-.23.29A15.6,15.6,0,0,0,6.72,28.09a1,1,0,0,0,1,.91h4.34a15.5,15.5,0,0,0,1,2.5A1,1,0,0,0,14,32h7.92a1,1,0,0,0,.87-.51,15.11,15.11,0,0,0,1-2.5h4.49a1,1,0,0,0,1-.91A15.55,15.55,0,0,0,28.75,22.45ZM17.94,15.54h0V30H14.58A25,25,0,0,1,13,24.78l-2,.4c.13.65.27,1.25.42,1.82H8.66a13.23,13.23,0,0,1,1.71-6.86c0,.5.08,1,.13,1.51l2-.21a31.94,31.94,0,0,1-.11-5.77c.51-8.32,4.17-12,5.55-13.14h0V9h0a3.29,3.29,0,0,1,0,6.58ZM24.39,27a36.15,36.15,0,0,0,1.11-7.1A13.34,13.34,0,0,1,27.34,27Z"/>' })];

// node_modules/@cds/core/icon/shapes/library.js
var r33 = ["library", n23({ outline: '<path d="M33.48,29.63,26.74,11.82a2,2,0,0,0-2.58-1.16L21,11.85V8.92A1.92,1.92,0,0,0,19.08,7H14V4.92A1.92,1.92,0,0,0,12.08,3H5A2,2,0,0,0,3,5V32a1,1,0,0,0,1,1H20a1,1,0,0,0,1-1V19.27l5,13.21a1,1,0,0,0,1.29.58l5.61-2.14a1,1,0,0,0,.58-1.29ZM12,8.83V31H5V5h7ZM19,31H14V9h5Zm8.51-.25L21.13,13.92l3.74-1.42,6.39,16.83Z"/>', solid: '<path d="M12.75,3H5.25A1.15,1.15,0,0,0,4,4V33H14V4A1.15,1.15,0,0,0,12.75,3Z"/><path d="M33.77,31.09l-6.94-18.3a1,1,0,0,0-1.29-.58L22,13.59V9a1,1,0,0,0-1-1H16V33h6V14.69L28.93,33Z"/>' })];

// node_modules/@cds/core/icon/shapes/lightbulb.js
var h14 = ["lightbulb", n23({ outline: '<path d="M18,2.25a11,11,0,0,0-11,11,10.68,10.68,0,0,0,1,4.63,16.36,16.36,0,0,0,1.12,1.78,17,17,0,0,1,2,3.47,16.19,16.19,0,0,1,.59,4h2A18.17,18.17,0,0,0,13,22.44a18.46,18.46,0,0,0-2.22-3.92,15.79,15.79,0,0,1-1-1.54A8.64,8.64,0,0,1,9,13.23a9,9,0,0,1,18.07,0A8.64,8.64,0,0,1,26.21,17a15.79,15.79,0,0,1-1,1.54A18.46,18.46,0,0,0,23,22.44a18.17,18.17,0,0,0-.71,4.71h2a16.19,16.19,0,0,1,.59-4,17,17,0,0,1,2-3.47A16.31,16.31,0,0,0,28,17.86a10.68,10.68,0,0,0,1-4.63A11,11,0,0,0,18,2.25Z"/><path d="M18.63,15.51a.8.8,0,0,0-1.13,0l-3,3,2.86,3.13v5.54H19V21l-2.24-2.45,1.89-1.89A.8.8,0,0,0,18.63,15.51Z"/><path d="M23.86,29.15H12.11a.8.8,0,1,0,0,1.6H23.86a.8.8,0,0,0,0-1.6Z"/><path d="M22,32.15H14a.8.8,0,1,0,0,1.6H22a.8.8,0,1,0,0-1.6Z"/><path d="M17.32,10.89l-2.73,2.73a.8.8,0,0,0,1.13,1.13L18.45,12a.8.8,0,1,0-1.13-1.13Z"/>', outlineBadged: '<path d="M19,27.15V21l-2.24-2.45,1.89-1.89a.8.8,0,0,0-1.13-1.13l-3,3,2.86,3.13v5.54Z"/><path d="M23.86,29.15H12.11a.8.8,0,1,0,0,1.6H23.86a.8.8,0,0,0,0-1.6Z"/><path d="M22,32.15H14a.8.8,0,1,0,0,1.6H22a.8.8,0,1,0,0-1.6Z"/><path d="M15.72,14.75,18.45,12a.8.8,0,1,0-1.13-1.13l-2.73,2.73a.8.8,0,0,0,1.13,1.13Z"/><path d="M27,12.88c0,.12,0,.23,0,.35A8.64,8.64,0,0,1,26.21,17a15.79,15.79,0,0,1-1,1.54A18.46,18.46,0,0,0,23,22.44a18.17,18.17,0,0,0-.71,4.71h2a16.19,16.19,0,0,1,.59-4,17,17,0,0,1,2-3.47A16.31,16.31,0,0,0,28,17.86a10.63,10.63,0,0,0,1-4.43A7.45,7.45,0,0,1,27,12.88Z"/><path d="M13.71,27.15A18.17,18.17,0,0,0,13,22.44a18.46,18.46,0,0,0-2.22-3.92,15.79,15.79,0,0,1-1-1.54A8.64,8.64,0,0,1,9,13.23,9,9,0,0,1,22.53,5.47a7.45,7.45,0,0,1,.43-2,11,11,0,0,0-16,9.8,10.68,10.68,0,0,0,1,4.63,16.36,16.36,0,0,0,1.12,1.78,17,17,0,0,1,2,3.47,16.19,16.19,0,0,1,.59,4Z"/>', solid: '<path d="M23.86,29.15H12.11a.8.8,0,1,0,0,1.6H23.86a.8.8,0,0,0,0-1.6Z"/><path d="M22,32.15H14a.8.8,0,1,0,0,1.6H22a.8.8,0,1,0,0-1.6Z"/><path d="M18,2.25a11,11,0,0,0-11,11,10.68,10.68,0,0,0,1,4.63,16.36,16.36,0,0,0,1.12,1.78,17,17,0,0,1,2,3.47,16.19,16.19,0,0,1,.59,4h5.69V21.61l-2.86-3.13,3-3a.8.8,0,0,1,1.13,1.13l-1.89,1.89L19,21v6.17H24.3a16.19,16.19,0,0,1,.59-4,17,17,0,0,1,2-3.47A16.31,16.31,0,0,0,28,17.86a10.68,10.68,0,0,0,1-4.63A11,11,0,0,0,18,2.25ZM18.45,12l-2.73,2.73a.8.8,0,1,1-1.13-1.13l2.73-2.73A.8.8,0,1,1,18.45,12Z"/>', solidBadged: '<path d="M23.86,29.15H12.11a.8.8,0,1,0,0,1.6H23.86a.8.8,0,0,0,0-1.6Z"/><path d="M22,32.15H14a.8.8,0,1,0,0,1.6H22a.8.8,0,1,0,0-1.6Z"/><path d="M22.5,6A7.47,7.47,0,0,1,23,3.44a11,11,0,0,0-16,9.8,10.68,10.68,0,0,0,1,4.63,16.36,16.36,0,0,0,1.12,1.78,17,17,0,0,1,2,3.47,16.19,16.19,0,0,1,.59,4h5.69V21.61l-2.86-3.13,3-3a.8.8,0,0,1,1.13,1.13l-1.89,1.89L19,21v6.17H24.3a16.19,16.19,0,0,1,.59-4,17,17,0,0,1,2-3.47A16.31,16.31,0,0,0,28,17.86a10.63,10.63,0,0,0,1-4.43A7.5,7.5,0,0,1,22.5,6Zm-4,6-2.73,2.73a.8.8,0,1,1-1.13-1.13l2.73-2.73A.8.8,0,1,1,18.45,12Z"/>' })];

// node_modules/@cds/core/icon/shapes/list.js
var e37 = ["list", n23({ outline: '<rect x="15" y="8" width="9" height="2"/><rect x="15" y="12" width="9" height="2"/><rect x="15" y="16" width="9" height="2"/><rect x="15" y="20" width="9" height="2"/><rect x="15" y="24" width="9" height="2"/><rect x="11" y="8" width="2" height="2"/><rect x="11" y="12" width="2" height="2"/><rect x="11" y="16" width="2" height="2"/><rect x="11" y="20" width="2" height="2"/><rect x="11" y="24" width="2" height="2"/><path d="M28,2H8A2,2,0,0,0,6,4V32a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V4A2,2,0,0,0,28,2Zm0,30H8V4H28Z"/>', outlineBadged: '<rect x="15" y="12" width="9" height="2"/><rect x="15" y="16" width="9" height="2"/><rect x="15" y="20" width="9" height="2"/><rect x="15" y="24" width="9" height="2"/><rect x="11" y="8" width="2" height="2"/><rect x="11" y="12" width="2" height="2"/><rect x="11" y="16" width="2" height="2"/><rect x="11" y="20" width="2" height="2"/><rect x="11" y="24" width="2" height="2"/><path d="M15,8v2h8.66a7.45,7.45,0,0,1-.89-2Z"/><path d="M28,13.22V32H8V4H22.78a7.45,7.45,0,0,1,.88-2H8A2,2,0,0,0,6,4V32a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V13.5A7.49,7.49,0,0,1,28,13.22Z"/>', solid: '<path d="M28,2H8A2,2,0,0,0,6,4V32a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V4A2,2,0,0,0,28,2ZM13,26H11V24h2Zm0-4H11V20h2Zm0-4H11V16h2Zm0-4H11V12h2Zm0-4H11V8h2ZM25,26H15V24H25Zm0-4H15V20H25Zm0-4H15V16H25Zm0-4H15V12H25Zm0-4H15V8H25Z"/>', solidBadged: '<path d="M23.66,10H15V8h7.78a7.42,7.42,0,0,1,.89-6H8A2,2,0,0,0,6,4V32a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V13.5A7.49,7.49,0,0,1,23.66,10ZM13,26H11V24h2Zm0-4H11V20h2Zm0-4H11V16h2Zm0-4H11V12h2Zm0-4H11V8h2ZM25,26H15V24H25Zm0-4H15V20H25Zm0-4H15V16H25Zm0-4H15V12H25Z"/>' })];

// node_modules/@cds/core/icon/shapes/lock.js
var o39 = ["lock", n23({ outline: '<path d="M18.09,20.59A2.41,2.41,0,0,0,17,25.14V28h2V25.23a2.41,2.41,0,0,0-.91-4.64Z"/><path d="M26,15V10.72a8.2,8.2,0,0,0-8-8.36,8.2,8.2,0,0,0-8,8.36V15H7V32a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V15ZM12,10.72a6.2,6.2,0,0,1,6-6.36,6.2,6.2,0,0,1,6,6.36V15H12ZM9,32V17H27V32Z"/>', solid: '<path d="M26,15V10.72a8.2,8.2,0,0,0-8-8.36,8.2,8.2,0,0,0-8,8.36V15H7V32a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V15ZM19,25.23V28H17V25.14a2.4,2.4,0,1,1,2,.09ZM24,15H12V10.72a6.2,6.2,0,0,1,6-6.36,6.2,6.2,0,0,1,6,6.36Z"/>' })];

// node_modules/@cds/core/icon/shapes/login.js
var o40 = ["login", n23({ outline: '<path d="M28,4H12a2,2,0,0,0-2,2H28V30H12V20.2H10V30a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V6A2,2,0,0,0,28,4Z"/><path d="M15.12,18.46a1,1,0,1,0,1.41,1.41l5.79-5.79L16.54,8.29a1,1,0,0,0-1.41,1.41L18.5,13H4a1,1,0,0,0-1,1,1,1,0,0,0,1,1H18.5Z"/>', solid: '<path d="M28,4H12a2,2,0,0,0-2,2v7h8.5L15.12,9.71a1,1,0,0,1,1.41-1.41l5.79,5.79-5.79,5.79a1,1,0,0,1-1.41-1.41L18.5,15H10V30a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V6A2,2,0,0,0,28,4Z"/><path d="M10,13H4a1,1,0,0,0-1,1,1,1,0,0,0,1,1h6Z"/>' })];

// node_modules/@cds/core/icon/shapes/logout.js
var t57 = ["logout", n23({ outline: '<path d="M7,6H23v9.8h2V6a2,2,0,0,0-2-2H7A2,2,0,0,0,5,6V30a2,2,0,0,0,2,2H23a2,2,0,0,0,2-2H7Z"/><path d="M28.16,17.28a1,1,0,0,0-1.41,1.41L30.13,22H15.63a1,1,0,0,0-1,1,1,1,0,0,0,1,1h14.5l-3.38,3.46a1,1,0,1,0,1.41,1.41L34,23.07Z"/>', solid: '<path d="M23,4H7A2,2,0,0,0,5,6V30a2,2,0,0,0,2,2H23a2,2,0,0,0,2-2V24H15.63a1,1,0,0,1-1-1,1,1,0,0,1,1-1H25V6A2,2,0,0,0,23,4Z"/><path d="M28.16,17.28a1,1,0,0,0-1.41,1.41L30.13,22H25v2h5.13l-3.38,3.46a1,1,0,1,0,1.41,1.41L34,23.07Z"/>' })];

// node_modules/@cds/core/icon/shapes/minus.js
var r34 = ["minus", n23({ outline: '<path d="M26,17H10a1,1,0,0,0,0,2H26a1,1,0,0,0,0-2Z"/>' })];

// node_modules/@cds/core/icon/shapes/minus-circle.js
var a27 = ["minus-circle", n23({ outline: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,30A14,14,0,1,1,32,18,14,14,0,0,1,18,32Z"/><path d="M24,17H12a1,1,0,0,0,0,2H24a1,1,0,0,0,0-2Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm6,17.5H12a1.5,1.5,0,0,1,0-3H24a1.5,1.5,0,0,1,0,3Z"/>' })];

// node_modules/@cds/core/icon/shapes/moon.js
var n25 = ["moon", n23({ outline: '<path d="M31,27.19a1,1,0,0,0-1-.56c-.28,0-.56,0-.85,0A11,11,0,0,1,24.92,5.61a1,1,0,0,0,.61-1,1,1,0,0,0-.67-.91,14.7,14.7,0,0,0-5-.87,15.12,15.12,0,0,0,0,30.24,14.78,14.78,0,0,0,11-4.81A1,1,0,0,0,31,27.19ZM19.89,31.12a13.12,13.12,0,0,1,0-26.24,11.81,11.81,0,0,1,2,.16,13,13,0,0,0,5.72,23.53A12.75,12.75,0,0,1,19.89,31.12Z"/>', solid: '<path d="M29.2,26.72A12.07,12.07,0,0,1,22.9,4.44,13.68,13.68,0,0,0,19.49,4a14,14,0,0,0,0,28,13.82,13.82,0,0,0,10.9-5.34A11.71,11.71,0,0,1,29.2,26.72Z"/>' })];

// node_modules/@cds/core/icon/shapes/new.js
var n26 = ["new", n23({ outline: '<path d="M34.59,23l-4.08-5,4-4.9a1.82,1.82,0,0,0,.23-1.94A1.93,1.93,0,0,0,32.94,10h-31A1.91,1.91,0,0,0,0,11.88V24.13A1.91,1.91,0,0,0,1.94,26H33.05a1.93,1.93,0,0,0,1.77-1.09A1.82,1.82,0,0,0,34.59,23ZM2,24V12H32.78l-4.84,5.93L32.85,24Z"/><polygon points="9.39 19.35 6.13 15 5 15 5 21.18 6.13 21.18 6.13 16.84 9.39 21.18 10.51 21.18 10.51 15 9.39 15 9.39 19.35"/><polygon points="12.18 21.18 16.84 21.18 16.84 20.16 13.31 20.16 13.31 18.55 16.5 18.55 16.5 17.52 13.31 17.52 13.31 16.03 16.84 16.03 16.84 15 12.18 15 12.18 21.18"/><polygon points="24.52 19.43 23.06 15 21.84 15 20.37 19.43 19.05 15 17.82 15 19.78 21.18 20.89 21.18 22.45 16.59 24 21.18 25.13 21.18 27.08 15 25.85 15 24.52 19.43"/>', solid: '<path d="M34.11,24.49l-3.92-6.62,3.88-6.35A1,1,0,0,0,33.22,10H2a2,2,0,0,0-2,2V24a2,2,0,0,0,2,2H33.25A1,1,0,0,0,34.11,24.49Zm-23.6-3.31H9.39L6.13,16.84v4.35H5V15H6.13l3.27,4.35V15h1.12ZM16.84,16H13.31v1.49h3.2v1h-3.2v1.61h3.53v1H12.18V15h4.65Zm8.29,5.16H24l-1.55-4.59L20.9,21.18H19.78l-2-6.18H19l1.32,4.43L21.84,15h1.22l1.46,4.43L25.85,15h1.23Z"/>' })];

// node_modules/@cds/core/icon/shapes/no-access.js
var o41 = ["no-access", n23({ outline: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,30A14,14,0,1,1,32,18,14,14,0,0,1,18,32Z"/><path d="M27.15,15H8.85A1.85,1.85,0,0,0,7,16.85v2.29A1.85,1.85,0,0,0,8.85,21H27.15A1.85,1.85,0,0,0,29,19.15V16.85A1.85,1.85,0,0,0,27.15,15Zm.25,4.15a.25.25,0,0,1-.25.25H8.85a.25.25,0,0,1-.25-.25V16.85a.25.25,0,0,1,.25-.25H27.15a.25.25,0,0,1,.25.25Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2ZM29.15,20H6.85A.85.85,0,0,1,6,19.15V16.85A.85.85,0,0,1,6.85,16H29.15a.85.85,0,0,1,.85.85v2.29A.85.85,0,0,1,29.15,20Z"/>' })];

// node_modules/@cds/core/icon/shapes/note.js
var o42 = ["note", n23({ outline: '<path d="M28,30H6V8H19.22l2-2H6A2,2,0,0,0,4,8V30a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V15l-2,2Z"/><path d="M33.53,5.84,30.16,2.47a1.61,1.61,0,0,0-2.28,0L14.17,16.26l-1.11,4.81A1.61,1.61,0,0,0,14.63,23,1.69,1.69,0,0,0,15,23l4.85-1.07L33.53,8.12A1.61,1.61,0,0,0,33.53,5.84ZM18.81,20.08l-3.66.81L16,17.26,26.32,6.87l2.82,2.82ZM30.27,8.56,27.45,5.74,29,4.16,31.84,7Z"/>', solid: '<path d="M33,6.4,29.3,2.7a1.71,1.71,0,0,0-2.36,0L23.65,6H6A2,2,0,0,0,4,8V30a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V11.76l3-3A1.67,1.67,0,0,0,33,6.4ZM18.83,20.13l-4.19.93,1-4.15,9.55-9.57,3.23,3.23ZM29.5,9.43,26.27,6.2l1.85-1.85,3.23,3.23Z"/>' })];

// node_modules/@cds/core/icon/shapes/objects.js
var c16 = ["objects", n23({ outline: '<path d="M16.08,14.9a10.41,10.41,0,0,1,1.87-.71l-4-10.77a2,2,0,0,0-3.75,0L2,25.26A2,2,0,0,0,3.92,28h6.94a10,10,0,0,1-.52-2H3.92L12.06,4.12Z"/><path d="M32,9H22a2,2,0,0,0-2,2v2.85c.23,0,.46,0,.69,0A10.51,10.51,0,0,1,22,13.9V11H32V21H30.65a10.42,10.42,0,0,1,.45,2H32a2,2,0,0,0,2-2V11A2,2,0,0,0,32,9Z"/><path d="M20.69,15.81a8.5,8.5,0,1,0,8.5,8.5A8.51,8.51,0,0,0,20.69,15.81Zm0,15a6.5,6.5,0,1,1,6.5-6.5A6.51,6.51,0,0,1,20.69,30.81Z"/>', solid: '<path d="M10.65,24.44a9.51,9.51,0,0,1,7.06-9.17L13,3a1,1,0,0,0-1.87,0L2.07,26.56A1,1,0,0,0,3,27.92h8.32A9.44,9.44,0,0,1,10.65,24.44Z"/><path d="M32,10H20a1,1,0,0,0-1,1v4a9.43,9.43,0,0,1,10.63,9H32a1,1,0,0,0,1-1V11A1,1,0,0,0,32,10Z"/><circle cx="20.15" cy="24.44" r="7.5"/>' })];

// node_modules/@cds/core/icon/shapes/organization.js
var r35 = ["organization", n23({ outline: '<polygon points="9.8 18.8 26.2 18.8 26.2 21.88 27.8 21.88 27.8 17.2 18.8 17.2 18.8 14 17.2 14 17.2 17.2 8.2 17.2 8.2 21.88 9.8 21.88 9.8 18.8"/><path d="M14,23H4a2,2,0,0,0-2,2v6a2,2,0,0,0,2,2H14a2,2,0,0,0,2-2V25A2,2,0,0,0,14,23ZM4,31V25H14v6Z"/><path d="M32,23H22a2,2,0,0,0-2,2v6a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V25A2,2,0,0,0,32,23ZM22,31V25H32v6Z"/><path d="M13,13H23a2,2,0,0,0,2-2V5a2,2,0,0,0-2-2H13a2,2,0,0,0-2,2v6A2,2,0,0,0,13,13Zm0-8H23v6H13Z"/>', solid: '<polygon points="9.8 18.8 26.2 18.8 26.2 21.88 27.8 21.88 27.8 17.2 18.8 17.2 18.8 14 17.2 14 17.2 17.2 8.2 17.2 8.2 21.88 9.8 21.88 9.8 18.8"/><rect x="2" y="23" width="14" height="10" rx="2" ry="2"/><rect x="20" y="23" width="14" height="10" rx="2" ry="2"/><rect x="11" y="3" width="14" height="10" rx="2" ry="2"/>' })];

// node_modules/@cds/core/icon/shapes/paperclip.js
var A8 = ["paperclip", n23({ outline: '<path d="M8.42,32.6A6.3,6.3,0,0,1,4,30.79l-.13-.13A6.2,6.2,0,0,1,2,26.22,6.77,6.77,0,0,1,4,21.4L19.5,6.07a8.67,8.67,0,0,1,12.15-.35A8,8,0,0,1,34,11.44a9,9,0,0,1-2.7,6.36L17.37,31.6A1,1,0,1,1,16,30.18L29.89,16.38A7,7,0,0,0,32,11.44a6,6,0,0,0-1.76-4.3,6.67,6.67,0,0,0-9.34.35L5.45,22.82A4.78,4.78,0,0,0,4,26.22a4.21,4.21,0,0,0,1.24,3l.13.13a4.64,4.64,0,0,0,6.5-.21L25.22,15.94A2.7,2.7,0,0,0,26,14a2.35,2.35,0,0,0-.69-1.68,2.61,2.61,0,0,0-3.66.13l-9.2,9.12a1,1,0,1,1-1.41-1.42L20.28,11a4.62,4.62,0,0,1,6.48-.13A4.33,4.33,0,0,1,28,14a4.68,4.68,0,0,1-1.41,3.34L13.28,30.58A6.91,6.91,0,0,1,8.42,32.6Z"/>' })];

// node_modules/@cds/core/icon/shapes/paste.js
var e38 = ["paste", n23({ outline: '<path d="M30,12H26v2h4v2h2V14A2,2,0,0,0,30,12Z"/><rect x="30" y="18" width="2" height="6"/><path d="M30,30H28v2h2a2,2,0,0,0,2-2V26H30Z"/><path d="M24,22V6a2,2,0,0,0-2-2H6A2,2,0,0,0,4,6V22a2,2,0,0,0,2,2H22A2,2,0,0,0,24,22ZM6,6H22V22H6Z"/><rect x="20" y="30" width="6" height="2"/><path d="M14,26H12v4a2,2,0,0,0,2,2h4V30H14Z"/>', solid: '<path d="M30,12H26v2h4v2h2V14A2,2,0,0,0,30,12Z"/><rect x="30" y="18" width="2" height="6"/><path d="M30,30H28v2h2a2,2,0,0,0,2-2V26H30Z"/><rect x="4" y="4" width="20" height="20" rx="2" ry="2"/><rect x="20" y="30" width="6" height="2"/><path d="M14,26H12v4a2,2,0,0,0,2,2h4V30H14Z"/>' })];

// node_modules/@cds/core/icon/shapes/pencil.js
var e39 = ["pencil", n23({ outline: '<path d="M33.87,8.32,28,2.42a2.07,2.07,0,0,0-2.92,0L4.27,23.2l-1.9,8.2a2.06,2.06,0,0,0,2,2.5,2.14,2.14,0,0,0,.43,0L13.09,32,33.87,11.24A2.07,2.07,0,0,0,33.87,8.32ZM12.09,30.2,4.32,31.83l1.77-7.62L21.66,8.7l6,6ZM29,13.25l-6-6,3.48-3.46,5.9,6Z"/>', solid: '<path d="M4.22,23.2l-1.9,8.2a2.06,2.06,0,0,0,2,2.5,2.14,2.14,0,0,0,.43,0L13,32,28.84,16.22,20,7.4Z"/><path d="M33.82,8.32l-5.9-5.9a2.07,2.07,0,0,0-2.92,0L21.72,5.7l8.83,8.83,3.28-3.28A2.07,2.07,0,0,0,33.82,8.32Z"/>' })];

// node_modules/@cds/core/icon/shapes/pin.js
var p6 = ["pin", n23({ outline: '<path d="M33,16.59a1,1,0,0,1-.71-.29L19.7,3.71a1,1,0,0,1,1.41-1.41L33.71,14.89A1,1,0,0,1,33,16.59Z"/><path d="M28.52,15.56l-1.41-1.41-7.2,7.2a1,1,0,0,0-.25,1,9,9,0,0,1-1.53,8.09L5.58,17.87a9,9,0,0,1,8.09-1.53,1,1,0,0,0,1-.25l7.2-7.2L20.44,7.48l-6.79,6.79A10.94,10.94,0,0,0,3.41,17.11a1,1,0,0,0,0,1.42l6.33,6.33L2.29,32.29a1,1,0,1,0,1.41,1.41l7.44-7.44,6.33,6.33a1,1,0,0,0,.71.29h0a1,1,0,0,0,.71-.3,11,11,0,0,0,2.84-10.24Z"/>', solid: '<path d="M33,16.71a1,1,0,0,1-.71-.29L19.7,3.82a1,1,0,0,1,1.41-1.41L33.71,15A1,1,0,0,1,33,16.71Z"/><path d="M20.44,7.59l-6.79,6.79A10.94,10.94,0,0,0,3.41,17.22a1,1,0,0,0,0,1.42L9.73,25,2.29,32.41a1,1,0,1,0,1.41,1.41l7.44-7.44,6.33,6.33a1,1,0,0,0,.71.29h0a1,1,0,0,0,.71-.3,11,11,0,0,0,2.84-10.24l6.79-6.79Z"/>' })];

// node_modules/@cds/core/icon/shapes/pinboard.js
var d18 = ["pinboard", n23({ outline: '<path d="M30,30,6,30,6,6H22V4H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V14H30Z"/><path d="M33.57,9.33l-7-7a1,1,0,0,0-1.41,1.41l7,7a1,1,0,1,0,1.41-1.41Z"/><path d="M22.1,11.19l.7.5L26.46,8,25,6.56,22.51,9.13c-2-.87-4.35.14-5.92,1.68l-.72.71,3.54,3.54-3.67,3.67,1.41,1.41,3.67-3.67L24.37,20l.71-.72c1.54-1.57,2.55-3.92,1.68-5.93l2.54-2.57L27.88,9.38,24.21,13.1l.49.69c.76,1,.25,2.37-.41,3.33L18.77,11.6C19.84,10.86,21.15,10.5,22.1,11.19Z"/>', solid: '<path d="M30,30,6,30,6,6H22V4H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V14H30Z"/><path d="M33.57,9.33l-7-7a1,1,0,0,0-1.41,1.41l1.38,1.38-4,4c-2-.87-4.35.14-5.92,1.68l-.72.71,3.54,3.54-3.67,3.67,1.41,1.41,3.67-3.67L24.37,20l.71-.72c1.54-1.57,2.55-3.91,1.68-5.92l4-4,1.38,1.38a1,1,0,1,0,1.41-1.41Z"/>' })];

// node_modules/@cds/core/icon/shapes/plus.js
var a28 = ["plus", n23({ outline: '<path d="M30,17H19V6a1,1,0,1,0-2,0V17H6a1,1,0,0,0-1,1,.91.91,0,0,0,1,.94H17V30a1,1,0,1,0,2,0V19H30a1,1,0,0,0,1-1A1,1,0,0,0,30,17Z"/>' })];

// node_modules/@cds/core/icon/shapes/plus-circle.js
var e40 = ["plus-circle", n23({ outline: '<path d="M26.17,17H19V9.83a1,1,0,0,0-2,0V17H9.83a1,1,0,0,0,0,2H17v7.17a1,1,0,0,0,2,0V19h7.17a1,1,0,0,0,0-2Z"/><path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,30A14,14,0,1,1,32,18,14,14,0,0,1,18,32Z"/>', solid: '<path d="M34,18A16,16,0,1,1,18,2,16,16,0,0,1,34,18Zm-8.41-1.5H19.5V10.41a1.5,1.5,0,0,0-3,0V16.5H10.41a1.5,1.5,0,0,0,0,3H16.5v6.09a1.5,1.5,0,0,0,3,0V19.5h6.09a1.5,1.5,0,0,0,0-3Z"/>' })];

// node_modules/@cds/core/icon/shapes/pop-out.js
var t58 = ["pop-out", n23({ outline: '<path d="M27,33H5a2,2,0,0,1-2-2V9A2,2,0,0,1,5,7H15V9H5V31H27V21h2V31A2,2,0,0,1,27,33Z"/><path d="M18,3a1,1,0,0,0,0,2H29.59L15.74,18.85a1,1,0,1,0,1.41,1.41L31,6.41V18a1,1,0,0,0,2,0V3Z"/>' })];

// node_modules/@cds/core/icon/shapes/portrait.js
var r36 = ["portrait", n23({ outline: '<path d="M15.34,26.45a.8.8,0,0,0-1.13,0,.79.79,0,0,0,0,1.13L18,31.09l3.74-3.47a.79.79,0,0,0,.05-1.13.8.8,0,0,0-1.13,0L18.8,28.17V7.83l1.86,1.72a.8.8,0,1,0,1.08-1.17L18,4.91,14.26,8.38a.79.79,0,0,0,0,1.13.8.8,0,0,0,1.13,0L17.2,7.83V28.17Z"/><path d="M28,2H8A2,2,0,0,0,6,4V32a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V4A2,2,0,0,0,28,2Zm0,30H8V4H28Z"/>', solid: '<path d="M28,2H8A2,2,0,0,0,6,4V32a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V4A2,2,0,0,0,28,2ZM20.52,26.3a1,1,0,0,1,1.36,1.47L18,31.36l-3.88-3.59a1,1,0,0,1,1.36-1.47L17,27.71V8.29L15.48,9.7a1,1,0,0,1-1.36-1.47L18,4.64l3.88,3.59a1,1,0,0,1,.05,1.41,1,1,0,0,1-.73.32,1,1,0,0,1-.68-.26L19,8.29V27.71Z"/>' })];

// node_modules/@cds/core/icon/shapes/printer.js
var a29 = ["printer", n23({ outline: '<path d="M29,9H27V5H9V9H7a4,4,0,0,0-4,4V24H6.92V22.09H5V13a2,2,0,0,1,2-2H29a2,2,0,0,1,2,2v9H29.08V24H33V13A4,4,0,0,0,29,9ZM25,9H11V7H25Z"/><path d="M28,18H8a1,1,0,0,0,0,2H9V32H27V20h1a1,1,0,0,0,0-2ZM25,30H11V20H25Z"/><rect x="27" y="13.04" width="2" height="2"/>', outlineAlerted: '<path d="M28,18H8a1,1,0,0,0,0,2H9V32H27V20h1a1,1,0,0,0,0-2ZM25,30H11V20H25Z"/><polygon points="31 15.4 31 22.09 29.08 22.09 29.08 24 33 24 33 15.4 31 15.4"/><path d="M5,13a2,2,0,0,1,2-2H18.64A3.65,3.65,0,0,1,19,9.89L19.54,9H11V7h9.71l1.13-2H9V9H7a4,4,0,0,0-4,4V24H6.92V22.09H5Z"/>', outlineBadged: '<path d="M28,18H8a1,1,0,0,0,0,2H9V32H27V20h1a1,1,0,0,0,0-2ZM25,30H11V20H25Z"/><rect x="27" y="13.04" width="2" height="2"/><path d="M33,12.88a7.45,7.45,0,0,1-2,.55v8.66H29.08V24H33V13C33,13,33,12.93,33,12.88Z"/><path d="M5,13a2,2,0,0,1,2-2H24.42a7.5,7.5,0,0,1-1.27-2H11V7H22.57a7.52,7.52,0,0,1-.07-1,7.54,7.54,0,0,1,.07-1H9V9H7a4,4,0,0,0-4,4V24H6.92V22.09H5Z"/>', solid: '<path d="M29,9H27V5H9V9H7a4,4,0,0,0-4,4V24H9v8H27V24h6V13A4,4,0,0,0,29,9ZM25,24v6H11V19H25ZM25,9H11V7H25Zm4,6H27V13h2Z"/>', solidAlerted: '<path d="M22.23,15.4A3.68,3.68,0,0,1,19,9.89L19.54,9H11V7h9.71l1.13-2H9V9H7a4,4,0,0,0-4,4V24H9v8H27V24h6V15.4ZM25,24v6H11V19H25Z"/>', solidBadged: '<path d="M33,12.88a7.3,7.3,0,0,1-4,.55V15H27V13h.32a7.52,7.52,0,0,1-4.18-4H11V7H22.57a7.52,7.52,0,0,1-.07-1,7.54,7.54,0,0,1,.07-1H9V9H7a4,4,0,0,0-4,4V24H9v8H27V24h6V13C33,13,33,12.93,33,12.88ZM25,24v6H11V19H25Z"/>' })];

// node_modules/@cds/core/icon/shapes/recycle.js
var h15 = ["recycle", n23({ outline: '<path d="M6.4,17.4c0.2,0.1,0.3,0.1,0.5,0.1c0.2,0,0.4-0.1,0.5-0.1l7-4.1c0.3-0.2,0.5-0.5,0.5-0.9c0-0.4-0.2-0.7-0.5-0.9L11.9,10L14,6.2c0.4-0.7,1-1.3,1.7-1.7c2-1.1,4.5-0.3,5.6,1.7c0.3,0.5,0.9,0.6,1.4,0.3c0,0,0,0,0.1,0c0.4-0.3,0.5-0.9,0.3-1.3c-0.6-1-1.4-1.9-2.4-2.4c-3-1.6-6.7-0.6-8.3,2.4L9.6,9.9c-0.3,0.5-0.1,1.1,0.3,1.4l2,1.2l-4,2.4V8.2c0-0.6-0.4-1-1-1C6.4,7.3,6,7.7,6,8.3v8.3C6,16.9,6.2,17.2,6.4,17.4z"/><path d="M32.1,21l-3.5-6.2c-0.1-0.2-0.4-0.4-0.6-0.5c-0.3-0.1-0.5,0-0.8,0.1l-2.2,1.3V11l5.5,3.3c0.1,0,0.1,0.1,0.2,0.1c0.5,0.2,1.1,0,1.3-0.5c0.2-0.5,0-1.1-0.5-1.3l-7-4.2c-0.3-0.2-0.7-0.2-1,0C23.1,8.5,23,8.8,23,9.2v8.3c0,0.4,0.1,0.8,0.4,1c0.3,0.2,0.7,0.2,1,0l2.9-1.7l3,5.3c0.7,1.3,0.7,2.8,0,4.1c-0.6,1.2-1.9,1.9-3.2,1.9h-0.9c-0.5,0-1.2,0.4-1.2,1c0.1,0.6,0.6,1,1.2,1h0.9c2.1,0,4-1.1,5-2.9C33.2,25.2,33.2,22.9,32.1,21z"/><path d="M22.4,28.2l-7-4.2c-0.3-0.2-0.7-0.2-1,0c-0.3,0.2-0.4,0.5-0.4,0.9v3.3H9.1c-1.5-0.1-2.9-0.9-3.6-2.3c-0.8-1.4-0.8-3.2,0-4.6c0.3-0.5,0.1-1.1-0.4-1.4c-0.5-0.3-1.1-0.1-1.4,0.4c-1.2,2.1-1.1,4.6,0.1,6.6C4.9,28.8,7,30,9.2,30H15c0.6,0,1-0.4,1-1v-2.4l4,2.4l-5.6,3.3c-0.3,0.2-0.5,0.5-0.5,0.9c0,0.6,0.5,1,1,1c0.2,0,0.3-0.1,0.5-0.2l7-4.2c0.2-0.1,0.3-0.2,0.4-0.4C23.1,29,22.9,28.4,22.4,28.2z"/>', solid: '<path d="M20.8,3.1c-3-1.6-6.7-0.6-8.4,2.4l-2.2,3.8l-2-1.1C8.2,8,8,8,7.9,8C7.4,8,7,8.4,7,8.9v7.2c0,0.3,0.1,0.6,0.4,0.8c0.1,0.1,0.3,0.1,0.4,0.1c0.2,0,0.3,0,0.4-0.1l6.3-3.6c0.3-0.2,0.4-0.4,0.4-0.8c0-0.3-0.2-0.6-0.4-0.8L12,10.3l2.2-3.8c0.4-0.7,1-1.3,1.7-1.7c2-1.1,4.5-0.3,5.6,1.7c0.3,0.5,0.9,0.6,1.4,0.4c0.5-0.3,0.6-0.9,0.4-1.4C22.6,4.5,21.8,3.6,20.8,3.1z"/><path d="M32.2,21.1l-3-5.3l2.3-1.3c0.3-0.2,0.4-0.4,0.4-0.8c0-0.3-0.2-0.6-0.4-0.8l-6.2-3.6c-0.1-0.1-0.3-0.1-0.4-0.1c-0.5,0-0.9,0.4-0.9,0.9v7.2c0,0.3,0.2,0.6,0.4,0.8c0.1,0.1,0.3,0.1,0.4,0.1c0.2,0,0.3-0.1,0.4-0.1l2.2-1.3l3,5.3c0.7,1.2,0.7,2.8,0,4c-0.7,1.2-1.9,1.9-3.2,1.9h-0.9c-0.6,0-1,0.4-1,1c0,0.6,0.4,1,1,1h0.9c2.1,0,4-1.1,5-3C33.2,25.3,33.2,23,32.2,21.1z"/><path d="M21.7,28.4l-6.2-3.6c-0.1-0.1-0.3-0.1-0.4-0.1c-0.5,0-0.9,0.4-0.9,0.9v2.6H9.3c-1.5,0-2.9-0.8-3.6-2.1c-0.8-1.4-0.8-3.1,0-4.5c0.3-0.5,0.1-1.1-0.4-1.4c-0.5-0.3-1.1-0.1-1.4,0.4c-1.2,2-1.2,4.5,0,6.5c1.1,1.9,3.1,3.1,5.4,3.1h4.8v2.6c0,0.3,0.2,0.6,0.4,0.8c0.1,0.1,0.3,0.1,0.4,0.1c0.1,0,0.3,0,0.4-0.1l6.3-3.6c0.3-0.2,0.4-0.4,0.4-0.8C22.1,28.8,21.9,28.5,21.7,28.4z"/>' })];

// node_modules/@cds/core/icon/shapes/redo.js
var e41 = ["redo", n23({ outline: '<path d="M24,4.22a1,1,0,0,0-1.41,1.42l5.56,5.49h-13A11,11,0,0,0,10.07,32,1,1,0,0,0,11,30.18a9,9,0,0,1-5-8,9.08,9.08,0,0,1,9.13-9h13l-5.54,5.48A1,1,0,0,0,24,20l8-7.91Z"/>' })];

// node_modules/@cds/core/icon/shapes/refresh.js
var o43 = ["refresh", n23({ outline: '<path d="M22.4,11.65a1.09,1.09,0,0,0,1.09,1.09H34.43V1.81a1.09,1.09,0,1,0-2.19,0V8.95a16.41,16.41,0,1,0,1.47,15.86,1.12,1.12,0,0,0-2.05-.9,14.18,14.18,0,1,1-1.05-13.36H23.5A1.09,1.09,0,0,0,22.4,11.65Z"/>' })];

// node_modules/@cds/core/icon/shapes/repeat.js
var r37 = ["repeat", n23({ outline: '<path d="M6,14.15A3.17,3.17,0,0,1,9.17,11H28.4l-4.28,4.54a1,1,0,1,0,1.46,1.37L32.09,10,25.58,3.09a1,1,0,1,0-1.46,1.37L28.4,9H9.17A5.17,5.17,0,0,0,4,14.15v6.1l2-2.12Z"/><path d="M30,21.85A3.17,3.17,0,0,1,26.83,25H7.6l4.28-4.54a1,1,0,1,0-1.46-1.37L3.91,26l6.51,6.91a1,1,0,1,0,1.46-1.37L7.6,27H26.83A5.17,5.17,0,0,0,32,21.85v-6.1l-2,2.12Z"/>' })];

// node_modules/@cds/core/icon/shapes/resize.js
var r38 = ["resize", n23({ outline: '<path d="M19,4a1,1,0,0,0,0,2h9.59l-9.25,9.25a1,1,0,1,0,1.41,1.41L30,7.41V17a1,1,0,0,0,2,0V4Z"/><path d="M4,19a1,1,0,0,1,2,0v9.59l9.25-9.25a1,1,0,1,1,1.41,1.41L7.41,30H17a1,1,0,0,1,0,2H4Z"/>' })];

// node_modules/@cds/core/icon/shapes/scissors.js
var s23 = ["scissors", n23({ outline: '<path d="M24.06,18.18l9.61-8.77a1,1,0,0,0-.09-1.55l-2.24-1.6a3.57,3.57,0,0,0-4.28.12L15.88,15.3l-3.26-2.52a5.45,5.45,0,1,0-1,1.77l2.62,2L10,20a5.48,5.48,0,1,0,1.59,1.29L28.3,7.94a1.57,1.57,0,0,1,1.88-.05l1.23.88L21.1,18.19l10.31,9.4-1.23.88a1.57,1.57,0,0,1-1.88-.05l-9.81-7.85L17,21.93l10.06,8a3.57,3.57,0,0,0,4.29.12l2.24-1.6a1,1,0,0,0,.09-1.55ZM7.45,14.54a3.46,3.46,0,1,1,3.45-3.46A3.46,3.46,0,0,1,7.45,14.54Zm0,13.72A3.46,3.46,0,1,1,10.9,24.8,3.46,3.46,0,0,1,7.45,28.26Z"/>', solid: '<path d="M33.81,8.13,31.63,6.48a1.92,1.92,0,0,0-2.36,0L10,22.06a5.46,5.46,0,1,0,2,1.81l3.9-3.12L29.27,31.52a1.92,1.92,0,0,0,2.36,0l2.18-1.64L20.94,19ZM7.45,29.75a2.86,2.86,0,1,1,2.86-2.86A2.87,2.87,0,0,1,7.45,29.75Z"/><path d="M14.3,15.24,12,13.38a5.46,5.46,0,1,0-2,1.81L12.16,17Zm-6.85-2a2.86,2.86,0,1,1,2.86-2.86A2.86,2.86,0,0,1,7.45,13.23Z"/>' })];

// node_modules/@cds/core/icon/shapes/scroll.js
var v6 = ["scroll", n23({ outline: '<path d="M34,11.12V6.58a4.5,4.5,0,0,0-4.5-4.5h-16A4.5,4.5,0,0,0,9,6.58v23a2.5,2.5,0,1,1-5,0V26H7.19V24H2v5.5A4.5,4.5,0,0,0,6.5,34H25.58a4.5,4.5,0,0,0,4.5-4.5V13.13h-2V29.54a2.5,2.5,0,0,1-2.5,2.5H10.24a4.47,4.47,0,0,0,.76-2.5v-23a2.5,2.5,0,0,1,5,0v4.54Zm-4.5-7A2.5,2.5,0,0,1,32,6.58V9.12H18V6.58a4.48,4.48,0,0,0-.76-2.5Z"/>', outlineAlerted: '<path d="M28.08,15.4V29.54a2.5,2.5,0,0,1-2.5,2.5H10.24a4.47,4.47,0,0,0,.76-2.5v-23a2.5,2.5,0,0,1,5,0v4.54h2.61A3.66,3.66,0,0,1,19,9.89l.44-.76H18V6.58a4.48,4.48,0,0,0-.76-2.5H22.4l1.15-2H13.5A4.5,4.5,0,0,0,9,6.58v23a2.5,2.5,0,1,1-5,0V26H7.19V24H2v5.5A4.5,4.5,0,0,0,6.5,34H25.58a4.5,4.5,0,0,0,4.5-4.5V15.4Z"/>', outlineBadged: '<path d="M30,13.5a7.49,7.49,0,0,1-1.92-.26v16.3a2.5,2.5,0,0,1-2.5,2.5H10.24a4.47,4.47,0,0,0,.76-2.5v-23a2.5,2.5,0,0,1,5,0v4.54h8.54a7.5,7.5,0,0,1-1.35-2H18V6.58a4.48,4.48,0,0,0-.76-2.5h5.52a7.44,7.44,0,0,1,.86-2H13.5A4.5,4.5,0,0,0,9,6.58v23a2.5,2.5,0,1,1-5,0V26H7.19V24H2v5.5A4.5,4.5,0,0,0,6.5,34H25.58a4.5,4.5,0,0,0,4.5-4.5v-16Z"/>', solid: '<path d="M34,11.12V6.58a4.5,4.5,0,0,0-4.5-4.5h-16A4.5,4.5,0,0,0,9,6.58V24H2v5.5A4.5,4.5,0,0,0,6.5,34H25.58a4.5,4.5,0,0,0,4.5-4.5V13.13h-2V29.54a2.5,2.5,0,0,1-2.5,2.5H10.24a4.47,4.47,0,0,0,.76-2.5v-23a2.5,2.5,0,0,1,5,0v4.54Z"/>', solidAlerted: '<path d="M28.08,15.4V29.54a2.5,2.5,0,0,1-2.5,2.5H10.24a4.47,4.47,0,0,0,.76-2.5v-23a2.5,2.5,0,0,1,5,0v4.54h2.61A3.66,3.66,0,0,1,19,9.89l4.51-7.8H13.5A4.5,4.5,0,0,0,9,6.58V24H2v5.5A4.5,4.5,0,0,0,6.5,34H25.58a4.5,4.5,0,0,0,4.5-4.5V15.4Z"/>', solidBadged: '<path d="M30,13.5a7.49,7.49,0,0,1-1.92-.26v16.3a2.5,2.5,0,0,1-2.5,2.5H10.24a4.47,4.47,0,0,0,.76-2.5v-23a2.5,2.5,0,0,1,5,0v4.54h8.54a7.46,7.46,0,0,1-.92-9H13.5A4.5,4.5,0,0,0,9,6.58V24H2v5.5A4.5,4.5,0,0,0,6.5,34H25.58a4.5,4.5,0,0,0,4.5-4.5v-16Z"/>' })];

// node_modules/@cds/core/icon/shapes/shrink.js
var n27 = ["shrink", n23({ outline: '<path d="M32,15H22.41l9.25-9.25a1,1,0,0,0-1.41-1.41L21,13.59V4a1,1,0,0,0-2,0V17H32a1,1,0,0,0,0-2Z"/><path d="M4,19a1,1,0,0,0,0,2h9.59L4.33,30.25a1,1,0,1,0,1.41,1.41L15,22.41V32a1,1,0,0,0,2,0V19Z"/>' })];

// node_modules/@cds/core/icon/shapes/slider.js
var d19 = ["slider", n23({ outline: '<path d="M12,12.37A4,4,0,0,0,9,8.48V5A1,1,0,1,0,7,5V8.48a4,4,0,0,0,0,7.78V31a1,1,0,1,0,2,0V16.26A4,4,0,0,0,12,12.37Zm-4,2a2,2,0,1,1,2-2A2,2,0,0,1,8,14.4Z"/><path d="M32,15.83a4,4,0,0,0-3-3.89V5a1,1,0,1,0-2,0v6.94a4,4,0,0,0,0,7.78V31a1,1,0,1,0,2,0V19.72A4,4,0,0,0,32,15.83Zm-4,2a2,2,0,1,1,2-2A2,2,0,0,1,28,17.87Z"/><path d="M22,24.5a4,4,0,0,0-3-3.89V5a1,1,0,1,0-2,0V20.61a4,4,0,0,0,0,7.78V31a1,1,0,1,0,2,0V28.39A4,4,0,0,0,22,24.5Zm-4,2a2,2,0,1,1,2-2A2,2,0,0,1,18,26.53Z"/>', solid: '<path d="M9,9.29V5A1,1,0,1,0,7,5V9.3a3.22,3.22,0,0,0,0,6.11V31a1,1,0,1,0,2,0V15.43A3.22,3.22,0,0,0,9,9.29Z"/><path d="M19,21.45V5a1,1,0,1,0-2,0V21.47a3.22,3.22,0,0,0,0,6.11V31a1,1,0,1,0,2,0V27.6a3.22,3.22,0,0,0,0-6.14Z"/><path d="M29,12.75V5a1,1,0,1,0-2,0v7.76a3.22,3.22,0,0,0,0,6.11V31a1,1,0,1,0,2,0V18.89a3.22,3.22,0,0,0,0-6.14Z"/>' })];

// node_modules/@cds/core/icon/shapes/snowflake.js
var t59 = ["snowflake", n23({ outline: '<path d="M18.05,33.61a1,1,0,0,1-1-1V3.37a1,1,0,1,1,1.95,0V32.63A1,1,0,0,1,18.05,33.61Z"/><path d="M18.06,10.07,14.52,6.54a1,1,0,0,1,0-1.41,1,1,0,0,1,1.41,0l2.13,2.12,2.12-2.12a1,1,0,0,1,1.41,0,1,1,0,0,1,0,1.41Z"/><path d="M20.85,31.17a1,1,0,0,1-.7-.29L18,28.76,15.9,30.88a1,1,0,0,1-1.41,0,1,1,0,0,1,0-1.42L18,25.93l3.54,3.53a1,1,0,0,1,0,1.42A1,1,0,0,1,20.85,31.17Z"/><path d="M30.92,26.5a1,1,0,0,1-.5-.13l-26-15A1,1,0,0,1,4.07,10a1,1,0,0,1,1.37-.36l26,15a1,1,0,0,1-.5,1.87Z"/><path d="M6,15.37a1,1,0,0,1-.26-2l2.9-.78L7.84,9.73a1,1,0,1,1,1.93-.52L11.07,14,6.24,15.33A.82.82,0,0,1,6,15.37Z"/><path d="M27.05,27.54a1,1,0,0,1-1-.75L24.8,22l4.82-1.3a1,1,0,1,1,.52,1.93l-2.9.78.78,2.9a1,1,0,0,1-.71,1.22A.75.75,0,0,1,27.05,27.54Z"/><path d="M4.94,26.5a1,1,0,0,1-.5-1.87l26-15a1,1,0,0,1,1.36.36,1,1,0,0,1-.36,1.37l-26,15A1,1,0,0,1,4.94,26.5Z"/><path d="M8.81,27.54a.75.75,0,0,1-.26,0,1,1,0,0,1-.71-1.22l.78-2.9-2.9-.78A1,1,0,0,1,5,21.38a1,1,0,0,1,1.23-.71L11.07,22l-1.3,4.82A1,1,0,0,1,8.81,27.54Z"/><path d="M29.88,15.37a.82.82,0,0,1-.26,0L24.8,14l1.29-4.83A1,1,0,1,1,28,9.73l-.78,2.89,2.9.78a1,1,0,0,1-.26,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/sort-by.js
var o44 = ["sort-by", n23({ outline: '<path d="M28.54,13H7.46a1,1,0,0,1,0-2H28.54a1,1,0,0,1,0,2Z"/><path d="M21.17,19H7.46a1,1,0,0,1,0-2H21.17a1,1,0,0,1,0,2Z"/><path d="M13.74,25H7.46a1,1,0,0,1,0-2h6.28a1,1,0,0,1,0,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/sun.js
var t60 = ["sun", n23({ outline: '<path d="M18,6.31a1,1,0,0,0,1-1V1.91a1,1,0,0,0-2,0v3.4A1,1,0,0,0,18,6.31Z"/><path d="M18,29.69a1,1,0,0,0-1,1v3.4a1,1,0,0,0,2,0v-3.4A1,1,0,0,0,18,29.69Z"/><path d="M8.32,9.74A1,1,0,0,0,9,10a1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.42L7.33,5.92A1,1,0,0,0,5.92,7.33Z"/><path d="M27.68,26.26a1,1,0,1,0-1.42,1.42l2.41,2.4a1,1,0,0,0,.71.3,1,1,0,0,0,.7-.3,1,1,0,0,0,0-1.41Z"/><path d="M6.31,18a1,1,0,0,0-1-1H1.91a1,1,0,0,0,0,2h3.4A1,1,0,0,0,6.31,18Z"/><path d="M34.09,17h-3.4a1,1,0,1,0,0,2h3.4a1,1,0,0,0,0-2Z"/><path d="M8.32,26.26l-2.4,2.41a1,1,0,0,0,.7,1.71,1,1,0,0,0,.71-.3l2.41-2.4a1,1,0,1,0-1.42-1.42Z"/><path d="M27,10a1,1,0,0,0,.71-.29l2.4-2.41a1,1,0,0,0,0-1.41,1,1,0,0,0-1.41,0l-2.41,2.4a1,1,0,0,0,0,1.42A1,1,0,0,0,27,10Z"/><path d="M18.13,7.75a10.13,10.13,0,1,0,10,10.13A10.08,10.08,0,0,0,18.13,7.75Zm0,18.25a8.13,8.13,0,1,1,8-8.12A8.08,8.08,0,0,1,18.13,26Z"/>', solid: '<path d="M18,6.42a1,1,0,0,0,1-1V1.91a1,1,0,0,0-2,0V5.42A1,1,0,0,0,18,6.42Z"/><path d="M18,29.58a1,1,0,0,0-1,1v3.51a1,1,0,0,0,2,0V30.58A1,1,0,0,0,18,29.58Z"/><path d="M8.4,9.81A1,1,0,0,0,9.81,8.4L7.33,5.92A1,1,0,0,0,5.92,7.33Z"/><path d="M27.6,26.19a1,1,0,0,0-1.41,1.41l2.48,2.48a1,1,0,0,0,1.41-1.41Z"/><path d="M6.42,18a1,1,0,0,0-1-1H1.91a1,1,0,0,0,0,2H5.42A1,1,0,0,0,6.42,18Z"/><path d="M34.09,17H30.58a1,1,0,0,0,0,2h3.51a1,1,0,0,0,0-2Z"/><path d="M8.4,26.19,5.92,28.67a1,1,0,0,0,1.41,1.41L9.81,27.6A1,1,0,0,0,8.4,26.19Z"/><path d="M27.6,9.81l2.48-2.48a1,1,0,0,0-1.41-1.41L26.19,8.4A1,1,0,0,0,27.6,9.81Z"/><circle cx="18" cy="18" r="10"/>' })];

// node_modules/@cds/core/icon/shapes/switch.js
var e42 = ["switch", n23({ outline: '<path d="M5.71,14H20.92V12H5.71L9.42,8.27A1,1,0,1,0,8,6.86L1.89,13,8,19.14a1,1,0,1,0,1.42-1.4Z"/><rect x="23" y="12" width="3" height="2"/><rect x="28" y="12" width="2" height="2"/><path d="M27.92,17.86a1,1,0,0,0-1.42,1.41L30.21,23H15v2H30.21L26.5,28.74a1,1,0,1,0,1.42,1.4L34,24Z"/><rect x="10" y="23" width="3" height="2"/><rect x="6" y="23" width="2" height="2"/>' })];

// node_modules/@cds/core/icon/shapes/sync.js
var n28 = ["sync", n23({ outline: '<path d="M32.84,15.72a1,1,0,1,0-2,.29A13.15,13.15,0,0,1,31,17.94,13,13,0,0,1,8.7,27h5.36a1,1,0,0,0,0-2h-9v9a1,1,0,1,0,2,0V28.2A15,15,0,0,0,32.84,15.72Z"/><path d="M30.06,1A1.05,1.05,0,0,0,29,2V7.83A14.94,14.94,0,0,0,3,17.94a15.16,15.16,0,0,0,.2,2.48,1,1,0,0,0,1,.84h.16a1,1,0,0,0,.82-1.15A13.23,13.23,0,0,1,5,17.94a13,13,0,0,1,13-13A12.87,12.87,0,0,1,27.44,9H22.06a1,1,0,0,0,0,2H31V2A1,1,0,0,0,30.06,1Z"/>' })];

// node_modules/@cds/core/icon/shapes/table.js
var h16 = ["table", n23({ outline: '<path d="M8,34a1,1,0,0,1-1-1V2.92a1,1,0,0,1,2,0V33A1,1,0,0,1,8,34Z"/><path d="M17,33.92a1,1,0,0,1-1-1V9.1a1,1,0,1,1,2,0V32.92A1,1,0,0,1,17,33.92Z"/><path d="M26,34a1,1,0,0,1-1-1V9a1,1,0,0,1,2,0V33A1,1,0,0,1,26,34Z"/><path d="M33.11,18h-25a1,1,0,1,1,0-2h25a1,1,0,1,1,0,2Z"/><path d="M33.1,26.94H8.1A1,1,0,1,1,8.1,25h25a1,1,0,1,1,0,1.92Z"/><path d="M33,8.92H3A1,1,0,1,1,3,7H33a1,1,0,1,1,0,1.94Z"/>' })];

// node_modules/@cds/core/icon/shapes/tag.js
var A9 = ["tag", n23({ outline: '<circle cx="10.52" cy="10.52" r="1.43"/><path d="M31.93,19.2,17.33,4.6A2,2,0,0,0,15.92,4L6,4A2,2,0,0,0,4,6l0,9.92a2,2,0,0,0,.59,1.41l14.6,14.6a2,2,0,0,0,2.83,0l9.9-9.9A2,2,0,0,0,31.93,19.2ZM20.62,30.52,6,15.91V6h9.92l14.6,14.62Z"/>', outlineAlerted: '<circle cx="10.52" cy="10.52" r="1.43"/><path d="M31.93,19.2l-3.8-3.8H25.31l5.22,5.22-9.9,9.9L6,15.91V6h9.92l3.41,3.41,1-1.78-3-3A2,2,0,0,0,15.92,4L6,4A2,2,0,0,0,4,6l0,9.92a2,2,0,0,0,.59,1.41l14.6,14.6a2,2,0,0,0,2.83,0l9.9-9.9A2,2,0,0,0,31.93,19.2Z"/>', outlineBadged: '<circle cx="10.52" cy="10.52" r="1.43"/><path d="M31.93,19.2,17.33,4.6A2,2,0,0,0,15.92,4L6,4A2,2,0,0,0,4,6l0,9.92a2,2,0,0,0,.59,1.41l14.6,14.6a2,2,0,0,0,2.83,0l9.9-9.9A2,2,0,0,0,31.93,19.2ZM20.62,30.52,6,15.91V6h9.92l14.6,14.62Z"/>', solid: '<path d="M31.93,19.2,17.33,4.6A2,2,0,0,0,15.92,4L6,4A2,2,0,0,0,4,6l0,9.92a2,2,0,0,0,.59,1.41l14.6,14.6a2,2,0,0,0,2.83,0l9.9-9.9A2,2,0,0,0,31.93,19.2ZM9.65,11.31a1.66,1.66,0,1,1,1.66-1.66A1.66,1.66,0,0,1,9.65,11.31Z"/>', solidAlerted: '<path d="M28.46,15.73H22.23A3.68,3.68,0,0,1,19,10.22l1.43-2.47L17.33,4.6A2,2,0,0,0,15.92,4L6,4A2,2,0,0,0,4,6l0,9.92a2,2,0,0,0,.59,1.41l14.6,14.6a2,2,0,0,0,2.83,0l9.9-9.9a2,2,0,0,0,0-2.83ZM9.65,11.31a1.66,1.66,0,1,1,1.66-1.66A1.66,1.66,0,0,1,9.65,11.31Z"/>', solidBadged: '<path d="M31.93,19.2,17.33,4.6A2,2,0,0,0,15.92,4L6,4A2,2,0,0,0,4,6l0,9.92a2,2,0,0,0,.59,1.41l14.6,14.6a2,2,0,0,0,2.83,0l9.9-9.9A2,2,0,0,0,31.93,19.2ZM9.65,11.31a1.66,1.66,0,1,1,1.66-1.66A1.66,1.66,0,0,1,9.65,11.31Z"/>' })];

// node_modules/@cds/core/icon/shapes/tags.js
var l19 = ["tags", n23({ outline: '<path d="M33.16,19.13,19.58,5.55A1.92,1.92,0,0,0,18.21,5H16.12L31.75,20.45,21.22,31.07a1.93,1.93,0,0,0,2.73,0l9.21-9.21a1.93,1.93,0,0,0,0-2.73Z"/><circle cx="7.81" cy="11.14" r="1.33"/><path d="M27.78,19.17,14.2,5.58A1.92,1.92,0,0,0,12.83,5H3.61A1.93,1.93,0,0,0,1.68,6.93v9.22a1.92,1.92,0,0,0,.57,1.36L15.84,31.1a1.93,1.93,0,0,0,2.73,0l9.21-9.21A1.93,1.93,0,0,0,27.78,19.17ZM17.26,29.69,3.69,16.15V7h9.1L26.37,20.48Z"/>', outlineAlerted: '<circle cx="7.81" cy="11.14" r="1.33"/><path d="M27.78,19.17,24,15.4H22.23A3.65,3.65,0,0,1,21,15.19l5.33,5.29-9.11,9.21L3.69,16.15V7h9.1l6,5.94a3.68,3.68,0,0,1,.1-2.69L14.2,5.58A1.92,1.92,0,0,0,12.83,5H3.61A1.93,1.93,0,0,0,1.68,6.93v9.22a1.92,1.92,0,0,0,.57,1.36L15.84,31.1a1.93,1.93,0,0,0,2.73,0l9.21-9.21A1.93,1.93,0,0,0,27.78,19.17Z"/><path d="M20.83,6.8,19.58,5.55A1.92,1.92,0,0,0,18.21,5H16.12L19.79,8.6Z"/><path d="M33.16,19.13,29.43,15.4H26.65l5.1,5L21.22,31.07a1.93,1.93,0,0,0,2.73,0l9.21-9.21a1.93,1.93,0,0,0,0-2.73Z"/>', outlineBadged: '<circle cx="7.81" cy="11.14" r="1.33"/><path d="M27.78,19.17,14.2,5.58A1.92,1.92,0,0,0,12.83,5H3.61A1.93,1.93,0,0,0,1.68,6.93v9.22a1.92,1.92,0,0,0,.57,1.36L15.84,31.1a1.93,1.93,0,0,0,2.73,0l9.21-9.21A1.93,1.93,0,0,0,27.78,19.17ZM17.26,29.69,3.69,16.15V7h9.1L26.37,20.48Z"/><path d="M33.16,19.13,19.58,5.55A1.92,1.92,0,0,0,18.21,5H16.12L31.75,20.45,21.22,31.07a1.93,1.93,0,0,0,2.73,0l9.21-9.21a1.93,1.93,0,0,0,0-2.73Z"/>', solid: '<path d="M33.16,19.13,19.58,5.55A1.92,1.92,0,0,0,18.21,5H16.12L31.75,20.45,21.22,31.07a1.93,1.93,0,0,0,2.73,0l9.21-9.21a1.93,1.93,0,0,0,0-2.73Z"/><path d="M27.78,19.17,14.2,5.58A1.92,1.92,0,0,0,12.83,5H3.61A1.93,1.93,0,0,0,1.68,6.93v9.22a1.92,1.92,0,0,0,.57,1.36L15.84,31.1a1.93,1.93,0,0,0,2.73,0l9.21-9.21A1.93,1.93,0,0,0,27.78,19.17ZM6.67,11.72A1.73,1.73,0,1,1,8.4,10,1.73,1.73,0,0,1,6.67,11.72Z"/>', solidAlerted: '<path d="M20.83,6.8,19.58,5.55A1.92,1.92,0,0,0,18.21,5H16.12L19.79,8.6Z"/><path d="M33.16,19.13,29.43,15.4H26.65l5.1,5L21.22,31.07a1.93,1.93,0,0,0,2.73,0l9.21-9.21a1.93,1.93,0,0,0,0-2.73Z"/><path d="M27.78,19.17,24,15.4H22.23a3.67,3.67,0,0,1-3.36-5.15L14.2,5.58A1.92,1.92,0,0,0,12.83,5H3.61A1.93,1.93,0,0,0,1.68,6.93v9.22a1.92,1.92,0,0,0,.57,1.36L15.84,31.1a1.93,1.93,0,0,0,2.73,0l9.21-9.21A1.93,1.93,0,0,0,27.78,19.17ZM6.67,11.72A1.73,1.73,0,1,1,8.4,10,1.73,1.73,0,0,1,6.67,11.72Z"/>', solidBadged: '<path d="M27.78,19.17,14.2,5.58A1.92,1.92,0,0,0,12.83,5H3.61A1.93,1.93,0,0,0,1.68,6.93v9.22a1.92,1.92,0,0,0,.57,1.36L15.84,31.1a1.93,1.93,0,0,0,2.73,0l9.21-9.21A1.93,1.93,0,0,0,27.78,19.17ZM6.67,11.72A1.73,1.73,0,1,1,8.4,10,1.73,1.73,0,0,1,6.67,11.72Z"/><path d="M33.16,19.13,19.58,5.55A1.92,1.92,0,0,0,18.21,5H16.12L31.75,20.45,21.22,31.07a1.93,1.93,0,0,0,2.73,0l9.21-9.21a1.93,1.93,0,0,0,0-2.73Z"/>' })];

// node_modules/@cds/core/icon/shapes/target.js
var A10 = ["target", n23({ outline: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,30A14,14,0,1,1,32,18,14,14,0,0,1,18,32Z"/><path d="M18,7.2A10.8,10.8,0,1,0,28.8,18,10.81,10.81,0,0,0,18,7.2Zm0,20A9.2,9.2,0,1,1,27.2,18,9.21,9.21,0,0,1,18,27.2Z"/><path d="M18,12.31A5.69,5.69,0,1,0,23.69,18,5.69,5.69,0,0,0,18,12.31Zm0,9.77A4.09,4.09,0,1,1,22.09,18,4.09,4.09,0,0,1,18,22.09Z"/>', solid: '<circle cx="18" cy="18" r="4.09"/><path d="M18,7.83A10.17,10.17,0,1,0,28.17,18,10.18,10.18,0,0,0,18,7.83Zm0,16A5.88,5.88,0,1,1,23.88,18,5.88,5.88,0,0,1,18,23.88Z"/><path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,27.83A11.83,11.83,0,1,1,29.83,18,11.85,11.85,0,0,1,18,29.83Z"/>' })];

// node_modules/@cds/core/icon/shapes/thermometer.js
var r39 = ["thermometer", n23({ outline: '<path d="M19,23.17V11.46H17V23.2a3,3,0,1,0,2,0Z"/><path d="M26,15a1,1,0,0,0,0-2H23.92V11H26a1,1,0,0,0,0-2H23.92V8a6,6,0,0,0-12,0V20.81a8,8,0,1,0,12-.2V19H26a1,1,0,0,0,0-2H23.92V15ZM24,26a6,6,0,1,1-10.36-4.12l.27-.29V8a4,4,0,0,1,8,0V21.44l.3.29A6,6,0,0,1,24,26Z"/>' })];

// node_modules/@cds/core/icon/shapes/timeline.js
var e43 = ["timeline", n23({ outline: '<path d="M10,18c0-1.3-0.8-2.4-2-2.8v-3.4c1.2-0.4,2-1.5,2-2.8c0-1.7-1.3-3-3-3S4,7.3,4,9c0,1.3,0.8,2.4,2,2.8v3.4c-1.2,0.4-2,1.5-2,2.8s0.8,2.4,2,2.8v3.4c-1.2,0.4-2,1.5-2,2.8c0,1.7,1.3,3,3,3s3-1.3,3-3c0-1.3-0.8-2.4-2-2.8v-3.4C9.2,20.4,10,19.3,10,18z"/><path d="M31,10H15c-0.6,0-1-0.4-1-1s0.4-1,1-1h16c0.6,0,1,0.4,1,1S31.6,10,31,10z"/><path d="M31,19H15c-0.6,0-1-0.4-1-1s0.4-1,1-1h16c0.6,0,1,0.4,1,1S31.6,19,31,19z"/><path d="M31,28H15c-0.6,0-1-0.4-1-1s0.4-1,1-1h16c0.6,0,1,0.4,1,1S31.6,28,31,28z"/>' })];

// node_modules/@cds/core/icon/shapes/times-circle.js
var l20 = ["times-circle", n23({ outline: '<path d="M19.61,18l4.86-4.86a1,1,0,0,0-1.41-1.41L18.2,16.54l-4.89-4.89a1,1,0,0,0-1.41,1.41L16.78,18,12,22.72a1,1,0,1,0,1.41,1.41l4.77-4.77,4.74,4.74a1,1,0,0,0,1.41-1.41Z"/><path d="M18,34A16,16,0,1,1,34,18,16,16,0,0,1,18,34ZM18,4A14,14,0,1,0,32,18,14,14,0,0,0,18,4Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm8,22.1a1.4,1.4,0,0,1-2,2l-6-6L12,26.12a1.4,1.4,0,1,1-2-2L16,18.08,9.83,11.86a1.4,1.4,0,1,1,2-2L18,16.1l6.17-6.17a1.4,1.4,0,1,1,2,2L20,18.08Z"/>' })];

// node_modules/@cds/core/icon/shapes/tools.js
var V8 = ["tools", n23({ outline: '<path d="M20,14H16a1,1,0,0,0-1,1v6a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V15A1,1,0,0,0,20,14Zm-.4,6.6H16.4V15.4h3.2Z"/><path d="M33.71,12.38,29.62,8.29A1,1,0,0,0,28.92,8h-5V6.05A2,2,0,0,0,22,4H13.84A1.92,1.92,0,0,0,12,6.05V8H7.08a1,1,0,0,0-.71.29L2.29,12.38a1,1,0,0,0-.29.71V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V13.08A1,1,0,0,0,33.71,12.38ZM14,6h8V8H14ZM32,17H22v1.93H32V28H4V18.93H14V17H4V13.5L7.5,10h21L32,13.5Z"/>', solid: '<rect x="16.4" y="15.4" width="3.2" height="5.2"/><path d="M21,21a1,1,0,0,1-1,1H16a1,1,0,0,1-1-1V19H2v9a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V19H21Z"/><path d="M33.71,12.38,29.62,8.29A1,1,0,0,0,28.92,8h-5V6.05A2,2,0,0,0,22,4H13.84A1.92,1.92,0,0,0,12,6.05V8H7.08a1,1,0,0,0-.71.29L2.29,12.38a1,1,0,0,0-.29.71V17H15V15a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v2H34V13.08A1,1,0,0,0,33.71,12.38ZM22,8H14V6h8Z"/>' })];

// node_modules/@cds/core/icon/shapes/trash.js
var H8 = ["trash", n23({ outline: '<path d="M27.14,34H8.86A2.93,2.93,0,0,1,6,31V11.23H8V31a.93.93,0,0,0,.86,1H27.14A.93.93,0,0,0,28,31V11.23h2V31A2.93,2.93,0,0,1,27.14,34Z"/><path d="M30.78,9H5A1,1,0,0,1,5,7H30.78a1,1,0,0,1,0,2Z"/><rect x="21" y="13" width="2" height="15"/><rect x="13" y="13" width="2" height="15"/><path d="M23,5.86H21.1V4H14.9V5.86H13V4a2,2,0,0,1,1.9-2h6.2A2,2,0,0,1,23,4Z"/>', solid: '<path d="M6,9V31a2.93,2.93,0,0,0,2.86,3H27.09A2.93,2.93,0,0,0,30,31V9Zm9,20H13V14h2Zm8,0H21V14h2Z"/><path d="M30.73,5H23V4A2,2,0,0,0,21,2h-6.2A2,2,0,0,0,13,4V5H5A1,1,0,1,0,5,7H30.73a1,1,0,0,0,0-2Z"/>' })];

// node_modules/@cds/core/icon/shapes/tree.js
var l21 = ["tree", n23({ outline: '<path d="M30.6,11.7C29.2,5.8,24,1.7,18,1.7c-7.2,0-13,5.8-13,13c0,6.8,5.3,12.4,12,12.9v5c0,0.6,0.4,1,1,1s1-0.4,1-1v-5v-2V22c0,0,0,0,0-0.1v-3.6l4.7-4.7c0.4-0.4,0.4-1,0-1.4c-0.4-0.4-1-0.4-1.4,0L19,15.6v-3l-3.3-3.3c-0.4-0.4-1-0.4-1.4,0c-0.4,0.4-0.4,1,0,1.4l2.7,2.7v6.2l-3.8-3.8c-0.4-0.4-1-0.4-1.4,0c-0.4,0.4-0.4,1,0,1.4l5.2,5.2v3.2c-5.6-0.5-10-5.2-10-10.9c0-6.1,4.9-11,11-11s11,4.9,11,11c0,4.9-3.3,9.2-8,10.6v2.1C28,25.7,32.3,18.7,30.6,11.7z"/>', solid: '<path d="M18,2C10.8,1.7,4.8,7.3,4.5,14.5C4.2,21.7,9.8,27.7,17,28v-5.2l-5.2-5.2c-0.4-0.4-0.4-1,0-1.4c0.4-0.4,1-0.4,1.4,0c0,0,0,0,0,0l3.8,3.8v-6.2l-2.7-2.7c-0.4-0.4-0.4-1,0-1.4c0.4-0.4,1-0.4,1.4,0c0,0,0,0,0,0l3.3,3.3v3l3.3-3.3c0.4-0.4,1-0.4,1.4,0c0,0,0,0,0,0c0.4,0.4,0.4,1,0,1.4L19,18.8V28c7.2-0.3,12.8-6.3,12.5-13.5S25.2,1.7,18,2z"/><path d="M18,28c-0.3,0-0.6,0-1,0v5c0,0.6,0.4,1,1,1s1-0.4,1-1v-5C18.7,28,18.3,28,18,28z"/>' })];

// node_modules/@cds/core/icon/shapes/tree-view.js
var h17 = ["tree-view", n23({ outline: '<path d="M15,32H11a1,1,0,0,1-1-1V27a1,1,0,0,1,1-1h4a1,1,0,0,1,1,1v4A1,1,0,0,1,15,32Zm-3-2h2V28H12Z"/><path d="M15,16H11a1,1,0,0,0-1,1v1.2H5.8V12H7a1,1,0,0,0,1-1V7A1,1,0,0,0,7,6H3A1,1,0,0,0,2,7v4a1,1,0,0,0,1,1H4.2V29.8h6.36a.8.8,0,0,0,0-1.6H5.8V19.8H10V21a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V17A1,1,0,0,0,15,16ZM4,8H6v2H4ZM14,20H12V18h2Z"/><path d="M34,9a1,1,0,0,0-1-1H10v2H33A1,1,0,0,0,34,9Z"/><path d="M33,18H18v2H33a1,1,0,0,0,0-2Z"/><path d="M33,28H18v2H33a1,1,0,0,0,0-2Z"/>', solid: '<rect x="10" y="26" width="6" height="6" rx="1" ry="1"/><path d="M15,16H11a1,1,0,0,0-1,1v1.2H5.8V12H7a1,1,0,0,0,1-1V7A1,1,0,0,0,7,6H3A1,1,0,0,0,2,7v4a1,1,0,0,0,1,1H4.2V29.8H11a.8.8,0,1,0,0-1.6H5.8V19.8H10V21a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V17A1,1,0,0,0,15,16Z"/><path d="M33,8H10v2H33a1,1,0,0,0,0-2Z"/><path d="M33,18H18v2H33a1,1,0,0,0,0-2Z"/><path d="M33,28H18v2H33a1,1,0,0,0,0-2Z"/>' })];

// node_modules/@cds/core/icon/shapes/two-way-arrows.js
var r40 = ["two-way-arrows", n23({ outline: '<path d="M23.43,16.83A1,1,0,0,0,22,18.24L25.72,22H7.83a1,1,0,0,0,0,2H25.72L22,27.7a1,1,0,1,0,1.42,1.41L29.53,23Z"/><path d="M13.24,18.45a1,1,0,0,0,.71-1.71L10.24,13H28.12a1,1,0,0,0,0-2H10.24l3.71-3.73a1,1,0,0,0-1.42-1.41L6.42,12l6.11,6.14A1,1,0,0,0,13.24,18.45Z"/>' })];

// node_modules/@cds/core/icon/shapes/undo.js
var r41 = ["undo", n23({ outline: '<path d="M20.87,11.14h-13l5.56-5.49A1,1,0,0,0,12,4.22L4,12.13,12,20a1,1,0,0,0,1.41-1.42L7.86,13.14h13a9.08,9.08,0,0,1,9.13,9,9,9,0,0,1-5,8A1,1,0,0,0,25.93,32a11,11,0,0,0-5.06-20.82Z"/>' })];

// node_modules/@cds/core/icon/shapes/unpin.js
var n29 = ["unpin", n23({ outline: '<path d="M3.24 5.53L11.71 14a10.94 10.94 0 00-8.3 3.11 1 1 0 000 1.41l6.33 6.33-7.45 7.44a1 1 0 101.3 1.52l.11-.11 7.44-7.44 6.33 6.33a1 1 0 001.42 0 11 11 0 003.1-8.3l8.34 8.34 1.41-1.41L4.65 4.12zm14.89 24.91L5.58 17.87a9 9 0 018.65-1.34l5.25 5.25a9 9 0 01-1.35 8.66zM33.71 14.89L21.11 2.3a1 1 0 00-1.41 1.41L32.29 16.3a1 1 0 001.42-1.41zM22.425 18.85l4.695-4.695 1.407 1.407-4.695 4.695zM20.44 7.48l-4.7 4.7 1.42 1.42 4.71-4.71z"/>', solid: '<path d="M3.24 5.53l8.59 8.59a10.91 10.91 0 00-8.42 3.1 1 1 0 000 1.41L9.73 25l-7.44 7.41a1 1 0 001.3 1.52l.11-.11 7.44-7.44 6.33 6.33a1 1 0 001.42 0A11 11 0 0022 24.28l8.34 8.34 1.41-1.41L4.65 4.12zM33.71 15L21.11 2.41a1 1 0 00-1.41 1.41l12.59 12.6a1 1 0 00.71.29 1 1 0 00.72-.3 1 1 0 00-.01-1.41zM15.807 12.236l4.638-4.638 8.083 8.082-4.639 4.639z"/>' })];

// node_modules/@cds/core/icon/shapes/unlock.js
var o45 = ["unlock", n23({ outline: '<path d="M12,25.14V28h2V25.23a2.42,2.42,0,1,0-2-.09Z"/><path d="M26,2a8.2,8.2,0,0,0-8,8.36V15H2V32a2,2,0,0,0,2,2H22a2,2,0,0,0,2-2V15H20V10.36A6.2,6.2,0,0,1,26,4a6.2,6.2,0,0,1,6,6.36v6.83a1,1,0,0,0,2,0V10.36A8.2,8.2,0,0,0,26,2ZM22,17V32H4V17Z"/>', solid: '<path d="M26,2a8.2,8.2,0,0,0-8,8.36V15H2V32a2,2,0,0,0,2,2H22a2,2,0,0,0,2-2V15H20V10.36A6.2,6.2,0,0,1,26,4a6.2,6.2,0,0,1,6,6.36v6.83a1,1,0,0,0,2,0V10.36A8.2,8.2,0,0,0,26,2ZM14,25.23V28H12V25.14a2.4,2.4,0,1,1,2,.09Z"/>' })];

// node_modules/@cds/core/icon/shapes/upload.js
var d20 = ["upload", n23({ outline: '<path d="M31,31H5a1,1,0,0,0,0,2H31a1,1,0,0,0,0-2Z"/><path d="M8.81,15,17,6.83V27.48a1,1,0,0,0,2,0V6.83L27.19,15a1,1,0,0,0,1.41-1.41L18,3,7.39,13.61A1,1,0,1,0,8.81,15Z"/>', outlineAlerted: '<path d="M31,31H5c-0.6,0-1,0.4-1,1s0.4,1,1,1h26c0.6,0,1-0.4,1-1S31.6,31,31,31z"/><path d="M8.8,15L17,6.8v20.6c0,0.6,0.4,1,1,1s1-0.4,1-1V6.8L20.1,8l1-1.8L18,3L7.4,13.6C7,14,6.9,14.6,7.2,15s1,0.5,1.4,0.1C8.7,15.1,8.8,15.1,8.8,15z"/>', outlineBadged: '<path d="M31,31H5a1,1,0,0,0,0,2H31a1,1,0,0,0,0-2Z"/><path d="M8.81,15,17,6.83V27.48a1,1,0,0,0,2,0V6.83L27.19,15a1,1,0,0,0,1.41-1.41L18,3,7.39,13.61A1,1,0,1,0,8.81,15Z"/>' })];

// node_modules/@cds/core/icon/shapes/users.js
var h18 = ["users", n23({ outline: '<path d="M17.9,17.3c2.7,0,4.8-2.2,4.8-4.9c0-2.7-2.2-4.8-4.9-4.8c-2.7,0-4.8,2.2-4.8,4.8C13,15.1,15.2,17.3,17.9,17.3z M17.8,9.6C17.9,9.6,17.9,9.6,17.8,9.6c1.6,0,2.9,1.3,2.9,2.9s-1.3,2.8-2.9,2.8c-1.6,0-2.8-1.3-2.8-2.8C15,10.9,16.3,9.6,17.8,9.6z"/><path d="M32.7,16.7c-1.9-1.7-4.4-2.6-7-2.5c-0.3,0-0.5,0-0.8,0c-0.2,0.8-0.5,1.5-0.9,2.1c0.6-0.1,1.1-0.1,1.7-0.1c1.9-0.1,3.8,0.5,5.3,1.6V25h2v-8L32.7,16.7z"/><path d="M23.4,7.8c0.5-1.2,1.9-1.8,3.2-1.3c1.2,0.5,1.8,1.9,1.3,3.2c-0.4,0.9-1.3,1.5-2.2,1.5c-0.2,0-0.5,0-0.7-0.1c0.1,0.5,0.1,1,0.1,1.4c0,0.2,0,0.4,0,0.6c0.2,0,0.4,0.1,0.6,0.1c2.5,0,4.5-2,4.5-4.4c0-2.5-2-4.5-4.4-4.5c-1.6,0-3,0.8-3.8,2.2C22.5,6.8,23,7.2,23.4,7.8z"/><path d="M12,16.4c-0.4-0.6-0.7-1.3-0.9-2.1c-0.3,0-0.5,0-0.8,0c-2.6-0.1-5.1,0.8-7,2.4L3,17v8h2v-7.2c1.6-1.1,3.4-1.7,5.3-1.6C10.9,16.2,11.5,16.3,12,16.4z"/><path d="M10.3,13.1c0.2,0,0.4,0,0.6-0.1c0-0.2,0-0.4,0-0.6c0-0.5,0-1,0.1-1.4c-0.2,0.1-0.5,0.1-0.7,0.1c-1.3,0-2.4-1.1-2.4-2.4c0-1.3,1.1-2.4,2.4-2.4c1,0,1.9,0.6,2.3,1.5c0.4-0.5,1-1,1.5-1.4c-1.3-2.1-4-2.8-6.1-1.5c-2.1,1.3-2.8,4-1.5,6.1C7.3,12.3,8.7,13.1,10.3,13.1z"/><path d="M26.1,22.7l-0.2-0.3c-2-2.2-4.8-3.5-7.8-3.4c-3-0.1-5.9,1.2-7.9,3.4L10,22.7v7.6c0,0.9,0.7,1.7,1.7,1.7c0,0,0,0,0,0h12.8c0.9,0,1.7-0.8,1.7-1.7c0,0,0,0,0,0V22.7z M24.1,30H12v-6.6c1.6-1.6,3.8-2.4,6.1-2.4c2.2-0.1,4.4,0.8,6,2.4V30z"/>', outlineAlerted: '<path d="M11.09,14.57c.1,0,.2,0,.31,0a6.43,6.43,0,0,1,.09-2,2.09,2.09,0,1,1,1.47-3,6.58,6.58,0,0,1,1.55-1.31,4.09,4.09,0,1,0-3.42,6.33Z"/><path d="M13,18.14a6.53,6.53,0,0,1-1.28-2.2l-.63,0a8.67,8.67,0,0,0-6.43,2.52l-.24.28v7h2V19.51a7,7,0,0,1,4.67-1.6A8.09,8.09,0,0,1,13,18.14Z"/><path d="M31.35,18.42A8.59,8.59,0,0,0,25,15.91c-.32,0-.6,0-.9.06a6.53,6.53,0,0,1-1.35,2.25A7.9,7.9,0,0,1,25,17.91a6.94,6.94,0,0,1,4.64,1.58v6.27h2V18.7Z"/><path d="M18.1,19.73A9.69,9.69,0,0,0,11,22.47l-.25.28v7.33a1.57,1.57,0,0,0,1.61,1.54H23.83a1.57,1.57,0,0,0,1.61-1.54V22.73l-.25-.28A9.58,9.58,0,0,0,18.1,19.73Zm5.33,9.88H12.73V23.55a8.08,8.08,0,0,1,5.37-1.82,8,8,0,0,1,5.33,1.8Z"/><path d="M20.28,14.27a2.46,2.46,0,1,1-2.42-2.89,2.44,2.44,0,0,1,1,.24,3.67,3.67,0,0,1,.43-2,4.41,4.41,0,0,0-1.48-.27A4.47,4.47,0,1,0,22.14,15,3.69,3.69,0,0,1,20.28,14.27Z"/>', outlineBadged: '<path d="M11.09,14.57c.1,0,.2,0,.31,0a6.43,6.43,0,0,1,.09-2,2.09,2.09,0,1,1,1.47-3,6.58,6.58,0,0,1,1.55-1.31,4.09,4.09,0,1,0-3.42,6.33Z"/><path d="M13,18.14a6.53,6.53,0,0,1-1.28-2.2l-.63,0a8.67,8.67,0,0,0-6.43,2.52l-.24.28v7h2V19.51a7,7,0,0,1,4.67-1.6A8.09,8.09,0,0,1,13,18.14Z"/><path d="M31.35,18.42A8.59,8.59,0,0,0,25,15.91c-.32,0-.6,0-.9.06a6.53,6.53,0,0,1-1.35,2.25A7.9,7.9,0,0,1,25,17.91a6.94,6.94,0,0,1,4.64,1.58v6.27h2V18.7Z"/><path d="M17.86,18.3a4.47,4.47,0,1,0-4.47-4.47A4.47,4.47,0,0,0,17.86,18.3Zm0-6.93a2.47,2.47,0,1,1-2.47,2.47A2.47,2.47,0,0,1,17.86,11.37Z"/><path d="M18.1,19.73A9.69,9.69,0,0,0,11,22.47l-.25.28v7.33a1.57,1.57,0,0,0,1.61,1.54H23.83a1.57,1.57,0,0,0,1.61-1.54V22.73l-.25-.28A9.58,9.58,0,0,0,18.1,19.73Zm5.33,9.88H12.73V23.55a8.08,8.08,0,0,1,5.37-1.82,8,8,0,0,1,5.33,1.8Z"/><path d="M26.37,12a2,2,0,0,1-2.09.42,6.53,6.53,0,0,1,.15,1.38,6.59,6.59,0,0,1,0,.68,4,4,0,0,0,.57.06,4.08,4.08,0,0,0,3.3-1.7A7.45,7.45,0,0,1,26.37,12Z"/><path d="M22.95,6.93a4.16,4.16,0,0,0-1.47,1.44A6.59,6.59,0,0,1,23,9.77a2.1,2.1,0,0,1,.59-.83A7.44,7.44,0,0,1,22.95,6.93Z"/>', solid: '<path d="M12,16.14q-.43,0-.87,0a8.67,8.67,0,0,0-6.43,2.52l-.24.28v8.28H8.54v-4.7l.55-.62.25-.29a11,11,0,0,1,4.71-2.86A6.59,6.59,0,0,1,12,16.14Z"/><path d="M31.34,18.63a8.67,8.67,0,0,0-6.43-2.52,10.47,10.47,0,0,0-1.09.06,6.59,6.59,0,0,1-2,2.45,10.91,10.91,0,0,1,5,3l.25.28.54.62v4.71h3.94V18.91Z"/><path d="M11.1,14.19c.11,0,.2,0,.31,0a6.45,6.45,0,0,1,3.11-6.29,4.09,4.09,0,1,0-3.42,6.33Z"/><path d="M24.43,13.44a6.54,6.54,0,0,1,0,.69,4.09,4.09,0,0,0,.58.05h.19A4.09,4.09,0,1,0,21.47,8,6.53,6.53,0,0,1,24.43,13.44Z"/><circle cx="17.87" cy="13.45" r="4.47"/><path d="M18.11,20.3A9.69,9.69,0,0,0,11,23l-.25.28v6.33a1.57,1.57,0,0,0,1.6,1.54H23.84a1.57,1.57,0,0,0,1.6-1.54V23.3L25.2,23A9.58,9.58,0,0,0,18.11,20.3Z"/>', solidAlerted: '<path d="M12,16.14q-.43,0-.87,0a8.67,8.67,0,0,0-6.43,2.52l-.24.28v8.28H8.54v-4.7l.55-.62.25-.29a11,11,0,0,1,4.71-2.86A6.59,6.59,0,0,1,12,16.14Z"/><path d="M31.34,18.63a8.67,8.67,0,0,0-6.43-2.52,10.47,10.47,0,0,0-1.09.06,6.59,6.59,0,0,1-2,2.45,10.91,10.91,0,0,1,5,3l.25.28.54.62v4.71h3.94V18.91Z"/><path d="M11.1,14.19c.11,0,.2,0,.31,0a6.45,6.45,0,0,1,3.11-6.29,4.09,4.09,0,1,0-3.42,6.33Z"/><path d="M18.11,20.3A9.69,9.69,0,0,0,11,23l-.25.28v6.33a1.57,1.57,0,0,0,1.6,1.54H23.84a1.57,1.57,0,0,0,1.6-1.54V23.3L25.2,23A9.58,9.58,0,0,0,18.11,20.3Z"/><path d="M17.87,17.92a4.46,4.46,0,0,0,4-2.54A3.67,3.67,0,0,1,19,9.89l.35-.61A4.42,4.42,0,0,0,17.87,9a4.47,4.47,0,1,0,0,8.93Z"/>', solidBadged: '<path d="M12,16.14q-.43,0-.87,0a8.67,8.67,0,0,0-6.43,2.52l-.24.28v8.28H8.54v-4.7l.55-.62.25-.29a11,11,0,0,1,4.71-2.86A6.58,6.58,0,0,1,12,16.14Z"/><path d="M31.34,18.63a8.67,8.67,0,0,0-6.43-2.52,10.47,10.47,0,0,0-1.09.06,6.59,6.59,0,0,1-2,2.45,10.91,10.91,0,0,1,5,3l.25.28.54.62v4.71h3.94V18.91Z"/><path d="M11.1,14.19c.11,0,.2,0,.31,0a6.45,6.45,0,0,1,3.11-6.29,4.09,4.09,0,1,0-3.42,6.33Z"/><circle cx="17.87" cy="13.45" r="4.47"/><path d="M18.11,20.3A9.69,9.69,0,0,0,11,23l-.25.28v6.33a1.57,1.57,0,0,0,1.6,1.54H23.84a1.57,1.57,0,0,0,1.6-1.54V23.3L25.2,23A9.58,9.58,0,0,0,18.11,20.3Z"/><path d="M24.43,13.44a6.54,6.54,0,0,1,0,.69,4.09,4.09,0,0,0,.58.05h.19a4.05,4.05,0,0,0,2.52-1,7.5,7.5,0,0,1-5.14-6.32A4.13,4.13,0,0,0,21.47,8,6.53,6.53,0,0,1,24.43,13.44Z"/>' })];

// node_modules/@cds/core/icon/shapes/view-cards.js
var v7 = ["view-cards", n23({ outline: '<path d="M15,17H4a2,2,0,0,1-2-2V8A2,2,0,0,1,4,6H15a2,2,0,0,1,2,2v7A2,2,0,0,1,15,17ZM4,8v7H15V8Z"/><path d="M32,17H21a2,2,0,0,1-2-2V8a2,2,0,0,1,2-2H32a2,2,0,0,1,2,2v7A2,2,0,0,1,32,17ZM21,8v7H32V8Z"/><path d="M15,30H4a2,2,0,0,1-2-2V21a2,2,0,0,1,2-2H15a2,2,0,0,1,2,2v7A2,2,0,0,1,15,30ZM4,21v7H15V21Z"/><path d="M32,30H21a2,2,0,0,1-2-2V21a2,2,0,0,1,2-2H32a2,2,0,0,1,2,2v7A2,2,0,0,1,32,30ZM21,21v7H32V21Z"/>' })];

// node_modules/@cds/core/icon/shapes/view-list.js
var e44 = ["view-list", n23({ outline: '<rect x="2" y="8" width="2" height="2"/><path d="M7,10H31a1,1,0,0,0,0-2H7a1,1,0,0,0,0,2Z"/><rect x="2" y="14" width="2" height="2"/><path d="M31,14H7a1,1,0,0,0,0,2H31a1,1,0,0,0,0-2Z"/><rect x="2" y="20" width="2" height="2"/><path d="M31,20H7a1,1,0,0,0,0,2H31a1,1,0,0,0,0-2Z"/><rect x="2" y="26" width="2" height="2"/><path d="M31,26H7a1,1,0,0,0,0,2H31a1,1,0,0,0,0-2Z"/>' })];

// node_modules/@cds/core/icon/shapes/volume.js
var t61 = ["volume", n23({ outline: '<path d="M25.88,32H12a4,4,0,0,1-4-4V11.46L2.31,5.77a1,1,0,0,1-.22-1.09A1,1,0,0,1,3,4.06H28.86a1,1,0,0,1,1,1V28A4,4,0,0,1,25.88,32ZM5.43,6l4.28,4.34a.75.75,0,0,1,.21.63v17A2.13,2.13,0,0,0,12,30H25.88A2.1,2.1,0,0,0,28,28V6Z"/><path d="M33,16a1,1,0,0,1-1-1V6H28.86a.92.92,0,0,1-1-.9,1,1,0,0,1,1-1H33a1,1,0,0,1,1,1V15A1,1,0,0,1,33,16Z"/><path d="M24,11H18a1,1,0,1,1,0-2H24a1,1,0,1,1,0,2Z"/><path d="M24,15H21a1,1,0,1,1,0-2H24a1,1,0,1,1,0,2Z"/><path d="M24,19H18a1,1,0,1,1,0-2H24a1,1,0,1,1,0,2Z"/><path d="M24,27H18a1,1,0,1,1,0-2H24a1,1,0,1,1,0,2Z"/><path d="M24,23H21A1,1,0,1,1,21,21H24A1,1,0,1,1,24,23Z"/>' })];

// node_modules/@cds/core/icon/shapes/wand.js
var L7 = ["wand", n23({ outline: '<path d="M34.1,4,31.71,1.6a1.83,1.83,0,0,0-1.31-.54h0a2.05,2.05,0,0,0-1.45.62L1.76,29.23A2,2,0,0,0,1.68,32l2.4,2.43A1.83,1.83,0,0,0,5.39,35h0a2.05,2.05,0,0,0,1.45-.62L34,6.79A2,2,0,0,0,34.1,4ZM5.42,32.93,3.16,30.65h0L24.11,9.43l2.25,2.28ZM32.61,5.39l-5.12,5.18L25.24,8.29l5.13-5.2,2.25,2.28Z"/><path d="M32.53,20.47l2.09-2.09a.8.8,0,0,0-1.13-1.13l-2.09,2.09-2.09-2.09a.8.8,0,0,0-1.13,1.13l2.09,2.09-2.09,2.09a.8.8,0,0,0,1.13,1.13l2.09-2.09,2.09,2.09a.8.8,0,0,0,1.13-1.13Z"/><path d="M14.78,6.51a.8.8,0,0,0,1.13,0L17.4,5l1.49,1.49A.8.8,0,0,0,20,5.38L18.54,3.89,20,2.4a.8.8,0,0,0-1.13-1.13L17.4,2.76,15.91,1.27A.8.8,0,1,0,14.78,2.4l1.49,1.49L14.78,5.38A.8.8,0,0,0,14.78,6.51Z"/><path d="M8.33,15.26a.8.8,0,0,0,1.13,0l1.16-1.16,1.16,1.16a.8.8,0,1,0,1.13-1.13L11.76,13l1.16-1.16a.8.8,0,1,0-1.13-1.13l-1.16,1.16L9.46,10.68a.8.8,0,1,0-1.13,1.13L9.49,13,8.33,14.13A.8.8,0,0,0,8.33,15.26Z"/>' })];

// node_modules/@cds/core/icon/shapes/window-close.js
var n30 = ["window-close", n23({ outline: '<path d="M19.41,18l7.29-7.29a1,1,0,0,0-1.41-1.41L18,16.59,10.71,9.29a1,1,0,0,0-1.41,1.41L16.59,18,9.29,25.29a1,1,0,1,0,1.41,1.41L18,19.41l7.29,7.29a1,1,0,0,0,1.41-1.41Z"/>' })];

// node_modules/@cds/core/icon/shapes/window-max.js
var n31 = ["window-max", n23({ outline: '<path d="M27.89,9h-20a2,2,0,0,0-2,2V25a2,2,0,0,0,2,2h20a2,2,0,0,0,2-2V11A2,2,0,0,0,27.89,9Zm-20,16V11h20V25Z"/>' })];

// node_modules/@cds/core/icon/shapes/window-min.js
var i24 = ["window-min", n23({ outline: '<path d="M27,27H9a1,1,0,0,1,0-2H27a1,1,0,0,1,0,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/window-restore.js
var e45 = ["window-restore", n23({ outline: '<path d="M28,8H14a2,2,0,0,0-2,2v2h2V10H28V20H26v2h2a2,2,0,0,0,2-2V10A2,2,0,0,0,28,8Z"/><path d="M22,14H8a2,2,0,0,0-2,2V26a2,2,0,0,0,2,2H22a2,2,0,0,0,2-2V16A2,2,0,0,0,22,14ZM8,26V16H22V26Z"/>' })];

// node_modules/@cds/core/icon/shapes/world.js
var H9 = ["world", n23({ outline: '<path d="M26.54,18a19.38,19.38,0,0,0-.43-4h3.6a12.3,12.3,0,0,0-.67-1.6H25.69A19.72,19.72,0,0,0,22.8,6.53a12.3,12.3,0,0,0-2.55-.76,17.83,17.83,0,0,1,3.89,6.59H18.75V5.6c-.25,0-.51,0-.77,0s-.49,0-.73,0v6.77H11.86a17.83,17.83,0,0,1,3.9-6.6,12.28,12.28,0,0,0-2.54.75,19.72,19.72,0,0,0-2.91,5.85H6.94A12.3,12.3,0,0,0,6.26,14H9.89a19.38,19.38,0,0,0-.43,4,19.67,19.67,0,0,0,.5,4.37H6.42A12.34,12.34,0,0,0,7.16,24h3.23a19.32,19.32,0,0,0,2.69,5.36,12.28,12.28,0,0,0,2.61.79A17.91,17.91,0,0,1,12,24h5.26v6.34c.24,0,.49,0,.73,0s.51,0,.77,0V24H24a17.9,17.9,0,0,1-3.7,6.15,12.28,12.28,0,0,0,2.62-.81A19.32,19.32,0,0,0,25.61,24h3.2a12.34,12.34,0,0,0,.74-1.6H26A19.67,19.67,0,0,0,26.54,18Zm-9.29,4.37H11.51a17.69,17.69,0,0,1-.09-8.4h5.83Zm7.24,0H18.75V14h5.83A18.21,18.21,0,0,1,25,18,18.12,18.12,0,0,1,24.49,22.37Z"/><path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,30A14,14,0,1,1,32,18,14,14,0,0,1,18,32Z"/>', outlineBadged: '<path d="M33.12,12.81a7.44,7.44,0,0,1-1.91.58,14.05,14.05,0,1,1-8.6-8.6,7.43,7.43,0,0,1,.58-1.91,16.06,16.06,0,1,0,9.93,9.93Z"/><path d="M20.25,5.77a17.83,17.83,0,0,1,3.89,6.59H18.75V5.6c-.25,0-.51,0-.77,0s-.49,0-.73,0v6.77H11.86a17.83,17.83,0,0,1,3.9-6.6,12.28,12.28,0,0,0-2.54.75,19.72,19.72,0,0,0-2.91,5.85H6.94A12.3,12.3,0,0,0,6.26,14H9.89a19.38,19.38,0,0,0-.43,4,19.67,19.67,0,0,0,.5,4.37H6.42A12.34,12.34,0,0,0,7.16,24h3.23a19.32,19.32,0,0,0,2.69,5.36,12.28,12.28,0,0,0,2.61.79A17.91,17.91,0,0,1,12,24h5.26v6.34c.24,0,.49,0,.73,0s.51,0,.77,0V24H24a17.9,17.9,0,0,1-3.7,6.15,12.28,12.28,0,0,0,2.62-.81A19.32,19.32,0,0,0,25.61,24h3.2a12.34,12.34,0,0,0,.74-1.6H26a19.67,19.67,0,0,0,.5-4.37,19.38,19.38,0,0,0-.43-4h3.6c-.06-.17-.12-.33-.19-.49a7.45,7.45,0,0,1-3.47-1.11h-.36c0-.11-.08-.21-.11-.32a7.48,7.48,0,0,1-3.06-5.62A12.41,12.41,0,0,0,20.25,5.77Zm-3,16.59H11.51a17.69,17.69,0,0,1-.09-8.4h5.83ZM25,18a18.12,18.12,0,0,1-.55,4.37H18.75V14h5.83A18.21,18.21,0,0,1,25,18Z"/>', solid: '<path d="M10.05,18a20.46,20.46,0,0,0,.62,4.93h6.48V13.45H10.58A20.55,20.55,0,0,0,10.05,18Z"/><path d="M18.85,13.45v9.48h6.48A20.46,20.46,0,0,0,26,18a20.55,20.55,0,0,0-.52-4.55Z"/><path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2ZM30.22,24.71H26.6a21.8,21.8,0,0,1-3,6,13.86,13.86,0,0,1-3,.92,20.21,20.21,0,0,0,4.18-6.94H18.86v7.15c-.29,0-.57,0-.86,0s-.55,0-.83,0V24.71H11.22a20.21,20.21,0,0,0,4.18,6.95,13.86,13.86,0,0,1-2.94-.9,21.8,21.8,0,0,1-3-6.05H5.78a13.94,13.94,0,0,1-.83-1.81h4A22.2,22.2,0,0,1,8.37,18a21.88,21.88,0,0,1,.48-4.55H4.76a13.88,13.88,0,0,1,.76-1.81H9.33A22.26,22.26,0,0,1,12.61,5a13.86,13.86,0,0,1,2.87-.84,20.13,20.13,0,0,0-4.4,7.45h6.09V4c.28,0,.55,0,.83,0s.58,0,.86,0v7.64h6.09a20.13,20.13,0,0,0-4.39-7.44A13.89,13.89,0,0,1,23.43,5a22.26,22.26,0,0,1,3.27,6.59h3.77a13.89,13.89,0,0,1,.76,1.81H27.17A21.88,21.88,0,0,1,27.66,18a22.2,22.2,0,0,1-.57,4.93h4A13.94,13.94,0,0,1,30.22,24.71Z"/>', solidBadged: '<path d="M10.05,18a20.46,20.46,0,0,0,.62,4.93h6.48V13.45H10.58A20.55,20.55,0,0,0,10.05,18Z"/><path d="M18.85,22.94h6.48A20.46,20.46,0,0,0,26,18a20.55,20.55,0,0,0-.52-4.55H18.85Z"/><path d="M33.12,12.81a7.44,7.44,0,0,1-1.9.58v0H31a6.77,6.77,0,0,1-2.07,0h-1.8A21.88,21.88,0,0,1,27.66,18a22.2,22.2,0,0,1-.57,4.93h4a13.94,13.94,0,0,1-.83,1.81H26.6a21.8,21.8,0,0,1-3,6,13.86,13.86,0,0,1-3,.92,20.21,20.21,0,0,0,4.18-6.94H18.86v7.15c-.29,0-.57,0-.86,0s-.55,0-.83,0V24.71H11.22a20.21,20.21,0,0,0,4.18,6.95,13.86,13.86,0,0,1-2.94-.9,21.8,21.8,0,0,1-3-6.05H5.78a13.94,13.94,0,0,1-.83-1.81h4A22.2,22.2,0,0,1,8.37,18a21.88,21.88,0,0,1,.48-4.55H4.76a13.88,13.88,0,0,1,.76-1.81H9.33A22.26,22.26,0,0,1,12.61,5a13.86,13.86,0,0,1,2.87-.84,20.13,20.13,0,0,0-4.4,7.45h6.09V4c.28,0,.55,0,.83,0s.58,0,.86,0v7.64h6.09l0-.13a7.47,7.47,0,0,1-2.36-4.76,20.37,20.37,0,0,0-2-2.55,14.23,14.23,0,0,1,2.06.56,7.44,7.44,0,0,1,.57-1.86,16.06,16.06,0,1,0,9.93,9.93Z"/>' })];

// node_modules/@cds/core/icon/shapes/wrench.js
var t62 = ["wrench", n23({ outline: '<path d="M33.18,26.11,20.35,13.28A9.28,9.28,0,0,0,7.54,2.79l-1.34.59,5.38,5.38L8.76,11.59,3.38,6.21,2.79,7.54A9.27,9.27,0,0,0,13.28,20.35L26.11,33.18a2,2,0,0,0,2.83,0l4.24-4.24A2,2,0,0,0,33.18,26.11Zm-5.66,5.66L13.88,18.12l-.57.16a7.27,7.27,0,0,1-9.31-7,7.2,7.2,0,0,1,.15-1.48l4.61,4.61,5.66-5.66L9.81,4.15a7.27,7.27,0,0,1,8.47,9.16l-.16.57L31.77,27.53Z"/><circle cx="27.13" cy="27.09" r="1.3" transform="translate(-11.21 27.12) rotate(-45)"/>', solid: '<path d="M33.73,27.72,19.67,13.66a8.79,8.79,0,0,0-12-10.5L13,8.53,8.53,13,3.16,7.67a8.79,8.79,0,0,0,10.5,12L27.72,33.73a1.07,1.07,0,0,0,1.5,0l4.51-4.51A1.07,1.07,0,0,0,33.73,27.72ZM29,29a1.38,1.38,0,1,1,0-2A1.38,1.38,0,0,1,29,29Z"/>' })];

// node_modules/@cds/core/icon/shapes/zoom-in.js
var t63 = ["zoom-in", n23({ outline: '<path d="M16,4A12,12,0,1,0,28,16,12,12,0,0,0,16,4Zm0,21.91A10,10,0,1,1,26,16,10,10,0,0,1,16,25.91Z"/><path d="M31.71,29.69l-5.17-5.17A13.68,13.68,0,0,1,25.15,26l5.15,5.15a1,1,0,0,0,1.41-1.41Z"/><path d="M21,15H17V11a1,1,0,0,0-2,0v4H11a1,1,0,0,0,0,2h4v4a1,1,0,0,0,2,0V17h4a1,1,0,0,0,0-2Z"/>' })];

// node_modules/@cds/core/icon/shapes/zoom-out.js
var a30 = ["zoom-out", n23({ outline: '<path d="M16,4A12,12,0,1,0,28,16,12,12,0,0,0,16,4Zm0,21.91A10,10,0,1,1,26,16,10,10,0,0,1,16,25.91Z"/><path d="M31.71,29.69l-5.17-5.17A13.68,13.68,0,0,1,25.15,26l5.15,5.15a1,1,0,0,0,1.41-1.41Z"/><path d="M20,15H12a1,1,0,0,0,0,2h8a1,1,0,0,0,0-2Z"/>' })];

// node_modules/@cds/core/icon/shapes/axis-chart.js
var d21 = ["axis-chart", n23({ outline: '<path d="M 32 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.105 2.895 31 4 31 L 32 31 C 33.105 31 34 30.105 34 29 L 34 7 C 34 5.895 33.105 5 32 5 Z M 4 29 L 4 7 L 32 7 L 32 29 Z"/><path d="M 6.007 26.731 L 27.73 26.73 C 28.49 26.67 28.91 25.8 28.47 25.17 C 28.3 24.92 28.03 24.76 27.73 24.74 L 8.001 24.736 L 8.01 11.01 C 8.01 10.23 7.17 9.75 6.5 10.14 C 6.19 10.31 6 10.65 6 11.01 L 6.007 26.731 Z"/>', outlineAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 21.958 5 L 20.786 7 L 4 7 L 4 29 L 32 29 L 32 15.357 L 34 15.357 Z"/><path d="M 6.007 26.731 L 27.73 26.73 C 28.49 26.67 28.91 25.8 28.47 25.17 C 28.3 24.92 28.03 24.76 27.73 24.74 L 8.001 24.736 L 8.01 11.01 C 8.01 10.23 7.17 9.75 6.5 10.14 C 6.19 10.31 6 10.65 6 11.01 L 6.007 26.731 Z"/>', outlineBadged: '<path d="M 32 13.22 L 32 29 L 4 29 L 4 7 L 22.57 7 C 22.524 6.668 22.501 6.334 22.5 6 C 22.501 5.665 22.524 5.331 22.57 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.104 2.895 31 4 31 L 32 31 C 33.104 31 34 30.104 34 29 L 34 12.34 C 33.38 12.73 32.706 13.026 32 13.22 Z"/><path d="M 6.007 26.731 L 27.73 26.73 C 28.49 26.67 28.91 25.8 28.47 25.17 C 28.3 24.92 28.03 24.76 27.73 24.74 L 8.001 24.736 L 8.01 11.01 C 8.01 10.23 7.17 9.75 6.5 10.14 C 6.19 10.31 6 10.65 6 11.01 L 6.007 26.731 Z"/>', solid: '<path d="M 34 7 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 32 5 C 33.105 5 34 5.896 34 7 Z M 6.007 26.731 L 27.73 26.73 C 28.49 26.67 28.91 25.8 28.47 25.17 C 28.3 24.92 28.03 24.76 27.73 24.74 L 8.001 24.736 L 8.01 11.01 C 8.01 10.23 7.17 9.75 6.5 10.14 C 6.19 10.31 6 10.65 6 11.01 Z"/>', solidAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 21.958 5 L 17.625 12.395 C 16.795 13.601 17.594 15.245 19.064 15.351 C 19.134 15.357 19.201 15.359 19.27 15.357 L 34 15.357 Z M 6.007 26.731 L 27.73 26.73 C 28.49 26.67 28.91 25.8 28.47 25.17 C 28.3 24.92 28.03 24.76 27.73 24.74 L 8.001 24.736 L 8.01 11.01 C 8.01 10.23 7.17 9.75 6.5 10.14 C 6.19 10.31 6 10.65 6 11.01 Z"/>', solidBadged: '<path d="M 34 12.34 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 22.57 5 C 21.969 9.233 25.05 13.1 29.31 13.46 L 30.32 13.48 C 31.626 13.429 32.895 13.036 34 12.34 Z M 6.007 26.731 L 27.73 26.73 C 28.49 26.67 28.91 25.8 28.47 25.17 C 28.3 24.92 28.03 24.76 27.73 24.74 L 8.001 24.736 L 8.01 11.01 C 8.01 10.23 7.17 9.75 6.5 10.14 C 6.19 10.31 6 10.65 6 11.01 Z"/>' })];

// node_modules/@cds/core/icon/shapes/bar-chart.js
var t64 = ["bar-chart", n23({ outline: '<path d="M32,5H4A2,2,0,0,0,2,7V29a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V7A2,2,0,0,0,32,5ZM4,29V7H32V29Z"/><path d="M 7 10 L 13 10 L 13 26 L 11.4 26 L 11.4 11.6 L 8.6 11.6 L 8.6 26 L 7 26 Z"/><path d="M 15 19 L 21 19 L 21 26 L 19.4 26 L 19.4 20.6 L 16.6 20.6 L 16.6 26 L 15 26 Z"/><path d="M 23 16 L 29 16 L 29 26 L 27.4 26 L 27.4 17.6 L 24.6 17.6 L 24.6 26 L 23 26 Z"/>', outlineAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 21.958 5 L 20.786 7 L 4 7 L 4 29 L 32 29 L 32 15.357 L 34 15.357 Z"/><path d="M 7 10 L 13 10 L 13 26 L 11.4 26 L 11.4 11.6 L 8.6 11.6 L 8.6 26 L 7 26 Z"/><path d="M 15 19 L 21 19 L 21 26 L 19.4 26 L 19.4 20.6 L 16.6 20.6 L 16.6 26 L 15 26 Z"/><path d="M 23 16 L 29 16 L 29 26 L 27.4 26 L 27.4 17.6 L 24.6 17.6 L 24.6 26 L 23 26 Z"/>', outlineBadged: '<path d="M 32 13.22 L 32 29 L 4 29 L 4 7 L 22.57 7 C 22.524 6.668 22.501 6.334 22.5 6 C 22.501 5.665 22.524 5.331 22.57 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.104 2.895 31 4 31 L 32 31 C 33.105 31 34 30.104 34 29 L 34 12.34 C 33.38 12.73 32.706 13.026 32 13.22 Z"/><path d="M 7 10 L 13 10 L 13 26 L 11.4 26 L 11.4 11.6 L 8.6 11.6 L 8.6 26 L 7 26 Z"/><path d="M 15 19 L 21 19 L 21 26 L 19.4 26 L 19.4 20.6 L 16.6 20.6 L 16.6 26 L 15 26 Z"/><path d="M 23 16 L 29 16 L 29 26 L 27.4 26 L 27.4 17.6 L 24.6 17.6 L 24.6 26 L 23 26 Z"/>', solid: '<path d="M 34 7 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 32 5 C 33.105 5 34 5.895 34 7 Z M 7 26 L 13 26 L 13 10 L 7 10 Z M 15 26 L 21 26 L 21 19 L 15 19 Z M 23 26 L 29 26 L 29 16 L 23 16 Z"/>', solidAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 21.958 5 L 17.625 12.395 C 16.795 13.601 17.594 15.245 19.064 15.351 C 19.134 15.357 19.201 15.359 19.27 15.357 L 34 15.357 Z M 7 26 L 13 26 L 13 10 L 7 10 Z M 15 26 L 21 26 L 21 19 L 15 19 Z M 23 26 L 29 26 L 29 16 L 23 16 Z"/>', solidBadged: '<path d="M 34 12.34 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 22.57 5 C 21.969 9.233 25.05 13.1 29.31 13.46 L 30.32 13.48 C 31.625 13.429 32.895 13.036 34 12.34 Z M 7 26 L 13 26 L 13 10 L 7 10 Z M 15 26 L 21 26 L 21 19 L 15 19 Z M 23 26 L 29 26 L 29 16 L 23 16 Z"/>' })];

// node_modules/@cds/core/icon/shapes/bell-curve.js
var a31 = ["bell-curve", n23({ outline: '<path d="M33,29H3A1,1,0,1,1,3,27H33A1,1,0,1,1,33,29Z"/><path d="M33,25h-.62a8.11,8.11,0,0,1-8-6.67C23.62,14.44,21.89,7.94,18,7.94s-5.69,6.51-6.38,10.39a8.11,8.11,0,0,1-8,6.65H3a1,1,0,1,1,0-2h.6A6.11,6.11,0,0,0,9.6,18c1.41-7.88,4.3-12,8.35-12s6.93,4.16,8.33,12a6.11,6.11,0,0,0,6,5H33a1,1,0,0,1,0,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/box-plot.js
var Z2 = ["box-plot", n23({ outline: '<path d="M32,5H4A2,2,0,0,0,2,7V29a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V7A2,2,0,0,0,32,5ZM4,29V7H32V29Z"/><path d="M 7 12 L 17 12 L 17 26 L 7 26 L 7 12 Z M 8.6 24.4 L 15.4 24.4 L 15.4 18.8 L 8.6 18.8 L 8.6 24.4 Z M 15.4 13.6 L 8.6 13.6 L 8.6 17.2 L 15.4 17.2 L 15.4 13.6 Z"/><path d="M 19 24 L 29 24 L 29 10 L 19 10 L 19 24 Z M 20.6 11.6 L 27.4 11.6 L 27.4 17.2 L 20.6 17.2 L 20.6 11.6 Z M 27.4 22.4 L 20.6 22.4 L 20.6 18.8 L 27.4 18.8 L 27.4 22.4 Z"/>', outlineAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 21.958 5 L 20.786 7 L 4 7 L 4 29 L 32 29 L 32 15.357 L 34 15.357 Z"/><path d="M 7 12 L 17 12 L 17 26 L 7 26 L 7 12 Z M 8.6 24.4 L 15.4 24.4 L 15.4 18.8 L 8.6 18.8 L 8.6 24.4 Z M 15.4 13.6 L 8.6 13.6 L 8.6 17.2 L 15.4 17.2 L 15.4 13.6 Z"/><path d="M 29 24 L 19 24 L 19 15.345 C 19.021 15.348 20.6 15.36 20.6 15.36 L 20.6 17.2 L 27.4 17.2 L 27.4 15.36 L 29 15.357 L 29 24 Z M 27.4 18.8 L 20.6 18.8 L 20.6 22.4 L 27.4 22.4 L 27.4 18.8 Z"/>', outlineBadged: '<path d="M 32 13.22 L 32 29 L 4 29 L 4 7 L 22.57 7 C 22.524 6.668 22.501 6.334 22.5 6 C 22.501 5.665 22.524 5.331 22.57 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.104 2.895 31 4 31 L 32 31 C 33.105 31 34 30.104 34 29 L 34 12.34 C 33.38 12.73 32.706 13.026 32 13.22 Z"/><path d="M 7 12 L 17 12 L 17 26 L 7 26 L 7 12 Z M 8.6 24.4 L 15.4 24.4 L 15.4 18.8 L 8.6 18.8 L 8.6 24.4 Z M 15.4 13.6 L 8.6 13.6 L 8.6 17.2 L 15.4 17.2 L 15.4 13.6 Z"/><path d="M 19 10 L 23.728 10 C 24.105 10.596 24.564 11.135 25.09 11.6 L 20.6 11.6 L 20.6 17.2 L 27.4 17.2 L 27.4 12.987 C 27.909 13.177 28.445 13.313 29 13.387 L 29 24 L 19 24 Z M 27.4 18.8 L 20.6 18.8 L 20.6 22.4 L 27.4 22.4 Z"/>', solid: '<path d="M 34 7 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 32 5 C 33.105 5 34 5.895 34 7 Z M 7 26 L 17 26 L 17 12 L 7 12 Z M 9 19 L 15 19 L 15 24 L 9 24 Z M 15 17 L 9 17 L 9 14 L 15 14 Z M 19 24 L 29 24 L 29 10 L 19 10 Z M 21 12 L 27 12 L 27 17 L 21 17 Z M 27 22 L 21 22 L 21 19 L 27 19 Z"/>', solidAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 21.958 5 L 19.028 10 L 19 10 L 19 10.048 L 17.625 12.395 C 16.807 13.583 17.571 15.197 19 15.345 L 19 24 L 29 24 L 29 15.357 L 34 15.357 Z M 7 26 L 17 26 L 17 12 L 7 12 Z M 9 19 L 15 19 L 15 24 L 9 24 Z M 15 17 L 9 17 L 9 14 L 15 14 Z M 27 17 L 21 17 L 21 15.357 L 27 15.357 Z M 27 22 L 21 22 L 21 19 L 27 19 Z"/>', solidBadged: '<path d="M 34 12.34 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 22.57 5 C 22.312 6.817 22.732 8.566 23.633 10 L 19 10 L 19 24 L 29 24 L 29 13.427 C 29.103 13.44 29.206 13.451 29.31 13.46 L 30.32 13.48 C 31.625 13.429 32.895 13.036 34 12.34 Z M 7 26 L 17 26 L 17 12 L 7 12 Z M 9 19 L 15 19 L 15 24 L 9 24 Z M 15 17 L 9 17 L 9 14 L 15 14 Z M 21 12 L 25.472 12 C 25.94 12.352 26.452 12.65 27 12.885 L 27 17 L 21 17 Z M 27 22 L 21 22 L 21 19 L 27 19 Z"/>' })];

// node_modules/@cds/core/icon/shapes/bubble-chart.js
var M2 = ["bubble-chart", n23({ outline: '<path d="M 32 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.105 2.895 31 4 31 L 32 31 C 33.105 31 34 30.105 34 29 L 34 7 C 34 5.895 33.105 5 32 5 Z M 4 29 L 4 7 L 32 7 L 32 29 Z"/><path d="M 29 18 C 29 19.657 27.657 21 26 21 C 24.343 21 23 19.657 23 18 C 23 16.343 24.343 15 26 15 C 27.657 15 29 16.343 29 18 Z M 26 16.6 C 25.227 16.6 24.6 17.227 24.6 18 C 24.6 18.773 25.227 19.4 26 19.4 C 26.773 19.4 27.4 18.773 27.4 18 C 27.4 17.227 26.773 16.6 26 16.6 Z" rx="3"/><path d="M 15 14 C 15 16.209 13.209 18 11 18 C 8.791 18 7 16.209 7 14 C 7 11.791 8.791 10 11 10 C 13.209 10 15 11.791 15 14 Z M 11 11.6 C 9.675 11.6 8.6 12.675 8.6 14 C 8.6 15.325 9.675 16.4 11 16.4 C 12.325 16.4 13.4 15.325 13.4 14 C 13.4 12.675 12.325 11.6 11 11.6 Z" rx="3"/><path d="M 21 23 C 21 24.657 19.657 26 18 26 C 16.343 26 15 24.657 15 23 C 15 21.343 16.343 20 18 20 C 19.657 20 21 21.343 21 23 Z M 18 21.6 C 17.227 21.6 16.6 22.227 16.6 23 C 16.6 23.773 17.227 24.4 18 24.4 C 18.773 24.4 19.4 23.773 19.4 23 C 19.4 22.227 18.773 21.6 18 21.6 Z" rx="3"/>', outlineAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 21.958 5 L 20.786 7 L 4 7 L 4 29 L 32 29 L 32 15.357 L 34 15.357 Z"/><path d="M 29 18 C 29 19.657 27.657 21 26 21 C 24.343 21 23 19.657 23 18 C 23 16.343 24.343 15 26 15 C 27.657 15 29 16.343 29 18 Z M 26 16.6 C 25.227 16.6 24.6 17.227 24.6 18 C 24.6 18.773 25.227 19.4 26 19.4 C 26.773 19.4 27.4 18.773 27.4 18 C 27.4 17.227 26.773 16.6 26 16.6 Z" rx="3"/><path d="M 15 14 C 15 16.209 13.209 18 11 18 C 8.791 18 7 16.209 7 14 C 7 11.791 8.791 10 11 10 C 13.209 10 15 11.791 15 14 Z M 11 11.6 C 9.675 11.6 8.6 12.675 8.6 14 C 8.6 15.325 9.675 16.4 11 16.4 C 12.325 16.4 13.4 15.325 13.4 14 C 13.4 12.675 12.325 11.6 11 11.6 Z" rx="3"/><path d="M 21 23 C 21 24.657 19.657 26 18 26 C 16.343 26 15 24.657 15 23 C 15 21.343 16.343 20 18 20 C 19.657 20 21 21.343 21 23 Z M 18 21.6 C 17.227 21.6 16.6 22.227 16.6 23 C 16.6 23.773 17.227 24.4 18 24.4 C 18.773 24.4 19.4 23.773 19.4 23 C 19.4 22.227 18.773 21.6 18 21.6 Z" rx="3"/>', outlineBadged: '<path d="M 32 13.22 L 32 29 L 4 29 L 4 7 L 22.57 7 C 22.524 6.668 22.501 6.334 22.5 6 C 22.501 5.665 22.524 5.331 22.57 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.104 2.895 31 4 31 L 32 31 C 33.104 31 34 30.104 34 29 L 34 12.34 C 33.38 12.73 32.706 13.026 32 13.22 Z"/><path d="M 29 18 C 29 19.657 27.657 21 26 21 C 24.343 21 23 19.657 23 18 C 23 16.343 24.343 15 26 15 C 27.657 15 29 16.343 29 18 Z M 26 16.6 C 25.227 16.6 24.6 17.227 24.6 18 C 24.6 18.773 25.227 19.4 26 19.4 C 26.773 19.4 27.4 18.773 27.4 18 C 27.4 17.227 26.773 16.6 26 16.6 Z" rx="3"/><path d="M 15 14 C 15 16.209 13.209 18 11 18 C 8.791 18 7 16.209 7 14 C 7 11.791 8.791 10 11 10 C 13.209 10 15 11.791 15 14 Z M 11 11.6 C 9.675 11.6 8.6 12.675 8.6 14 C 8.6 15.325 9.675 16.4 11 16.4 C 12.325 16.4 13.4 15.325 13.4 14 C 13.4 12.675 12.325 11.6 11 11.6 Z" rx="3"/><path d="M 21 23 C 21 24.657 19.657 26 18 26 C 16.343 26 15 24.657 15 23 C 15 21.343 16.343 20 18 20 C 19.657 20 21 21.343 21 23 Z M 18 21.6 C 17.227 21.6 16.6 22.227 16.6 23 C 16.6 23.773 17.227 24.4 18 24.4 C 18.773 24.4 19.4 23.773 19.4 23 C 19.4 22.227 18.773 21.6 18 21.6 Z" rx="3"/>', solid: '<path d="M 34 7 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 32 5 C 33.105 5 34 5.896 34 7 Z M 11 10 C 8.791 10 7 11.791 7 14 C 7 16.209 8.791 18 11 18 C 13.209 18 15 16.209 15 14 C 15 11.791 13.209 10 11 10 Z M 26 15 C 24.343 15 23 16.343 23 18 C 23 19.657 24.343 21 26 21 C 27.657 21 29 19.657 29 18 C 29 16.343 27.657 15 26 15 Z M 18 20 C 16.343 20 15 21.343 15 23 C 15 24.657 16.343 26 18 26 C 19.657 26 21 24.657 21 23 C 21 21.343 19.657 20 18 20 Z"/>', solidAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 21.958 5 L 17.625 12.395 C 16.795 13.601 17.594 15.245 19.064 15.351 C 19.134 15.357 19.201 15.359 19.27 15.357 L 24.579 15.357 C 23.639 15.863 23 16.857 23 18 C 23 19.657 24.343 21 26 21 C 27.657 21 29 19.657 29 18 C 29 16.857 28.361 15.863 27.421 15.357 L 34 15.357 Z M 11 10 C 8.791 10 7 11.791 7 14 C 7 16.209 8.791 18 11 18 C 13.209 18 15 16.209 15 14 C 15 11.791 13.209 10 11 10 Z M 18 20 C 16.343 20 15 21.343 15 23 C 15 24.657 16.343 26 18 26 C 19.657 26 21 24.657 21 23 C 21 21.343 19.657 20 18 20 Z"/>', solidBadged: '<path d="M 34 12.34 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 22.57 5 C 21.969 9.233 25.05 13.1 29.31 13.46 L 30.32 13.48 C 31.626 13.429 32.895 13.036 34 12.34 Z M 11 10 C 8.791 10 7 11.791 7 14 C 7 16.209 8.791 18 11 18 C 13.209 18 15 16.209 15 14 C 15 11.791 13.209 10 11 10 Z M 26 15 C 24.343 15 23 16.343 23 18 C 23 19.657 24.343 21 26 21 C 27.657 21 29 19.657 29 18 C 29 16.343 27.657 15 26 15 Z M 18 20 C 16.343 20 15 21.343 15 23 C 15 24.657 16.343 26 18 26 C 19.657 26 21 24.657 21 23 C 21 21.343 19.657 20 18 20 Z"/>' })];

// node_modules/@cds/core/icon/shapes/cloud-chart.js
var d22 = ["cloud-chart", n23({ outline: '<path d="M32,5H4A2,2,0,0,0,2,7V29a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V7A2,2,0,0,0,32,5ZM4,29V7H32V29Z"/><path d="M 20.971 11.243 C 23.314 13.586 22.364 18.335 18.849 21.849 C 15.334 25.364 10.586 26.314 8.243 23.97 C 5.899 21.627 6.849 16.878 10.364 13.364 C 13.879 9.849 18.628 8.9 20.971 11.243 Z M 11.636 14.637 C 8.824 17.449 7.875 21.058 9.515 22.698 C 11.155 24.338 14.764 23.389 17.576 20.577 C 20.388 17.765 21.338 14.156 19.697 12.516 C 18.057 10.876 14.448 11.825 11.636 14.637 Z"/><path d="M 28 22 C 28 23.657 26.657 25 25 25 C 23.343 25 22 23.657 22 22 C 22 20.343 23.343 19 25 19 C 26.657 19 28 20.343 28 22 Z M 25 20.6 C 24.227 20.6 23.6 21.227 23.6 22 C 23.6 22.773 24.227 23.4 25 23.4 C 25.773 23.4 26.4 22.773 26.4 22 C 26.4 21.227 25.773 20.6 25 20.6 Z" x="7"/>', outlineAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 21.958 5 L 20.786 7 L 4 7 L 4 29 L 32 29 L 32 15.357 L 34 15.357 Z"/><path d="M 18.849 21.849 C 15.334 25.364 10.586 26.314 8.243 23.97 C 5.899 21.627 6.849 16.878 10.364 13.364 C 13.049 10.679 16.453 9.492 18.956 10.124 L 18.008 11.741 C 16.18 11.518 13.695 12.578 11.636 14.637 C 8.824 17.449 7.875 21.058 9.515 22.698 C 11.155 24.338 14.764 23.389 17.576 20.577 C 19.228 18.925 20.237 16.998 20.456 15.357 L 22.22 15.357 C 22.006 17.477 20.838 19.861 18.849 21.849 Z"/><path d="M 28 22 C 28 23.657 26.657 25 25 25 C 23.343 25 22 23.657 22 22 C 22 20.343 23.343 19 25 19 C 26.657 19 28 20.343 28 22 Z M 25 20.6 C 24.226 20.6 23.6 21.226 23.6 22 C 23.6 22.773 24.226 23.4 25 23.4 C 25.773 23.4 26.4 22.773 26.4 22 C 26.4 21.226 25.773 20.6 25 20.6 Z" x="7"/>', outlineBadged: '<path d="M 32 13.22 L 32 29 L 4 29 L 4 7 L 22.57 7 C 22.524 6.668 22.501 6.334 22.5 6 C 22.501 5.665 22.524 5.331 22.57 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.104 2.895 31 4 31 L 32 31 C 33.105 31 34 30.104 34 29 L 34 12.34 C 33.38 12.73 32.706 13.026 32 13.22 Z"/><path d="M 20.971 11.243 C 23.314 13.586 22.364 18.335 18.849 21.849 C 15.334 25.364 10.586 26.314 8.243 23.97 C 5.899 21.627 6.849 16.878 10.364 13.364 C 13.879 9.849 18.628 8.9 20.971 11.243 Z M 11.636 14.637 C 8.824 17.449 7.875 21.058 9.515 22.698 C 11.155 24.338 14.764 23.389 17.576 20.577 C 20.388 17.765 21.338 14.156 19.697 12.516 C 18.057 10.876 14.448 11.825 11.636 14.637 Z"/><path d="M 28 22 C 28 23.657 26.657 25 25 25 C 23.343 25 22 23.657 22 22 C 22 20.343 23.343 19 25 19 C 26.657 19 28 20.343 28 22 Z M 25 20.6 C 24.226 20.6 23.6 21.226 23.6 22 C 23.6 22.773 24.226 23.4 25 23.4 C 25.773 23.4 26.4 22.773 26.4 22 C 26.4 21.226 25.773 20.6 25 20.6 Z" x="7"/>', solid: '<path d="M 34 7 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 32 5 C 33.105 5 34 5.895 34 7 Z M 10.364 13.364 C 6.849 16.878 5.899 21.627 8.243 23.97 C 10.586 26.314 15.334 25.364 18.849 21.849 C 22.364 18.335 23.314 13.586 20.971 11.243 C 18.628 8.9 13.879 9.849 10.364 13.364 Z M 25 19 C 23.343 19 22 20.343 22 22 C 22 23.657 23.343 25 25 25 C 26.657 25 28 23.657 28 22 C 28 20.343 26.657 19 25 19 Z"/>', solidAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 21.958 5 L 18.956 10.124 C 16.453 9.492 13.049 10.679 10.364 13.364 C 6.849 16.878 5.899 21.627 8.243 23.97 C 10.586 26.314 15.334 25.364 18.849 21.849 C 20.838 19.861 22.006 17.477 22.22 15.357 L 34 15.357 Z M 25 19 C 23.343 19 22 20.343 22 22 C 22 23.657 23.343 25 25 25 C 26.657 25 28 23.657 28 22 C 28 20.343 26.657 19 25 19 Z"/>', solidBadged: '<path d="M 34 12.34 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 22.57 5 C 21.969 9.233 25.05 13.1 29.31 13.46 L 30.32 13.48 C 31.625 13.429 32.895 13.036 34 12.34 Z M 10.364 13.364 C 6.849 16.878 5.899 21.627 8.243 23.97 C 10.586 26.314 15.334 25.364 18.849 21.849 C 22.364 18.335 23.314 13.586 20.971 11.243 C 18.628 8.9 13.879 9.849 10.364 13.364 Z M 25 19 C 23.343 19 22 20.343 22 22 C 22 23.657 23.343 25 25 25 C 26.657 25 28 23.657 28 22 C 28 20.343 26.657 19 25 19 Z"/>' })];

// node_modules/@cds/core/icon/shapes/curve-chart.js
var d23 = ["curve-chart", n23({ outline: '<path d="M 32 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.105 2.895 31 4 31 L 32 31 C 33.105 31 34 30.105 34 29 L 34 7 C 34 5.895 33.105 5 32 5 Z M 4 29 L 4 7 L 32 7 L 32 29 Z"/><path d="M 7 11.8 C 6.558 11.8 6.2 11.442 6.2 11 C 6.2 10.558 6.558 10.2 7 10.2 L 13 10.2 C 15.404 10.2 16.368 11.907 17.653 16.478 C 17.695 16.628 17.744 16.803 17.835 17.129 C 17.909 17.392 17.964 17.588 18.019 17.78 C 19.332 22.375 20.549 24.2 23 24.2 L 29 24.2 C 29.442 24.2 29.8 24.558 29.8 25 C 29.8 25.442 29.442 25.8 29 25.8 L 23 25.8 C 19.535 25.8 17.981 23.469 16.481 18.22 C 16.425 18.025 16.369 17.826 16.295 17.56 C 16.203 17.234 16.154 17.06 16.113 16.911 C 15.043 13.105 14.305 11.8 13 11.8 L 7 11.8 Z"/>', outlineAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 21.958 5 L 20.786 7 L 4 7 L 4 29 L 32 29 L 32 15.357 L 34 15.357 Z"/><path d="M 7 11.8 C 6.558 11.8 6.2 11.442 6.2 11 C 6.2 10.558 6.558 10.2 7 10.2 L 13 10.2 C 15.404 10.2 16.368 11.907 17.653 16.478 C 17.695 16.628 17.744 16.803 17.835 17.129 C 17.909 17.392 17.964 17.588 18.019 17.78 C 19.332 22.375 20.549 24.2 23 24.2 L 29 24.2 C 29.442 24.2 29.8 24.558 29.8 25 C 29.8 25.442 29.442 25.8 29 25.8 L 23 25.8 C 19.535 25.8 17.981 23.469 16.481 18.22 C 16.425 18.025 16.369 17.826 16.295 17.56 C 16.203 17.234 16.154 17.06 16.113 16.911 C 15.043 13.105 14.305 11.8 13 11.8 L 7 11.8 Z"/>', outlineBadged: '<path d="M 32 13.22 L 32 29 L 4 29 L 4 7 L 22.57 7 C 22.524 6.668 22.501 6.334 22.5 6 C 22.501 5.665 22.524 5.331 22.57 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.104 2.895 31 4 31 L 32 31 C 33.104 31 34 30.104 34 29 L 34 12.34 C 33.38 12.73 32.706 13.026 32 13.22 Z"/><path d="M 7 11.8 C 6.558 11.8 6.2 11.442 6.2 11 C 6.2 10.558 6.558 10.2 7 10.2 L 13 10.2 C 15.404 10.2 16.368 11.907 17.653 16.478 C 17.695 16.628 17.744 16.803 17.835 17.129 C 17.909 17.392 17.964 17.588 18.019 17.78 C 19.332 22.375 20.549 24.2 23 24.2 L 29 24.2 C 29.442 24.2 29.8 24.558 29.8 25 C 29.8 25.442 29.442 25.8 29 25.8 L 23 25.8 C 19.535 25.8 17.981 23.469 16.481 18.22 C 16.425 18.025 16.369 17.826 16.295 17.56 C 16.203 17.234 16.154 17.06 16.113 16.911 C 15.043 13.105 14.305 11.8 13 11.8 L 7 11.8 Z"/>', solid: '<path d="M 34 7 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 32 5 C 33.105 5 34 5.896 34 7 Z M 13 12 C 14.817 12 15.674 13.499 17.039 18.275 C 17.813 20.984 18.201 22.118 18.882 23.309 C 19.87 25.038 21.205 26 23 26 L 29 26 C 29.552 26 30 25.552 30 25 C 30 24.448 29.552 24 29 24 L 23 24 C 21.183 24 20.326 22.501 18.962 17.725 C 18.188 15.016 17.799 13.882 17.118 12.691 C 16.13 10.962 14.795 10 13 10 L 7 10 C 6.448 10 6 10.448 6 11 C 6 11.552 6.448 12 7 12 Z"/>', solidAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 21.958 5 L 17.625 12.395 C 17.476 12.612 17.379 12.843 17.33 13.077 C 17.262 12.948 17.192 12.82 17.118 12.691 C 16.13 10.962 14.795 10 13 10 L 7 10 C 6.448 10 6 10.448 6 11 C 6 11.552 6.448 12 7 12 L 13 12 C 14.817 12 15.674 13.499 17.039 18.275 C 17.813 20.984 18.201 22.118 18.882 23.309 C 19.87 25.038 21.205 26 23 26 L 29 26 C 29.552 26 30 25.552 30 25 C 30 24.448 29.552 24 29 24 L 23 24 C 21.183 24 20.326 22.501 18.962 17.725 C 18.64 16.598 18.385 15.744 18.147 15.044 C 18.407 15.215 18.717 15.326 19.064 15.351 C 19.134 15.357 19.201 15.359 19.27 15.357 L 34 15.357 Z"/>', solidBadged: '<path d="M 34 12.34 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 22.57 5 C 21.969 9.233 25.05 13.1 29.31 13.46 L 30.32 13.48 C 31.626 13.429 32.895 13.036 34 12.34 Z M 13 12 C 14.817 12 15.674 13.499 17.039 18.275 C 17.813 20.984 18.201 22.118 18.882 23.309 C 19.87 25.038 21.205 26 23 26 L 29 26 C 29.552 26 30 25.552 30 25 C 30 24.448 29.552 24 29 24 L 23 24 C 21.183 24 20.326 22.501 18.962 17.725 C 18.188 15.016 17.799 13.882 17.118 12.691 C 16.13 10.962 14.795 10 13 10 L 7 10 C 6.448 10 6 10.448 6 11 C 6 11.552 6.448 12 7 12 Z"/>' })];

// node_modules/@cds/core/icon/shapes/grid-chart.js
var a32 = ["grid-chart", n23({ outline: '<path d="M15,17H4a2,2,0,0,1-2-2V8A2,2,0,0,1,4,6H15a2,2,0,0,1,2,2v7A2,2,0,0,1,15,17ZM4,8v7H15V8Z"/><path d="M32,17H21a2,2,0,0,1-2-2V8a2,2,0,0,1,2-2H32a2,2,0,0,1,2,2v7A2,2,0,0,1,32,17ZM21,8v7H32V8Z"/><path d="M15,30H4a2,2,0,0,1-2-2V21a2,2,0,0,1,2-2H15a2,2,0,0,1,2,2v7A2,2,0,0,1,15,30ZM4,21v7H15V21Z"/><path d="M32,30H21a2,2,0,0,1-2-2V21a2,2,0,0,1,2-2H32a2,2,0,0,1,2,2v7A2,2,0,0,1,32,30ZM21,21v7H32V21Z"/>', outlineAlerted: '<path d="M15,17H4a2,2,0,0,1-2-2V8A2,2,0,0,1,4,6H15a2,2,0,0,1,2,2v7A2,2,0,0,1,15,17ZM4,8v7H15V8Z"/><path d="M 32 17 L 21 17 C 20.014 17 19.195 16.287 19.03 15.348 C 19.041 15.349 19.053 15.35 19.064 15.351 C 19.134 15.357 19.201 15.359 19.27 15.357 L 33.968 15.357 C 33.8 16.292 32.983 17 32 17 Z M 19 8 C 19 6.895 19.895 6 21 6 L 21.372 6 L 19 10.048 Z"/><path d="M15,30H4a2,2,0,0,1-2-2V21a2,2,0,0,1,2-2H15a2,2,0,0,1,2,2v7A2,2,0,0,1,15,30ZM4,21v7H15V21Z"/><path d="M32,30H21a2,2,0,0,1-2-2V21a2,2,0,0,1,2-2H32a2,2,0,0,1,2,2v7A2,2,0,0,1,32,30ZM21,21v7H32V21Z"/>', outlineBadged: '<path d="M15,17H4a2,2,0,0,1-2-2V8A2,2,0,0,1,4,6H15a2,2,0,0,1,2,2v7A2,2,0,0,1,15,17ZM4,8v7H15V8Z"/><path d="M 32 17 L 21 17 C 19.895 17 19 16.105 19 15 L 19 8 C 19 6.895 19.895 6 21 6 L 22.59 6 C 22.59 6.019 22.59 6.037 22.59 6.056 C 22.59 6.729 22.68 7.381 22.848 8 L 21 8 L 21 15 L 32 15 L 32 13.175 C 32.717 12.972 33.389 12.664 34 12.269 L 34 15 C 34 16.105 33.105 17 32 17 Z"/><path d="M15,30H4a2,2,0,0,1-2-2V21a2,2,0,0,1,2-2H15a2,2,0,0,1,2,2v7A2,2,0,0,1,15,30ZM4,21v7H15V21Z"/><path d="M32,30H21a2,2,0,0,1-2-2V21a2,2,0,0,1,2-2H32a2,2,0,0,1,2,2v7A2,2,0,0,1,32,30ZM21,21v7H32V21Z"/>', solid: '<path d="M 15 17 L 4 17 C 2.895 17 2 16.105 2 15 L 2 8 C 2 6.895 2.895 6 4 6 L 15 6 C 16.105 6 17 6.895 17 8 L 17 15 C 17 16.105 16.105 17 15 17 Z"/><path d="M 32 17 L 21 17 C 19.895 17 19 16.105 19 15 L 19 8 C 19 6.895 19.895 6 21 6 L 32 6 C 33.105 6 34 6.895 34 8 L 34 15 C 34 16.105 33.105 17 32 17 Z"/><path d="M 15 30 L 4 30 C 2.895 30 2 29.105 2 28 L 2 21 C 2 19.895 2.895 19 4 19 L 15 19 C 16.105 19 17 19.895 17 21 L 17 28 C 17 29.105 16.105 30 15 30 Z"/><path d="M 32 30 L 21 30 C 19.895 30 19 29.105 19 28 L 19 21 C 19 19.895 19.895 19 21 19 L 32 19 C 33.105 19 34 19.895 34 21 L 34 28 C 34 29.105 33.105 30 32 30 Z"/>', solidAlerted: '<path d="M 15 17 L 4 17 C 2.895 17 2 16.105 2 15 L 2 8 C 2 6.895 2.895 6 4 6 L 15 6 C 16.105 6 17 6.895 17 8 L 17 15 C 17 16.105 16.105 17 15 17 Z"/><path d="M 32 17 L 21 17 C 20.014 17 19.195 16.287 19.03 15.348 C 19.041 15.349 19.053 15.35 19.064 15.351 C 19.134 15.357 19.201 15.359 19.27 15.357 L 33.968 15.357 C 33.8 16.292 32.983 17 32 17 Z M 19 8 C 19 6.895 19.895 6 21 6 L 21.372 6 L 19 10.048 Z"/><path d="M 15 30 L 4 30 C 2.895 30 2 29.105 2 28 L 2 21 C 2 19.895 2.895 19 4 19 L 15 19 C 16.105 19 17 19.895 17 21 L 17 28 C 17 29.105 16.105 30 15 30 Z"/><path d="M 32 30 L 21 30 C 19.895 30 19 29.105 19 28 L 19 21 C 19 19.895 19.895 19 21 19 L 32 19 C 33.105 19 34 19.895 34 21 L 34 28 C 34 29.105 33.105 30 32 30 Z"/>', solidBadged: '<path d="M 15 17 L 4 17 C 2.895 17 2 16.105 2 15 L 2 8 C 2 6.895 2.895 6 4 6 L 15 6 C 16.105 6 17 6.895 17 8 L 17 15 C 17 16.105 16.105 17 15 17 Z"/><path d="M 32 17 L 21 17 C 19.895 17 19 16.105 19 15 L 19 8 C 19 6.895 19.895 6 21 6 L 22.59 6 C 22.59 6.019 22.59 6.037 22.59 6.056 C 22.59 10.141 25.901 13.452 29.986 13.452 C 31.466 13.452 32.844 13.018 34 12.269 L 34 15 C 34 16.105 33.105 17 32 17 Z"/><path d="M 15 30 L 4 30 C 2.895 30 2 29.105 2 28 L 2 21 C 2 19.895 2.895 19 4 19 L 15 19 C 16.105 19 17 19.895 17 21 L 17 28 C 17 29.105 16.105 30 15 30 Z"/><path d="M 32 30 L 21 30 C 19.895 30 19 29.105 19 28 L 19 21 C 19 19.895 19.895 19 21 19 L 32 19 C 33.105 19 34 19.895 34 21 L 34 28 C 34 29.105 33.105 30 32 30 Z"/>' })];

// node_modules/@cds/core/icon/shapes/heat-map.js
var Z3 = ["heat-map", n23({ outline: '<path d="M 32 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.105 2.895 31 4 31 L 32 31 C 33.105 31 34 30.105 34 29 L 34 7 C 34 5.895 33.105 5 32 5 Z M 4 29 L 4 7 L 32 7 L 32 29 Z"/><path d="M 8 10 L 28 10 L 28 26 L 8 26 Z M 9.6 24 L 14.1 24 L 14.1 18.8 L 9.6 18.8 Z M 14.1 11.6 L 9.6 11.6 L 9.6 17.2 L 14.1 17.2 Z M 26 24 L 26 18.8 L 21.9 18.8 L 21.9 24 Z M 26 11.6 L 21.9 11.6 L 21.9 17.2 L 26 17.2 Z M 15.7 11.6 L 15.7 17.2 L 20.3 17.2 L 20.3 11.6 Z M 15.7 24 L 20.3 24 L 20.3 18.8 L 15.7 18.8 Z"/>', outlineAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 21.958 5 L 20.786 7 L 4 7 L 4 29 L 32 29 L 32 15.357 L 34 15.357 Z"/><path d="M 8 10 L 19.028 10 L 18.091 11.6 L 15.7 11.6 L 15.7 17.2 L 20.3 17.2 L 20.3 15.357 L 21.9 15.357 L 21.9 17.2 L 26 17.2 L 26 15.357 L 28 15.357 L 28 26 L 8 26 Z M 9.6 24 L 14.1 24 L 14.1 18.8 L 9.6 18.8 Z M 14.1 11.6 L 9.6 11.6 L 9.6 17.2 L 14.1 17.2 Z M 26 24 L 26 18.8 L 21.9 18.8 L 21.9 24 Z M 15.7 24 L 20.3 24 L 20.3 18.8 L 15.7 18.8 Z"/>', outlineBadged: '<path d="M 32 13.22 L 32 29 L 4 29 L 4 7 L 22.57 7 C 22.524 6.668 22.501 6.334 22.5 6 C 22.501 5.665 22.524 5.331 22.57 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.104 2.895 31 4 31 L 32 31 C 33.104 31 34 30.104 34 29 L 34 12.34 C 33.38 12.73 32.706 13.026 32 13.22 Z"/><path d="M 8 10 L 23.728 10 C 24.105 10.596 24.564 11.135 25.09 11.6 L 21.9 11.6 L 21.9 17.2 L 26 17.2 L 26 12.287 C 26.611 12.679 27.284 12.983 28 13.182 L 28 26 L 8 26 Z M 9.6 24 L 14.1 24 L 14.1 18.8 L 9.6 18.8 Z M 14.1 11.6 L 9.6 11.6 L 9.6 17.2 L 14.1 17.2 Z M 26 24 L 26 18.8 L 21.9 18.8 L 21.9 24 Z M 15.7 11.6 L 15.7 17.2 L 20.3 17.2 L 20.3 11.6 Z M 15.7 24 L 20.3 24 L 20.3 18.8 L 15.7 18.8 Z"/>', solid: '<path d="M 34 7 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 32 5 C 33.105 5 34 5.896 34 7 Z M 8 26 L 28 26 L 28 10 L 8 10 Z M 10 19 L 14 19 L 14 24 L 10 24 Z M 22 24 L 22 19 L 26 19 L 26 24 Z M 20 19 L 20 24 L 16 24 L 16 19 Z M 26 17 L 22 17 L 22 12 L 26 12 Z M 20 12 L 20 17 L 16 17 L 16 12 Z M 14 12 L 14 17 L 10 17 L 10 12 Z"/>', solidAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 21.958 5 L 19.028 10 L 8 10 L 8 26 L 28 26 L 28 15.357 L 34 15.357 Z M 10 19 L 14 19 L 14 24 L 10 24 Z M 22 24 L 22 19 L 26 19 L 26 24 Z M 20 19 L 20 24 L 16 24 L 16 19 Z M 26 17 L 22 17 L 22 15.357 L 26 15.357 Z M 20 17 L 16 17 L 16 12 L 17.856 12 L 17.625 12.395 C 16.795 13.601 17.594 15.245 19.064 15.351 C 19.134 15.357 19.201 15.359 19.27 15.357 L 20 15.357 Z M 14 12 L 14 17 L 10 17 L 10 12 Z"/>', solidBadged: '<path d="M 34 12.34 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 22.57 5 C 22.312 6.817 22.732 8.566 23.633 10 L 8 10 L 8 26 L 28 26 L 28 13.232 C 28.421 13.345 28.859 13.422 29.31 13.46 L 30.32 13.48 C 31.626 13.429 32.895 13.036 34 12.34 Z M 10 19 L 14 19 L 14 24 L 10 24 Z M 22 24 L 22 19 L 26 19 L 26 24 Z M 20 19 L 20 24 L 16 24 L 16 19 Z M 26 17 L 22 17 L 22 12 L 25.584 12 C 25.719 12.1 25.858 12.196 26 12.287 Z M 20 12 L 20 17 L 16 17 L 16 12 Z M 14 12 L 14 17 L 10 17 L 10 12 Z"/>' })];

// node_modules/@cds/core/icon/shapes/line-chart.js
var t65 = ["line-chart", n23({ outline: '<path d="M 32 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.105 2.895 31 4 31 L 32 31 C 33.105 31 34 30.105 34 29 L 34 7 C 34 5.895 33.105 5 32 5 Z M 4 29 L 4 7 L 32 7 L 32 29 Z"/><polygon points="15.62 15.222 9.602 23.968 5.55 20.384 6.61 19.186 9.308 21.572 15.634 12.38 22.384 22.395 29.138 13.47 30.414 14.436 22.308 25.145"/>', outlineAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 21.958 5 L 20.786 7 L 4 7 L 4 29 L 32 29 L 32 15.357 L 34 15.357 Z"/><path d="M 15.62 15.222 L 9.602 23.968 L 5.55 20.384 L 6.61 19.186 L 9.308 21.572 L 15.634 12.38 L 22.384 22.395 L 27.717 15.348 L 29.724 15.348 L 22.308 25.145 Z"/>', outlineBadged: '<path d="M 32 13.22 L 32 29 L 4 29 L 4 7 L 22.57 7 C 22.524 6.668 22.501 6.334 22.5 6 C 22.501 5.665 22.524 5.331 22.57 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.104 2.895 31 4 31 L 32 31 C 33.104 31 34 30.104 34 29 L 34 12.34 C 33.38 12.73 32.706 13.026 32 13.22 Z"/><polygon points="15.62 15.222 9.602 23.968 5.55 20.384 6.61 19.186 9.308 21.572 15.634 12.38 22.384 22.395 29.138 13.47 30.414 14.436 22.308 25.145"/>', solid: '<path d="M 32 5 L 4 5 C 2.896 5 2 5.896 2 7 L 2 29 C 2 30.105 2.896 31 4 31 L 32 31 C 33.105 31 34 30.105 34 29 L 34 7 C 34 5.896 33.105 5 32 5 Z M 22.56 25.94 L 15.46 15.36 L 9.12 24.64 L 4.62 20.64 L 6 19.05 L 8.7 21.44 L 15.46 11.56 L 22.65 22.27 L 29.65 13 L 31.35 14.28 Z"/>', solidAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 21.958 5 L 17.625 12.395 C 16.795 13.601 17.594 15.245 19.064 15.351 C 19.134 15.357 19.201 15.359 19.27 15.357 L 27.452 15.357 L 22.38 22.06 L 15.63 12 L 9.28 21.28 L 6.75 19.04 L 5.42 20.53 L 9.65 24.28 L 15.61 15.56 L 22.28 25.5 L 29.959 15.357 L 34 15.357 Z"/>', solidBadged: '<path d="M 30.32 13.48 L 31.38 14.28 L 22.56 25.94 L 15.46 15.36 L 9.12 24.64 L 4.62 20.64 L 6 19.05 L 8.7 21.44 L 15.46 11.56 L 22.65 22.27 L 29.31 13.46 C 25.05 13.1 21.969 9.233 22.57 5 L 4 5 C 2.896 5 2 5.896 2 7 L 2 29 C 2 30.105 2.896 31 4 31 L 32 31 C 33.105 31 34 30.105 34 29 L 34 12.34 C 32.895 13.036 31.626 13.429 30.32 13.48 Z"/>' })];

// node_modules/@cds/core/icon/shapes/pie-chart.js
var M3 = ["pie-chart", n23({ outline: '<path d="M 32 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.105 2.895 31 4 31 L 32 31 C 33.105 31 34 30.105 34 29 L 34 7 C 34 5.895 33.105 5 32 5 Z M 4 29 L 4 7 L 32 7 L 32 29 Z"/><path d="M 17 27 C 12.582 27 9 23.418 9 19 C 9 14.582 12.582 11 17 11 L 17 19 L 25 19 C 25 23.418 21.418 27 17 27 Z M 23.247 20.4 L 15.4 20.4 L 15.4 12.802 C 12.64 13.513 10.601 16.018 10.6 19 C 10.6 22.535 13.465 25.4 17 25.4 C 20.054 25.401 22.608 23.261 23.247 20.4 Z"/><path d="M 19 9 C 23.418 9 27 12.582 27 17 L 19 17 Z M 25.198 15.4 C 24.62 13.15 22.849 11.38 20.6 10.801 L 20.6 15.4 Z"/>', outlineAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 21.958 5 L 20.786 7 L 4 7 L 4 29 L 32 29 L 32 15.357 L 34 15.357 Z"/><path d="M 17 27 C 12.582 27 9 23.418 9 19 C 9 14.582 12.582 11 17 11 L 17 19 L 25 19 C 25 23.418 21.418 27 17 27 Z M 23.247 20.4 L 15.4 20.4 L 15.4 12.802 C 12.64 13.513 10.601 16.018 10.6 19 C 10.6 22.535 13.465 25.4 17 25.4 C 20.054 25.401 22.608 23.261 23.247 20.4 Z"/><path d="M 27 17 L 19 17 L 19 15.345 C 19.021 15.348 19.043 15.349 19.064 15.351 C 19.134 15.357 19.201 15.359 19.27 15.357 L 26.831 15.357 C 26.942 15.887 27 16.437 27 17 Z"/>', outlineBadged: '<path d="M 32 13.22 L 32 29 L 4 29 L 4 7 L 22.57 7 C 22.524 6.668 22.501 6.334 22.5 6 C 22.501 5.665 22.524 5.331 22.57 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.104 2.895 31 4 31 L 32 31 C 33.104 31 34 30.104 34 29 L 34 12.34 C 33.38 12.73 32.706 13.026 32 13.22 Z"/><path d="M 17 27 C 12.582 27 9 23.418 9 19 C 9 14.582 12.582 11 17 11 L 17 19 L 25 19 C 25 23.418 21.418 27 17 27 Z M 23.247 20.4 L 15.4 20.4 L 15.4 12.802 C 12.64 13.513 10.601 16.018 10.6 19 C 10.6 22.535 13.465 25.4 17 25.4 C 20.054 25.401 22.608 23.261 23.247 20.4 Z"/><path d="M 19 9 C 23.418 9 27 12.582 27 17 L 19 17 Z M 25.198 15.4 C 24.62 13.15 22.849 11.38 20.6 10.801 L 20.6 15.4 Z"/>', solid: '<path d="M 34 7 L 34 29 C 34 30.105 33.105 31 32 31 C 32 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 32 5 C 33.105 5 34 5.896 34 7 Z M 25 19 L 17 19 L 17 11 C 12.582 11 9 14.582 9 19 C 9 23.418 12.582 27 17 27 C 21.418 27 25 23.418 25 19 Z M 19 17 L 27 17 C 27 12.582 23.418 9 19 9 Z"/>', solidAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 21.958 5 L 17.625 12.395 C 16.807 13.583 17.571 15.197 19 15.345 L 19 17 L 27 17 C 27 16.437 26.942 15.887 26.831 15.357 L 34 15.357 Z M 25 19 L 17 19 L 17 11 C 12.582 11 9 14.582 9 19 C 9 23.418 12.582 27 17 27 C 21.418 27 25 23.418 25 19 Z"/>', solidBadged: '<path d="M 34 12.34 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 22.57 5 C 21.969 9.233 25.05 13.1 29.31 13.46 L 30.32 13.48 C 31.626 13.429 32.895 13.036 34 12.34 Z M 25 19 L 17 19 L 17 11 C 12.582 11 9 14.582 9 19 C 9 23.418 12.582 27 17 27 C 21.418 27 25 23.418 25 19 Z M 19 17 L 27 17 C 27 12.582 23.418 9 19 9 Z"/>' })];

// node_modules/@cds/core/icon/shapes/scatter-plot.js
var t66 = ["scatter-plot", n23({ outline: '<path d="M 32 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.105 2.895 31 4 31 L 32 31 C 33.105 31 34 30.105 34 29 L 34 7 C 34 5.895 33.105 5 32 5 Z M 4 29 L 4 7 L 32 7 L 32 29 Z"/><path d="M 9.101 15.8 C 9.413 16.111 9.919 16.111 10.231 15.8 L 11.391 14.64 L 12.551 15.8 C 12.964 16.256 13.717 16.094 13.905 15.507 C 14.002 15.208 13.914 14.881 13.681 14.67 L 12.531 13.54 L 13.691 12.38 C 14.147 11.966 13.985 11.214 13.399 11.025 C 13.1 10.929 12.772 11.017 12.561 11.25 L 11.401 12.41 L 10.231 11.22 C 9.817 10.763 9.065 10.926 8.877 11.512 C 8.78 11.811 8.868 12.139 9.101 12.35 L 10.261 13.54 L 9.101 14.67 C 8.789 14.982 8.789 15.487 9.101 15.8 Z"/><path d="M 15.176 25.536 C 15.488 25.847 15.994 25.847 16.306 25.536 L 17.466 24.376 L 18.626 25.536 C 19.039 25.992 19.792 25.83 19.98 25.243 C 20.077 24.944 19.989 24.617 19.756 24.406 L 18.606 23.276 L 19.766 22.116 C 20.222 21.702 20.06 20.95 19.474 20.761 C 19.175 20.665 18.847 20.753 18.636 20.986 L 17.476 22.146 L 16.306 20.956 C 15.892 20.499 15.14 20.662 14.952 21.248 C 14.855 21.547 14.943 21.875 15.176 22.086 L 16.336 23.276 L 15.176 24.406 C 14.864 24.718 14.864 25.223 15.176 25.536 Z"/><path d="M 22.912 20.343 C 23.224 20.654 23.73 20.654 24.042 20.343 L 25.202 19.183 L 26.362 20.343 C 26.775 20.799 27.528 20.637 27.716 20.05 C 27.813 19.751 27.725 19.424 27.492 19.213 L 26.342 18.083 L 27.502 16.923 C 27.958 16.509 27.796 15.757 27.21 15.568 C 26.911 15.472 26.583 15.56 26.372 15.793 L 25.212 16.953 L 24.042 15.763 C 23.628 15.306 22.876 15.469 22.688 16.055 C 22.591 16.354 22.679 16.682 22.912 16.893 L 24.072 18.083 L 22.912 19.213 C 22.6 19.525 22.6 20.03 22.912 20.343 Z"/>', outlineAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 21.958 5 L 20.786 7 L 4 7 L 4 29 L 32 29 L 32 15.357 L 34 15.357 Z"/><path d="M 9.101 15.8 C 9.413 16.111 9.919 16.111 10.231 15.8 L 11.391 14.64 L 12.551 15.8 C 12.964 16.256 13.717 16.094 13.905 15.507 C 14.002 15.208 13.914 14.881 13.681 14.67 L 12.531 13.54 L 13.691 12.38 C 14.147 11.966 13.985 11.214 13.399 11.025 C 13.1 10.929 12.772 11.017 12.561 11.25 L 11.401 12.41 L 10.231 11.22 C 9.817 10.763 9.065 10.926 8.877 11.512 C 8.78 11.811 8.868 12.139 9.101 12.35 L 10.261 13.54 L 9.101 14.67 C 8.789 14.982 8.789 15.487 9.101 15.8 Z"/><path d="M 15.176 25.536 C 15.488 25.847 15.994 25.847 16.306 25.536 L 17.466 24.376 L 18.626 25.536 C 19.039 25.992 19.792 25.83 19.98 25.243 C 20.077 24.944 19.989 24.617 19.756 24.406 L 18.606 23.276 L 19.766 22.116 C 20.222 21.702 20.06 20.95 19.474 20.761 C 19.175 20.665 18.847 20.753 18.636 20.986 L 17.476 22.146 L 16.306 20.956 C 15.892 20.499 15.14 20.662 14.952 21.248 C 14.855 21.547 14.943 21.875 15.176 22.086 L 16.336 23.276 L 15.176 24.406 C 14.864 24.718 14.864 25.223 15.176 25.536 Z"/><path d="M 22.912 20.343 C 23.224 20.654 23.73 20.654 24.042 20.343 L 25.202 19.183 L 26.362 20.343 C 26.775 20.799 27.528 20.637 27.716 20.05 C 27.813 19.751 27.725 19.424 27.492 19.213 L 26.342 18.083 L 27.502 16.923 C 27.958 16.509 27.796 15.757 27.21 15.568 C 26.911 15.472 26.583 15.56 26.372 15.793 L 25.212 16.953 L 24.042 15.763 C 23.628 15.306 22.876 15.469 22.688 16.055 C 22.591 16.354 22.679 16.682 22.912 16.893 L 24.072 18.083 L 22.912 19.213 C 22.6 19.525 22.6 20.03 22.912 20.343 Z"/>', outlineBadged: '<path d="M 32 13.22 L 32 29 L 4 29 L 4 7 L 22.57 7 C 22.524 6.668 22.501 6.334 22.5 6 C 22.501 5.665 22.524 5.331 22.57 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.104 2.895 31 4 31 L 32 31 C 33.104 31 34 30.104 34 29 L 34 12.34 C 33.38 12.73 32.706 13.026 32 13.22 Z"/><path d="M 9.101 15.8 C 9.413 16.111 9.919 16.111 10.231 15.8 L 11.391 14.64 L 12.551 15.8 C 12.964 16.256 13.717 16.094 13.905 15.507 C 14.002 15.208 13.914 14.881 13.681 14.67 L 12.531 13.54 L 13.691 12.38 C 14.147 11.966 13.985 11.214 13.399 11.025 C 13.1 10.929 12.772 11.017 12.561 11.25 L 11.401 12.41 L 10.231 11.22 C 9.817 10.763 9.065 10.926 8.877 11.512 C 8.78 11.811 8.868 12.139 9.101 12.35 L 10.261 13.54 L 9.101 14.67 C 8.789 14.982 8.789 15.487 9.101 15.8 Z"/><path d="M 15.176 25.536 C 15.488 25.847 15.994 25.847 16.306 25.536 L 17.466 24.376 L 18.626 25.536 C 19.039 25.992 19.792 25.83 19.98 25.243 C 20.077 24.944 19.989 24.617 19.756 24.406 L 18.606 23.276 L 19.766 22.116 C 20.222 21.702 20.06 20.95 19.474 20.761 C 19.175 20.665 18.847 20.753 18.636 20.986 L 17.476 22.146 L 16.306 20.956 C 15.892 20.499 15.14 20.662 14.952 21.248 C 14.855 21.547 14.943 21.875 15.176 22.086 L 16.336 23.276 L 15.176 24.406 C 14.864 24.718 14.864 25.223 15.176 25.536 Z"/><path d="M 22.912 20.343 C 23.224 20.654 23.73 20.654 24.042 20.343 L 25.202 19.183 L 26.362 20.343 C 26.775 20.799 27.528 20.637 27.716 20.05 C 27.813 19.751 27.725 19.424 27.492 19.213 L 26.342 18.083 L 27.502 16.923 C 27.958 16.509 27.796 15.757 27.21 15.568 C 26.911 15.472 26.583 15.56 26.372 15.793 L 25.212 16.953 L 24.042 15.763 C 23.628 15.306 22.876 15.469 22.688 16.055 C 22.591 16.354 22.679 16.682 22.912 16.893 L 24.072 18.083 L 22.912 19.213 C 22.6 19.525 22.6 20.03 22.912 20.343 Z"/>', solid: '<path d="M 34 7 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 32 5 C 33.105 5 34 5.896 34 7 Z M 9.101 15.8 C 9.413 16.111 9.919 16.111 10.231 15.8 L 11.391 14.64 L 12.551 15.8 C 12.964 16.256 13.717 16.094 13.905 15.507 C 14.002 15.208 13.914 14.881 13.681 14.67 L 12.531 13.54 L 13.691 12.38 C 14.147 11.966 13.985 11.214 13.399 11.025 C 13.1 10.929 12.772 11.017 12.561 11.25 L 11.401 12.41 L 10.231 11.22 C 9.817 10.763 9.065 10.926 8.877 11.512 C 8.78 11.811 8.868 12.139 9.101 12.35 L 10.261 13.54 L 9.101 14.67 C 8.789 14.982 8.789 15.487 9.101 15.8 Z M 15.176 25.536 C 15.488 25.847 15.994 25.847 16.306 25.536 L 17.466 24.376 L 18.626 25.536 C 19.039 25.992 19.792 25.83 19.98 25.243 C 20.077 24.944 19.989 24.617 19.756 24.406 L 18.606 23.276 L 19.766 22.116 C 20.222 21.702 20.06 20.95 19.474 20.761 C 19.175 20.665 18.847 20.753 18.636 20.986 L 17.476 22.146 L 16.306 20.956 C 15.892 20.499 15.14 20.662 14.952 21.248 C 14.855 21.547 14.943 21.875 15.176 22.086 L 16.336 23.276 L 15.176 24.406 C 14.864 24.718 14.864 25.223 15.176 25.536 Z M 22.912 20.343 C 23.224 20.654 23.73 20.654 24.042 20.343 L 25.202 19.183 L 26.362 20.343 C 26.775 20.799 27.528 20.637 27.716 20.05 C 27.813 19.751 27.725 19.424 27.492 19.213 L 26.342 18.083 L 27.502 16.923 C 27.958 16.509 27.796 15.757 27.21 15.568 C 26.911 15.472 26.583 15.56 26.372 15.793 L 25.212 16.953 L 24.042 15.763 C 23.628 15.306 22.876 15.469 22.688 16.055 C 22.591 16.354 22.679 16.682 22.912 16.893 L 24.072 18.083 L 22.912 19.213 C 22.6 19.525 22.6 20.03 22.912 20.343 Z"/>', solidAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 21.958 5 L 17.625 12.395 C 16.795 13.601 17.594 15.245 19.064 15.351 C 19.134 15.357 19.201 15.359 19.27 15.357 L 34 15.357 Z M 9.101 15.8 C 9.413 16.111 9.919 16.111 10.231 15.8 L 11.391 14.64 L 12.551 15.8 C 12.964 16.256 13.717 16.094 13.905 15.507 C 14.002 15.208 13.914 14.881 13.681 14.67 L 12.531 13.54 L 13.691 12.38 C 14.147 11.966 13.985 11.214 13.399 11.025 C 13.1 10.929 12.772 11.017 12.561 11.25 L 11.401 12.41 L 10.231 11.22 C 9.817 10.763 9.065 10.926 8.877 11.512 C 8.78 11.811 8.868 12.139 9.101 12.35 L 10.261 13.54 L 9.101 14.67 C 8.789 14.982 8.789 15.487 9.101 15.8 Z M 15.176 25.536 C 15.488 25.847 15.994 25.847 16.306 25.536 L 17.466 24.376 L 18.626 25.536 C 19.039 25.992 19.792 25.83 19.98 25.243 C 20.077 24.944 19.989 24.617 19.756 24.406 L 18.606 23.276 L 19.766 22.116 C 20.222 21.702 20.06 20.95 19.474 20.761 C 19.175 20.665 18.847 20.753 18.636 20.986 L 17.476 22.146 L 16.306 20.956 C 15.892 20.499 15.14 20.662 14.952 21.248 C 14.855 21.547 14.943 21.875 15.176 22.086 L 16.336 23.276 L 15.176 24.406 C 14.864 24.718 14.864 25.223 15.176 25.536 Z M 22.912 20.343 C 23.224 20.654 23.73 20.654 24.042 20.343 L 25.202 19.183 L 26.362 20.343 C 26.775 20.799 27.528 20.637 27.716 20.05 C 27.813 19.751 27.725 19.424 27.492 19.213 L 26.342 18.083 L 27.502 16.923 C 27.958 16.509 27.796 15.757 27.21 15.568 C 26.911 15.472 26.583 15.56 26.372 15.793 L 25.212 16.953 L 24.042 15.763 C 23.628 15.306 22.876 15.469 22.688 16.055 C 22.591 16.354 22.679 16.682 22.912 16.893 L 24.072 18.083 L 22.912 19.213 C 22.6 19.525 22.6 20.03 22.912 20.343 Z"/>', solidBadged: '<path d="M 34 12.34 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 22.57 5 C 21.969 9.233 25.05 13.1 29.31 13.46 L 30.32 13.48 C 31.626 13.429 32.895 13.036 34 12.34 Z M 9.101 15.8 C 9.413 16.111 9.919 16.111 10.231 15.8 L 11.391 14.64 L 12.551 15.8 C 12.964 16.256 13.717 16.094 13.905 15.507 C 14.002 15.208 13.914 14.881 13.681 14.67 L 12.531 13.54 L 13.691 12.38 C 14.147 11.966 13.985 11.214 13.399 11.025 C 13.1 10.929 12.772 11.017 12.561 11.25 L 11.401 12.41 L 10.231 11.22 C 9.817 10.763 9.065 10.926 8.877 11.512 C 8.78 11.811 8.868 12.139 9.101 12.35 L 10.261 13.54 L 9.101 14.67 C 8.789 14.982 8.789 15.487 9.101 15.8 Z M 15.176 25.536 C 15.488 25.847 15.994 25.847 16.306 25.536 L 17.466 24.376 L 18.626 25.536 C 19.039 25.992 19.792 25.83 19.98 25.243 C 20.077 24.944 19.989 24.617 19.756 24.406 L 18.606 23.276 L 19.766 22.116 C 20.222 21.702 20.06 20.95 19.474 20.761 C 19.175 20.665 18.847 20.753 18.636 20.986 L 17.476 22.146 L 16.306 20.956 C 15.892 20.499 15.14 20.662 14.952 21.248 C 14.855 21.547 14.943 21.875 15.176 22.086 L 16.336 23.276 L 15.176 24.406 C 14.864 24.718 14.864 25.223 15.176 25.536 Z M 22.912 20.343 C 23.224 20.654 23.73 20.654 24.042 20.343 L 25.202 19.183 L 26.362 20.343 C 26.775 20.799 27.528 20.637 27.716 20.05 C 27.813 19.751 27.725 19.424 27.492 19.213 L 26.342 18.083 L 27.502 16.923 C 27.958 16.509 27.796 15.757 27.21 15.568 C 26.911 15.472 26.583 15.56 26.372 15.793 L 25.212 16.953 L 24.042 15.763 C 23.628 15.306 22.876 15.469 22.688 16.055 C 22.591 16.354 22.679 16.682 22.912 16.893 L 24.072 18.083 L 22.912 19.213 C 22.6 19.525 22.6 20.03 22.912 20.343 Z"/>' })];

// node_modules/@cds/core/icon/shapes/tick-chart.js
var t67 = ["tick-chart", n23({ outline: '<path d="M 32 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.105 2.895 31 4 31 L 32 31 C 33.105 31 34 30.105 34 29 L 34 7 C 34 5.895 33.105 5 32 5 Z M 4 29 L 4 7 L 32 7 L 32 29 Z"/><path d="M 6 25 L 8 25 L 8 22 L 10 22 L 10 25 L 13 25 L 13 22 L 15 22 L 15 25 L 18 25 L 18 22 L 20 22 L 20 25 L 23 25 L 23 22 L 25 22 L 25 25 L 27.723 25 C 28.023 25.02 28.293 25.18 28.463 25.43 C 28.903 26.06 28.483 26.93 27.723 26.99 L 6 26.991 Z"/>', outlineAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.895 31 2 30.105 2 29 L 2 7 C 2 5.895 2.895 5 4 5 L 21.958 5 L 20.786 7 L 4 7 L 4 29 L 32 29 L 32 15.357 L 34 15.357 Z"/><path d="M 6 25 L 8 25 L 8 22 L 10 22 L 10 25 L 13 25 L 13 22 L 15 22 L 15 25 L 18 25 L 18 22 L 20 22 L 20 25 L 23 25 L 23 22 L 25 22 L 25 25 L 27.723 25 C 28.023 25.02 28.293 25.18 28.463 25.43 C 28.903 26.06 28.483 26.93 27.723 26.99 L 6 26.991 Z"/>', outlineBadged: '<path d="M 32 13.22 L 32 29 L 4 29 L 4 7 L 22.57 7 C 22.524 6.668 22.501 6.334 22.5 6 C 22.501 5.665 22.524 5.331 22.57 5 L 4 5 C 2.895 5 2 5.895 2 7 L 2 29 C 2 30.104 2.895 31 4 31 L 32 31 C 33.104 31 34 30.104 34 29 L 34 12.34 C 33.38 12.73 32.706 13.026 32 13.22 Z"/><path d="M 6 25 L 8 25 L 8 22 L 10 22 L 10 25 L 13 25 L 13 22 L 15 22 L 15 25 L 18 25 L 18 22 L 20 22 L 20 25 L 23 25 L 23 22 L 25 22 L 25 25 L 27.723 25 C 28.023 25.02 28.293 25.18 28.463 25.43 C 28.903 26.06 28.483 26.93 27.723 26.99 L 6 26.991 Z"/>', solid: '<path d="M 34 7 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 32 5 C 33.105 5 34 5.896 34 7 Z M 6 26.991 L 27.723 26.99 C 28.483 26.93 28.903 26.06 28.463 25.43 C 28.293 25.18 28.023 25.02 27.723 25 L 25 25 L 25 22 L 23 22 L 23 25 L 20 25 L 20 22 L 18 22 L 18 25 L 15 25 L 15 22 L 13 22 L 13 25 L 10 25 L 10 22 L 8 22 L 8 25 L 6 25 Z"/>', solidAlerted: '<path d="M 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 21.958 5 L 17.625 12.395 C 16.795 13.601 17.594 15.245 19.064 15.351 C 19.134 15.357 19.201 15.359 19.27 15.357 L 34 15.357 Z M 6 26.991 L 27.723 26.99 C 28.483 26.93 28.903 26.06 28.463 25.43 C 28.293 25.18 28.023 25.02 27.723 25 L 25 25 L 25 22 L 23 22 L 23 25 L 20 25 L 20 22 L 18 22 L 18 25 L 15 25 L 15 22 L 13 22 L 13 25 L 10 25 L 10 22 L 8 22 L 8 25 L 6 25 Z"/>', solidBadged: '<path d="M 34 12.34 L 34 29 C 34 30.105 33.105 31 32 31 L 4 31 C 2.896 31 2 30.105 2 29 L 2 7 C 2 5.896 2.896 5 4 5 L 22.57 5 C 21.969 9.233 25.05 13.1 29.31 13.46 L 30.32 13.48 C 31.626 13.429 32.895 13.036 34 12.34 Z M 6 26.991 L 27.723 26.99 C 28.483 26.93 28.903 26.06 28.463 25.43 C 28.293 25.18 28.023 25.02 27.723 25 L 25 25 L 25 22 L 23 22 L 23 25 L 20 25 L 20 22 L 18 22 L 18 25 L 15 25 L 15 22 L 13 22 L 13 25 L 10 25 L 10 22 L 8 22 L 8 25 L 6 25 Z"/>' })];

// node_modules/@cds/core/icon/shapes/bank.js
var V9 = ["bank", n23({ outline: '<path d="M3.5,13.56,18,5.23l14.5,8.33a1,1,0,0,0,1-1.73L18,2.92,2.5,11.83a1,1,0,1,0,1,1.73Z"/><path d="M4,26a1,1,0,0,0,1,1H31a1,1,0,0,0,0-2H28V17.63H26V25H19V17.63H17V25H10V17.63H8V25H5A1,1,0,0,0,4,26Z"/><rect x="5.02" y="14" width="26" height="2"/><path d="M33,29H3a1,1,0,0,0,0,2H33a1,1,0,0,0,0-2Z"/><path d="M22.15,11.58h3.21L18.65,7.72a.8.8,0,0,0-.8,0l-6.72,3.86h3.21l3.9-2.24Z"/>', outlineAlerted: '<path d="M4,26a1,1,0,0,0,1,1H31a1,1,0,0,0,0-2H28V17.63H26V25H19V17.63H17V25H10V17.63H8V25H5A1,1,0,0,0,4,26Z"/><path d="M33,29H3a1,1,0,0,0,0,2H33a1,1,0,0,0,0-2Z"/><path d="M22.5,15A3.51,3.51,0,0,1,20,14H5v2H31V15Z"/><path d="M19.46,9.74l.68-1.17-1.49-.85a.8.8,0,0,0-.8,0l-6.72,3.86h3.21l3.9-2.24,1.1.63C19.39,9.89,19.42,9.81,19.46,9.74Z"/><path d="M22.05,5.25,18,2.92,2.5,11.83a1,1,0,1,0,1,1.73L18,5.23,21.05,7Z"/>', outlineBadged: '<path d="M4,26a1,1,0,0,0,1,1H31a1,1,0,0,0,0-2H28V17.63H26V25H19V17.63H17V25H10V17.63H8V25H5A1,1,0,0,0,4,26Z"/><rect x="5.02" y="14" width="26" height="2"/><path d="M33,29H3a1,1,0,0,0,0,2H33a1,1,0,0,0,0-2Z"/><path d="M22.15,11.58h3.21L18.65,7.72a.8.8,0,0,0-.8,0l-6.72,3.86h3.21l3.9-2.24Z"/><path d="M22.5,6c0-.16,0-.32,0-.48L18,2.92,2.5,11.83a1,1,0,1,0,1,1.73L18,5.23,22.77,8A7.49,7.49,0,0,1,22.5,6Z"/><path d="M31.94,13.24l.56.32a1,1,0,0,0,1.44-1.19A7.45,7.45,0,0,1,31.94,13.24Z"/>', solid: '<path d="M3.5,13.56,5,12.68V16H31V12.71l1.48.85a1,1,0,0,0,1-1.73L18,2.92,2.5,11.83a1,1,0,1,0,1,1.73ZM17.85,7.11a.8.8,0,0,1,.8,0L25.37,11H22.15l-3.9-2.24L14.35,11H11.14Z"/><path d="M32.85,27H32v-.85A1.15,1.15,0,0,0,30.85,25H28V17.63H24V25H20V17.63H16V25H12V17.63H8V25H5.15A1.15,1.15,0,0,0,4,26.15V27H3.15A1.15,1.15,0,0,0,2,28.15V31H34V28.15A1.15,1.15,0,0,0,32.85,27Z"/>', solidAlerted: '<path d="M32.85,27H32v-.85A1.15,1.15,0,0,0,30.85,25H28V17.63H24V25H20V17.63H16V25H12V17.63H8V25H5.15A1.15,1.15,0,0,0,4,26.15V27H3.15A1.15,1.15,0,0,0,2,28.15V31H34V28.15A1.15,1.15,0,0,0,32.85,27Z"/><path d="M22.5,15a3.51,3.51,0,0,1-3-5.26l.14-.24-1.35-.78L14.35,11H11.14l6.72-3.86a.8.8,0,0,1,.8,0l1.75,1,1.65-2.86L18,2.92,2.5,11.83a1,1,0,1,0,1,1.73L5,12.68V16H31V15Z"/>', solidBadged: '<path d="M32.85,27H32v-.85A1.15,1.15,0,0,0,30.85,25H28V17.63H24V25H20V17.63H16V25H12V17.63H8V25H5.15A1.15,1.15,0,0,0,4,26.15V27H3.15A1.15,1.15,0,0,0,2,28.15V31H34V28.15A1.15,1.15,0,0,0,32.85,27Z"/><path d="M30,13.5A7.47,7.47,0,0,1,24.39,11H22.15l-3.9-2.24L14.35,11H11.14l6.72-3.86a.8.8,0,0,1,.8,0l5,2.87A7.45,7.45,0,0,1,22.5,6c0-.16,0-.32,0-.48L18,2.92,2.5,11.83a1,1,0,1,0,1,1.73L5,12.68V16H31V13.42A7.53,7.53,0,0,1,30,13.5Z"/><path d="M31.94,13.24l.56.32a1,1,0,0,0,1.44-1.19A7.45,7.45,0,0,1,31.94,13.24Z"/>' })];

// node_modules/@cds/core/icon/shapes/bitcoin.js
var h19 = ["bitcoin", n23({ outline: '<path d="M24.11,16.88A5.49,5.49,0,0,0,21,7V4a1,1,0,0,0-2,0V7H16V4a1,1,0,0,0-2,0V7H11a1,1,0,0,0-1,1V28a1,1,0,0,0,1,1h3v3a1,1,0,0,0,2,0V29h3v3a1,1,0,0,0,2,0V29h.08A6.07,6.07,0,0,0,27,22.81v-.62A6.25,6.25,0,0,0,24.11,16.88ZM12,9h8.69a3.59,3.59,0,0,1,3.43,2.36A3.51,3.51,0,0,1,20.79,16H12ZM25,22.81A4.08,4.08,0,0,1,21.06,27H12V18h9.06A4.08,4.08,0,0,1,25,22.19Z"/>', solid: '<path d="M21.18,18.47H14.5v6h6.68a2.7,2.7,0,0,0,2.63-2.77v-.48A2.71,2.71,0,0,0,21.18,18.47Z"/><path d="M23,13.75a2.24,2.24,0,0,0-2.23-2.25H14.5V16h6.3A2.22,2.22,0,0,0,23,13.75Z"/><path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm8.31,19.73A5.22,5.22,0,0,1,21.18,27H21v1.9a1,1,0,0,1-2,0V27H17v1.9a1,1,0,0,1-2,0V27H13.25A1.25,1.25,0,0,1,12,25.75V17.23h0v-7A1.25,1.25,0,0,1,13.25,9H15V7.07a1,1,0,0,1,2,0V9h2V7.07a1,1,0,0,1,2,0V9a4.72,4.72,0,0,1,3.2,8,5.31,5.31,0,0,1,2.11,4.24Z"/>' })];

// node_modules/@cds/core/icon/shapes/calculator.js
var n32 = ["calculator", n23({ outline: '<path d="M28,2H8A2,2,0,0,0,6,4V32a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V4A2,2,0,0,0,28,2ZM8,32V4H28V32Z"/><path d="M12,8H25.67V6H11a1,1,0,0,0-1,1v4.67h2Z"/><polygon points="12 16 10 16 10 18 14 18 14 14 12 14 12 16"/><polygon points="24 16 22 16 22 18 26 18 26 14 24 14 24 16"/><polygon points="18 16 16 16 16 18 20 18 20 14 18 14 18 16"/><polygon points="12 22 10 22 10 24 14 24 14 20 12 20 12 22"/><polygon points="24 22 22 22 22 24 26 24 26 20 24 20 24 22"/><polygon points="18 22 16 22 16 24 20 24 20 20 18 20 18 22"/><polygon points="12 28 10 28 10 30 14 30 14 26 12 26 12 28"/><polygon points="24 28 22 28 22 30 26 30 26 26 24 26 24 28"/><polygon points="18 28 16 28 16 30 20 30 20 26 18 26 18 28"/>', solid: '<path d="M28,2H8A2,2,0,0,0,6,4V32a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V4A2,2,0,0,0,28,2ZM12,28H10V26h2Zm0-6H10V20h2Zm0-6H10V14h2Zm7,12H17V26h2Zm0-6H17V20h2Zm0-6H17V14h2Zm7,12H24V26h2Zm0-6H24V20h2Zm0-6H24V14h2Zm0-7H10V5H26Z"/>' })];

// node_modules/@cds/core/icon/shapes/coin-bag.js
var t68 = ["coin-bag", n23({ outline: '<path d="M21.6,29a1,1,0,0,0-1-1h-6a1,1,0,0,0,0,2h6A1,1,0,0,0,21.6,29Z"/><path d="M22.54,24h-6a1,1,0,0,0,0,2h6a1,1,0,0,0,0-2Z"/><path d="M22,32H16a1,1,0,0,0,0,2h6a1,1,0,0,0,0-2Z"/><path d="M32.7,32h-7a1,1,0,0,0,0,2h7a1,1,0,0,0,0-2Z"/><path d="M33.7,28h-7a1,1,0,0,0,0,2h7a1,1,0,0,0,0-2Z"/><path d="M33.74,26a28,28,0,0,0-2.82-10.12A20.24,20.24,0,0,0,24.6,8.71L27,3.42a1,1,0,0,0-.07-1A1,1,0,0,0,26.13,2H9.8a1,1,0,0,0-.91,1.42l2.45,5.31a20.33,20.33,0,0,0-6.28,7.15c-2.15,4-2.82,8.89-3,12.28a3.6,3.6,0,0,0,1,2.71A3.79,3.79,0,0,0,5.8,31.94H12V30H5.72a1.68,1.68,0,0,1-1.21-.52,1.62,1.62,0,0,1-.45-1.23c.14-2.61.69-7.58,2.76-11.45A18,18,0,0,1,13.08,10h1a30.81,30.81,0,0,0-1.87,2.92,22.78,22.78,0,0,0-1.47,3.34l1.37.92a24,24,0,0,1,1.49-3.47A29.1,29.1,0,0,1,16.05,10h1a21.45,21.45,0,0,1,1.41,5,22.54,22.54,0,0,1,.32,3.86l1.58-1.11a24.15,24.15,0,0,0-.32-3A24.82,24.82,0,0,0,18.76,10h.78l.91-2H13.21L11.36,4H24.57l-2.5,5.47a9.93,9.93,0,0,1,1.23.78,18.63,18.63,0,0,1,5.86,6.57A26.59,26.59,0,0,1,31.73,26Z"/>', solid: '<path d="M24.89,26h7.86c-.66-8.71-4.41-14.12-9.22-17.32L25.72,3.9a1,1,0,0,0-.91-1.4H11.1a1,1,0,0,0-.91,1.4l1.2,2.6H21.51l-.9,2H18.76A24.9,24.9,0,0,1,20,13.19a24.49,24.49,0,0,1,.32,3l-1.58,1.11a22.54,22.54,0,0,0-.32-3.86A21.74,21.74,0,0,0,17,8.5h-1a28.22,28.22,0,0,0-2.48,3.7,23.91,23.91,0,0,0-1.49,3.46l-1.37-.91a22.78,22.78,0,0,1,1.47-3.34A30.81,30.81,0,0,1,14.05,8.5H12.3l.08.17C7.08,12.2,3.05,18.4,3.05,28.75A1.65,1.65,0,0,0,4.61,30.5h8A2.67,2.67,0,0,1,14.21,26a2.67,2.67,0,0,1-.37-1.34,2.7,2.7,0,0,1,2.7-2.7h6a2.7,2.7,0,0,1,2.7,2.7A2.63,2.63,0,0,1,24.89,26Z"/><path d="M21.6,28.5a1,1,0,0,0-1-1h-6a1,1,0,0,0,0,2h6A1,1,0,0,0,21.6,28.5Z"/><path d="M22.54,23.5h-6a1,1,0,0,0,0,2h6a1,1,0,0,0,0-2Z"/><path d="M22,31.5H16a1,1,0,0,0,0,2h6a1,1,0,0,0,0-2Z"/><path d="M32.7,31.5h-7a1,1,0,0,0,0,2h7a1,1,0,0,0,0-2Z"/><path d="M33.7,27.5h-7a1,1,0,0,0,0,2h7a1,1,0,0,0,0-2Z"/>' })];

// node_modules/@cds/core/icon/shapes/credit-card.js
var e46 = ["credit-card", n23({ outline: '<path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6Zm0,2,0,12H4L4,8ZM4,28V24H32v4Z"/>', solid: '<rect x="7" y="3" width="22" height="30" rx="0.96" ry="0.96" transform="translate(36) rotate(90)" fill="none" stroke="#000" stroke-linejoin="round" stroke-width="2"/><path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6Zm0,18H4V20H32Z"/>' })];

// node_modules/@cds/core/icon/shapes/dollar.js
var c17 = ["dollar", n23({ outline: '<path d="M26,21.15a6.91,6.91,0,0,0-4.38-3.32A26,26,0,0,0,19,17.19V8.12A10.05,10.05,0,0,1,23.86,10a1,1,0,0,0,1.33-1.5A11.75,11.75,0,0,0,19,6.1V3a1,1,0,0,0-2,0V6c-4.4.1-6.83,2.29-7.57,4.18A5.56,5.56,0,0,0,11.66,17,13.2,13.2,0,0,0,17,18.84V28a12.3,12.3,0,0,1-7.14-2.74A1,1,0,1,0,8.49,26.7,14.09,14.09,0,0,0,17,30v3a1,1,0,0,0,2,0V30c2.82-.19,6.07-1.09,7.3-4.76A5.33,5.33,0,0,0,26,21.15ZM12.79,15.32a3.57,3.57,0,0,1-1.49-4.39C11.41,10.63,12.53,8.12,17,8v8.8A10.7,10.7,0,0,1,12.79,15.32ZM24.4,24.56c-.72,2.14-2.32,3.17-5.4,3.4V19.23c.64.14,1.3.3,2,.51a5,5,0,0,1,3.19,2.32A3.34,3.34,0,0,1,24.4,24.56Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm7.65,21.59c-1,3-3.61,3.84-5.9,4v2a1.25,1.25,0,0,1-2.5,0V27.59A11.47,11.47,0,0,1,11,25a1.25,1.25,0,1,1,1.71-1.83,9.11,9.11,0,0,0,4.55,1.94V18.83a9.63,9.63,0,0,1-3.73-1.41,4.8,4.8,0,0,1-1.91-5.84c.59-1.51,2.42-3.23,5.64-3.51V6.25a1.25,1.25,0,0,1,2.5,0V8.11a9.67,9.67,0,0,1,4.9,2A1.25,1.25,0,0,1,23,11.95a7.14,7.14,0,0,0-3.24-1.31v6.13c.6.13,1.24.27,1.91.48a5.85,5.85,0,0,1,3.69,2.82A4.64,4.64,0,0,1,25.65,23.59Z"/><path d="M20.92,19.64c-.4-.12-.79-.22-1.17-.3v5.76c2-.2,3.07-.9,3.53-2.3a2.15,2.15,0,0,0-.15-1.58A3.49,3.49,0,0,0,20.92,19.64Z"/><path d="M13.94,12.48a2.31,2.31,0,0,0,1,2.87,6.53,6.53,0,0,0,2.32.92V10.55C15.16,10.8,14.19,11.84,13.94,12.48Z"/>' })];

// node_modules/@cds/core/icon/shapes/dollar-bill.js
var a33 = ["dollar-bill", n23({ outline: '<path d="M32,8H4a2,2,0,0,0-2,2V26a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V10A2,2,0,0,0,32,8Zm0,6a4.25,4.25,0,0,1-3.9-4H32Zm0,1.62v4.83A5.87,5.87,0,0,0,26.49,26h-17A5.87,5.87,0,0,0,4,20.44V15.6A5.87,5.87,0,0,0,9.51,10h17A5.87,5.87,0,0,0,32,15.6ZM7.9,10A4.25,4.25,0,0,1,4,14V10ZM4,22.06A4.25,4.25,0,0,1,7.9,26H4ZM28.1,26A4.25,4.25,0,0,1,32,22.06V26Z"/><path d="M18,10.85c-3.47,0-6.3,3.21-6.3,7.15s2.83,7.15,6.3,7.15,6.3-3.21,6.3-7.15S21.47,10.85,18,10.85Zm0,12.69c-2.59,0-4.7-2.49-4.7-5.55s2.11-5.55,4.7-5.55,4.7,2.49,4.7,5.55S20.59,23.55,18,23.55Z"/>', solid: '<path d="M32,8H4a2,2,0,0,0-2,2V26a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V10A2,2,0,0,0,32,8ZM4,26V21.15A5.18,5.18,0,0,1,8.79,26ZM4,14.85V10H8.79A5.18,5.18,0,0,1,4,14.85ZM18,25.15c-3.47,0-6.3-3.21-6.3-7.15s2.83-7.15,6.3-7.15,6.3,3.21,6.3,7.15S21.47,25.15,18,25.15ZM32,26H27.25A5.18,5.18,0,0,1,32,21.15Zm0-11.15A5.18,5.18,0,0,1,27.25,10H32Z"/><ellipse cx="18" cy="18" rx="4" ry="4.72"/>' })];

// node_modules/@cds/core/icon/shapes/e-check.js
var e47 = ["e-check", n23({ outline: '<rect x="16" y="16" width="15" height="2"/><rect x="20" y="21" width="11" height="2"/><path d="M34,8H12.93a8.35,8.35,0,0,1,.79,2H33V26H3V19.9a7.83,7.83,0,0,1-2-1.34V27a1,1,0,0,0,1,1H34a1,1,0,0,0,1-1V9A1,1,0,0,0,34,8Z"/><path d="M6.57,18.68a6.17,6.17,0,0,0,4.32-1.59,1.2,1.2,0,0,0,.36-.84,1.08,1.08,0,0,0-1.09-1.11,1,1,0,0,0-.71.25,4.32,4.32,0,0,1-2.84,1,3.35,3.35,0,0,1-3.46-3h7.53A1.29,1.29,0,0,0,12,12.06,5.68,5.68,0,0,0,6.27,6.14,6,6,0,0,0,.4,12.4v0A6,6,0,0,0,6.57,18.68ZM6.25,8.39c1.82,0,2.87,1.39,3,3.16H3.13C3.38,9.69,4.56,8.39,6.25,8.39Z"/>', solid: '<path d="M34,8H12.91a8.61,8.61,0,0,1,1.2,4.39,8,8,0,0,1-7.78,8.27A7.51,7.51,0,0,1,1,18.41V27a1,1,0,0,0,1,1H34a1,1,0,0,0,1-1V9A1,1,0,0,0,34,8ZM31,23H20V21H31Zm0-5H16V16H31Z"/><path d="M6.57,18.68A6,6,0,0,1,.4,12.44v0A6,6,0,0,1,6.27,6.14,5.68,5.68,0,0,1,12,12.06a1.29,1.29,0,0,1-1.3,1.32H3.15a3.35,3.35,0,0,0,3.46,3,4.32,4.32,0,0,0,2.84-1,1,1,0,0,1,.71-.25,1.08,1.08,0,0,1,1.09,1.11,1.2,1.2,0,0,1-.36.84A6.17,6.17,0,0,1,6.57,18.68ZM9.3,11.55c-.18-1.77-1.23-3.16-3-3.16s-2.87,1.3-3.12,3.16Z"/>' })];

// node_modules/@cds/core/icon/shapes/employee.js
var h20 = ["employee", n23({ outline: '<path d="M16.43,16.69a7,7,0,1,1,7-7A7,7,0,0,1,16.43,16.69Zm0-11.92a5,5,0,1,0,5,5A5,5,0,0,0,16.43,4.77Z"/><path d="M22,17.9A25.41,25.41,0,0,0,5.88,19.57a4.06,4.06,0,0,0-2.31,3.68V29.2a1,1,0,1,0,2,0V23.25a2,2,0,0,1,1.16-1.86,22.91,22.91,0,0,1,9.7-2.11,23.58,23.58,0,0,1,5.57.66Z"/><rect x="22.14" y="27.41" width="6.14" height="1.4"/><path d="M33.17,21.47H28v2h4.17v8.37H18V23.47h6.3v.42a1,1,0,0,0,2,0V20a1,1,0,0,0-2,0v1.47H17a1,1,0,0,0-1,1V32.84a1,1,0,0,0,1,1H33.17a1,1,0,0,0,1-1V22.47A1,1,0,0,0,33.17,21.47Z"/>', solid: '<circle cx="16.86" cy="9.73" r="6.46"/><rect x="21" y="28" width="7" height="1.4"/><path d="M15,30v3a1,1,0,0,0,1,1H33a1,1,0,0,0,1-1V23a1,1,0,0,0-1-1H26V20.53a1,1,0,0,0-2,0V22H22V18.42A32.12,32.12,0,0,0,16.86,18a26,26,0,0,0-11,2.39,3.28,3.28,0,0,0-1.88,3V30Zm17,2H17V24h7v.42a1,1,0,0,0,2,0V24h6Z"/>' })];

// node_modules/@cds/core/icon/shapes/employee-group.js
var t69 = ["employee-group", n23({ outline: '<path d="M18.42,16.31a5.7,5.7,0,1,1,5.76-5.7A5.74,5.74,0,0,1,18.42,16.31Zm0-9.4a3.7,3.7,0,1,0,3.76,3.7A3.74,3.74,0,0,0,18.42,6.91Z"/><path d="M18.42,16.31a5.7,5.7,0,1,1,5.76-5.7A5.74,5.74,0,0,1,18.42,16.31Zm0-9.4a3.7,3.7,0,1,0,3.76,3.7A3.74,3.74,0,0,0,18.42,6.91Z"/><path d="M21.91,17.65a20.6,20.6,0,0,0-13,2A1.77,1.77,0,0,0,8,21.25v3.56a1,1,0,0,0,2,0V21.38a18.92,18.92,0,0,1,12-1.68Z"/><path d="M33,22H26.3V20.52a1,1,0,0,0-2,0V22H17a1,1,0,0,0-1,1V33a1,1,0,0,0,1,1H33a1,1,0,0,0,1-1V23A1,1,0,0,0,33,22ZM32,32H18V24h6.3v.41a1,1,0,0,0,2,0V24H32Z"/><rect x="21.81" y="27.42" width="5.96" height="1.4"/><path d="M10.84,12.24a18,18,0,0,0-7.95,2A1.67,1.67,0,0,0,2,15.71v3.1a1,1,0,0,0,2,0v-2.9a16,16,0,0,1,7.58-1.67A7.28,7.28,0,0,1,10.84,12.24Z"/><path d="M33.11,14.23a17.8,17.8,0,0,0-7.12-2,7.46,7.46,0,0,1-.73,2A15.89,15.89,0,0,1,32,15.91v2.9a1,1,0,1,0,2,0v-3.1A1.67,1.67,0,0,0,33.11,14.23Z"/><path d="M10.66,10.61c0-.23,0-.45,0-.67a3.07,3.07,0,0,1,.54-6.11,3.15,3.15,0,0,1,2.2.89,8.16,8.16,0,0,1,1.7-1.08,5.13,5.13,0,0,0-9,3.27,5.1,5.1,0,0,0,4.7,5A7.42,7.42,0,0,1,10.66,10.61Z"/><path d="M24.77,1.83a5.17,5.17,0,0,0-3.69,1.55,7.87,7.87,0,0,1,1.9,1,3.14,3.14,0,0,1,4.93,2.52,3.09,3.09,0,0,1-1.79,2.77,7.14,7.14,0,0,1,.06.93,7.88,7.88,0,0,1-.1,1.2,5.1,5.1,0,0,0,3.83-4.9A5.12,5.12,0,0,0,24.77,1.83Z"/>', solid: '<ellipse cx="18" cy="11.28" rx="4.76" ry="4.7"/><path d="M10.78,11.75c.16,0,.32,0,.48,0,0-.15,0-.28,0-.43a6.7,6.7,0,0,1,3.75-6,4.62,4.62,0,1,0-4.21,6.46Z"/><path d="M24.76,11.28c0,.15,0,.28,0,.43.16,0,.32,0,.48,0A4.58,4.58,0,1,0,21,5.29,6.7,6.7,0,0,1,24.76,11.28Z"/><path d="M22.29,16.45a21.45,21.45,0,0,1,5.71,2,2.71,2.71,0,0,1,.68.53H34V15.56a.72.72,0,0,0-.38-.64,18,18,0,0,0-8.4-2.05l-.66,0A6.66,6.66,0,0,1,22.29,16.45Z"/><path d="M6.53,20.92A2.76,2.76,0,0,1,8,18.47a21.45,21.45,0,0,1,5.71-2,6.66,6.66,0,0,1-2.27-3.55l-.66,0a18,18,0,0,0-8.4,2.05.72.72,0,0,0-.38.64V22H6.53Z"/><rect x="21.46" y="26.69" width="5.96" height="1.4"/><path d="M32.81,21.26H25.94v-1a1,1,0,0,0-2,0v1H22V18.43A20.17,20.17,0,0,0,18,18a19.27,19.27,0,0,0-9.06,2.22.76.76,0,0,0-.41.68v5.61h7.11v6.09a1,1,0,0,0,1,1H32.81a1,1,0,0,0,1-1V22.26A1,1,0,0,0,32.81,21.26Zm-1,10.36H17.64V23.26h6.3v.91a1,1,0,0,0,2,0v-.91h5.87Z"/>' })];

// node_modules/@cds/core/icon/shapes/euro.js
var o46 = ["euro", n23({ outline: '<path d="M31.48,28.49a1,1,0,0,0-1.38-.32A12,12,0,0,1,12.45,22H24.16a1,1,0,0,0,0-2H11.93a11.16,11.16,0,0,1,0-4H24.16a1,1,0,0,0,0-2H12.45A12,12,0,0,1,30.06,7.8a1,1,0,0,0,1.06-1.7A14,14,0,0,0,10.34,14H3.54a1,1,0,1,0,0,2H9.91a14,14,0,0,0-.16,2,14,14,0,0,0,.16,2H3.54a1,1,0,1,0,0,2h6.8a14,14,0,0,0,20.83,7.87A1,1,0,0,0,31.48,28.49Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm7.42,25.16A10.88,10.88,0,0,1,9.23,21H5.84a1,1,0,0,1,0-2h3c0-.35-.05-.71-.05-1.07s0-.63,0-.93h-3a1,1,0,0,1,0-2H9.19A10.86,10.86,0,0,1,25.38,8.69a1.25,1.25,0,0,1-1.32,2.12A8.36,8.36,0,0,0,11.82,15h9.36a1,1,0,0,1,0,2H11.33a7.72,7.72,0,0,0,0,2h9.82a1,1,0,0,1,0,2H11.87a8.36,8.36,0,0,0,12.22,4,1.25,1.25,0,1,1,1.33,2.12Z"/>' })];

// node_modules/@cds/core/icon/shapes/factory.js
var e48 = ["factory", n23({ outline: '<path d="M33.47,7.37a1,1,0,0,0-1,.06L23,13.77V8.26a1,1,0,0,0-1.64-.77L13.48,14H10V4.62a1,1,0,0,0-.78-1l-4-.9a1,1,0,0,0-.85.2A1,1,0,0,0,4,3.73V14H3a1,1,0,0,0-1,1V31a1,1,0,0,0,1,1H33a1,1,0,0,0,1-1V8.26A1,1,0,0,0,33.47,7.37ZM6,5l2,.44V14H6ZM32,30H4V16h9.83a1,1,0,0,0,.64-.23L21,10.37v5.28a1,1,0,0,0,1.56.83L32,10.14Z"/><rect x="6" y="17.99" width="8" height="2"/><rect x="6" y="21.99" width="8" height="2"/><rect x="6" y="25.99" width="8" height="2"/><rect x="19" y="18.99" width="2" height="3"/><rect x="19" y="24.99" width="2" height="3"/><rect x="23" y="18.99" width="2" height="3"/><rect x="23" y="24.99" width="2" height="3"/><rect x="27" y="18.99" width="2" height="3"/><rect x="27" y="24.99" width="2" height="3"/>', solid: '<path d="M32.45,8.44,22,15.3V9.51a1,1,0,0,0-1.63-.78L14.07,14H10V4.06L4,2.71V14H2V31a1,1,0,0,0,1,1H33a1,1,0,0,0,1-1V9.27A1,1,0,0,0,32.45,8.44ZM14,29H6V27h8Zm0-4H6V23h8Zm0-4H6V19h8Zm8,8H20V26h2Zm0-6H20V20h2Zm4,6H24V26h2Zm0-6H24V20h2Zm4,6H28V26h2Zm0-6H28V20h2Z"/>' })];

// node_modules/@cds/core/icon/shapes/peso.js
var H10 = ["peso", n23({ outline: '<path d="M31,13.2H27.89A6.81,6.81,0,0,0,28,12a7.85,7.85,0,0,0-.1-1.19h2.93a.8.8,0,0,0,0-1.6H27.46A8.44,8.44,0,0,0,19.57,4H11a1,1,0,0,0-1,1V9.2H7a.8.8,0,0,0,0,1.6h3v2.4H7a.8.8,0,0,0,0,1.6h3V31a1,1,0,0,0,2,0V20h7.57a8.45,8.45,0,0,0,7.89-5.2H31a.8.8,0,0,0,0-1.6ZM12,6h7.57a6.51,6.51,0,0,1,5.68,3.2H12Zm0,4.8H25.87a5.6,5.6,0,0,1,0,2.4H12ZM19.57,18H12V14.8H25.25A6.51,6.51,0,0,1,19.57,18Z"/>', solid: '<path d="M14.18,13.8V16h9.45a5.26,5.26,0,0,0,.08-.89,4.72,4.72,0,0,0-.2-1.31Z"/><path d="M14.18,19.7h5.19a4.28,4.28,0,0,0,3.5-1.9H14.18Z"/><path d="M19.37,10.51H14.18V12h8.37A4.21,4.21,0,0,0,19.37,10.51Z"/><path d="M17.67,2a16,16,0,1,0,16,16A16,16,0,0,0,17.67,2Zm10.5,15.8H25.7a6.87,6.87,0,0,1-6.33,4.4H14.18v6.54a1.25,1.25,0,1,1-2.5,0V17.8H8.76a.9.9,0,1,1,0-1.8h2.92V13.8H8.76a.9.9,0,1,1,0-1.8h2.92V9.26A1.25,1.25,0,0,1,12.93,8h6.44a6.84,6.84,0,0,1,6.15,4h2.65a.9.9,0,0,1,0,1.8H26.09a6.91,6.91,0,0,1,.12,1.3,6.8,6.8,0,0,1-.06.9h2a.9.9,0,0,1,0,1.8Z"/>' })];

// node_modules/@cds/core/icon/shapes/piggy-bank.js
var A11 = ["piggy-bank", n23({ outline: '<path d="M19.72,10.47a11.65,11.65,0,0,0-6.31.52A.8.8,0,1,0,14,12.48,10.11,10.11,0,0,1,19.44,12a.8.8,0,1,0,.28-1.57Z"/><circle cx="25.38" cy="16.71" r="1.36"/><path d="M35.51,18.63a1,1,0,0,0-.84-.44,3.42,3.42,0,0,1-2.09-1.12,17.35,17.35,0,0,1-2.63-3.78l2.88-4.5A1.89,1.89,0,0,0,33,7a1.77,1.77,0,0,0-1.33-1,10.12,10.12,0,0,0-5.39.75,12.72,12.72,0,0,0-2.72,1.63,16.94,16.94,0,0,0-5.16-1.39C11.31,6.3,4.83,10.9,4,17H4a2.56,2.56,0,0,1-1.38-1.53,1.81,1.81,0,0,1,.14-1.4,1.19,1.19,0,0,1,.43-.43,1.08,1.08,0,0,0-1.12-1.85A3.31,3.31,0,0,0,.91,13a4,4,0,0,0-.33,3.08A4.76,4.76,0,0,0,3,18.95l.92.46a17.58,17.58,0,0,0,1.82,7l.17.38A23,23,0,0,0,9.2,31.88a1,1,0,0,0,.75.34h4.52a1,1,0,0,0,.92-1.38L15,29.94l1.18.13a20.33,20.33,0,0,0,4,0c.37.6.77,1.2,1.21,1.79a1,1,0,0,0,.8.41h4.34a1,1,0,0,0,.92-1.39c-.17-.4-.34-.83-.47-1.2-.18-.53-.32-1-.43-1.45A13.18,13.18,0,0,0,29.56,26a12.5,12.5,0,0,0,3,0,1,1,0,0,0,.78-.62l2.26-5.81A1,1,0,0,0,35.51,18.63Zm-3.78,5.44a11.37,11.37,0,0,1-2.35-.11h0a8.2,8.2,0,0,1-2.53-.87,1,1,0,0,0-.93,1.77,11.72,11.72,0,0,0,1.29.58,8,8,0,0,1-1.8,1.16l-1.06.48s.49,2.19.82,3.16H22.79c-.24-.34-1.45-2.36-1.45-2.36l-.67.09a18.53,18.53,0,0,1-4.25.12c-.66-.06-1.76-.2-2.62-.35l-1.55-.27s.63,2.43.75,2.74v0H10.42A20.57,20.57,0,0,1,7.76,26l-.18-.39A14.62,14.62,0,0,1,6,17.48c.54-5.19,6.12-9.11,12.19-8.54a15.47,15.47,0,0,1,5.08,1.48l.62.29.5-.47A10.29,10.29,0,0,1,27,8.54a8.25,8.25,0,0,1,4-.65l-3.38,5.29.25.5h0a21.16,21.16,0,0,0,3.31,4.84,6.49,6.49,0,0,0,2.14,1.39Z"/>', solid: '<path d="M35,18.87A5.83,5.83,0,0,1,33,17.61a21.63,21.63,0,0,1-3.29-4.84l3.39-5.29a.9.9,0,0,0-.54-1.38,9.67,9.67,0,0,0-5.13.72,12,12,0,0,0-3.13,2A17.37,17.37,0,0,0,18.6,7.15C11.8,6.52,5.27,10.9,4.54,17l-.14-.07A2.76,2.76,0,0,1,2.9,15.29a2,2,0,0,1,.15-1.55,1.32,1.32,0,0,1,.47-.48,1.08,1.08,0,1,0-1.12-1.85,3.45,3.45,0,0,0-1.23,1.25A4.16,4.16,0,0,0,.84,15.9a5,5,0,0,0,2.57,3l1,.54a18.62,18.62,0,0,0,2,7.3,23,23,0,0,0,3,4.79,1,1,0,0,0,.8.38h3.61a.52.52,0,0,0,.4-.75L14,30.38a11,11,0,0,1-.33-1.18c.91.16,2.08.31,2.87.38a20.07,20.07,0,0,0,3.12,0c.39.7.79,1.33,1.15,1.85a.93.93,0,0,0,.77.41h3.11a.65.65,0,0,0,.61-.85c-.23-.74-.53-1.75-.71-2.37a15.9,15.9,0,0,0,3.75-1.76c.16-.11.32-.26.48-.39a13.77,13.77,0,0,1-2.42-1,.8.8,0,0,1,.74-1.42,11.64,11.64,0,0,0,3.18,1.1,13.31,13.31,0,0,0,2.68.12,1,1,0,0,0,.9-.66l1.73-4.44A1,1,0,0,0,35,18.87ZM13.79,11.59a.86.86,0,0,1-.3.05.85.85,0,0,1-.3-1.64,12.41,12.41,0,0,1,6.69-.55.85.85,0,1,1-.3,1.67A10.75,10.75,0,0,0,13.79,11.59Zm12.52,6.12a1.44,1.44,0,1,1,1.44-1.44A1.44,1.44,0,0,1,26.32,17.72Z"/>' })];

// node_modules/@cds/core/icon/shapes/pound.js
var h21 = ["pound", n23({ outline: '<path d="M27.9,30H13.4A8.45,8.45,0,0,0,15,24.65V21h4.31a1,1,0,0,0,0-2H15V11.31A5.24,5.24,0,0,1,20.21,6,5.19,5.19,0,0,1,24,7.73a1,1,0,0,0,1.48-1.35A7.19,7.19,0,0,0,13,11.31V19H8.72a1,1,0,1,0,0,2H13v3.65C13,29.38,10.12,30,10,30a1,1,0,0,0,.17,2H27.9a1,1,0,1,0,0-2Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm6.5,25.92H11.74a1.25,1.25,0,0,1-.22-2.48c.15,0,1.72-.49,1.72-3.54V19h-2.5a1,1,0,0,1,0-2h2.5V11.88a5.85,5.85,0,0,1,5.72-6,5.63,5.63,0,0,1,4.21,1.94A1.25,1.25,0,1,1,21.3,9.51,3.08,3.08,0,0,0,19,8.42a3.35,3.35,0,0,0-3.22,3.46V17h3a1,1,0,0,1,0,2h-3v2.9A7.65,7.65,0,0,1,15,25.42H24.5a1.25,1.25,0,0,1,0,2.5Z"/>' })];

// node_modules/@cds/core/icon/shapes/ruble.js
var H11 = ["ruble", n23({ outline: '<path d="M20.57,20A8.23,8.23,0,0,0,29,12a8.23,8.23,0,0,0-8.43-8H12a1,1,0,0,0-1,1V18H9a1,1,0,0,0,0,2h2v2H9a1,1,0,0,0,0,2h2v7a1,1,0,0,0,2,0V24h9a1,1,0,0,0,0-2H13V20ZM13,6h7.57A6.24,6.24,0,0,1,27,12a6.23,6.23,0,0,1-6.43,6H13Z"/>', solid: '<path d="M20.75,9.25H15v8.81h5.79a4.66,4.66,0,0,0,4.86-4.4A4.65,4.65,0,0,0,20.75,9.25Z"/><path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm2.75,18.56H15V22h8.29a1,1,0,0,1,0,2H15v5a1.25,1.25,0,0,1-2.5,0V24H11.25a1,1,0,0,1,0-2h1.21V20.56H11.25a1.25,1.25,0,0,1,0-2.5h1.21V8a1.25,1.25,0,0,1,1.25-1.25h7a7.14,7.14,0,0,1,7.36,6.9A7.15,7.15,0,0,1,20.75,20.56Z"/>' })];

// node_modules/@cds/core/icon/shapes/rupee.js
var e49 = ["rupee", n23({ outline: '<path d="M28,8H24.14A7.52,7.52,0,0,0,22.6,6H28a1,1,0,0,0,0-2H10a1,1,0,0,0,0,2h7.55a5.42,5.42,0,0,1,4.2,2H10a1,1,0,0,0,0,2H22.79A5.54,5.54,0,0,1,23,11.51,5.48,5.48,0,0,1,17.55,17H11.14a1,1,0,0,0-.75,1.66L22.06,32a1,1,0,1,0,1.5-1.32L13.35,19h4.21a7.51,7.51,0,0,0,7.3-9H28a1,1,0,0,0,0-2Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm5.88,9H26a1,1,0,0,1,0,2H24.26c0,.06,0,.12,0,.19a6.09,6.09,0,0,1-6,6.2h-2l6.82,8.06a1.25,1.25,0,0,1-1.91,1.62L12.63,18.94a1.25,1.25,0,0,1,1-2.06h4.71a3.59,3.59,0,0,0,3.48-3.69c0-.07,0-.13,0-.2h-9a1,1,0,0,1,0-2h8.32a3.41,3.41,0,0,0-2.78-1.5H12.75a1.25,1.25,0,0,1,0-2.5H26a1,1,0,0,1,0,2H22.68A6.23,6.23,0,0,1,23.88,11Z"/>' })];

// node_modules/@cds/core/icon/shapes/shopping-bag.js
var h22 = ["shopping-bag", n23({ outline: '<path d="M25,12V9.05a7,7,0,1,0-14,0v7a1,1,0,0,0,2,0V14h8V12H13V9.05a5,5,0,1,1,10,0V16a1,1,0,1,0,2,0V14h5V32H6V14H9V12H4V32.09A1.91,1.91,0,0,0,5.91,34H30.09A1.91,1.91,0,0,0,32,32.09V12Z"/>', solid: '<path d="M13,9.22a5,5,0,1,1,10,0V12h2V9.22a7,7,0,1,0-14,0V12h2Z"/><path d="M25,12v3.1a1,1,0,1,1-2,0V12H13v3.1a1,1,0,0,1-2,0V12H4V32a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V12Z"/>' })];

// node_modules/@cds/core/icon/shapes/shopping-cart.js
var a34 = ["shopping-cart", n23({ outline: '<circle cx="13.33" cy="29.75" r="2.25"/><circle cx="27" cy="29.75" r="2.25"/><path d="M33.08,5.37A1,1,0,0,0,32.31,5H11.49l.65,2H31L28.33,19h-15L8.76,4.53a1,1,0,0,0-.66-.65L4,2.62a1,1,0,1,0-.59,1.92L7,5.64l4.59,14.5L9.95,21.48l-.13.13A2.66,2.66,0,0,0,9.74,25,2.75,2.75,0,0,0,12,26H28.69a1,1,0,0,0,0-2H11.84a.67.67,0,0,1-.56-1l2.41-2H29.13a1,1,0,0,0,1-.78l3.17-14A1,1,0,0,0,33.08,5.37Z"/>', outlineAlerted: '<circle cx="13.33" cy="29.75" r="2.25"/><circle cx="27" cy="29.75" r="2.25"/><polygon points="20.71 7 21.87 5 11.49 5 12.14 7 20.71 7"/><path d="M29.15,15.4,28.33,19h-15L8.76,4.53a1,1,0,0,0-.66-.65L4,2.62a1,1,0,1,0-.59,1.92L7,5.64l4.59,14.5L9.95,21.48l-.13.13A2.66,2.66,0,0,0,9.74,25,2.75,2.75,0,0,0,12,26H28.69a1,1,0,0,0,0-2H11.84a.67.67,0,0,1-.56-1l2.41-2H29.13a1,1,0,0,0,1-.78l1.09-4.82Z"/>', outlineBadged: '<circle cx="13.33" cy="29.75" r="2.25"/><circle cx="27" cy="29.75" r="2.25"/><path d="M22.57,7a7.52,7.52,0,0,1-.07-1,7.52,7.52,0,0,1,.07-1H11.49l.65,2Z"/><path d="M30,13.5l-.42,0L28.33,19h-15L8.76,4.53a1,1,0,0,0-.66-.65L4,2.62a1,1,0,1,0-.59,1.92L7,5.64l4.59,14.5L9.95,21.48l-.13.13A2.66,2.66,0,0,0,9.74,25,2.75,2.75,0,0,0,12,26H28.69a1,1,0,0,0,0-2H11.84a.67.67,0,0,1-.56-1l2.41-2H29.13a1,1,0,0,0,1-.78l1.57-6.91A7.51,7.51,0,0,1,30,13.5Z"/>', solid: '<circle cx="13.5" cy="29.5" r="2.5"/><circle cx="26.5" cy="29.5" r="2.5"/><path d="M33.1,6.39A1,1,0,0,0,32.31,6H9.21L8.76,4.57a1,1,0,0,0-.66-.65L4,2.66a1,1,0,1,0-.59,1.92L7,5.68l4.58,14.47L9.95,21.49l-.13.13A2.66,2.66,0,0,0,9.74,25,2.75,2.75,0,0,0,12,26H28.69a1,1,0,0,0,0-2H11.84a.67.67,0,0,1-.56-1l2.41-2H29.12a1,1,0,0,0,1-.76l3.2-13A1,1,0,0,0,33.1,6.39Z"/>', solidAlerted: '<circle cx="13.5" cy="29.5" r="2.5"/><circle cx="26.5" cy="29.5" r="2.5"/><path d="M22.23,15.4A3.68,3.68,0,0,1,19,9.89L21.29,6H9.21L8.76,4.57a1,1,0,0,0-.66-.65L4,2.66a1,1,0,1,0-.59,1.92L7,5.68l4.58,14.47L9.95,21.49l-.13.13A2.66,2.66,0,0,0,9.74,25,2.75,2.75,0,0,0,12,26H28.69a1,1,0,0,0,0-2H11.84a.67.67,0,0,1-.56-1l2.41-2H29.12a1,1,0,0,0,1-.76l1.19-4.84Z"/>', solidBadged: '<circle cx="13.5" cy="29.5" r="2.5"/><circle cx="26.5" cy="29.5" r="2.5"/><path d="M30,13.5A7.5,7.5,0,0,1,22.5,6H9.21L8.76,4.57a1,1,0,0,0-.66-.65L4,2.66a1,1,0,1,0-.59,1.92L7,5.68l4.58,14.47L9.95,21.49l-.13.13A2.66,2.66,0,0,0,9.74,25,2.75,2.75,0,0,0,12,26H28.69a1,1,0,0,0,0-2H11.84a.67.67,0,0,1-.56-1l2.41-2H29.12a1,1,0,0,0,1-.76l1.71-7A7.49,7.49,0,0,1,30,13.5Z"/>' })];

// node_modules/@cds/core/icon/shapes/store.js
var L8 = ["store", n23({ outline: '<path d="M28,30H16V22H14v8H8V22H6v8a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V22H28Z"/><path d="M33.79,13.27,29.71,5.11A2,2,0,0,0,27.92,4H8.08A2,2,0,0,0,6.29,5.11L2.21,13.27a2,2,0,0,0-.21.9v3.08a2,2,0,0,0,.46,1.28A4.67,4.67,0,0,0,6,20.13a4.72,4.72,0,0,0,3-1.07,4.73,4.73,0,0,0,6,0,4.73,4.73,0,0,0,6,0,4.73,4.73,0,0,0,6,0,4.72,4.72,0,0,0,6.53-.52A2,2,0,0,0,34,17.26V14.17A2,2,0,0,0,33.79,13.27ZM30,18.13A2.68,2.68,0,0,1,27.82,17L27,15.88,26.19,17a2.71,2.71,0,0,1-4.37,0L21,15.88,20.19,17a2.71,2.71,0,0,1-4.37,0L15,15.88,14.19,17a2.71,2.71,0,0,1-4.37,0L9,15.88,8.18,17A2.68,2.68,0,0,1,6,18.13a2.64,2.64,0,0,1-2-.88V14.17L8.08,6H27.92L32,14.16v.67l0,2.39A2.67,2.67,0,0,1,30,18.13Z"/>', solid: '<path d="M28,30H16V22H14v8H8V22H6v8a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V22H28Z"/><path d="M33.79,13.27,29.71,5.11A2,2,0,0,0,27.92,4H8.08A2,2,0,0,0,6.29,5.11L2.21,13.27a2,2,0,0,0-.21.9v3.08a2,2,0,0,0,.46,1.28A4.67,4.67,0,0,0,6,20.13a4.72,4.72,0,0,0,3-1.07,4.73,4.73,0,0,0,6,0,4.73,4.73,0,0,0,6,0,4.73,4.73,0,0,0,6,0,4.72,4.72,0,0,0,6.53-.52A2,2,0,0,0,34,17.26V14.17A2,2,0,0,0,33.79,13.27ZM15,14.4v1.52L14.18,17a2.71,2.71,0,0,1-4.37,0L9,15.88V14.4L11.59,6H16Zm12,1.48L26.19,17a2.71,2.71,0,0,1-4.37,0L21,15.88l0,0V14.4L20,6h4.45L27,14.4Z"/>' })];

// node_modules/@cds/core/icon/shapes/wallet.js
var A12 = ["wallet", n23({ outline: '<path d="M32,15H31V9a1,1,0,0,0-1-1H6a1,1,0,0,1-1-.82V6.82A1,1,0,0,1,6,6H29.58a1,1,0,0,0,0-2H6A3,3,0,0,0,3,7a3.08,3.08,0,0,0,0,.36V27.93A4.1,4.1,0,0,0,7.13,32H30a1,1,0,0,0,1-1V25h1a1,1,0,0,0,1-1V16A1,1,0,0,0,32,15ZM29,30H7.13A2.11,2.11,0,0,1,5,27.93V9.88A3.11,3.11,0,0,0,6,10H29v5H22a5,5,0,0,0,0,10h7Zm2-7H22a3,3,0,0,1,0-6H31Z"/><circle cx="23.01" cy="20" r="1.5"/>', solid: '<path d="M32.94,14H31V9a1,1,0,0,0-1-1H6A1,1,0,0,1,5,7H5V7A1,1,0,0,1,6,6H29.6a1,1,0,1,0,0-2H6A2.94,2.94,0,0,0,3,6.88v21A4.13,4.13,0,0,0,7.15,32H30a1,1,0,0,0,1-1V26h1.94a.93.93,0,0,0,1-.91v-10A1.08,1.08,0,0,0,32.94,14ZM32,24l-8.58,0a3.87,3.87,0,0,1-3.73-4,3.87,3.87,0,0,1,3.73-4L32,16Z"/><circle cx="24.04" cy="19.92" r="1.5"/>' })];

// node_modules/@cds/core/icon/shapes/won.js
var H12 = ["won", n23({ outline: '<path d="M33,18H28.75l.5-2H33a1,1,0,0,0,0-2H29.74l2.17-8.76A1,1,0,0,0,30,4.76L27.68,14H21.31L19,4.76a1,1,0,0,0-1.94,0L14.79,14H8.42L6.13,4.76a1,1,0,0,0-1.94.48L6.36,14H3a1,1,0,0,0,0,2H6.85l.5,2H3a1,1,0,0,0,0,2H7.84l2.79,11.24a1,1,0,0,0,1.94,0L15.36,20h5.38l2.79,11.24a1,1,0,0,0,1.94,0L28.25,20H33a1,1,0,0,0,0-2Zm-5.82-2-.5,2H22.3l-.5-2ZM18,9.16,19.25,14h-2.4ZM8.91,16h5.38l-.5,2H9.41ZM11.6,26.84,9.91,20H13.3ZM15.85,18l.5-2h3.39l.5,2Zm8.64,8.84L22.8,20h3.39Z"/>', solid: '<polygon points="17.74 16 17.22 18 18.85 18 18.32 16 17.74 16"/><polygon points="11.94 18 14.63 18 15.16 16 11.41 16 11.94 18"/><polygon points="13.29 23.1 14.1 20 12.47 20 13.29 23.1"/><polygon points="21.44 18 24.13 18 24.66 16 20.91 16 21.44 18"/><polygon points="22.78 23.1 23.6 20 21.97 20 22.78 23.1"/><path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2ZM29,20H26.19L24,28.32a1.25,1.25,0,0,1-2.42,0L19.38,20H16.69l-2.19,8.32a1.25,1.25,0,0,1-2.42,0L9.88,20H7a1,1,0,0,1,0-2H9.35l-.53-2H7a1,1,0,0,1,0-2H8.3l-1-3.68a1.25,1.25,0,0,1,2.42-.64L10.88,14h4.8l1.14-4.32a1.25,1.25,0,0,1,2.42,0L20.38,14h4.8l1.14-4.32a1.25,1.25,0,0,1,2.42.64l-1,3.68H29a1,1,0,0,1,0,2H27.24l-.53,2H29a1,1,0,0,1,0,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/yen.js
var h23 = ["yen", n23({ outline: '<path d="M29.34,4.55a1,1,0,1,0-1.67-1.1L18,18.23,8.33,3.45a1,1,0,0,0-1.67,1.1L17,20.35V22.2H12a.8.8,0,0,0,0,1.6h5v2.4H12a.8.8,0,0,0,0,1.6h5V32a1,1,0,0,0,2,0V27.8h5a.8.8,0,0,0,0-1.6H19V23.8h5a.8.8,0,0,0,0-1.6H19V20.35Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm8.07,7.91L19.74,20H22a1,1,0,0,1,0,2H19.25v2H22a1,1,0,0,1,0,2H19.25v2.75a1.25,1.25,0,0,1-2.5,0V26H14a1,1,0,1,1,0-2h2.75V22H14a1,1,0,1,1,0-2h2.26L9.93,9.91a1.25,1.25,0,1,1,2.12-1.33L18,18.08l5.95-9.49a1.25,1.25,0,1,1,2.12,1.33Z"/>' })];

// node_modules/@cds/core/icon/shapes/camera.js
var h24 = ["camera", n23({ outline: '<path d="M32,8H24.7L23.64,5.28A2,2,0,0,0,21.78,4H14.22a2,2,0,0,0-1.87,1.28L11.3,8H4a2,2,0,0,0-2,2V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V10A2,2,0,0,0,32,8Zm0,22H4V10h8.67l1.55-4h7.56l1.55,4H32Z"/><path d="M9,19a9,9,0,1,0,9-9A9,9,0,0,0,9,19Zm16.4,0A7.4,7.4,0,1,1,18,11.6,7.41,7.41,0,0,1,25.4,19Z"/><path d="M9.37,12.83a.8.8,0,0,0-.8-.8H6.17a.8.8,0,0,0,0,1.6h2.4A.8.8,0,0,0,9.37,12.83Z"/><path d="M12.34,19a5.57,5.57,0,0,0,3.24,5l.85-1.37a4,4,0,1,1,4.11-6.61l.86-1.38A5.56,5.56,0,0,0,12.34,19Z"/>', solid: '<path d="M32,8H24.7L23.64,5.28A2,2,0,0,0,21.78,4H14.22a2,2,0,0,0-1.87,1.28L11.3,8H4a2,2,0,0,0-2,2V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V10A2,2,0,0,0,32,8ZM6.17,13.63a.8.8,0,0,1,0-1.6h2.4a.8.8,0,0,1,0,1.6ZM18,28a9,9,0,1,1,9-9A9,9,0,0,1,18,28Z"/><path d="M11.11,19.06a7.07,7.07,0,0,0,4.11,6.41l1.09-1.74a5,5,0,1,1,5.22-8.39l1.09-1.76a7.06,7.06,0,0,0-11.51,5.48Z"/>' })];

// node_modules/@cds/core/icon/shapes/fast-forward.js
var o47 = ["fast-forward", n23({ outline: '<path d="M17.77,31.92a2,2,0,0,1-.86-.2A1.81,1.81,0,0,1,16,29.93v-6.7L5.24,31.5a1.94,1.94,0,0,1-2.06.22,2,2,0,0,1-1.11-1.79v-24A2,2,0,0,1,3.18,4.12a1.93,1.93,0,0,1,2.06.22L16,12.61V5.91a1.81,1.81,0,0,1,.91-1.79A1.93,1.93,0,0,1,19,4.34l15.32,12a2,2,0,0,1,0,3.15L19,31.5A2,2,0,0,1,17.77,31.92Zm0-12.8V29.93l15.26-12-15.32-12,.06,10.81L4,5.91v24Z"/>', solid: '<path d="M17.71,32a2,2,0,0,1-.86-.2A1.77,1.77,0,0,1,16,30v-6.7L5.17,31.58a1.94,1.94,0,0,1-2.06.22A2,2,0,0,1,2,30V6A2,2,0,0,1,3.11,4.2a1.93,1.93,0,0,1,2.06.22L16,12.69V6a1.77,1.77,0,0,1,.85-1.79,1.93,1.93,0,0,1,2.06.22l15.32,12a2,2,0,0,1,0,3.15l-15.32,12A2,2,0,0,1,17.71,32Z"/>' })];

// node_modules/@cds/core/icon/shapes/film-strip.js
var i25 = ["film-strip", n23({ outline: '<path d="M30,4H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V6A2,2,0,0,0,30,4Zm0,26H6V6H30Z"/><path d="M14.6,23.07a1.29,1.29,0,0,0,1.24.09l8.73-4a1.3,1.3,0,0,0,0-2.37h0l-8.73-4A1.3,1.3,0,0,0,14,14v8A1.29,1.29,0,0,0,14.6,23.07Zm1-8.6L23.31,18,15.6,21.51Z"/><rect x="8" y="7" width="2" height="3"/><rect x="14" y="7" width="2" height="3"/><rect x="20" y="7" width="2" height="3"/><rect x="26" y="7" width="2" height="3"/><rect x="8" y="26" width="2" height="3"/><rect x="14" y="26" width="2" height="3"/><rect x="20" y="26" width="2" height="3"/><rect x="26" y="26" width="2" height="3"/>', solid: '<path d="M30,4H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V6A2,2,0,0,0,30,4ZM20,7h2v3H20ZM14,7h2v3H14ZM10,29H8V26h2Zm0-19H8V7h2Zm6,19H14V26h2Zm6,0H20V26h2Zm3.16-10.16L15.39,23.2A1,1,0,0,1,14,22.28V13.57a1,1,0,0,1,1.41-.91L25.16,17A1,1,0,0,1,25.16,18.84ZM28,29H26V26h2Zm0-19H26V7h2Z"/>' })];

// node_modules/@cds/core/icon/shapes/headphones.js
var H13 = ["headphones", n23({ outline: '<path d="M18,3A14.27,14.27,0,0,0,4,17.5V31H9.2A2.74,2.74,0,0,0,12,28.33V21.67A2.74,2.74,0,0,0,9.2,19H6V17.5A12.27,12.27,0,0,1,18,5,12.27,12.27,0,0,1,30,17.5V19H26.8A2.74,2.74,0,0,0,24,21.67v6.67A2.74,2.74,0,0,0,26.8,31H32V17.5A14.27,14.27,0,0,0,18,3ZM9.2,21a.75.75,0,0,1,.8.67v6.67a.75.75,0,0,1-.8.67H6V21ZM26,28.33V21.67a.75.75,0,0,1,.8-.67H30v8H26.8A.75.75,0,0,1,26,28.33Z"/>', solid: '<path d="M18,3A14.27,14.27,0,0,0,4,17.5V31H8.2A1.74,1.74,0,0,0,10,29.33V22.67A1.74,1.74,0,0,0,8.2,21H6V17.5A12.27,12.27,0,0,1,18,5,12.27,12.27,0,0,1,30,17.5V21H27.8A1.74,1.74,0,0,0,26,22.67v6.67A1.74,1.74,0,0,0,27.8,31H32V17.5A14.27,14.27,0,0,0,18,3Z"/>' })];

// node_modules/@cds/core/icon/shapes/image-gallery.js
var t70 = ["image-gallery", n23({ outline: '<path d="M32.12,10H3.88A1.88,1.88,0,0,0,2,11.88V30.12A1.88,1.88,0,0,0,3.88,32H32.12A1.88,1.88,0,0,0,34,30.12V11.88A1.88,1.88,0,0,0,32.12,10ZM32,30H4V12H32Z"/><path d="M8.56,19.45a3,3,0,1,0-3-3A3,3,0,0,0,8.56,19.45Zm0-4.6A1.6,1.6,0,1,1,7,16.45,1.6,1.6,0,0,1,8.56,14.85Z"/><path d="M7.9,28l6-6,3.18,3.18L14.26,28h2l7.46-7.46L30,26.77v-2L24.2,19a.71.71,0,0,0-1,0l-5.16,5.16L14.37,20.5a.71.71,0,0,0-1,0L5.92,28Z"/><path d="M30.14,3h0a1,1,0,0,0-1-1h-22a1,1,0,0,0-1,1h0V4h24Z"/><path d="M32.12,7V7a1,1,0,0,0-1-1h-26a1,1,0,0,0-1,1h0V8h28Z"/>', solid: '<path d="M30.14,3h0a1,1,0,0,0-1-1h-22a1,1,0,0,0-1,1h0V4h24Z"/><path d="M32.12,7V7a1,1,0,0,0-1-1h-26a1,1,0,0,0-1,1h0V8h28Z"/><path d="M32.12,10H3.88A1.88,1.88,0,0,0,2,11.88V30.12A1.88,1.88,0,0,0,3.88,32H32.12A1.88,1.88,0,0,0,34,30.12V11.88A1.88,1.88,0,0,0,32.12,10ZM8.56,13.45a3,3,0,1,1-3,3A3,3,0,0,1,8.56,13.45ZM30,28h-24l7.46-7.47a.71.71,0,0,1,1,0l3.68,3.68L23.21,19a.71.71,0,0,1,1,0L30,24.79Z"/>' })];

// node_modules/@cds/core/icon/shapes/microphone.js
var o48 = ["microphone", n23({ outline: '<path d="M18,24c3.9,0,7-3.1,7-7V9c0-3.9-3.1-7-7-7s-7,3.1-7,7v8C11,20.9,14.1,24,18,24z M13,9c0-2.8,2.2-5,5-5s5,2.2,5,5v8c0,2.8-2.2,5-5,5s-5-2.2-5-5V9z"/><path d="M30,17h-2c0,5.5-4.5,10-10,10S8,22.5,8,17H6c0,6.3,4.8,11.4,11,11.9V32h-3c-0.6,0-1,0.4-1,1s0.4,1,1,1h8c0.6,0,1-0.4,1-1s-0.4-1-1-1h-3v-3.1C25.2,28.4,30,23.3,30,17z"/>', solid: '<path d="M18,24c3.9,0,7-3.1,7-7V9c0-3.9-3.1-7-7-7s-7,3.1-7,7v8C11,20.9,14.1,24,18,24z"/><path d="M30,17h-2c0,5.5-4.5,10-10,10S8,22.5,8,17H6c0,6.3,4.8,11.4,11,11.9V32h-3c-0.6,0-1,0.4-1,1s0.4,1,1,1h8c0.6,0,1-0.4,1-1s-0.4-1-1-1h-3v-3.1C25.2,28.4,30,23.3,30,17z"/>' })];

// node_modules/@cds/core/icon/shapes/microphone-mute.js
var l22 = ["microphone-mute", n23({ outline: '<path d="M30,17h-2c0,1.8-0.5,3.5-1.4,5l1.5,1.5C29.3,21.5,29.9,19.3,30,17z"/><path d="M18,4c2.8,0,5,2.2,5,5v8c0,0.4-0.1,0.8-0.2,1.2l1.6,1.6c0.4-0.9,0.6-1.8,0.6-2.8V9c0-3.9-3.2-7-7.1-6.9c-2.9,0-5.6,1.9-6.5,4.7L13,8.3C13.5,5.9,15.6,4.2,18,4z"/><path d="M25.2,26.6l6.9,6.9l1.4-1.4L4,2.6L2.6,4l8.4,8.4V17c0,3.9,3.1,7,7,7c1.3,0,2.5-0.3,3.6-1l2.2,2.2C22.1,26.4,20.1,27,18,27c-5.4,0.2-9.8-4.1-10-9.4c0-0.2,0-0.4,0-0.6H6c0.1,6.2,4.8,11.4,11,12v3h-3c-0.6,0-1,0.4-1,1s0.4,1,1,1h8c0.6,0,1-0.4,1-1s-0.4-1-1-1h-3v-3C21.2,28.8,23.4,28,25.2,26.6z M13.8,19.7C13.3,18.9,13,18,13,17v-2.6l7.1,7.1C17.9,22.5,15.2,21.8,13.8,19.7z"/>', solid: '<path d="M30,17h-2c0,1.8-0.5,3.5-1.4,5l1.5,1.5C29.3,21.5,29.9,19.3,30,17z"/><path d="M25,17V9c0-3.9-3.2-7-7.1-6.9c-2.9,0-5.6,1.9-6.5,4.7l13,13C24.8,18.9,25,17.9,25,17z"/><path d="M25.2,26.6l6.9,6.9l1.4-1.4L4,2.6L2.6,4l8.4,8.4V17c0,3.9,3.1,7,7,7c1.3,0,2.5-0.3,3.6-1l2.2,2.2C22.1,26.4,20.1,27,18,27c-5.4,0.2-9.8-4.1-10-9.4c0-0.2,0-0.4,0-0.6H6c0.1,6.2,4.8,11.4,11,12v3h-3c-0.6,0-1,0.4-1,1s0.4,1,1,1h8c0.6,0,1-0.4,1-1s-0.4-1-1-1h-3v-3C21.2,28.8,23.4,28,25.2,26.6z"/>' })];

// node_modules/@cds/core/icon/shapes/music-note.js
var o49 = ["music-note", n23({ outline: '<path d="M31.68,6.16c-1.92-3.3-10.6-4-11.58-4.09L19,2V22.34a5.89,5.89,0,0,0-.82-.56,8.33,8.33,0,0,0-6.53-.41C7.57,22.7,4.92,26.5,5.78,29.84a5.33,5.33,0,0,0,2.66,3.32,7.48,7.48,0,0,0,3.61.88A9.54,9.54,0,0,0,15,33.57c3.67-1.18,6.17-4.33,6.06-7.36V9.34a29.14,29.14,0,0,1,6.55,1.43,1,1,0,1,0,.72-1.87A31.37,31.37,0,0,0,21,7.33V4.17c3.33.36,8,1.38,8.92,3,2,3.41-2.33,7.36-2.37,7.4a1,1,0,0,0,1.33,1.49C29.15,15.85,34.5,11,31.68,6.16ZM14.35,31.67a6.43,6.43,0,0,1-5-.26,3.31,3.31,0,0,1-1.69-2.07c-.6-2.33,1.45-5.05,4.58-6.06a7.52,7.52,0,0,1,2.3-.37,5.52,5.52,0,0,1,2.65.62,3.31,3.31,0,0,1,1.69,2.07C19.54,27.94,17.49,30.66,14.35,31.67Z"/>', solid: '<path d="M31.68,6.16c-1.92-3.3-10.6-4-11.58-4.09L19,2V22.29a5.88,5.88,0,0,0-.81-.55,8.33,8.33,0,0,0-6.53-.41c-4.12,1.33-6.77,5.13-5.91,8.47a5.33,5.33,0,0,0,2.66,3.32,7.48,7.48,0,0,0,3.61.88A9.54,9.54,0,0,0,15,33.52c3.7-1.19,6.2-4.37,6.06-7.42,0,0,0,0,0,0V8.49c1,.12,2.37.33,3.82.64a11.17,11.17,0,0,1,4.06,1.46c1,.66.38,1.9.33,2a11.8,11.8,0,0,1-1.66,2,1,1,0,0,0,1.33,1.49C29.15,15.85,34.5,11,31.68,6.16Z"/>' })];

// node_modules/@cds/core/icon/shapes/pause.js
var t71 = ["pause", n23({ outline: '<path d="M12.93,32H6.07A2.07,2.07,0,0,1,4,29.93V6.07A2.07,2.07,0,0,1,6.07,4h6.87A2.07,2.07,0,0,1,15,6.07V29.93A2.07,2.07,0,0,1,12.93,32ZM13,6H6V30h7Z"/><path d="M29.93,32H23.07A2.07,2.07,0,0,1,21,29.93V6.07A2.07,2.07,0,0,1,23.07,4h6.87A2.07,2.07,0,0,1,32,6.07V29.93A2.07,2.07,0,0,1,29.93,32ZM30,6H23V30h7Z"/>', solid: '<rect x="3.95" y="4" width="11" height="28" rx="2.07" ry="2.07"/><rect x="20.95" y="4" width="11" height="28" rx="2.07" ry="2.07"/>' })];

// node_modules/@cds/core/icon/shapes/play.js
var p7 = ["play", n23({ outline: '<path d="M8.07,31.6A2.07,2.07,0,0,1,6,29.53V6.32A2.07,2.07,0,0,1,9,4.47L32.21,16.08a2.07,2.07,0,0,1,0,3.7L9,31.38A2.06,2.06,0,0,1,8.07,31.6Zm0-25.34L8,6.32V29.53l.1.06L31.31,18a.06.06,0,0,0,0-.06Z"/>', solid: '<path d="M32.16,16.08,8.94,4.47A2.07,2.07,0,0,0,6,6.32V29.53a2.06,2.06,0,0,0,3,1.85L32.16,19.77a2.07,2.07,0,0,0,0-3.7Z"/>' })];

// node_modules/@cds/core/icon/shapes/power.js
var A13 = ["power", n23({ outline: '<path d="M18,21a1,1,0,0,1-1-1V4a1,1,0,0,1,2,0V20A1,1,0,0,1,18,21Z"/><path d="M18,34.15a15,15,0,0,1-7.52-28,1,1,0,0,1,1,1.73,13,13,0,1,0,13,0,1,1,0,1,1,1-1.73,15,15,0,0,1-7.52,28Z"/>', outlineAlerted: '<path d="M18,21a1,1,0,0,0,1-1V4a1,1,0,0,0-2,0V20A1,1,0,0,0,18,21Z"/><path d="M32.51,15.4H30.44a13,13,0,1,1-19-7.5,1,1,0,0,0-1-1.73A15,15,0,1,0,33,19.15,14.9,14.9,0,0,0,32.51,15.4Z"/>', outlineBadged: '<path d="M18,21a1,1,0,0,1-1-1V4a1,1,0,0,1,2,0V20A1,1,0,0,1,18,21Z"/><path d="M30,13.5l-.31,0A13,13,0,1,1,11.48,7.9a1,1,0,0,0-1-1.73,15,15,0,1,0,21.31,7.1A7.49,7.49,0,0,1,30,13.5Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm.06,17.68a1.28,1.28,0,0,1-1.29-1.28V8.65a1.29,1.29,0,0,1,2.58,0V18.4A1.28,1.28,0,0,1,18.06,19.68ZM18,27.79A9.88,9.88,0,0,1,12.17,9.85a1.4,1.4,0,0,1,1.94.31,1.37,1.37,0,0,1-.31,1.92,7.18,7.18,0,1,0,11.43,5.8,7.07,7.07,0,0,0-3-5.76A1.37,1.37,0,0,1,22,10.2a1.4,1.4,0,0,1,1.94-.29A9.88,9.88,0,0,1,18,27.79Z"/>', solidAlerted: '<path d="M33.68,15.4h-6A9.7,9.7,0,0,1,28,17.89a10,10,0,1,1-15.83-8,1.4,1.4,0,0,1,1.94.31,1.37,1.37,0,0,1-.31,1.92,7.18,7.18,0,1,0,11.43,5.8,7.08,7.08,0,0,0-.45-2.49H22.23A3.69,3.69,0,0,1,19.35,14v4.4a1.29,1.29,0,0,1-2.58,0V8.65a1.29,1.29,0,0,1,2.58,0v.71l3.76-6.51A16,16,0,1,0,34,18a16,16,0,0,0-.23-2.61Z"/>', solidBadged: '<path d="M30,13.5a7.47,7.47,0,0,1-3.57-.9A9.83,9.83,0,0,1,28,17.89a10,10,0,1,1-15.83-8,1.4,1.4,0,0,1,1.94.31,1.37,1.37,0,0,1-.31,1.92,7.18,7.18,0,1,0,11.43,5.8,7.07,7.07,0,0,0-3-5.76A1.37,1.37,0,0,1,22,10.2a1.38,1.38,0,0,1,1.52-.49,7.45,7.45,0,0,1-.3-6.83,16.06,16.06,0,1,0,9.93,9.93A7.46,7.46,0,0,1,30,13.5ZM16.77,8.65a1.29,1.29,0,0,1,2.58,0V18.4a1.29,1.29,0,0,1-2.58,0Z"/>' })];

// node_modules/@cds/core/icon/shapes/replay-all.js
var r42 = ["replay-all", n23({ outline: '<path d="M17.46,26.22a1.4,1.4,0,0,0,1-.42l5.59-5.56a1.43,1.43,0,0,0,.42-1,1.46,1.46,0,0,0-.42-1l-5.59-5.56a1.43,1.43,0,0,0-2.44,1V24.79a1.41,1.41,0,0,0,.88,1.32A1.54,1.54,0,0,0,17.46,26.22Zm.16-12.16,5.19,5.16-5.19,5.17Z"/><path d="M18.06,5h-6.7l2.92-2.64A1,1,0,0,0,12.94.88L7.32,6,12.94,11a1,1,0,0,0,.67.26,1,1,0,0,0,.74-.33,1,1,0,0,0-.07-1.42L11.46,7h6.6A11.78,11.78,0,1,1,7.71,24.41,1,1,0,0,0,6,25.36,13.78,13.78,0,1,0,18.06,5Z"/>' })];

// node_modules/@cds/core/icon/shapes/replay-one.js
var o50 = ["replay-one", n23({ outline: '<path d="M19,27.27a1,1,0,0,0,1-1V14a1,1,0,0,0-1-1H19a3.8,3.8,0,0,0-1.1.23l-2,.62a.92.92,0,0,0-.72.86.88.88,0,0,0,.88.86,1.46,1.46,0,0,0,.43-.08L18,15.07v11.2A1,1,0,0,0,19,27.27Z"/><path d="M18.06,5h-6.7l2.92-2.64A1,1,0,0,0,12.94.88L7.32,6,12.94,11a1,1,0,0,0,.67.26,1,1,0,0,0,.74-.33,1,1,0,0,0-.07-1.42L11.46,7h6.6A11.78,11.78,0,1,1,7.71,24.41,1,1,0,0,0,6,25.36,13.78,13.78,0,1,0,18.06,5Z"/>' })];

// node_modules/@cds/core/icon/shapes/rewind.js
var e50 = ["rewind", n23({ outline: '<path d="M17.09,31.58l-15.32-12a2,2,0,0,1,0-3.15l15.32-12a1.93,1.93,0,0,1,2.06-.22A1.77,1.77,0,0,1,20,6v6.7L30.83,4.42a1.93,1.93,0,0,1,2.06-.22A2,2,0,0,1,34,6V30a2,2,0,0,1-1.11,1.79,1.94,1.94,0,0,1-2.06-.22L20,23.31V30a1.77,1.77,0,0,1-.85,1.79,1.94,1.94,0,0,1-2.06-.22ZM32,30l.06-24L18,16.8V6L3,18,18,30V19.2Z"/>', solid: '<path d="M16.92,31.58,1.6,19.57a2,2,0,0,1,0-3.15l15.32-12A1.93,1.93,0,0,1,19,4.2,1.89,1.89,0,0,1,20,6v6.7L30.66,4.42a1.93,1.93,0,0,1,2.06-.22A2,2,0,0,1,33.83,6V30a2,2,0,0,1-1.11,1.79,1.94,1.94,0,0,1-2.06-.22L20,23.31V30a1.89,1.89,0,0,1-1,1.79,1.94,1.94,0,0,1-2.06-.22Z"/>' })];

// node_modules/@cds/core/icon/shapes/shuffle.js
var h25 = ["shuffle", n23({ outline: '<path d="M21.61,11h8.62l-3.3,3.3a1,1,0,1,0,1.41,1.42L34,10.08l-.71-.71h0L28.34,4.43a1,1,0,0,0-1.41,1.42L30.11,9H21a1,1,0,0,0-.86.5L17.5,14.09l1.16,2Z"/><path d="M11.07,25.07H3a1,1,0,0,0,0,2h8.65a1,1,0,0,0,.86-.5L15.18,22,14,20Z"/><path d="M28.34,20.17a1,1,0,0,0-1.41,1.42l3.5,3.5H21.61L12.51,9.53a1,1,0,0,0-.86-.5H3a1,1,0,1,0,0,2h8.07l9.1,15.55a1,1,0,0,0,.86.5H29.9l-3,3a1,1,0,0,0,1.41,1.42l4.95-4.94h0l.71-.71Z"/>' })];

// node_modules/@cds/core/icon/shapes/step-forward.js
var t72 = ["step-forward", n23({ outline: '<path d="M5,32.23a2,2,0,0,1-2-2V5.77A2,2,0,0,1,6.17,4.14L23.23,16.38a2,2,0,0,1,0,3.25h0L6.17,31.86A2,2,0,0,1,5,32.23ZM5,5.77V30.23L22.07,18Z"/><path d="M31,32H28a2,2,0,0,1-2-2V6a2,2,0,0,1,2-2h3a2,2,0,0,1,2,2V30A2,2,0,0,1,31,32ZM28,6V30h3V6Z"/>', solid: '<path d="M5,31.9a2,2,0,0,1-2-2V5.44A2,2,0,0,1,6.12,3.81L23.18,16a2,2,0,0,1,0,3.25h0L6.12,31.52A2,2,0,0,1,5,31.9Z"/><rect x="25.95" y="3.67" width="7" height="28" rx="2" ry="2"/>' })];

// node_modules/@cds/core/icon/shapes/stop.js
var r43 = ["stop", n23({ outline: '<path d="M30,32H6a2,2,0,0,1-2-2V6A2,2,0,0,1,6,4H30a2,2,0,0,1,2,2V30A2,2,0,0,1,30,32ZM6,6V30H30V6Z"/>', solid: '<rect x="3.96" y="4" width="27.99" height="28" rx="2" ry="2"/>' })];

// node_modules/@cds/core/icon/shapes/video-camera.js
var e51 = ["video-camera", n23({ outline: '<path d="M34,10.34a2.11,2.11,0,0,0-1.16-1.9,2,2,0,0,0-2.13.15L26,11.6V8a2,2,0,0,0-2-2H6a4,4,0,0,0-4,4V26a4,4,0,0,0,4,4H24a2,2,0,0,0,2-2V24.4l4.64,3a2.07,2.07,0,0,0,2.2.2A2.11,2.11,0,0,0,34,25.66ZM31.93,25.77c-.06,0-.11,0-.19-.06L24,20.77V28H6a2,2,0,0,1-2-2V10A2,2,0,0,1,6,8H24v7.23l7.8-5a.11.11,0,0,1,.13,0,.11.11,0,0,1,.07.11V25.66A.11.11,0,0,1,31.93,25.77Z"/>', solid: '<path d="M32.3,9.35,26,12.9V8a2,2,0,0,0-2-2H6a4,4,0,0,0-4,4V26a4,4,0,0,0,4,4H24a2,2,0,0,0,2-2V23.08l6.3,3.55A1.1,1.1,0,0,0,34,25.77V10.2A1.1,1.1,0,0,0,32.3,9.35Z"/>' })];

// node_modules/@cds/core/icon/shapes/video-gallery.js
var V10 = ["video-gallery", n23({ outline: '<path d="M32.12,10H3.88A1.88,1.88,0,0,0,2,11.88V30.12A1.88,1.88,0,0,0,3.88,32H32.12A1.88,1.88,0,0,0,34,30.12V11.88A1.88,1.88,0,0,0,32.12,10ZM32,30H4V12H32Z"/><path d="M30.14,3h0a1,1,0,0,0-1-1h-22a1,1,0,0,0-1,1h0V4h24Z"/><path d="M32.12,7V7a1,1,0,0,0-1-1h-26a1,1,0,0,0-1,1h0V8h28Z"/><path d="M12.82,26.79a1.74,1.74,0,0,0,.93.28,1.68,1.68,0,0,0,.69-.15l9.77-4.36a1.69,1.69,0,0,0,0-3.1L14.44,15.1a1.7,1.7,0,0,0-2.39,1.55v8.72A1.7,1.7,0,0,0,12.82,26.79Zm.63-10.14a.29.29,0,0,1,.14-.25.3.3,0,0,1,.16,0,.27.27,0,0,1,.12,0l9.77,4.35a.29.29,0,0,1,.18.28.28.28,0,0,1-.18.27l-9.77,4.36a.28.28,0,0,1-.28,0,.31.31,0,0,1-.14-.25Z"/>', solid: '<path d="M32.12,10H3.88A1.88,1.88,0,0,0,2,11.88V30.12A1.88,1.88,0,0,0,3.88,32H32.12A1.88,1.88,0,0,0,34,30.12V11.88A1.88,1.88,0,0,0,32.12,10ZM24.18,21.83l-9.77,4.36A1,1,0,0,1,13,25.28V16.56a1,1,0,0,1,1.41-.91L24.18,20A1,1,0,0,1,24.18,21.83Z"/><path d="M30.14,3h0a1,1,0,0,0-1-1h-22a1,1,0,0,0-1,1h0V4h24Z"/><path d="M32.12,7V7a1,1,0,0,0-1-1h-26a1,1,0,0,0-1,1h0V8h28Z"/>' })];

// node_modules/@cds/core/icon/shapes/volume-down.js
var d24 = ["volume-down", n23({ outline: '<path d="M23.41,25.11a1,1,0,0,1-.54-1.85,6.21,6.21,0,0,0-.19-10.65,1,1,0,1,1,1-1.73A8.21,8.21,0,0,1,23.94,25,1,1,0,0,1,23.41,25.11Z"/><path d="M18,32a2,2,0,0,1-1.42-.59L9.14,24H4a2,2,0,0,1-2-2V14a2,2,0,0,1,2-2H9.22l7.33-7.41A2,2,0,0,1,20,6V30a2,2,0,0,1-1.24,1.85A2,2,0,0,1,18,32ZM4,14v8H9.56a1,1,0,0,1,.71.28L18,30V6l-7.65,7.68a1,1,0,0,1-.71.3ZM18,6Z"/>', solid: '<path d="M23.41,25.11a1,1,0,0,1-.54-1.85,6.21,6.21,0,0,0-.19-10.65,1,1,0,1,1,1-1.73A8.21,8.21,0,0,1,23.94,25,1,1,0,0,1,23.41,25.11Z"/><path d="M18.34,3.87,9,12H3a1,1,0,0,0-1,1V23a1,1,0,0,0,1,1H8.83l9.51,8.3A1,1,0,0,0,20,31.55V4.62A1,1,0,0,0,18.34,3.87Z"/>' })];

// node_modules/@cds/core/icon/shapes/volume-mute.js
var t73 = ["volume-mute", n23({ outline: '<path d="M3.61,6.41,9.19,12H4a2,2,0,0,0-2,2v8a2,2,0,0,0,2,2H9.14l7.41,7.47A2,2,0,0,0,18,32a2,2,0,0,0,.76-.15A2,2,0,0,0,20,30V22.77l5.89,5.89c-.25.15-.49.29-.75.42a1,1,0,0,0,.9,1.79,14.4,14.4,0,0,0,1.31-.75l2.28,2.28L31,31,5,5ZM18,30l-7.73-7.77A1,1,0,0,0,9.56,22H4V14H9.64a1,1,0,0,0,.71-.3l.26-.26L18,20.81Z"/><path d="M24.89,6.69A12.42,12.42,0,0,1,29,26.1l1.42,1.42A14.42,14.42,0,0,0,25.76,4.88a1,1,0,1,0-.87,1.8Z"/><path d="M22.69,12.62A6.27,6.27,0,0,1,25.8,18a6.17,6.17,0,0,1-1.24,3.71L26,23.13A8.15,8.15,0,0,0,27.8,18a8.28,8.28,0,0,0-4.1-7.11,1,1,0,1,0-1,1.73Z"/><path d="M18,6v9.15l2,2V6a2,2,0,0,0-3.42-1.41L12,9.17l1.41,1.41Z"/>', solid: '<path d="M24.87,6.69A12.42,12.42,0,0,1,28.75,26.3l1.42,1.42A14.43,14.43,0,0,0,25.74,4.88a1,1,0,0,0-.87,1.8Z"/><path d="M27.3,27.67h0l-3.84-3.84-.57-.57h0L4.63,5,3.21,6.41,8.8,12H3a1,1,0,0,0-1,1V23a1,1,0,0,0,1,1H8.83l9.51,8.3A1,1,0,0,0,20,31.55V23.2l5.59,5.59c-.17.1-.34.2-.51.29a1,1,0,0,0,.9,1.79c.37-.19.72-.4,1.08-.62l2.14,2.14L30.61,31l-3.25-3.25Z"/><path d="M22.69,12.62A6.27,6.27,0,0,1,25.8,18a6.17,6.17,0,0,1-1.42,3.92l1.42,1.42a8.16,8.16,0,0,0,2-5.34,8.28,8.28,0,0,0-4.1-7.11,1,1,0,1,0-1,1.73Z"/><path d="M20,4.62a1,1,0,0,0-1.66-.75l-6.42,5.6L20,17.54Z"/>' })];

// node_modules/@cds/core/icon/shapes/volume-up.js
var t74 = ["volume-up", n23({ outline: '<path d="M23.41,25.25a1,1,0,0,1-.54-1.85,6.21,6.21,0,0,0-.19-10.65,1,1,0,1,1,1-1.73,8.21,8.21,0,0,1,.24,14.06A1,1,0,0,1,23.41,25.25Z"/><path d="M25.62,31.18a1,1,0,0,1-.45-1.89A12.44,12.44,0,0,0,25,6.89a1,1,0,1,1,.87-1.8,14.44,14.44,0,0,1,.24,26A1,1,0,0,1,25.62,31.18Z"/><path d="M18,32.06a2,2,0,0,1-1.42-.59L9.14,24H4a2,2,0,0,1-2-2V14a2,2,0,0,1,2-2H9.22l7.33-7.39A2,2,0,0,1,20,6v24a2,2,0,0,1-1.24,1.85A2,2,0,0,1,18,32.06ZM4,14v8H9.56a1,1,0,0,1,.71.3L18,30.06V6L10.35,13.7a1,1,0,0,1-.71.3ZM18,6Z"/>', solid: '<path d="M23.41,25.25a1,1,0,0,1-.54-1.85,6.21,6.21,0,0,0-.19-10.65,1,1,0,1,1,1-1.73,8.21,8.21,0,0,1,.24,14.06A1,1,0,0,1,23.41,25.25Z"/><path d="M25.62,31.18a1,1,0,0,1-.45-1.89A12.44,12.44,0,0,0,25,6.89a1,1,0,1,1,.87-1.8,14.44,14.44,0,0,1,.24,26A1,1,0,0,1,25.62,31.18Z"/><path d="M18.33,4,9.07,12h-6a1,1,0,0,0-1,1v9.92a1,1,0,0,0,1,1H8.88l9.46,8.24A1,1,0,0,0,20,31.43V4.72A1,1,0,0,0,18.33,4Z"/>' })];

// node_modules/@cds/core/icon/shapes/arrow-mini.js
var i26 = ["arrow-mini", n23({ outline: '<path d="M29.18,13.26,17.92,3,6.63,13.28a2,2,0,0,0-.55,2.33,2,2,0,0,0,3.19.68L16,10.13V30.29a2,2,0,0,0,1.35,2A2,2,0,0,0,20,30.38V10.28l6.57,6a2,2,0,0,0,1.35.52,2,2,0,0,0,1.72-1A2.08,2.08,0,0,0,29.18,13.26Z"/>' })];

// node_modules/@cds/core/icon/shapes/calendar-mini.js
var H14 = ["calendar-mini", n23({ outline: '<path d="M29,8H27.6V4a1.6,1.6,0,0,0-3.2,0V8H11.6V4A1.6,1.6,0,0,0,8.4,4V8H7a3,3,0,0,0-3,3V29a3,3,0,0,0,3,3H29a3,3,0,0,0,3-3V11A3,3,0,0,0,29,8Zm-1,4v4.4H8V12ZM8,28V19.6H28V28Z"/>', solid: '<path d="M29,8H27.6V4a1.6,1.6,0,0,0-3.2,0V8H11.6V4A1.6,1.6,0,0,0,8.4,4V8H7a3,3,0,0,0-3,3V29a3,3,0,0,0,3,3H29a3,3,0,0,0,3-3V11A3,3,0,0,0,29,8ZM8,28V16H28V28Z"/>' })];

// node_modules/@cds/core/icon/shapes/check-circle-mini.js
var e52 = ["check-circle-mini", n23({ outline: '<path d="M18,4A14,14,0,1,0,32,18,14,14,0,0,0,18,4Zm0,24A10,10,0,1,1,28,18,10,10,0,0,1,18,28Z"/><path d="M21.66,14.72,16.5,19.88l-2.79-2.79a1.61,1.61,0,0,0-2.27,2.27l5.06,5.05L23.92,17a1.6,1.6,0,0,0,0-2.26A1.62,1.62,0,0,0,21.66,14.72Z"/>', solid: '<path d="M18,4A14,14,0,1,0,32,18,14,14,0,0,0,18,4Zm8.27,12.51L16.9,25.94l-6.34-6.55a2,2,0,1,1,2.88-2.78l3.5,3.62,6.49-6.54a2,2,0,1,1,2.84,2.82Z"/>' })];

// node_modules/@cds/core/icon/shapes/check-mini.js
var c18 = ["check-mini", n23({ outline: '<path d="M13.13,27.94,4.61,17.43a2,2,0,1,1,3.11-2.52l5.71,7L28.49,6.68a2,2,0,0,1,2.85,2.81Z"/>' })];

// node_modules/@cds/core/icon/shapes/error-mini.js
var t75 = ["error-mini", n23({ outline: '<path d="M18,4A14,14,0,1,0,32,18,14,14,0,0,0,18,4Zm0,24A10,10,0,1,1,28,18,10,10,0,0,1,18,28Z"/><rect x="16" y="12" width="4" height="6"/><rect x="16" y="20.8" width="4" height="3.2"/>', solid: '<path d="M18,4A14,14,0,1,0,32,18,14,14,0,0,0,18,4Zm2,20H16V20h4Zm0-8H16V8h4Z"/>' })];

// node_modules/@cds/core/icon/shapes/event-mini.js
var H15 = ["event-mini", n23({ outline: '<path d="M29,8H27.6V4a1.6,1.6,0,0,0-3.2,0V8H11.6V4A1.6,1.6,0,0,0,8.4,4V8H7a3,3,0,0,0-3,3V29a3,3,0,0,0,3,3H29a3,3,0,0,0,3-3V11A3,3,0,0,0,29,8ZM28,28H8V12H28Z"/><path d="M16.8,25.66l7.71-7.8a1.6,1.6,0,1,0-2.27-2.25l-5.45,5.51L14,18.33a1.6,1.6,0,0,0-2.26,2.27Z"/>', solid: '<path d="M30,8H27.6V4a1.6,1.6,0,0,0-3.2,0V8H11.6V4A1.6,1.6,0,0,0,8.4,4V8H6a2,2,0,0,0-2,2V30a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V10A2,2,0,0,0,30,8Zm-4.57,9.43L16.36,26.6l-6-6a2,2,0,1,1,2.82-2.83l3.14,3.13,6.23-6.3a2,2,0,0,1,2.85,2.81Z"/>' })];

// node_modules/@cds/core/icon/shapes/filter-grid-circle-mini.js
var e53 = ["filter-grid-circle-mini", n23({ outline: '<path d="M18,4A14,14,0,1,0,32,18,14,14,0,0,0,18,4Zm2,23.8V23l5.29-5.76A1.9,1.9,0,0,0,23.92,14H11.7a1.9,1.9,0,0,0-1.37,3.21L16,23.08V27.8a10,10,0,1,1,4,0Z"/>', solid: '<path d="M18,4A14,14,0,1,0,32,18,14,14,0,0,0,18,4Zm8.76,10.68L20,20.8v5.08H16V20.8L9.24,14.68A1.56,1.56,0,0,1,10.52,12h15A1.56,1.56,0,0,1,26.76,14.68Z"/>' })];

// node_modules/@cds/core/icon/shapes/filter-grid-mini.js
var l23 = ["filter-grid-mini", n23({ outline: '<path d="M12,19v8.8l4,2.05V18.27A2,2,0,0,0,15.55,17L8.18,8H27.74l-7.29,8.93A2,2,0,0,0,20,18.19V31.88l4,2v-15L33.51,7.26A2,2,0,0,0,32,4H4A2,2,0,0,0,2.41,7.27Z"/>', solid: '<path d="M32.13,4H3.92A2,2,0,0,0,2.53,7.44L14,18.54v9.52l8,4.08V18.58L33.52,7.44A2,2,0,0,0,32.13,4Z"/>' })];

// node_modules/@cds/core/icon/shapes/info-circle-mini.js
var e54 = ["info-circle-mini", n23({ outline: '<path d="M18,4A14,14,0,1,0,32,18,14,14,0,0,0,18,4Zm0,24A10,10,0,1,1,28,18,10,10,0,0,1,18,28Z"/><rect x="16" y="18" width="4" height="6"/><rect x="16" y="12" width="4" height="3.2"/>', solid: '<path d="M18,4A14,14,0,1,0,32,18,14,14,0,0,0,18,4Zm2,22H16V16h4Zm0-14H16V8h4Z"/>' })];

// node_modules/@cds/core/icon/shapes/times-mini.js
var t76 = ["times-mini", n23({ outline: '<path d="M29.37,6.35a2,2,0,0,0-2.83,0L18,14.94,9.37,6.35A2,2,0,0,0,6.54,9.18l8.59,8.59L6.54,26.35a2,2,0,1,0,2.83,2.83L18,20.6l8.58,8.58a2,2,0,0,0,2.83-2.83l-8.59-8.58,8.59-8.59A2,2,0,0,0,29.37,6.35Z"/>' })];

// node_modules/@cds/core/icon/shapes/warning-mini.js
var t77 = ["warning-mini", n23({ outline: '<path d="M32.47,25.6,21.75,5.92a4.27,4.27,0,0,0-7.5,0L3.53,25.6a4.27,4.27,0,0,0,3.75,6.32H28.72a4.27,4.27,0,0,0,3.75-6.32ZM29,27.78a.26.26,0,0,1-.24.14H7.28A.26.26,0,0,1,7,27.78a.25.25,0,0,1,0-.27L17.76,7.83a.28.28,0,0,1,.48,0L29,27.51A.25.25,0,0,1,29,27.78Z"/><rect x="16" y="12" width="4" height="8"/><rect x="16" y="22" width="4" height="4"/>', solid: '<path d="M32.71,29,20.44,4.42a2.73,2.73,0,0,0-4.88,0L3.29,29a2.73,2.73,0,0,0,2.44,4H30.27A2.73,2.73,0,0,0,32.71,29ZM20,28H16V24h4Zm0-8H16V12h4Z"/>' })];

// node_modules/@cds/core/icon/shapes/administrator.js
var A14 = ["administrator", n23({ outline: '<path d="M14.68,14.81a6.76,6.76,0,1,1,6.76-6.75A6.77,6.77,0,0,1,14.68,14.81Zm0-11.51a4.76,4.76,0,1,0,4.76,4.76A4.76,4.76,0,0,0,14.68,3.3Z"/><path d="M16.42,31.68A2.14,2.14,0,0,1,15.8,30H4V24.22a14.81,14.81,0,0,1,11.09-4.68l.72,0a2.2,2.2,0,0,1,.62-1.85l.12-.11c-.47,0-1-.06-1.46-.06A16.47,16.47,0,0,0,2.2,23.26a1,1,0,0,0-.2.6V30a2,2,0,0,0,2,2H16.7Z"/><path d="M26.87,16.29a.37.37,0,0,1,.15,0,.42.42,0,0,0-.15,0Z" /><path d="M33.68,23.32l-2-.61a7.21,7.21,0,0,0-.58-1.41l1-1.86A.38.38,0,0,0,32,19l-1.45-1.45a.36.36,0,0,0-.44-.07l-1.84,1a7.15,7.15,0,0,0-1.43-.61l-.61-2a.36.36,0,0,0-.36-.24H23.82a.36.36,0,0,0-.35.26l-.61,2a7,7,0,0,0-1.44.6l-1.82-1a.35.35,0,0,0-.43.07L17.69,19a.38.38,0,0,0-.06.44l1,1.82A6.77,6.77,0,0,0,18,22.69l-2,.6a.36.36,0,0,0-.26.35v2.05A.35.35,0,0,0,16,26l2,.61a7,7,0,0,0,.6,1.41l-1,1.91a.36.36,0,0,0,.06.43l1.45,1.45a.38.38,0,0,0,.44.07l1.87-1a7.09,7.09,0,0,0,1.4.57l.6,2a.38.38,0,0,0,.35.26h2.05a.37.37,0,0,0,.35-.26l.61-2.05a6.92,6.92,0,0,0,1.38-.57l1.89,1a.36.36,0,0,0,.43-.07L32,30.4A.35.35,0,0,0,32,30l-1-1.88a7,7,0,0,0,.58-1.39l2-.61a.36.36,0,0,0,.26-.35V23.67A.36.36,0,0,0,33.68,23.32ZM24.85,28a3.34,3.34,0,1,1,3.33-3.33A3.34,3.34,0,0,1,24.85,28Z"/>', solid: '<circle cx="14.67" cy="8.3" r="6"/><path d="M16.44,31.82a2.15,2.15,0,0,1-.38-2.55l.53-1-1.09-.33A2.14,2.14,0,0,1,14,25.84V23.79a2.16,2.16,0,0,1,1.53-2.07l1.09-.33-.52-1a2.17,2.17,0,0,1,.35-2.52,18.92,18.92,0,0,0-2.32-.16A15.58,15.58,0,0,0,2,23.07v7.75a1,1,0,0,0,1,1H16.44Z"/><path d="M33.7,23.46l-2-.6a6.73,6.73,0,0,0-.58-1.42l1-1.86a.35.35,0,0,0-.07-.43l-1.45-1.46a.38.38,0,0,0-.43-.07l-1.85,1a7.74,7.74,0,0,0-1.43-.6l-.61-2a.38.38,0,0,0-.36-.25H23.84a.38.38,0,0,0-.35.26l-.6,2a6.85,6.85,0,0,0-1.45.61l-1.81-1a.38.38,0,0,0-.44.06l-1.47,1.44a.37.37,0,0,0-.07.44l1,1.82A7.24,7.24,0,0,0,18,22.83l-2,.61a.36.36,0,0,0-.26.35v2.05a.36.36,0,0,0,.26.35l2,.61a7.29,7.29,0,0,0,.6,1.41l-1,1.9a.37.37,0,0,0,.07.44L19.16,32a.38.38,0,0,0,.44.06l1.87-1a7.09,7.09,0,0,0,1.4.57l.6,2.05a.38.38,0,0,0,.36.26h2.05a.38.38,0,0,0,.35-.26l.6-2.05a6.68,6.68,0,0,0,1.38-.57l1.89,1a.38.38,0,0,0,.44-.06L32,30.55a.38.38,0,0,0,.06-.44l-1-1.88a6.92,6.92,0,0,0,.57-1.38l2-.61a.39.39,0,0,0,.27-.35V23.82A.4.4,0,0,0,33.7,23.46Zm-8.83,4.72a3.34,3.34,0,1,1,3.33-3.34A3.34,3.34,0,0,1,24.87,28.18Z"/>' })];

// node_modules/@cds/core/icon/shapes/animation.js
var o51 = ["animation", n23({ outline: '<path d="M10.16,31.71a4.4,4.4,0,0,1-4.64-1A4.34,4.34,0,0,1,4.23,27.6a4.41,4.41,0,0,1,.18-1.2,11.61,11.61,0,0,1-1-2.56,6.4,6.4,0,0,0,9.33,8.63A11.55,11.55,0,0,1,10.16,31.71Z"/><path d="M18.41,27.68a7.61,7.61,0,0,1-9.08-1.26,7.58,7.58,0,0,1-1.27-9.06,14.26,14.26,0,0,1-.37-2.85,9.58,9.58,0,0,0,.22,13.33,9.63,9.63,0,0,0,13.35.22A14.46,14.46,0,0,1,18.41,27.68Z"/><path d="M21.66,26.21a12.1,12.1,0,1,1,8.57-3.54h0A12.11,12.11,0,0,1,21.66,26.21ZM21.66,4A10.11,10.11,0,0,0,11.54,14.11a10,10,0,0,0,3,7.14,10.12,10.12,0,0,0,14.31,0A10.11,10.11,0,0,0,21.66,4Zm7.86,18h0Z"/>', solid: '<path d="M3.5,23.77a6.41,6.41,0,0,0,9.33,8.67A11.65,11.65,0,0,1,3.5,23.77Z"/><path d="M7.68,14.53a9.6,9.6,0,0,0,13.4,13.7A14.11,14.11,0,0,1,7.68,14.53Z"/><path d="M21.78,2A12.12,12.12,0,1,1,9.66,14.15,12.12,12.12,0,0,1,21.78,2"/>' })];

// node_modules/@cds/core/icon/shapes/application.js
var i27 = ["application", n23({ outline: '<rect x="5" y="7" width="2" height="2"/><rect x="9" y="7" width="2" height="2"/><rect x="13" y="7" width="2" height="2"/><path d="M32,4H4A2,2,0,0,0,2,6V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V6A2,2,0,0,0,32,4ZM4,6H32v4.2H4ZM4,30V11.8H32V30Z"/>', solid: '<path d="M32,4H4A2,2,0,0,0,2,6V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V6A2,2,0,0,0,32,4Zm0,6.2H4V6H32Z"/><rect x="5" y="7" width="2" height="2"/><rect x="9" y="7" width="2" height="2"/><rect x="13" y="7" width="2" height="2"/>' })];

// node_modules/@cds/core/icon/shapes/applications.js
var i28 = ["applications", n23({ outline: '<polygon points="8 8 4 8 4 10 10 10 10 4 8 4 8 8"/><polygon points="19 8 15 8 15 10 21 10 21 4 19 4 19 8"/><polygon points="30 4 30 8 26 8 26 10 32 10 32 4 30 4"/><polygon points="8 19 4 19 4 21 10 21 10 15 8 15 8 19"/><polygon points="19 19 15 19 15 21 21 21 21 15 19 15 19 19"/><polygon points="30 19 26 19 26 21 32 21 32 15 30 15 30 19"/><polygon points="8 30 4 30 4 32 10 32 10 26 8 26 8 30"/><polygon points="19 30 15 30 15 32 21 32 21 26 19 26 19 30"/><polygon points="30 30 26 30 26 32 32 32 32 26 30 26 30 30"/>', outlineAlerted: '<polygon points="8 8 4 8 4 10 10 10 10 4 8 4 8 8"/><polygon points="8 19 4 19 4 21 10 21 10 15 8 15 8 19"/><polygon points="19 19 15 19 15 21 21 21 21 15 19 15 19 19"/><polygon points="30 15 30 19 26 19 26 21 32 21 32 15 30 15"/><polygon points="8 30 4 30 4 32 10 32 10 26 8 26 8 30"/><polygon points="19 30 15 30 15 32 21 32 21 26 19 26 19 30"/><polygon points="30 30 26 30 26 32 32 32 32 26 30 26 30 30"/><path d="M19,8H15v2h4L19,9.89,21,6.5V4H19Z"/>', outlineBadged: '<polygon points="8 8 4 8 4 10 10 10 10 4 8 4 8 8"/><polygon points="19 8 15 8 15 10 21 10 21 4 19 4 19 8"/><polygon points="8 19 4 19 4 21 10 21 10 15 8 15 8 19"/><polygon points="19 19 15 19 15 21 21 21 21 15 19 15 19 19"/><polygon points="30 19 26 19 26 21 32 21 32 15 30 15 30 19"/><polygon points="8 30 4 30 4 32 10 32 10 26 8 26 8 30"/><polygon points="19 30 15 30 15 32 21 32 21 26 19 26 19 30"/><polygon points="30 30 26 30 26 32 32 32 32 26 30 26 30 30"/>', solid: '<rect x="4" y="4" width="6" height="6"/><rect x="4" y="15" width="6" height="6"/><rect x="4" y="26" width="6" height="6"/><rect x="15" y="4" width="6" height="6"/><rect x="15" y="15" width="6" height="6"/><rect x="15" y="26" width="6" height="6"/><rect x="26" y="4" width="6" height="6"/><rect x="26" y="15" width="6" height="6"/><rect x="26" y="26" width="6" height="6"/>', solidAlerted: '<rect x="4" y="4" width="6" height="6"/><rect x="4" y="15" width="6" height="6"/><rect x="4" y="26" width="6" height="6"/><rect x="15" y="15" width="6" height="6"/><rect x="15" y="26" width="6" height="6"/><rect x="26" y="15" width="6" height="6"/><rect x="26" y="26" width="6" height="6"/><path d="M15,10h4L19,9.89,21,6.5V4H15Z"/>', solidBadged: '<rect x="4" y="4" width="6" height="6"/><rect x="4" y="15" width="6" height="6"/><rect x="4" y="26" width="6" height="6"/><rect x="15" y="4" width="6" height="6"/><rect x="15" y="15" width="6" height="6"/><rect x="15" y="26" width="6" height="6"/><rect x="26" y="15" width="6" height="6"/><rect x="26" y="26" width="6" height="6"/>' })];

// node_modules/@cds/core/icon/shapes/archive.js
var h26 = ["archive", n23({ outline: '<path d="M29,32H7V22H5V32a2,2,0,0,0,2,2H29a2,2,0,0,0,2-2V22H29Z"/><path d="M14,24a1,1,0,0,0,1,1h6a1,1,0,0,0,0-2H15A1,1,0,0,0,14,24Z"/><path d="M14,18H6V14h4a3,3,0,0,1-.68-1.87s0-.09,0-.13H5.5A1.5,1.5,0,0,0,4,13.5V20H16Z"/><path d="M30.5,12H26.66s0,.09,0,.13A3,3,0,0,1,26,14h4v4H22l-2,2H32V13.5A1.5,1.5,0,0,0,30.5,12Z"/><path d="M18,19.18l6.38-6.35A1,1,0,1,0,23,11.41l-4,3.95V3a1,1,0,1,0-2,0v12.4l-4-3.95a1,1,0,0,0-1.41,1.42Z"/>', solid: '<path d="M19.41,20.6,18,22l-1.41-1.4L16,20H5V32a2,2,0,0,0,2,2H29a2,2,0,0,0,2-2V20H20ZM22,24a1,1,0,0,1-1,1H15a1,1,0,0,1,0-2h6A1,1,0,0,1,22,24Z"/><path d="M30.5,12H26.66s0,.09,0,.13a3,3,0,0,1-.88,2.12L22,18H32V13.5A1.5,1.5,0,0,0,30.5,12Z"/><path d="M10.2,14.25a3,3,0,0,1-.88-2.12s0-.09,0-.13H5.5A1.5,1.5,0,0,0,4,13.5V18H14Z"/><path d="M18,19.18l6.38-6.35A1,1,0,1,0,23,11.41l-4,3.95V3a1,1,0,1,0-2,0v12.4l-4-3.95a1,1,0,0,0-1.41,1.42Z"/>' })];

// node_modules/@cds/core/icon/shapes/assign-user.js
var t78 = ["assign-user", n23({ outline: '<path d="M18,17a7.46,7.46,0,1,0-7.45-7.46A7.46,7.46,0,0,0,18,17ZM18,4.07a5.46,5.46,0,1,1-5.45,5.45A5.46,5.46,0,0,1,18,4.07Z"/><path d="M6,31.89V25.77a16.13,16.13,0,0,1,12-5,16.61,16.61,0,0,1,8.71,2.33l1.35-1.51A18.53,18.53,0,0,0,18,18.74,17.7,17.7,0,0,0,4.21,24.8a1,1,0,0,0-.21.6v6.49A2.06,2.06,0,0,0,6,34H18.39l-1.9-2Z"/><path d="M30,31.89,30,32H26.85l-1.8,2H30a2.06,2.06,0,0,0,2-2.07V26.2l-2,2.23Z"/><path d="M34.76,18.62a1,1,0,0,0-1.41.08l-11.62,13-5.2-5.59A1,1,0,0,0,15.12,26a1,1,0,0,0-.06,1.42l6.69,7.2L34.84,20A1,1,0,0,0,34.76,18.62Z"/>', solid: '<circle cx="17.99" cy="10.36" r="6.81"/><path d="M12,26.65a2.8,2.8,0,0,1,4.85-1.8L20.71,29l6.84-7.63A16.81,16.81,0,0,0,18,18.55,16.13,16.13,0,0,0,5.5,24a1,1,0,0,0-.2.61V30a2,2,0,0,0,1.94,2h8.57l-3.07-3.3A2.81,2.81,0,0,1,12,26.65Z"/><path d="M28.76,32a2,2,0,0,0,1.94-2V26.24L25.57,32Z"/><path d="M33.77,18.62a1,1,0,0,0-1.42.08l-11.62,13-5.2-5.59A1,1,0,0,0,14.12,26a1,1,0,0,0,0,1.42l6.68,7.2L33.84,20A1,1,0,0,0,33.77,18.62Z"/>' })];

// node_modules/@cds/core/icon/shapes/atom.js
var A15 = ["atom", n23({ outline: '<path d="M18,14.05a4,4,0,1,0,4,4A4,4,0,0,0,18,14.05Zm0,6.44a2.42,2.42,0,1,1,2.42-2.42A2.42,2.42,0,0,1,18,20.49Z"/><path d="M24.23,11.71a39.14,39.14,0,0,0-4.57-3.92,22.86,22.86,0,0,1,3.48-1.72c.32-.12.62-.21.92-.3a2.28,2.28,0,0,0,3.81-.46,3.31,3.31,0,0,1,1.92.84c1.19,1.19,1.22,3.59.1,6.58.49.65.94,1.31,1.35,2,.17-.4.35-.79.49-1.18,1.47-3.85,1.28-7-.53-8.78a5.29,5.29,0,0,0-3.33-1.44,2.29,2.29,0,0,0-4.31.54c-.37.11-.74.22-1.13.37a25.79,25.79,0,0,0-4.57,2.35A26.21,26.21,0,0,0,13.28,4.2c-3.85-1.46-7-1.28-8.77.53C2.85,6.4,2.58,9.17,3.68,12.59a2.28,2.28,0,0,0,1.59,3.67c.32.61.67,1.22,1.06,1.82A25.54,25.54,0,0,0,4,22.66c-1.47,3.84-1.28,7,.53,8.77a5.63,5.63,0,0,0,4.12,1.51,13.34,13.34,0,0,0,4.65-1,26.21,26.21,0,0,0,4.58-2.35A25.79,25.79,0,0,0,22.43,32a14.16,14.16,0,0,0,3.65.9A2.3,2.3,0,0,0,30.46,32a4.55,4.55,0,0,0,.74-.57c1.81-1.81,2-4.93.53-8.77A32.68,32.68,0,0,0,24.23,11.71ZM12.57,30.09c-3,1.15-5.45,1.13-6.65-.08s-1.23-3.62-.07-6.64a22.77,22.77,0,0,1,1.71-3.48,40.19,40.19,0,0,0,3.92,4.56c.43.43.87.85,1.31,1.25q.9-.46,1.83-1.05c-.58-.52-1.16-1-1.72-1.61a34,34,0,0,1-5.74-7.47A2.29,2.29,0,0,0,5.5,11.69h0c-.75-2.5-.62-4.49.43-5.54a3.72,3.72,0,0,1,2.72-.92,11.4,11.4,0,0,1,3.93.84,22.86,22.86,0,0,1,3.48,1.72,39.14,39.14,0,0,0-4.57,3.92c-.44.44-.87.9-1.29,1.36a20.27,20.27,0,0,0,1,1.85c.54-.61,1.09-1.21,1.68-1.8a36.33,36.33,0,0,1,5-4.17,36.88,36.88,0,0,1,4.95,4.17,36.26,36.26,0,0,1,4.17,5,37,37,0,0,1-4.17,5A30.68,30.68,0,0,1,12.57,30.09ZM29.79,30l-.16.13a2.27,2.27,0,0,0-3.5.72,12.57,12.57,0,0,1-3-.77,22,22,0,0,1-3.48-1.72,39.14,39.14,0,0,0,4.57-3.92,38.26,38.26,0,0,0,3.92-4.56,22.88,22.88,0,0,1,1.72,3.48C31,26.39,31,28.81,29.79,30Z"/>', solid: '<path d="M24.23,11.71a39.14,39.14,0,0,0-4.57-3.92,22.86,22.86,0,0,1,3.48-1.72c.32-.12.62-.21.92-.3a2.28,2.28,0,0,0,3.81-.46,3.31,3.31,0,0,1,1.92.84c1.19,1.19,1.22,3.59.1,6.58.49.65.94,1.31,1.35,2,.17-.4.35-.79.49-1.18,1.47-3.85,1.28-7-.53-8.78a5.29,5.29,0,0,0-3.33-1.44,2.29,2.29,0,0,0-4.31.54c-.37.11-.74.22-1.13.37a25.79,25.79,0,0,0-4.57,2.35A26.21,26.21,0,0,0,13.28,4.2c-3.85-1.46-7-1.28-8.77.53C2.85,6.4,2.58,9.17,3.68,12.59a2.28,2.28,0,0,0,1.59,3.67c.32.61.67,1.22,1.06,1.82A25.54,25.54,0,0,0,4,22.66c-1.47,3.84-1.28,7,.53,8.77a5.63,5.63,0,0,0,4.12,1.51,13.34,13.34,0,0,0,4.65-1,26.21,26.21,0,0,0,4.58-2.35A25.79,25.79,0,0,0,22.43,32a14.16,14.16,0,0,0,3.65.9A2.3,2.3,0,0,0,30.46,32a4.55,4.55,0,0,0,.74-.57c1.81-1.81,2-4.93.53-8.77A32.68,32.68,0,0,0,24.23,11.71ZM12.57,30.09c-3,1.15-5.45,1.13-6.65-.08s-1.23-3.62-.07-6.64a22.77,22.77,0,0,1,1.71-3.48,40.19,40.19,0,0,0,3.92,4.56c.43.43.87.85,1.31,1.25q.9-.46,1.83-1.05c-.58-.52-1.16-1-1.72-1.61a34,34,0,0,1-5.74-7.47A2.29,2.29,0,0,0,5.5,11.69h0c-.75-2.5-.62-4.49.43-5.54a3.72,3.72,0,0,1,2.72-.92,11.4,11.4,0,0,1,3.93.84,22.86,22.86,0,0,1,3.48,1.72,39.14,39.14,0,0,0-4.57,3.92c-.44.44-.87.9-1.29,1.36a20.27,20.27,0,0,0,1,1.85c.54-.61,1.09-1.21,1.68-1.8a36.33,36.33,0,0,1,5-4.17,36.88,36.88,0,0,1,4.95,4.17,36.26,36.26,0,0,1,4.17,5,37,37,0,0,1-4.17,5A30.68,30.68,0,0,1,12.57,30.09ZM29.79,30l-.16.13a2.27,2.27,0,0,0-3.5.72,12.57,12.57,0,0,1-3-.77,22,22,0,0,1-3.48-1.72,39.14,39.14,0,0,0,4.57-3.92,38.26,38.26,0,0,0,3.92-4.56,22.88,22.88,0,0,1,1.72,3.48C31,26.39,31,28.81,29.79,30Z"/><circle cx="17.99" cy="18.07" r="3.3" transform="translate(-2.66 3.11) rotate(-9.22)"/>' })];

// node_modules/@cds/core/icon/shapes/backup.js
var h27 = ["backup", n23({ outline: '<rect x="6" y="22" width="24" height="2"/><rect x="26" y="26" width="4" height="2"/><path d="M30.84,13.37A1.94,1.94,0,0,0,28.93,12H26.55a3,3,0,0,1-.14,2h2.54C30,16.94,31.72,21.65,32,22.48V30H4V22.48C4.28,21.65,7.05,14,7.05,14H9.58a3,3,0,0,1-.14-2H7.07a1.92,1.92,0,0,0-1.9,1.32C2,22,2,22.1,2,22.33V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V22.33C34,22.1,34,22,30.84,13.37Z"/><path d="M18,19.84l6.38-6.35A1,1,0,1,0,23,12.08L19,16V4a1,1,0,1,0-2,0V16l-4-3.95a1,1,0,0,0-1.41,1.42Z"/>', outlineAlerted: '<rect x="6" y="22" width="24" height="2"/><rect x="26" y="26" width="4" height="2"/><path d="M18,19.84l4.47-4.44h-.23a3.67,3.67,0,0,1-2-.61L19,16V4a1,1,0,1,0-2,0V16l-4-3.95a1,1,0,0,0-1.41,1.42Z"/><path d="M31.58,15.4H29.46c1,2.85,2.31,6.37,2.54,7.08V30H4V22.48C4.28,21.65,7.05,14,7.05,14H9.58a3,3,0,0,1-.14-2H7.07a1.92,1.92,0,0,0-1.9,1.32C2,22,2,22.1,2,22.33V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V22.33C34,22.12,34,22,31.58,15.4Z"/>', outlineBadged: '<rect x="6" y="22" width="24" height="2"/><rect x="26" y="26" width="4" height="2"/><path d="M18,19.84l6.38-6.35A1,1,0,1,0,23,12.08L19,16V4a1,1,0,1,0-2,0V16l-4-3.95a1,1,0,0,0-1.41,1.42Z"/><path d="M30.87,13.45a7.55,7.55,0,0,1-.87.05,7.46,7.46,0,0,1-3.35-.8,3,3,0,0,1-.24,1.3h2.54C30,16.94,31.72,21.65,32,22.48V30H4V22.48C4.28,21.65,7.05,14,7.05,14H9.58a3,3,0,0,1-.14-2H7.07a1.92,1.92,0,0,0-1.9,1.32C2,22,2,22.1,2,22.33V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V22.33C34,22.1,34,22,30.87,13.45Z"/>', solid: '<path d="M18,19.84l6.38-6.35A1,1,0,1,0,23,12.08L19,16V4a1,1,0,1,0-2,0V16l-4-3.95a1,1,0,0,0-1.41,1.42Z"/><path d="M19.41,21.26l-.74.74H33.93c-.17-.57-.79-2.31-3.09-8.63A1.94,1.94,0,0,0,28.93,12H26.55a3,3,0,0,1-.76,2.92Z"/><path d="M16.58,21.26,10.2,14.91A3,3,0,0,1,9.44,12H7.07a1.92,1.92,0,0,0-1.9,1.32C2.86,19.68,2.24,21.43,2.07,22H17.33Z"/><path d="M2,24v6a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V24Zm28,4H26V26h4Z"/>', solidAlerted: '<path d="M16.58,21.26,10.2,14.91A3,3,0,0,1,9.44,12H7.07a1.92,1.92,0,0,0-1.9,1.32C2.86,19.68,2.24,21.43,2.07,22H17.33Z"/><path d="M2,24v6a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V24Zm28,4H26V26h4Z"/><path d="M18.66,22H33.93c-.15-.51-.65-1.93-2.35-6.6H25.3l-5.89,5.86Z"/><path d="M18,19.84l4.47-4.44h-.23a3.64,3.64,0,0,1-2-.61L19,16V4a1,1,0,1,0-2,0V16l-4-3.95a1,1,0,0,0-1.41,1.42Z"/>', solidBadged: '<path d="M18,19.84l6.38-6.35A1,1,0,1,0,23,12.08L19,16V4a1,1,0,1,0-2,0V16l-4-3.95a1,1,0,0,0-1.41,1.42Z"/><path d="M16.58,21.26,10.2,14.91A3,3,0,0,1,9.44,12H7.07a1.92,1.92,0,0,0-1.9,1.32C2.86,19.68,2.24,21.43,2.07,22H17.33Z"/><path d="M2,24v6a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V24Zm28,4H26V26h4Z"/><path d="M18.66,22H33.93c-.17-.57-.79-2.3-3.06-8.55a7.55,7.55,0,0,1-.87.05,7.46,7.46,0,0,1-3.35-.8,3,3,0,0,1-.86,2.21l-6.38,6.35Z"/>' })];

// node_modules/@cds/core/icon/shapes/backup-restore.js
var h28 = ["backup-restore", n23({ outline: '<rect x="6" y="22" width="24" height="2"/><rect x="26" y="26" width="4" height="2"/><path d="M13,9.92,17,6V19a1,1,0,1,0,2,0V6l4,3.95A1,1,0,1,0,24.38,8.5L18,2.16,11.61,8.5A1,1,0,0,0,13,9.92Z"/><path d="M30.84,13.37A1.94,1.94,0,0,0,28.93,12H21v2h7.95C30,16.94,31.72,21.65,32,22.48V30H4V22.48C4.28,21.65,7.05,14,7.05,14H15V12H7.07a1.92,1.92,0,0,0-1.9,1.32C2,22,2,22.1,2,22.33V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V22.33C34,22.1,34,22,30.84,13.37Z"/>', outlineAlerted: '<rect x="6" y="22" width="24" height="2"/><rect x="26" y="26" width="4" height="2"/><path d="M13,9.92,17,6V19a1,1,0,1,0,2,0V6l1.47,1.46,1-1.79L18,2.16,11.61,8.5A1,1,0,0,0,13,9.92Z"/><path d="M31.58,15.4H29.46c1,2.85,2.31,6.37,2.54,7.08V30H4V22.48C4.28,21.65,7.05,14,7.05,14H15V12H7.07a1.92,1.92,0,0,0-1.9,1.32C2,22,2,22.1,2,22.33V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V22.33C34,22.12,34,22,31.58,15.4Z"/>', outlineBadged: '<rect x="6" y="22" width="24" height="2"/><rect x="26" y="26" width="4" height="2"/><path d="M13,9.92,17,6V19a1,1,0,1,0,2,0V6l4,3.95a1,1,0,0,0,.71.29l.11,0a7.46,7.46,0,0,1-1.25-3.52L18,2.16,11.61,8.5A1,1,0,0,0,13,9.92Z"/><path d="M30.87,13.45a7.55,7.55,0,0,1-.87.05A7.46,7.46,0,0,1,25.51,12H21v2h7.95C30,16.94,31.72,21.65,32,22.48V30H4V22.48C4.28,21.65,7.05,14,7.05,14H15V12H7.07a1.92,1.92,0,0,0-1.9,1.32C2,22,2,22.1,2,22.33V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V22.33C34,22.1,34,22,30.87,13.45Z"/>', solid: '<path d="M2,24v6a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V24Zm28,5H26V27h4Z"/><path d="M30.84,13.37A1.94,1.94,0,0,0,28.93,12H21v6a3,3,0,1,1-6,0V12H7.07a1.92,1.92,0,0,0-1.9,1.32C2.86,19.68,2.24,21.43,2.07,22H33.93C33.77,21.43,33.14,19.69,30.84,13.37Z"/><path d="M13,9.92,17,6V18a1,1,0,1,0,2,0V6l4,3.95A1,1,0,1,0,24.38,8.5L18,2.16,11.61,8.5A1,1,0,0,0,13,9.92Z"/>', solidAlerted: '<path d="M2,24v6a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V24Zm28,5H26V27h4Z"/><path d="M13,9.92,17,6V18a1,1,0,1,0,2,0V6l1.47,1.46,1-1.79L18,2.16,11.61,8.5A1,1,0,0,0,13,9.92Z"/><path d="M31.58,15.4H22.23A3.62,3.62,0,0,1,21,15.16V18a3,3,0,1,1-6,0V12H7.07a1.92,1.92,0,0,0-1.9,1.32C2.86,19.68,2.24,21.43,2.07,22H33.93C33.79,21.49,33.28,20.07,31.58,15.4Z"/>', solidBadged: '<path d="M2,24v6a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V24Zm28,5H26V27h4Z"/><path d="M13,9.92,17,6V18a1,1,0,1,0,2,0V6l4,3.95a1,1,0,0,0,.71.29l.11,0a7.46,7.46,0,0,1-1.25-3.52L18,2.16,11.61,8.5A1,1,0,0,0,13,9.92Z"/><path d="M30.87,13.45a7.55,7.55,0,0,1-.87.05A7.46,7.46,0,0,1,25.51,12H21v6a3,3,0,1,1-6,0V12H7.07a1.92,1.92,0,0,0-1.9,1.32C2.86,19.68,2.24,21.43,2.07,22H33.93C33.77,21.43,33.15,19.7,30.87,13.45Z"/>' })];

// node_modules/@cds/core/icon/shapes/bar-code.js
var t79 = ["bar-code", n23({ outline: '<path d="M5,7A1,1,0,0,0,4,8V30a1,1,0,0,0,2,0V8A1,1,0,0,0,5,7Z"/><path d="M9,7A1,1,0,0,0,8,8V26a1,1,0,0,0,2,0V8A1,1,0,0,0,9,7Z"/><path d="M13,7a1,1,0,0,0-1,1V26a1,1,0,0,0,2,0V8A1,1,0,0,0,13,7Z"/><path d="M17,7a1,1,0,0,0-1,1V26a1,1,0,0,0,2,0V8A1,1,0,0,0,17,7Z"/><path d="M21,7a1,1,0,0,0-1,1V26a1,1,0,0,0,2,0V8A1,1,0,0,0,21,7Z"/><path d="M25,7a1,1,0,0,0-1,1V26a1,1,0,0,0,2,0V8A1,1,0,0,0,25,7Z"/><path d="M29,7a1,1,0,0,0-1,1V26a1,1,0,0,0,2,0V8A1,1,0,0,0,29,7Z"/><path d="M33,7a1,1,0,0,0-1,1V30a1,1,0,0,0,2,0V8A1,1,0,0,0,33,7Z"/>' })];

// node_modules/@cds/core/icon/shapes/battery.js
var V11 = ["battery", n23({ outline: '<path d="M18.59,11.77a1,1,0,0,0-1.73,1l2.5,4.34-6.07-1,5.29,10.59a1,1,0,0,0,1.79-.89l-3.53-7.08,6.38,1.06Z"/><path d="M25.12,4H23V3.58A1.58,1.58,0,0,0,21.42,2H14.58A1.58,1.58,0,0,0,13,3.58V4H10.88A1.88,1.88,0,0,0,9,5.88V32.12A1.88,1.88,0,0,0,10.88,34H25.12A1.88,1.88,0,0,0,27,32.12V5.88A1.88,1.88,0,0,0,25.12,4ZM25,32H11V6h4V4h6V6h4Z"/>', outlineAlerted: '<path d="M18.59,11.77a1,1,0,0,0-1.73,1l2.5,4.34-6.07-1,5.29,10.59a1,1,0,0,0,1.79-.89l-3.53-7.08,6.38,1.06Z"/><path d="M25,15.4V32H11V6h4V4h6V6h.28l1.64-2.85A1.57,1.57,0,0,0,21.42,2H14.58A1.58,1.58,0,0,0,13,3.58V4H10.88A1.88,1.88,0,0,0,9,5.88V32.12A1.88,1.88,0,0,0,10.88,34H25.12A1.88,1.88,0,0,0,27,32.12V15.4Z"/>', outlineBadged: '<path d="M18.59,11.77a1,1,0,0,0-1.73,1l2.5,4.34-6.07-1,5.29,10.59a1,1,0,0,0,1.79-.89l-3.53-7.08,6.38,1.06Z"/><path d="M25,11.58V32H11V6h4V4h6V6H22.5A7.47,7.47,0,0,1,23,3.38,1.57,1.57,0,0,0,21.42,2H14.58A1.58,1.58,0,0,0,13,3.58V4H10.88A1.88,1.88,0,0,0,9,5.88V32.12A1.88,1.88,0,0,0,10.88,34H25.12A1.88,1.88,0,0,0,27,32.12V12.87A7.5,7.5,0,0,1,25,11.58Z"/>', solid: '<path d="M22,4V2.62A.6.6,0,0,0,21.42,2H14.58a.6.6,0,0,0-.58.62V4H10A1.09,1.09,0,0,0,9,5.07v28A1,1,0,0,0,10,34H26a1,1,0,0,0,1-.94v-28A1.09,1.09,0,0,0,26,4ZM20.26,25.44a1.2,1.2,0,0,1-2.15,1.07L12.65,15.56l6,1-2.29-4a1.2,1.2,0,1,1,2.08-1.2l4.83,8.37L16.9,18.7Z"/>', solidAlerted: '<path d="M22.23,15.4A3.66,3.66,0,0,1,20.55,15l2.76,4.79L16.9,18.7l3.36,6.73a1.2,1.2,0,0,1-2.15,1.07L12.65,15.56l6,1-2.29-4a1.2,1.2,0,1,1,2.08-1.2l.09.15A3.66,3.66,0,0,1,19,9.89L22.45,4H22V2.62A.6.6,0,0,0,21.42,2H14.58a.6.6,0,0,0-.58.62V4H10A1.09,1.09,0,0,0,9,5.07v28A1,1,0,0,0,10,34H26a1,1,0,0,0,1-.94V15.4Z"/>', solidBadged: '<path d="M22.5,6a7.49,7.49,0,0,1,.28-2H22V2.62A.6.6,0,0,0,21.42,2H14.58a.6.6,0,0,0-.58.62V4H10A1.09,1.09,0,0,0,9,5.07v28A1,1,0,0,0,10,34H26a1,1,0,0,0,1-.94V12.87A7.5,7.5,0,0,1,22.5,6ZM20.26,25.44a1.2,1.2,0,0,1-2.15,1.07L12.65,15.56l6,1-2.29-4a1.2,1.2,0,1,1,2.08-1.2l4.83,8.37L16.9,18.7Z"/>' })];

// node_modules/@cds/core/icon/shapes/block.js
var V12 = ["block", n23({ outline: '<path d="M31.42,9.09l-13-6a1,1,0,0,0-.84,0l-13,6A1,1,0,0,0,4,10V27a1,1,0,0,0,.58.91l13,6a1,1,0,0,0,.84,0l13-6A1,1,0,0,0,32,27V10A1,1,0,0,0,31.42,9.09ZM18,5.1,28.61,10,18,14.9,7.39,10ZM6,11.56l11,5.08v14.8L6,26.36ZM19,31.44V16.64l11-5.08v14.8Z"/>', outlineAlerted: '<path d="M30,15.53V26.36L19,31.44V16.64l2.57-1.19a3.67,3.67,0,0,1-2.11-1.22L18,14.9,7.39,10,18,5.1l3.08,1.42,1-1.74L18.42,3.09a1,1,0,0,0-.84,0l-13,6A1,1,0,0,0,4,10V27a1,1,0,0,0,.58.91l13,6a1,1,0,0,0,.84,0l13-6A1,1,0,0,0,32,27V15.53ZM17,31.44,6,26.36V11.56l11,5.08Z"/>', outlineBadged: '<path d="M30,13.5V26.36L19,31.44V16.64l8.08-3.73a7.57,7.57,0,0,1-2-1.27L18,14.9,7.39,10,18,5.1l4.61,2.13A7.12,7.12,0,0,1,22.5,6a8,8,0,0,1,.07-1L18.42,3.09a1,1,0,0,0-.84,0l-13,6A1,1,0,0,0,4,10V27a1,1,0,0,0,.58.91l13,6a1,1,0,0,0,.84,0l13-6A1,1,0,0,0,32,27V13.22A7.37,7.37,0,0,1,30,13.5ZM17,31.44,6,26.36V11.56l11,5.08Z"/>', solid: '<path d="M31.42,9.09l-13-6a1,1,0,0,0-.84,0l-13,6A1,1,0,0,0,4,10V27a1,1,0,0,0,.58.91l13,6a1,1,0,0,0,.84,0l13-6A1,1,0,0,0,32,27V10A1,1,0,0,0,31.42,9.09ZM18,14.9,7.39,10,18,5.1,28.61,10ZM30,26.36,19,31.44V16.64l11-5.08Z"/>', solidAlerted: '<path d="M30,15.38v11L19,31.44V16.64l2.79-1.29a3.68,3.68,0,0,1-2.25-1.16L18,14.9,7.39,10,18,5.1l3,1.39,1-1.75L18.42,3.09a1,1,0,0,0-.84,0l-13,6A1,1,0,0,0,4,10V27a1,1,0,0,0,.58.91l13,6a1,1,0,0,0,.84,0l13-6A1,1,0,0,0,32,27V15.38Z"/>', solidBadged: '<path d="M30,13.5V26.36L19,31.44V16.64l8.08-3.73a7.57,7.57,0,0,1-2-1.27L18,14.9,7.39,10,18,5.1l4.61,2.13A7.12,7.12,0,0,1,22.5,6a8,8,0,0,1,.07-1L18.42,3.09a1,1,0,0,0-.84,0l-13,6A1,1,0,0,0,4,10V27a1,1,0,0,0,.58.91l13,6a1,1,0,0,0,.84,0l13-6A1,1,0,0,0,32,27V13.22A7.37,7.37,0,0,1,30,13.5Z"/>' })];

// node_modules/@cds/core/icon/shapes/blocks-group.js
var Z4 = ["blocks-group", n23({ outline: '<path d="M33.53,18.76,26.6,15.57V6.43A1,1,0,0,0,26,5.53l-7.5-3.45a1,1,0,0,0-.84,0l-7.5,3.45a1,1,0,0,0-.58.91v9.14L2.68,18.76a1,1,0,0,0-.58.91v9.78h0a1,1,0,0,0,.58.91l7.5,3.45a1,1,0,0,0,.84,0l7.08-3.26,7.08,3.26a1,1,0,0,0,.84,0l7.5-3.45a1,1,0,0,0,.58-.91h0V19.67A1,1,0,0,0,33.53,18.76Zm-2.81.91L25.61,22,20.5,19.67l5.11-2.35ZM18.1,4.08l5.11,2.35L18.1,8.78,13,6.43ZM10.6,17.31l5.11,2.35L10.6,22,5.49,19.67Zm6.5,11.49-6.5,3-6.5-3V21.23L10.18,24A1,1,0,0,0,11,24l6.08-2.8ZM11.6,15.57h0V8l6.08,2.8a1,1,0,0,0,.84,0L24.6,8v7.58h0l-6.5,3ZM32.11,28.81l-6.5,3-6.51-3V21.22L25.19,24A1,1,0,0,0,26,24l6.08-2.8Z"/>', outlineAlerted: '<path d="M33.53,18.76,26.6,15.57h-2v0l-6.5,3-6.5-3V8l6.08,2.8a1,1,0,0,0,.84,0l.24-.11a4.17,4.17,0,0,1,.29-.65l1.33-2.31-2.28,1L13,6.43l5.1-2.35,3.47,1.6,1-1.73L18.5,2.08a1,1,0,0,0-.84,0l-7.5,3.45a1,1,0,0,0-.58.91v9.14l-6.9,3.18a1,1,0,0,0-.58.91v9.78a1,1,0,0,0,.58.91l7.5,3.45a1,1,0,0,0,.84,0l7.08-3.26,7.08,3.26a1,1,0,0,0,.84,0l7.5-3.45a1,1,0,0,0,.58-.91V19.67A1,1,0,0,0,33.53,18.76ZM10.6,17.31l5.11,2.35L10.6,22,5.49,19.67Zm0,14.49-6.5-3V21.23L10.18,24A1,1,0,0,0,11,24l6.08-2.8,0,7.6Zm15-14.48,5.11,2.35L25.61,22,20.5,19.67Zm0,14.49-6.51-3V21.22L25.19,24A1,1,0,0,0,26,24l6.08-2.8,0,7.61Z"/>', outlineBadged: '<path d="M33.53,18.76,26.6,15.57V12.7a7.58,7.58,0,0,1-2-1.51v4.39l-6.5,3-6.5-3V8l6.08,2.8a1,1,0,0,0,.84,0L23,8.72a7.05,7.05,0,0,1-.47-2l-4.47,2L13,6.43l5.1-2.35,4.44,2s0-.06,0-.09a7.55,7.55,0,0,1,.27-2l-4.3-2a1,1,0,0,0-.84,0l-7.5,3.45a1,1,0,0,0-.58.91v9.14l-6.9,3.18a1,1,0,0,0-.58.91v9.78a1,1,0,0,0,.58.91l7.5,3.45a1,1,0,0,0,.84,0l7.08-3.26,7.08,3.26a1,1,0,0,0,.84,0l7.5-3.45a1,1,0,0,0,.58-.91V19.67A1,1,0,0,0,33.53,18.76ZM10.6,17.31l5.11,2.35L10.6,22,5.49,19.67Zm0,14.49-6.5-3V21.23L10.18,24A1,1,0,0,0,11,24l6.08-2.8,0,7.6Zm15-14.48,5.11,2.35L25.61,22,20.5,19.67Zm0,14.49-6.51-3V21.22L25.19,24A1,1,0,0,0,26,24l6.08-2.8,0,7.61Z"/>', solid: '<path d="M33.53,18.76,26.6,15.57V6.43A1,1,0,0,0,26,5.53l-7.5-3.45a1,1,0,0,0-.84,0l-7.5,3.45a1,1,0,0,0-.58.91v9.14L2.68,18.76a1,1,0,0,0-.58.91v9.78h0a1,1,0,0,0,.58.91l7.5,3.45a1,1,0,0,0,.84,0l7.08-3.26,7.08,3.26a1,1,0,0,0,.84,0l7.5-3.45a1,1,0,0,0,.58-.91h0V19.67A1,1,0,0,0,33.53,18.76ZM25.61,22,20.5,19.67l5.11-2.35,5.11,2.35Zm-1-6.44-6.44,3V10.87a1,1,0,0,0,.35-.08L24.6,8v7.58ZM18.1,4.08l5.11,2.35L18.1,8.78,13,6.43ZM10.6,17.31l5.11,2.35L10.6,22,5.49,19.67Zm6.5,11.49-6.5,3h0V24.11h0A1,1,0,0,0,11,24l6.08-2.8Zm15,0-6.46,3V24.11A1,1,0,0,0,26,24l6.08-2.8Z"/>', solidAlerted: '<path d="M33.53,18.76,26.6,15.57v0h-2v0l-6.43,3V10.87a1.05,1.05,0,0,0,.35-.08l.14-.06A3.23,3.23,0,0,1,19,10l1.28-2.22-2.14,1L13,6.43l5.1-2.35,3.39,1.56,1-1.73-4-1.83a1,1,0,0,0-.84,0l-7.5,3.45a1,1,0,0,0-.58.91v9.14l-6.9,3.18a1,1,0,0,0-.58.91v9.78a1,1,0,0,0,.58.91l7.5,3.45a1,1,0,0,0,.84,0l7.08-3.26,7.08,3.26a1,1,0,0,0,.84,0l7.5-3.45a1,1,0,0,0,.58-.91V19.67A1,1,0,0,0,33.53,18.76Zm-28,.91,5.11-2.36,5.11,2.35L10.6,22ZM10.6,31.8V24.11A1.08,1.08,0,0,0,11,24l6.08-2.8,0,7.6Zm9.9-12.13,5.11-2.35,5.11,2.35L25.61,22ZM25.64,31.8V24.11A.89.89,0,0,0,26,24l6.08-2.8,0,7.6Z"/>', solidBadged: '<path d="M33.53,18.76,26.6,15.57V12.69a7.66,7.66,0,0,1-2-1.47v4.34l-6.43,3V10.87a1.05,1.05,0,0,0,.35-.08L23,8.73a7.65,7.65,0,0,1-.48-2l-4.42,2L13,6.43l5.1-2.35,4.38,2V6a7.55,7.55,0,0,1,.27-2L18.5,2.08a1,1,0,0,0-.84,0l-7.5,3.45a1,1,0,0,0-.58.91v9.14l-6.9,3.18a1,1,0,0,0-.58.91v9.78a1,1,0,0,0,.58.91l7.5,3.45a1,1,0,0,0,.84,0l7.08-3.26,7.08,3.26a1,1,0,0,0,.84,0l7.5-3.45a1,1,0,0,0,.58-.91V19.67A1,1,0,0,0,33.53,18.76Zm-28,.91,5.11-2.36,5.11,2.35L10.6,22ZM10.6,31.8V24.11A1.08,1.08,0,0,0,11,24l6.08-2.8,0,7.6Zm9.9-12.13,5.11-2.35,5.11,2.35L25.61,22ZM25.64,31.8V24.11A.89.89,0,0,0,26,24l6.08-2.8,0,7.6Z"/>' })];

// node_modules/@cds/core/icon/shapes/bluetooth.js
var a35 = ["bluetooth", n23({ outline: '<path d="M26.64,25.27,19,17.53,19,3,25.21,9.4l-5.65,5.79L21,16.62l5.68-5.82a2,2,0,0,0,0-2.78L20.48,1.7A2.08,2.08,0,0,0,18.85,1,2,2,0,0,0,17,3V15.38L10.05,8.27A1,1,0,0,0,8.62,9.66L16.79,18,9.06,26a1,1,0,0,0,0,1.41,1,1,0,0,0,.7.29,1,1,0,0,0,.72-.31L17,20.68V33a2.07,2.07,0,0,0,.71,1.62A2,2,0,0,0,19,35a1.94,1.94,0,0,0,1.42-.6l6.23-6.38A2,2,0,0,0,26.64,25.27ZM19,33.05V20.29l6.21,6.36Z"/>', solid: '<path d="M26.52,24.52l-5.65-5.83-1.46-1.5v-12L23.79,9.7l-3.6,3.71,2.24,2.29,4.09-4.22a2.54,2.54,0,0,0,0-3.56L20.57,1.78A2.54,2.54,0,0,0,16.2,3.55V13.86l-5.53-5.7a1.6,1.6,0,1,0-2.3,2.23L15.75,18l-7,7.19a1.6,1.6,0,0,0,0,2.26,1.63,1.63,0,0,0,1.12.45,1.58,1.58,0,0,0,1.15-.49l5.11-5.27V32.45a2.53,2.53,0,0,0,1.59,2.36,2.44,2.44,0,0,0,.95.19,2.56,2.56,0,0,0,1.83-.77l5.95-6.15A2.54,2.54,0,0,0,26.52,24.52ZM19.4,30.83V21.77l4.39,4.53Z"/>' })];

// node_modules/@cds/core/icon/shapes/bluetooth-off.js
var t80 = ["bluetooth-off", n23({ outline: '<path d="M19,3,25.22,9.4l-5.66,5.8L21,16.63l5.68-5.83a2,2,0,0,0,0-2.78L20.48,1.7A2,2,0,0,0,18.85,1,2,2,0,0,0,17,3v11.4l2,2Z"/><path d="M4.77,5,3.36,6.42,15.89,19,9.06,26a1,1,0,0,0,.71,1.7,1,1,0,0,0,.72-.31L17,20.68V32.94a2.08,2.08,0,0,0,.71,1.63A2,2,0,0,0,19,35a2,2,0,0,0,1.42-.6l5.41-5.54,3.54,3.53L30.77,31ZM19,33.05v-11l5.41,5.41Z"/>', solid: '<path d="M19.31,5.17,23.7,9.7l-3.59,3.71,2.24,2.29,4.09-4.22a2.56,2.56,0,0,0,0-3.56l-6-6.14a2.51,2.51,0,0,0-2.77-.59,2.54,2.54,0,0,0-1.6,2.36v10l3.21,3.21Z"/><path d="M4.5,5,3.09,6.42,15.17,18.51,8.7,25.19A1.6,1.6,0,0,0,9.85,27.9,1.57,1.57,0,0,0,11,27.41l5.11-5.27V32.45a2.54,2.54,0,0,0,1.6,2.36,2.44,2.44,0,0,0,.95.19,2.55,2.55,0,0,0,1.82-.77l5.12-5.29,3.49,3.48L30.5,31ZM19.81,30.83V22.65l4,4Z"/>' })];

// node_modules/@cds/core/icon/shapes/building.js
var e55 = ["building", n23({ outline: '<path d="M31,8H23v2h8V31H23v2H33V10A2,2,0,0,0,31,8Z"/><path d="M19.88,3H6.12A2.12,2.12,0,0,0,4,5.12V33H22V5.12A2.12,2.12,0,0,0,19.88,3ZM20,31H17V28H9v3H6V5.12A.12.12,0,0,1,6.12,5H19.88a.12.12,0,0,1,.12.12Z"/><rect x="8" y="8" width="2" height="2"/><rect x="12" y="8" width="2" height="2"/><rect x="16" y="8" width="2" height="2"/><rect x="8" y="13" width="2" height="2"/><rect x="12" y="13" width="2" height="2"/><rect x="16" y="13" width="2" height="2"/><rect x="8" y="18" width="2" height="2"/><rect x="12" y="18" width="2" height="2""/><rect x="16" y="18" width="2" height="2""/><rect x="8" y="23" width="2" height="2""/><rect x="12" y="23" width="2" height="2""/><rect x="16" y="23" width="2" height="2""/><rect x="23" y="13" width="2" height="2""/><rect x="27" y="13" width="2" height="2""/><rect x="23" y="18" width="2" height="2""/><rect x="27" y="18" width="2" height="2""/><rect x="23" y="23" width="2" height="2""/><rect x="27" y="23" width="2" height="2""/>', outlineAlerted: '<rect x="8" y="8" width="2" height="2"/><rect x="12" y="8" width="2" height="2"/><rect x="16" y="8" width="2" height="2"/><rect x="8" y="13" width="2" height="2"/><rect x="12" y="13" width="2" height="2"/><rect x="16" y="13" width="2" height="2"/><rect x="8" y="18" width="2" height="2"/><rect x="12" y="18" width="2" height="2"/><rect x="16" y="18" width="2" height="2"/><rect x="8" y="23" width="2" height="2"/><rect x="12" y="23" width="2" height="2"/><rect x="16" y="23" width="2" height="2"/><rect x="23" y="18" width="2" height="2"/><rect x="27" y="18" width="2" height="2"/><rect x="23" y="23" width="2" height="2"/><rect x="27" y="23" width="2" height="2"/><path d="M20,31H17V28H9v3H6V5.12A.12.12,0,0,1,6.12,5H19.88a.12.12,0,0,1,.12.12V8.24l2-3.41A2.12,2.12,0,0,0,19.88,3H6.12A2.12,2.12,0,0,0,4,5.12V33H22V15.38a3.68,3.68,0,0,1-2-.74Z"/><polygon points="31 15.4 31 31 23 31 23 33 33 33 33 15.4 31 15.4"/>', outlineBadged: '<path d="M19.88,3H6.12A2.12,2.12,0,0,0,4,5.12V33H22V5.12A2.12,2.12,0,0,0,19.88,3ZM20,31H17V28H9v3H6V5.12A.12.12,0,0,1,6.12,5H19.88a.12.12,0,0,1,.12.12Z"/><rect x="8" y="8" width="2" height="2"/><rect x="12" y="8" width="2" height="2"/><rect x="16" y="8" width="2" height="2"/><rect x="8" y="13" width="2" height="2"/><rect x="12" y="13" width="2" height="2"/><rect x="16" y="13" width="2" height="2"/><rect x="8" y="18" width="2" height="2"/><rect x="12" y="18" width="2" height="2"/><rect x="16" y="18" width="2" height="2"/><rect x="8" y="23" width="2" height="2"/><rect x="12" y="23" width="2" height="2"/><rect x="16" y="23" width="2" height="2"/><rect x="23" y="13" width="2" height="2"/><rect x="27" y="13" width="2" height="2"/><rect x="23" y="18" width="2" height="2"/><rect x="27" y="18" width="2" height="2"/><rect x="23" y="23" width="2" height="2"/><rect x="27" y="23" width="2" height="2"/><path d="M31,13.43V31H23v2H33V12.87A7.45,7.45,0,0,1,31,13.43Z"/>', solid: '<path d="M31,8H22V33H33V10A2,2,0,0,0,31,8ZM26,25H24V23h2Zm0-5H24V18h2Zm0-5H24V13h2Zm4,10H28V23h2Zm0-5H28V18h2Zm0-5H28V13h2Z"/><path d="M17.88,3H6.12A2.12,2.12,0,0,0,4,5.12V33H9V30h6v3h5V5.12A2.12,2.12,0,0,0,17.88,3ZM9,25H7V23H9Zm0-5H7V18H9Zm0-5H7V13H9Zm0-5H7V8H9Zm4,15H11V23h2Zm0-5H11V18h2Zm0-5H11V13h2Zm0-5H11V8h2Zm4,15H15V23h2Zm0-5H15V18h2Zm0-5H15V13h2Zm0-5H15V8h2Z"/>', solidAlerted: '<path d="M17.88,3H6.12A2.12,2.12,0,0,0,4,5.12V33H9V30h6v3h5V14.64a3.67,3.67,0,0,1-1-4.76l1-1.65V5.12A2.12,2.12,0,0,0,17.88,3ZM9,25H7V23H9Zm0-5H7V18H9Zm0-5H7V13H9Zm0-5H7V8H9Zm4,15H11V23h2Zm0-5H11V18h2Zm0-5H11V13h2Zm0-5H11V8h2Zm4,15H15V23h2Zm0-5H15V18h2Zm0-5H15V13h2Zm0-5H15V8h2Z"/><path d="M22.23,15.4l-.23,0V33H33V15.4ZM26,25H24V23h2Zm0-5H24V18h2Zm4,5H28V23h2Zm0-5H28V18h2Z"/>', solidBadged: '<path d="M17.88,3H6.12A2.12,2.12,0,0,0,4,5.12V33H9V30h6v3h5V5.12A2.12,2.12,0,0,0,17.88,3ZM9,25H7V23H9Zm0-5H7V18H9Zm0-5H7V13H9Zm0-5H7V8H9Zm4,15H11V23h2Zm0-5H11V18h2Zm0-5H11V13h2Zm0-5H11V8h2Zm4,15H15V23h2Zm0-5H15V18h2Zm0-5H15V13h2Zm0-5H15V8h2Z"/><path d="M30,13.5V15H28V13.22A7.5,7.5,0,0,1,22.78,8H22V33H33V12.87A7.47,7.47,0,0,1,30,13.5ZM26,25H24V23h2Zm0-5H24V18h2Zm0-5H24V13h2Zm4,10H28V23h2Zm0-5H28V18h2Z"/>' })];

// node_modules/@cds/core/icon/shapes/bundle.js
var Z5 = ["bundle", n23({ outline: '<path d="M32.43,8.35l-13-6.21a1,1,0,0,0-.87,0l-15,7.24a1,1,0,0,0-.57.9V26.83a1,1,0,0,0,.6.92l13,6.19a1,1,0,0,0,.87,0l15-7.24a1,1,0,0,0,.57-.9V9.25A1,1,0,0,0,32.43,8.35ZM19,4.15,29.93,9.37l-5.05,2.44L14.21,6.46ZM17,15.64,6,10.41l5.9-2.85L22.6,12.91ZM5,12.13,16,17.4V31.46L5,26.2ZM18,31.45V17.36l13-6.29v14.1Z"/>', solid: '<path d="M32.43,8.35l-13-6.21a1,1,0,0,0-.87,0l-15,7.24a1,1,0,0,0-.57.9V26.83a1,1,0,0,0,.6.92l13,6.19a1,1,0,0,0,.87,0l15-7.24a1,1,0,0,0,.57-.9V9.25A1,1,0,0,0,32.43,8.35ZM19,4.15,29.93,9.37l-5.05,2.44L14.21,6.46ZM17,15.64,6,10.41l5.9-2.85L22.6,12.91Zm1,15.8V17.36l13-6.29v14.1Z"/>' })];

// node_modules/@cds/core/icon/shapes/capacitor.js
var o52 = ["capacitor", n23({ outline: '<path d="M15,34.06a1,1,0,0,1-1-1V3.15a1,1,0,1,1,2,0V33.06A1,1,0,0,1,15,34.06Z"/><path d="M21,34.06a1,1,0,0,1-1-1V3.15a1,1,0,1,1,2,0V33.06A1,1,0,0,1,21,34.06Z"/><path d="M14.46,19H3a1,1,0,0,1,0-2H14.46a1,1,0,0,1,0,2Z"/><path d="M33,19H21.54a1,1,0,0,1,0-2H33a1,1,0,0,1,0,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/cd-dvd.js
var d25 = ["cd-dvd", n23({ outline: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,30A14,14,0,1,1,32,18,14,14,0,0,1,18,32Z"/><path d="M22.33,18a4.46,4.46,0,1,0-4.45,4.46A4.46,4.46,0,0,0,22.33,18ZM17.88,20.9A2.86,2.86,0,1,1,20.73,18,2.86,2.86,0,0,1,17.88,20.9Z"/><path d="M17.88,7.43H18V5.84h-.12A12.21,12.21,0,0,0,5.68,17.75h1.6A10.61,10.61,0,0,1,17.88,7.43Z"/><path d="M30.08,18H28.49v0A10.61,10.61,0,0,1,18.25,28.63v1.6A12.22,12.22,0,0,0,30.09,18S30.08,18,30.08,18Z"/><path d="M18,11V9.44h-.12a8.62,8.62,0,0,0-8.6,8.32h1.6a7,7,0,0,1,7-6.72Z"/><path d="M18.25,25v1.6A8.61,8.61,0,0,0,26.48,18v0h-1.6v0A7,7,0,0,1,18.25,25Z"/>', solid: '<path d="M18.17,1.92a16,16,0,1,0,16,16A16,16,0,0,0,18.17,1.92ZM26.23,18h1.54a9.61,9.61,0,0,1-9.6,9.53H18V26h.17A8.07,8.07,0,0,0,26.23,18ZM6.05,18H4.45v-.08A13.72,13.72,0,0,1,18,4.21v1.6A12.13,12.13,0,0,0,6.05,17.92Zm4.05,0H8.56v-.08A9.61,9.61,0,0,1,18,8.32V9.86a8.07,8.07,0,0,0-7.9,8.06Zm4.32-.08a3.75,3.75,0,1,1,3.75,3.75A3.75,3.75,0,0,1,14.42,17.92Zm3.75,13.71H18V30h.17A12.13,12.13,0,0,0,30.28,18h1.6A13.73,13.73,0,0,1,18.17,31.63Z"/>' })];

// node_modules/@cds/core/icon/shapes/certificate.js
var h29 = ["certificate", n23({ outline: '<path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H19l.57-.7.93-1.14L20.41,28H4V8H32l0,8.56a8.41,8.41,0,0,1,2,1.81V8A2,2,0,0,0,32,6Z"/><rect x="7" y="12" width="17" height="1.6"/><rect x="7" y="16" width="11" height="1.6"/><rect x="7" y="23" width="10" height="1.6"/><path d="M27.46,17.23a6.36,6.36,0,0,0-4.4,11l-1.94,2.37.9,3.61,3.66-4.46a6.26,6.26,0,0,0,3.55,0l3.66,4.46.9-3.61-1.94-2.37a6.36,6.36,0,0,0-4.4-11Zm0,10.68a4.31,4.31,0,1,1,4.37-4.31A4.35,4.35,0,0,1,27.46,27.91Z"/>', outlineAlerted: '<rect x="7" y="16" width="11" height="1.6"/><rect x="7" y="23" width="10" height="1.6"/><path d="M27.46,17.23a6.36,6.36,0,0,0-4.4,11l-1.94,2.37.9,3.61,3.66-4.46a6.26,6.26,0,0,0,3.55,0l3.66,4.46.9-3.61-1.94-2.37a6.36,6.36,0,0,0-4.4-11Zm0,10.68a4.31,4.31,0,1,1,4.37-4.31A4.35,4.35,0,0,1,27.46,27.91Z"/><path d="M19,13.56A3.66,3.66,0,0,1,18.57,12H7v1.6H19.07Z"/><path d="M33.68,15.4H32v1.16a8.41,8.41,0,0,1,2,1.81v-3Z"/><path d="M4,28V8H20.14l1.15-2H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H19l.57-.7.93-1.14L20.41,28Z"/>', outlineBadged: '<rect x="7" y="12" width="17" height="1.6"/><rect x="7" y="16" width="11" height="1.6"/><rect x="7" y="23" width="10" height="1.6"/><path d="M27.46,17.23a6.36,6.36,0,0,0-4.4,11l-1.94,2.37.9,3.61,3.66-4.46a6.26,6.26,0,0,0,3.55,0l3.66,4.46.9-3.61-1.94-2.37a6.36,6.36,0,0,0-4.4-11Zm0,10.68a4.31,4.31,0,1,1,4.37-4.31A4.35,4.35,0,0,1,27.46,27.91Z"/><path d="M32,13.22v3.34a8.41,8.41,0,0,1,2,1.81v-6A7.45,7.45,0,0,1,32,13.22Z"/><path d="M4,28V8H22.78a7.49,7.49,0,0,1-.28-2H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H19l.57-.7.93-1.14L20.41,28Z"/>', solid: '<path d="M19,30H4a2,2,0,0,1-2-2V8A2,2,0,0,1,4,6H32a2,2,0,0,1,2,2V18.37a8.34,8.34,0,0,0-13.49,9.79l-.93,1.14ZM7,12v1.6H24V12Zm0,5.6H18V16H7Zm0,7H17V23H7Z"/><path d="M33.83,23.59a6.37,6.37,0,1,0-10.77,4.59l-1.94,2.37.9,3.61,3.66-4.46a6.26,6.26,0,0,0,3.55,0l3.66,4.46.9-3.61-1.94-2.37A6.34,6.34,0,0,0,33.83,23.59Zm-10.74,0a4.37,4.37,0,1,1,4.37,4.31A4.35,4.35,0,0,1,23.1,23.59Z"/>', solidAlerted: '<path d="M33.83,23.59a6.37,6.37,0,1,0-10.77,4.59l-1.94,2.37.9,3.61,3.66-4.46a6.26,6.26,0,0,0,3.55,0l3.66,4.46.9-3.61-1.94-2.37A6.34,6.34,0,0,0,33.83,23.59Zm-10.74,0a4.37,4.37,0,1,1,4.37,4.31A4.35,4.35,0,0,1,23.1,23.59Z"/><path d="M33.68,15.4H29.25a8.36,8.36,0,0,1,4.75,3v-3Z"/><path d="M19.07,13.6H7V12H18.57A3.67,3.67,0,0,1,19,9.89L21.29,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H19l.57-.7.93-1.14A8.34,8.34,0,0,1,25.66,15.4H22.23A3.68,3.68,0,0,1,19.07,13.6ZM17,24.6H7V23H17Zm1-7H7V16H18Z"/>', solidBadged: '<path d="M27.46,17.23a6.36,6.36,0,0,0-4.4,11l-1.94,2.37.9,3.61,3.66-4.46a6.26,6.26,0,0,0,3.55,0l3.66,4.46.9-3.61-1.94-2.37a6.36,6.36,0,0,0-4.4-11Zm0,10.68a4.31,4.31,0,1,1,4.37-4.31A4.35,4.35,0,0,1,27.46,27.91Z"/><path d="M30,13.5A7.5,7.5,0,0,1,22.5,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H19l.57-.7.93-1.14A8.34,8.34,0,0,1,34,18.37v-6A7.46,7.46,0,0,1,30,13.5ZM17,24.6H7V23H17Zm1-7H7V16H18Zm6-4H7V12H24Z"/>' })];

// node_modules/@cds/core/icon/shapes/ci-cd.js
var h30 = ["ci-cd", n23({ outline: '<path d="M23.53,19.81a7.45,7.45,0,0,1-1.65-.18,10.48,10.48,0,0,1,.72,2.13c.3,0,.61,0,.93,0a9.52,9.52,0,0,0,3-.49l-.93-1.81A7.67,7.67,0,0,1,23.53,19.81Z"/><path d="M18.36,17.87,18,17.49a7.4,7.4,0,0,1-2.2-5.92,7.31,7.31,0,0,1,1.54-4L17.26,9A1,1,0,0,0,18.17,10h.09a1,1,0,0,0,1-.91L19.6,5a1,1,0,0,0-.29-.79A1,1,0,0,0,18.52,4l-4.09.35a1,1,0,0,0,.17,2l1.29-.11a9.45,9.45,0,0,0-2.05,5.32,9.28,9.28,0,0,0,2.67,7.26l.31.37a7.33,7.33,0,0,1,2.06,4.91,7.39,7.39,0,0,1-.26,2.47l1.8.91a8.76,8.76,0,0,0,.45-3.51A9.28,9.28,0,0,0,18.36,17.87Z"/><path d="M32.4,17.91,31.19,18A9.65,9.65,0,0,0,23.53,2.45a9.33,9.33,0,0,0-3,.49l.91,1.8a7.67,7.67,0,0,1,9.76,7.39,7.58,7.58,0,0,1-1.65,4.72l.1-1.54a1,1,0,1,0-2-.13l-.28,4.08a1,1,0,0,0,.31.78.94.94,0,0,0,.69.28h.1l4.08-.42a1,1,0,0,0,.9-1.1A1,1,0,0,0,32.4,17.91Z"/><path d="M4.07,20.44h.08l4.09-.35a1,1,0,1,0-.17-2l-1.39.12a7.63,7.63,0,0,1,4.52-1.49,7.9,7.9,0,0,1,1.63.18,10.23,10.23,0,0,1-.71-2.13c-.3,0-.61,0-.92,0a9.66,9.66,0,0,0-5.9,2l.12-1.31a1,1,0,0,0-.92-1.08,1,1,0,0,0-1.08.91l-.35,4.08a1,1,0,0,0,1,1.08Z"/><path d="M18.42,28.23l-4.09.27a1,1,0,0,0,.13,2L16,30.39a7.71,7.71,0,0,1-12.54-6,7.6,7.6,0,0,1,.29-2L2,21.46a9.59,9.59,0,0,0-.47,2.95A9.7,9.7,0,0,0,17.19,32l-.12,1.18a1,1,0,0,0,.89,1.1h.11a1,1,0,0,0,1-.9l.42-4.06a1,1,0,0,0-1.06-1.1Z"/>' })];

// node_modules/@cds/core/icon/shapes/cloud-network.js
var r44 = ["cloud-network", n23({ outline: '<path d="M30.71,15.18v-1A11.28,11.28,0,0,0,19.56,2.83h-.11a11.28,11.28,0,0,0-11,8.93,7.47,7.47,0,0,0,0,14.94H29.13a5.86,5.86,0,0,0,1.58-11.52ZM29.13,24.7H8.46a5.47,5.47,0,1,1,0-10.94h1.69l.11-.87a9.27,9.27,0,0,1,18.45,1.3v1.28c0,.09,0,.18,0,.27l-.07,1.15.94.11a3.86,3.86,0,0,1-.43,7.71Z"/><path d="M29.58,31.18H18.85v-2.4h-2v2.4H6.08a1,1,0,0,0,0,2h23.5a1,1,0,0,0,0-2Z"/>' })];

// node_modules/@cds/core/icon/shapes/cloud-scale.js
var o53 = ["cloud-scale", n23({ outline: '<path d="M6.32,11.11H7.84L8,10.24A7.19,7.19,0,0,1,15.07,4h.07a7.15,7.15,0,0,1,4.71,1.83,11.1,11.1,0,0,1,3.09.64A9.18,9.18,0,0,0,15.16,2h-.09A9.2,9.2,0,0,0,6.13,9.11,6.15,6.15,0,0,0,2.33,19.95,8.09,8.09,0,0,1,3,17.71a4.12,4.12,0,0,1-.81-2.44A4.16,4.16,0,0,1,6.32,11.11Z"/><path d="M10.4,16.91h1.52L12,16a7.19,7.19,0,0,1,7.12-6.25h.07a7.17,7.17,0,0,1,5.7,2.92,11.05,11.05,0,0,1,2.72.77,9.2,9.2,0,0,0-8.4-5.69h-.09a9.2,9.2,0,0,0-8.94,7.12,6.15,6.15,0,0,0-3.64,11,8.11,8.11,0,0,1,.79-2,4.14,4.14,0,0,1,3-7Z"/><path d="M32.42,24.47v-.62a9.18,9.18,0,0,0-18.13-2.16A6.16,6.16,0,0,0,14.48,34H31a4.88,4.88,0,0,0,1.46-9.53ZM31,32H14.48a4.16,4.16,0,1,1,0-8.32H16l.11-.87a7.19,7.19,0,0,1,7.12-6.25h.07a7.21,7.21,0,0,1,7.12,7.25v1c0,.07,0,.13,0,.2l-.07,1.11.94.11A2.88,2.88,0,0,1,31,32Z"/>' })];

// node_modules/@cds/core/icon/shapes/cloud-traffic.js
var t81 = ["cloud-traffic", n23({ outline: '<path d="M26.54,20.82a.88.88,0,0,0-.88-.88H20.75l1.1-1.1A.88.88,0,0,0,20.6,17.6l-3.21,3.22L20.6,24a.88.88,0,1,0,1.25-1.24L20.76,21.7h4.9A.88.88,0,0,0,26.54,20.82Z"/><path d="M29.27,21.7a.88.88,0,1,0,0-1.76h-.58a.88.88,0,1,0,0,1.76Z"/><path d="M32.21,20h-.06a.85.85,0,0,0-.85.88.91.91,0,0,0,.91.88.88.88,0,1,0,0-1.76Z"/><path d="M32.59,11a.88.88,0,0,0-1.25,1.24l1.1,1.1H27.53a.88.88,0,1,0,0,1.76h4.9l-1.09,1.09a.88.88,0,0,0,1.25,1.24l3.21-3.22Z"/><path d="M24.5,15.07a.88.88,0,1,0,0-1.76h-.58a.88.88,0,1,0,0,1.76Z"/><path d="M21.9,14.27a.85.85,0,0,0-.85-.88H21a.88.88,0,1,0,0,1.76A.91.91,0,0,0,21.9,14.27Z"/><path d="M30.36,23.65c0,.13,0,.26,0,.39a3.77,3.77,0,0,1-3.62,3.89H7.28a5.32,5.32,0,0,1-5.13-5.48A5.32,5.32,0,0,1,7.28,17H8.91L9,16.12a8.92,8.92,0,0,1,8.62-8h.08a8.49,8.49,0,0,1,6.56,3.29h2.37a10.55,10.55,0,0,0-8.91-5.25h-.11A10.82,10.82,0,0,0,7.22,15a7.28,7.28,0,0,0-7,7.43,7.27,7.27,0,0,0,7.08,7.43H26.77A5.72,5.72,0,0,0,32.35,24a3.77,3.77,0,0,0,0-.39Z"/>' })];

// node_modules/@cds/core/icon/shapes/cluster.js
var t82 = ["cluster", n23({ outline: '<path d="M31.36,8H27.5v2H31V30H27.5v2H33V9.67A1.65,1.65,0,0,0,31.36,8Z"/><path d="M5,10H8.5V8H4.64A1.65,1.65,0,0,0,3,9.67V32H8.5V30H5Z"/><ellipse cx="18.01" cy="25.99" rx="1.8" ry="1.79"/><path d="M24.32,4H11.68A1.68,1.68,0,0,0,10,5.68V32H26V5.68A1.68,1.68,0,0,0,24.32,4ZM24,30H12V6H24Z"/><rect x="13.5" y="9.21" width="9" height="1.6"/>', outlineAlerted: '<path d="M5,10H8.5V8H4.64A1.65,1.65,0,0,0,3,9.67V32H8.5V30H5Z"/><ellipse cx="18.01" cy="25.99" rx="1.8" ry="1.79"/><path d="M19,9.89l.39-.68H13.5v1.6h5.17A3.65,3.65,0,0,1,19,9.89Z"/><path d="M24,30H12V6h9.29l1.15-2H11.68A1.68,1.68,0,0,0,10,5.68V32H26V15.4H24Z"/><polygon points="31 15.4 31 30 27.5 30 27.5 32 33 32 33 15.4 31 15.4"/>', outlineBadged: '<path d="M5,10H8.5V8H4.64A1.65,1.65,0,0,0,3,9.67V32H8.5V30H5Z"/><ellipse cx="18.01" cy="25.99" rx="1.8" ry="1.79"/><rect x="13.5" y="9.21" width="9" height="1.6"/><path d="M24,10.49V30H12V6H22.5a7.49,7.49,0,0,1,.28-2H11.68A1.68,1.68,0,0,0,10,5.68V32H26V12.34A7.53,7.53,0,0,1,24,10.49Z"/><path d="M31,13.43V30H27.5v2H33V12.87A7.45,7.45,0,0,1,31,13.43Z"/>', solid: '<path d="M31.36,8H27.5V32H33V9.67A1.65,1.65,0,0,0,31.36,8Z"/><path d="M3,9.67V32H8.5V8H4.64A1.65,1.65,0,0,0,3,9.67Z"/><path d="M24.32,4H11.68A1.68,1.68,0,0,0,10,5.68V32H26V5.68A1.68,1.68,0,0,0,24.32,4ZM18,27.79A1.79,1.79,0,1,1,19.81,26,1.8,1.8,0,0,1,18,27.79ZM23,10.6H13V9H23Z"/>', solidAlerted: '<path d="M3,9.67V32H8.5V8H4.64A1.65,1.65,0,0,0,3,9.67Z"/><rect x="27.5" y="15.4" width="5.5" height="16.6"/><path d="M19,13.56a3.68,3.68,0,0,1-.31-3H13V9h6.56l2.89-5H11.68A1.68,1.68,0,0,0,10,5.68V32H26V15.4H22.23A3.69,3.69,0,0,1,19,13.56ZM18,27.79A1.79,1.79,0,1,1,19.81,26,1.8,1.8,0,0,1,18,27.79Z"/>', solidBadged: '<path d="M3,9.67V32H8.5V8H4.64A1.65,1.65,0,0,0,3,9.67Z"/><path d="M22.5,6a7.49,7.49,0,0,1,.28-2H11.68A1.68,1.68,0,0,0,10,5.68V32H26V12.34A7.49,7.49,0,0,1,22.5,6ZM18,27.79A1.79,1.79,0,1,1,19.81,26,1.8,1.8,0,0,1,18,27.79ZM23,10.6H13V9H23Z"/><path d="M30,13.5a7.47,7.47,0,0,1-2.5-.44V32H33V12.87A7.47,7.47,0,0,1,30,13.5Z"/>' })];

// node_modules/@cds/core/icon/shapes/code.js
var t83 = ["code", n23({ outline: '<path d="M13.71,12.59a1,1,0,0,0-1.39-.26L5.79,16.78a1,1,0,0,0,0,1.65l6.53,4.45a1,1,0,1,0,1.13-1.65L8.13,17.61,13.45,14A1,1,0,0,0,13.71,12.59Z"/><path d="M30.21,16.78l-6.53-4.45A1,1,0,1,0,22.55,14l5.32,3.63-5.32,3.63a1,1,0,0,0,1.13,1.65l6.53-4.45a1,1,0,0,0,0-1.65Z"/><path d="M19.94,9.83a.9.9,0,0,0-1.09.66L15.41,24.29a.9.9,0,0,0,.66,1.09l.22,0a.9.9,0,0,0,.87-.68l3.44-13.81A.9.9,0,0,0,19.94,9.83Z"/>', outlineAlerted: '<path d="M13.71,12.59a1,1,0,0,0-1.39-.26L5.79,16.78a1,1,0,0,0,0,1.65l6.53,4.45a1,1,0,1,0,1.13-1.65L8.13,17.61,13.45,14A1,1,0,0,0,13.71,12.59Z"/><path d="M18.56,11.62,15.41,24.29a.9.9,0,0,0,.66,1.09l.22,0a.9.9,0,0,0,.87-.68L19.73,14.4a3.59,3.59,0,0,1-1.16-2.79Z"/><path d="M30.21,16.78l-2-1.38H24.64l3.24,2.21-5.32,3.63a1,1,0,0,0,1.13,1.65l6.53-4.45a1,1,0,0,0,0-1.65Z"/>', outlineBadged: '<path d="M13.71,12.59a1,1,0,0,0-1.39-.26L5.79,16.78a1,1,0,0,0,0,1.65l6.53,4.45a1,1,0,1,0,1.13-1.65L8.13,17.61,13.45,14A1,1,0,0,0,13.71,12.59Z"/><path d="M30.21,16.78l-6.53-4.45A1,1,0,1,0,22.55,14l5.32,3.63-5.32,3.63a1,1,0,0,0,1.13,1.65l6.53-4.45a1,1,0,0,0,0-1.65Z"/><path d="M19.94,9.83a.9.9,0,0,0-1.09.66L15.41,24.29a.9.9,0,0,0,.66,1.09l.22,0a.9.9,0,0,0,.87-.68l3.44-13.81A.9.9,0,0,0,19.94,9.83Z"/>' })];

// node_modules/@cds/core/icon/shapes/computer.js
var h31 = ["computer", n23({ outline: '<polygon points="9.6 22.88 9.6 10.6 24.4 10.6 25.98 9 8 9 8 22.88 9.6 22.88"/><path d="M6,7H30V23h2V6.5A1.5,1.5,0,0,0,30.5,5H5.5A1.5,1.5,0,0,0,4,6.5V23H6Z"/><path d="M1,25v3.4A2.6,2.6,0,0,0,3.6,31H32.34a2.6,2.6,0,0,0,2.6-2.6V25Zm32,3.4a.6.6,0,0,1-.6.6H3.56a.6.6,0,0,1-.6-.6V26.53h9.95a1.64,1.64,0,0,0,1.5,1h7.13a1.64,1.64,0,0,0,1.5-1H33Z"/>', outlineAlerted: '<path d="M1,25v3.4A2.6,2.6,0,0,0,3.6,31H32.34a2.6,2.6,0,0,0,2.6-2.6V25Zm32,3.4a.6.6,0,0,1-.6.6H3.56a.6.6,0,0,1-.6-.6V26.53h9.95a1.64,1.64,0,0,0,1.5,1h7.13a1.64,1.64,0,0,0,1.5-1H33Z"/><path d="M9.6,22.88V10.6h9.14A3.64,3.64,0,0,1,19,9.89L19.56,9H8V22.88Z"/><path d="M6,7H20.71l1.15-2H5.5A1.5,1.5,0,0,0,4,6.5V23H6Z"/><rect x="30" y="15.4" width="2" height="7.6"/>', outlineBadged: '<path d="M1,25v3.4A2.6,2.6,0,0,0,3.6,31H32.34a2.6,2.6,0,0,0,2.6-2.6V25Zm32,3.4a.6.6,0,0,1-.6.6H3.56a.6.6,0,0,1-.6-.6V26.53h9.95a1.64,1.64,0,0,0,1.5,1h7.13a1.64,1.64,0,0,0,1.5-1H33Z"/><path d="M22.5,6a7.52,7.52,0,0,1,.07-1H5.5A1.5,1.5,0,0,0,4,6.5V23H6V7H22.57A7.52,7.52,0,0,1,22.5,6Z"/><path d="M30,13.5V23h2V13.22A7.49,7.49,0,0,1,30,13.5Z"/><path d="M23.13,9H8V22.88H9.6V10.6H24.08A7.49,7.49,0,0,1,23.13,9Z"/>', solid: '<path d="M23.81,26c-.35.9-.94,1.5-1.61,1.5H13.74c-.68,0-1.26-.6-1.61-1.5H1v1.75A2.45,2.45,0,0,0,3.6,30H32.4A2.45,2.45,0,0,0,35,27.75V26Z"/><path d="M7,10H29V24h3V7.57A1.54,1.54,0,0,0,30.5,6H5.5A1.54,1.54,0,0,0,4,7.57V24H7Z"/>', solidAlerted: '<path d="M23.81,26c-.35.9-.94,1.5-1.61,1.5H13.74c-.68,0-1.26-.6-1.61-1.5H1v1.75A2.45,2.45,0,0,0,3.6,30H32.4A2.45,2.45,0,0,0,35,27.75V26Z"/><rect x="29" y="15.4" width="3" height="8.6"/><path d="M7,10H19L19,9.89,21.29,6H5.5A1.54,1.54,0,0,0,4,7.57V24H7Z"/>', solidBadged: '<path d="M23.81,26c-.35.9-.94,1.5-1.61,1.5H13.74c-.68,0-1.26-.6-1.61-1.5H1v1.75A2.45,2.45,0,0,0,3.6,30H32.4A2.45,2.45,0,0,0,35,27.75V26Z"/><path d="M7,10H23.66A7.46,7.46,0,0,1,22.5,6H5.5A1.54,1.54,0,0,0,4,7.57V24H7Z"/><path d="M32,13.22a7.14,7.14,0,0,1-3,.2V24h3Z"/>' })];

// node_modules/@cds/core/icon/shapes/connect.js
var o54 = ["connect", n23({ outline: '<path d="M34,17H28.23A6.25,6.25,0,0,0,22,12H14.15a6.25,6.25,0,0,0-6.21,5H2v2H7.93a6.22,6.22,0,0,0,6.22,5H22a6.22,6.22,0,0,0,6.22-5H34ZM17.08,22H14.15a4.17,4.17,0,0,1-4.31-4,4.17,4.17,0,0,1,4.31-4h2.94ZM22,22H19V14h3a4.17,4.17,0,0,1,4.31,4A4.17,4.17,0,0,1,22,22Z"/>', solid: '<path d="M17,12H14.15a6.25,6.25,0,0,0-6.21,5H2v2H7.93a6.22,6.22,0,0,0,6.22,5H17Z"/><path d="M28.23,17A6.25,6.25,0,0,0,22,12H19V24h3a6.22,6.22,0,0,0,6.22-5H34V17Z"/>' })];

// node_modules/@cds/core/icon/shapes/container.js
var Z6 = ["container", n23({ outline: '<path d="M32,30H4a2,2,0,0,1-2-2V8A2,2,0,0,1,4,6H32a2,2,0,0,1,2,2V28A2,2,0,0,1,32,30ZM4,8V28H32V8Z"/><path d="M9,25.3a.8.8,0,0,1-.8-.8v-13a.8.8,0,0,1,1.6,0v13A.8.8,0,0,1,9,25.3Z"/><path d="M14.92,25.3a.8.8,0,0,1-.8-.8v-13a.8.8,0,0,1,1.6,0v13A.8.8,0,0,1,14.92,25.3Z"/><path d="M21,25.3a.8.8,0,0,1-.8-.8v-13a.8.8,0,0,1,1.6,0v13A.8.8,0,0,1,21,25.3Z"/><path d="M27,25.3a.8.8,0,0,1-.8-.8v-13a.8.8,0,0,1,1.6,0v13A.8.8,0,0,1,27,25.3Z"/>', solid: '<path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6ZM9.63,24.23a.79.79,0,0,1-.81.77A.79.79,0,0,1,8,24.23V11.77A.79.79,0,0,1,8.82,11a.79.79,0,0,1,.81.77Zm6,0a.79.79,0,0,1-.82.77.79.79,0,0,1-.81-.77V11.77a.79.79,0,0,1,.81-.77.79.79,0,0,1,.82.77Zm6.21,0a.79.79,0,0,1-.82.77.79.79,0,0,1-.81-.77V11.77a.79.79,0,0,1,.81-.77.79.79,0,0,1,.82.77Zm6.12,0a.79.79,0,0,1-.82.77.79.79,0,0,1-.81-.77V11.77a.79.79,0,0,1,.81-.77.79.79,0,0,1,.82.77Z"/>' })];

// node_modules/@cds/core/icon/shapes/container-volume.js
var t84 = ["container-volume", n23({ outline: '<path d="M8,17.58a32.35,32.35,0,0,0,6.3.92,4.13,4.13,0,0,1,.92-1.37,30.94,30.94,0,0,1-7.22-1Z"/><path d="M6,28V8.19c.34-.76,4.31-2.11,11-2.11s10.67,1.35,11,2v.3c-.82.79-4.58,2.05-11.11,2.05A33.48,33.48,0,0,1,8,9.44v1.44a35.6,35.6,0,0,0,8.89,1c4.29,0,8.8-.58,11.11-1.82v5.07a5.3,5.3,0,0,1-1.81.88H30V8.12c0-3.19-8.17-4-13-4s-13,.85-13,4V28C4,30.63,9.39,31.68,14,32V30C9.13,29.66,6.28,28.62,6,28Z"/><path d="M8,24.28a31.3,31.3,0,0,0,6,.89v-1.4a28.93,28.93,0,0,1-6-.93Z"/><path d="M32,18H18a2,2,0,0,0-2,2V32a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V20A2,2,0,0,0,32,18ZM18,32V20H32V32Z"/><path d="M21,21.7a.7.7,0,0,0-.7.7v7.49a.7.7,0,0,0,1.4,0V22.4A.7.7,0,0,0,21,21.7Z"/><path d="M25,21.82a.7.7,0,0,0-.7.7V30a.7.7,0,1,0,1.4,0V22.52A.7.7,0,0,0,25,21.82Z"/><path d="M29,21.7a.7.7,0,0,0-.7.7v7.49a.7.7,0,1,0,1.4,0V22.4A.7.7,0,0,0,29,21.7Z"/>', solid: '<path d="M32,18H18a2,2,0,0,0-2,2V32a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V20A2,2,0,0,0,32,18ZM18,32V20H32V32Z"/><path d="M21,21.7a.7.7,0,0,0-.7.7v7.49a.7.7,0,0,0,1.4,0V22.4A.7.7,0,0,0,21,21.7Z"/><path d="M25,21.82a.7.7,0,0,0-.7.7V30a.7.7,0,1,0,1.4,0V22.52A.7.7,0,0,0,25,21.82Z"/><path d="M29,21.7a.7.7,0,0,0-.7.7v7.49a.7.7,0,1,0,1.4,0V22.4A.7.7,0,0,0,29,21.7Z"/><path d="M18,16H28V8.12c0-1.68-5.38-3-12-3S4,6.44,4,8.12V28c0,1.5,4.33,2.75,10,3V25.22a29.17,29.17,0,0,1-8-1.29V22.44l.24.1A26.63,26.63,0,0,0,14,23.82V20a4,4,0,0,1,.29-1.47A29.19,29.19,0,0,1,6,17.23V15.75l.24.09a29,29,0,0,0,9,1.32h0A4,4,0,0,1,18,16ZM6,10.54V9.05l.24.09A30.12,30.12,0,0,0,16,10.47,28.33,28.33,0,0,0,26,9.05v1.5a32.53,32.53,0,0,1-10,1.32A32.44,32.44,0,0,1,6,10.54Z"/>' })];

// node_modules/@cds/core/icon/shapes/control-lun.js
var h32 = ["control-lun", n23({ outline: '<path d="M8,24.59a25.5,25.5,0,0,0,2.75.59l1.21-1.41a24.13,24.13,0,0,1-4-.83Z"/><path d="M6,27.53V10.3c2.9,1.43,8.34,1.88,12,1.88s9.1-.45,12-1.88v5.11c-.91.82-5,2.13-12,2.13A34.81,34.81,0,0,1,8,16.33V18a40.86,40.86,0,0,0,10,1.16c3.46,0,9.13-.45,12-1.91v3.23h2V8h0s0,0,0-.07c0-3.35-8.8-4.25-14-4.25S4,4.58,4,7.93v19.6c0,2,3.17,3.14,6.83,3.72L8.38,28.68C7,28.28,6.13,27.84,6,27.53ZM18,5.68c7.15,0,11.53,1.44,12,2.25-.46.81-4.84,2.25-12,2.25S6.31,8.69,6,8C6.31,7.18,10.71,5.68,18,5.68Z"/><path d="M32.09,22H15.46l-5.41,6.31L15.49,34h16.6a2,2,0,0,0,2-2V23.93A2,2,0,0,0,32.09,22Zm0,10H16.34l-3.59-3.77L16.38,24H32.09v8Z"/><path d="M16.11,27a1,1,0,1,0,1,1A1,1,0,0,0,16.11,27Z"/>', outlineAlerted: '<path d="M8,24.59a25.5,25.5,0,0,0,2.75.59l1.21-1.41a24.13,24.13,0,0,1-4-.83Z"/><path d="M32.09,22H15.46l-5.41,6.31L15.49,34h16.6a2,2,0,0,0,2-2V23.93A2,2,0,0,0,32.09,22Zm0,10H16.34l-3.59-3.77L16.38,24H32.09v8Z"/><path d="M16.11,27a1,1,0,1,0,1,1A1,1,0,0,0,16.11,27Z"/><path d="M6,27.53V10.3c2.9,1.43,8.34,1.88,12,1.88h.59a3.59,3.59,0,0,1,.32-2H18C10.71,10.18,6.31,8.69,6,8c.32-.8,4.72-2.3,12-2.3,1.22,0,2.35.05,3.41.12l1.1-1.91c-1.6-.15-3.17-.21-4.51-.21-5.2,0-14,.9-14,4.25v19.6c0,2,3.17,3.14,6.83,3.72L8.38,28.68C7,28.28,6.13,27.84,6,27.53Z"/><path d="M8,16.33V18a40.86,40.86,0,0,0,10,1.16c3.46,0,9.13-.45,12-1.91v3.23h2V15.4H30c-.91.82-5,2.13-12,2.13A34.81,34.81,0,0,1,8,16.33Z"/>', outlineBadged: '<path d="M8,24.59a25.5,25.5,0,0,0,2.75.59l1.21-1.41a24.13,24.13,0,0,1-4-.83Z"/><path d="M32.09,22H15.46l-5.41,6.31L15.49,34h16.6a2,2,0,0,0,2-2V23.93A2,2,0,0,0,32.09,22Zm0,10H16.34l-3.59-3.77L16.38,24H32.09v8Z"/><path d="M16.11,27a1,1,0,1,0,1,1A1,1,0,0,0,16.11,27Z"/><path d="M18,17.54A34.81,34.81,0,0,1,8,16.33V18a40.86,40.86,0,0,0,10,1.16c3.46,0,9.13-.45,12-1.91v3.23h2V13.22a7.32,7.32,0,0,1-2,.28v1.91C29.09,16.23,25,17.54,18,17.54Z"/><path d="M6,27.53V10.3c2.9,1.43,8.34,1.88,12,1.88a47.66,47.66,0,0,0,7.09-.52,7.45,7.45,0,0,1-1.51-1.8,47.4,47.4,0,0,1-5.58.32C10.71,10.18,6.31,8.69,6,8c.32-.8,4.72-2.3,12-2.3,1.66,0,3.16.08,4.51.21a7.56,7.56,0,0,1,.29-2c-1.7-.17-3.38-.24-4.8-.24-5.2,0-14,.9-14,4.25v19.6c0,2,3.17,3.14,6.83,3.72L8.38,28.68C7,28.28,6.13,27.84,6,27.53Z"/>', solid: '<path d="M16.11,27a1,1,0,1,0,1,1A1,1,0,0,0,16.11,27Z"/><path d="M32.09,21H32V17.32c-1.9,2.93-10.46,3.3-14,3.3A42.43,42.43,0,0,1,8,19.56V17.88A40.59,40.59,0,0,0,18,19c5,0,13.2-.82,14-3.82V10.72c-2.21,3.36-10.49,3.46-14,3.46A42.12,42.12,0,0,1,8,13.11V11a40.59,40.59,0,0,0,10,1.14c5,0,13.28-.83,14-3.88V7.83h0c-.19-3.27-8.84-4.15-14-4.15S4.21,4.56,4,7.83H4v19.7c0,2.16,3.64,3.3,7.63,3.84l2.84,3,.59.62h17a3,3,0,0,0,3-3V23.93A3,3,0,0,0,32.09,21ZM8,26.08V24.4a25.79,25.79,0,0,0,3.46.7l-1.24,1.44C9.46,26.42,8.71,26.27,8,26.08ZM33.09,32a1,1,0,0,1-1,1H15.92L11.4,28.23,15.92,23H32.09a1,1,0,0,1,1,1Z"/>', solidAlerted: '<path d="M16.11,27a1,1,0,1,0,1,1A1,1,0,0,0,16.11,27Z"/><path d="M32.09,21H32V17.32c-1.9,2.93-10.46,3.3-14,3.3A42.43,42.43,0,0,1,8,19.56V17.88A40.59,40.59,0,0,0,18,19c4.85,0,12.8-.79,13.91-3.62H22.23a3.68,3.68,0,0,1-2.73-1.23H18A42.12,42.12,0,0,1,8,13.11V11a40.59,40.59,0,0,0,10,1.14h.59a3.61,3.61,0,0,1,.46-2.29l3.46-6c-1.6-.15-3.17-.21-4.51-.21-5.14,0-13.79.88-14,4.15H4v19.7c0,2.16,3.64,3.3,7.63,3.84l2.84,3,.59.62h17a3,3,0,0,0,3-3V23.93A3,3,0,0,0,32.09,21ZM8,26.08V24.4a25.79,25.79,0,0,0,3.46.7l-1.24,1.44C9.46,26.42,8.71,26.27,8,26.08ZM33.09,32a1,1,0,0,1-1,1H15.92L11.4,28.23,15.92,23H32.09a1,1,0,0,1,1,1Z"/>', solidBadged: '<path d="M16.11,27a1,1,0,1,0,1,1A1,1,0,0,0,16.11,27Z"/><path d="M32.09,21H32V17.32c-1.9,2.93-10.46,3.3-14,3.3A42.43,42.43,0,0,1,8,19.56V17.88A40.59,40.59,0,0,0,18,19c5,0,13.2-.82,14-3.82v-2a7.34,7.34,0,0,1-4.12,0,39.47,39.47,0,0,1-9.88,1A42.12,42.12,0,0,1,8,13.11V11a40.59,40.59,0,0,0,10,1.14,47.76,47.76,0,0,0,7.09-.52A7.45,7.45,0,0,1,22.8,3.92c-1.7-.17-3.38-.24-4.8-.24-5.14,0-13.79.88-14,4.15H4v19.7c0,2.16,3.64,3.3,7.63,3.84l2.84,3,.59.62h17a3,3,0,0,0,3-3V23.93A3,3,0,0,0,32.09,21ZM8,26.08V24.4a25.79,25.79,0,0,0,3.46.7l-1.24,1.44C9.46,26.42,8.71,26.27,8,26.08ZM33.09,32a1,1,0,0,1-1,1H15.92L11.4,28.23,15.92,23H32.09a1,1,0,0,1,1,1Z"/>' })];

// node_modules/@cds/core/icon/shapes/cpu.js
var H16 = ["cpu", n23({ outline: '<path d="M23.08,23.07h-11v1.5H23.83a.75.75,0,0,0,.75-.75V11.33h-1.5Z"/><path d="M32.2,18.15a.8.8,0,1,0,0-1.6H30v-5.4h2.2a.8.8,0,1,0,0-1.6H30V8.1A2.1,2.1,0,0,0,27.9,6H26.35V3.8a.8.8,0,1,0-1.6,0V6h-5.4V3.8a.8.8,0,1,0-1.6,0V6h-5.4V3.8a.8.8,0,1,0-1.6,0V6H8.1A2.1,2.1,0,0,0,6,8.1V9.55H3.8a.8.8,0,1,0,0,1.6H6v5.4H3.8a.8.8,0,1,0,0,1.6H6v5.4H3.8a.8.8,0,1,0,0,1.6H6V27.9A2.1,2.1,0,0,0,8.1,30h2.65v2.2a.8.8,0,1,0,1.6,0V30h5.4v2.2a.8.8,0,1,0,1.6,0V30h5.4v2.2a.8.8,0,1,0,1.6,0V30H27.9A2.1,2.1,0,0,0,30,27.9V25.15h2.2a.8.8,0,1,0,0-1.6H30v-5.4ZM28,27.9a.1.1,0,0,1-.1.1H8.1a.1.1,0,0,1-.1-.1V8.1A.1.1,0,0,1,8.1,8H27.9a.1.1,0,0,1,.1.1Z"/>', outlineAlerted: '<path d="M32.2,23.55H30v-5.4h2.2a.8.8,0,1,0,0-1.6H30V15.4H28V27.9a.1.1,0,0,1-.1.1H8.1a.1.1,0,0,1-.1-.1V8.1A.1.1,0,0,1,8.1,8h12l1.15-2H19.35V3.8a.8.8,0,1,0-1.6,0V6h-5.4V3.8a.8.8,0,1,0-1.6,0V6H8.1A2.1,2.1,0,0,0,6,8.1V9.55H3.8a.8.8,0,1,0,0,1.6H6v5.4H3.8a.8.8,0,1,0,0,1.6H6v5.4H3.8a.8.8,0,1,0,0,1.6H6V27.9A2.1,2.1,0,0,0,8.1,30h2.65v2.2a.8.8,0,1,0,1.6,0V30h5.4v2.2a.8.8,0,1,0,1.6,0V30h5.4v2.2a.8.8,0,1,0,1.6,0V30H27.9A2.1,2.1,0,0,0,30,27.9V25.15h2.2a.8.8,0,1,0,0-1.6Z"/><path d="M12.06,24.57H23.83a.75.75,0,0,0,.75-.75V15.4h-1.5v7.67h-11Z"/>', outlineBadged: '<path d="M12.06,24.57H23.83a.75.75,0,0,0,.75-.75V11.33h-1.5V23.07h-11Z"/><path d="M32.2,23.55H30v-5.4h2.2a.8.8,0,1,0,0-1.6H30V13.5a7.49,7.49,0,0,1-2-.28V27.9a.1.1,0,0,1-.1.1H8.1a.1.1,0,0,1-.1-.1V8.1A.1.1,0,0,1,8.1,8H22.78a7.49,7.49,0,0,1-.28-2H19.35V3.8a.8.8,0,1,0-1.6,0V6h-5.4V3.8a.8.8,0,1,0-1.6,0V6H8.1A2.1,2.1,0,0,0,6,8.1V9.55H3.8a.8.8,0,1,0,0,1.6H6v5.4H3.8a.8.8,0,1,0,0,1.6H6v5.4H3.8a.8.8,0,1,0,0,1.6H6V27.9A2.1,2.1,0,0,0,8.1,30h2.65v2.2a.8.8,0,1,0,1.6,0V30h5.4v2.2a.8.8,0,1,0,1.6,0V30h5.4v2.2a.8.8,0,1,0,1.6,0V30H27.9A2.1,2.1,0,0,0,30,27.9V25.15h2.2a.8.8,0,1,0,0-1.6Z"/>', solid: '<path d="M32.2,18.15a.8.8,0,1,0,0-1.6H30v-5.4h2.2a.8.8,0,1,0,0-1.6H30V8.1A2.1,2.1,0,0,0,27.9,6H26.35V3.8a.8.8,0,1,0-1.6,0V6h-5.4V3.8a.8.8,0,1,0-1.6,0V6h-5.4V3.8a.8.8,0,1,0-1.6,0V6H8.1A2.1,2.1,0,0,0,6,8.1V9.55H3.8a.8.8,0,1,0,0,1.6H6v5.4H3.8a.8.8,0,1,0,0,1.6H6v5.4H3.8a.8.8,0,1,0,0,1.6H6V27.9A2.1,2.1,0,0,0,8.1,30h2.65v2.2a.8.8,0,1,0,1.6,0V30h5.4v2.2a.8.8,0,1,0,1.6,0V30h5.4v2.2a.8.8,0,1,0,1.6,0V30H27.9A2.1,2.1,0,0,0,30,27.9V25.15h2.2a.8.8,0,1,0,0-1.6H30v-5.4ZM25,23.81A1.18,1.18,0,0,1,24,25H13V23H23V11h2Z"/>', solidAlerted: '<path d="M32.2,23.55H30v-5.4h2.2a.8.8,0,1,0,0-1.6H30V15.4H25v8.41A1.18,1.18,0,0,1,24,25H13V23H23V15.4h-.77A3.68,3.68,0,0,1,19,9.89L21.29,6H19.35V3.8a.8.8,0,1,0-1.6,0V6h-5.4V3.8a.8.8,0,1,0-1.6,0V6H8.1A2.1,2.1,0,0,0,6,8.1V9.55H3.8a.8.8,0,1,0,0,1.6H6v5.4H3.8a.8.8,0,1,0,0,1.6H6v5.4H3.8a.8.8,0,1,0,0,1.6H6V27.9A2.1,2.1,0,0,0,8.1,30h2.65v2.2a.8.8,0,1,0,1.6,0V30h5.4v2.2a.8.8,0,1,0,1.6,0V30h5.4v2.2a.8.8,0,1,0,1.6,0V30H27.9A2.1,2.1,0,0,0,30,27.9V25.15h2.2a.8.8,0,1,0,0-1.6Z"/>', solidBadged: '<path d="M32.2,23.55H30v-5.4h2.2a.8.8,0,1,0,0-1.6H30V13.5a7.46,7.46,0,0,1-5-1.92V23.81A1.18,1.18,0,0,1,24,25H13V23H23V11h1.42A7.46,7.46,0,0,1,22.5,6H19.35V3.8a.8.8,0,1,0-1.6,0V6h-5.4V3.8a.8.8,0,1,0-1.6,0V6H8.1A2.1,2.1,0,0,0,6,8.1V9.55H3.8a.8.8,0,1,0,0,1.6H6v5.4H3.8a.8.8,0,1,0,0,1.6H6v5.4H3.8a.8.8,0,1,0,0,1.6H6V27.9A2.1,2.1,0,0,0,8.1,30h2.65v2.2a.8.8,0,1,0,1.6,0V30h5.4v2.2a.8.8,0,1,0,1.6,0V30h5.4v2.2a.8.8,0,1,0,1.6,0V30H27.9A2.1,2.1,0,0,0,30,27.9V25.15h2.2a.8.8,0,1,0,0-1.6Z"/>' })];

// node_modules/@cds/core/icon/shapes/dashboard.js
var H17 = ["dashboard", n23({ outline: '<path d="M25.18,12.32l-5.91,5.81a3,3,0,1,0,1.41,1.42l5.92-5.81Z"/><path d="M18,4.25A16.49,16.49,0,0,0,5.4,31.4l.3.35H30.3l.3-.35A16.49,16.49,0,0,0,18,4.25Zm11.34,25.5H6.66a14.43,14.43,0,0,1-3.11-7.84H7v-2H3.55A14.41,14.41,0,0,1,7,11.29l2.45,2.45,1.41-1.41L8.43,9.87A14.41,14.41,0,0,1,17,6.29v3.5h2V6.3a14.47,14.47,0,0,1,13.4,13.61H28.92v2h3.53A14.43,14.43,0,0,1,29.34,29.75Z"/>', outlineBadged: '<path d="M15.85,18.69a3,3,0,1,0,4.83.85l5.92-5.81-1.41-1.41-5.91,5.81A3,3,0,0,0,15.85,18.69Z"/><path d="M32.58,13a7.45,7.45,0,0,1-2.06.44,14.4,14.4,0,0,1,1.93,6.43H28.92v2h3.53a14.43,14.43,0,0,1-3.11,7.84H6.66a14.43,14.43,0,0,1-3.11-7.84H7v-2H3.55A14.41,14.41,0,0,1,7,11.29l2.45,2.45,1.41-1.41L8.43,9.87A14.41,14.41,0,0,1,17,6.29v3.5h2V6.3A14.41,14.41,0,0,1,22.58,7a7.52,7.52,0,0,1-.08-1,7.52,7.52,0,0,1,.09-1.09A16.49,16.49,0,0,0,5.4,31.4l.3.35H30.3l.3-.35a16.45,16.45,0,0,0,2-18.36Z"/>', solid: '<path d="M18,4.25A16.49,16.49,0,0,0,5.4,31.4l.3.35H30.3l.3-.35A16.49,16.49,0,0,0,18,4.25Zm8.6,9.48-5.92,5.81a3,3,0,1,1-1.41-1.42l5.91-5.81Zm-23,6.17H7v2H3.56c0-.39-.05-.77-.05-1.17S3.53,20.18,3.55,19.9Zm4.88-10,2.46,2.46L9.47,13.74,7,11.29A14.57,14.57,0,0,1,8.43,9.87ZM19,9.79H17V6.29c.32,0,.63,0,1,0s.7,0,1,.05ZM32.49,20.74c0,.39,0,.79-.05,1.17H28.92v-2h3.53C32.47,20.18,32.49,20.46,32.49,20.74Z"/>', solidBadged: '<path d="M32.58,13a7.46,7.46,0,0,1-10-8.12A16.49,16.49,0,0,0,5.4,31.4l.3.35H30.3l.3-.35a16.45,16.45,0,0,0,2-18.36ZM17,6.29c.32,0,.63,0,1,0s.7,0,1,.05v3.5H17ZM7,21.91H3.56c0-.39-.05-.77-.05-1.17s0-.56,0-.83H7Zm2.51-8.16L7,11.29A14.57,14.57,0,0,1,8.43,9.87l2.46,2.46Zm10.62,9.19a3,3,0,1,1-.82-4.81l5.91-5.81,1.41,1.41-5.92,5.81A3,3,0,0,1,20.09,22.93Zm12.35-1H28.92v-2h3.53c0,.28,0,.55,0,.83S32.47,21.52,32.44,21.91Z"/>' })];

// node_modules/@cds/core/icon/shapes/data-cluster.js
var c19 = ["data-cluster", n23({ outline: '<path d="M26.5,4.08C22.77,4.08,19,5.4,19,7.91V9.5a18.75,18.75,0,0,1,2,.2V7.91c0-.65,2.09-1.84,5.5-1.84S32,7.27,32,7.91V18.24c0,.54-1.46,1.44-3.9,1.73v2c3.13-.32,5.9-1.6,5.9-3.75V7.91C34,5.4,30.23,4.08,26.5,4.08Z"/><path d="M4,18.24V7.91c0-.65,2.09-1.84,5.5-1.84S15,7.27,15,7.91V9.7a18.75,18.75,0,0,1,2-.2V7.91c0-2.52-3.77-3.84-7.5-3.84S2,5.4,2,7.91V18.24C2,20.4,4.77,21.67,7.9,22V20C5.46,19.68,4,18.78,4,18.24Z"/><path d="M18,10.85c-4.93,0-8.65,1.88-8.65,4.38V27.54c0,2.5,3.72,4.38,8.65,4.38s8.65-1.88,8.65-4.38V15.23C26.65,12.73,22.93,10.85,18,10.85Zm6.65,7.67c-.85,1-3.42,2-6.65,2A14.49,14.49,0,0,1,14,20v1.46a16.33,16.33,0,0,0,4,.47,12.76,12.76,0,0,0,6.65-1.56v3.12c-.85,1-3.42,2-6.65,2a14.49,14.49,0,0,1-4-.53v1.46a16.33,16.33,0,0,0,4,.47,12.76,12.76,0,0,0,6.65-1.56v2.29c0,.95-2.65,2.38-6.65,2.38s-6.65-1.43-6.65-2.38V15.23c0-.95,2.65-2.38,6.65-2.38s6.65,1.43,6.65,2.38Z"/>', outlineAlerted: '<path d="M4,18.24V7.91c0-.65,2.09-1.84,5.5-1.84S15,7.27,15,7.91V9.7a18.75,18.75,0,0,1,2-.2V7.91c0-2.52-3.77-3.84-7.5-3.84S2,5.4,2,7.91V18.24C2,20.4,4.77,21.67,7.9,22V20C5.46,19.68,4,18.78,4,18.24Z"/><path d="M24.65,18.52c-.85,1-3.42,2-6.65,2A14.49,14.49,0,0,1,14,20v1.46a16.33,16.33,0,0,0,4,.47,12.76,12.76,0,0,0,6.65-1.56v3.12c-.85,1-3.42,2-6.65,2a14.49,14.49,0,0,1-4-.53v1.46a16.33,16.33,0,0,0,4,.47,12.76,12.76,0,0,0,6.65-1.56v2.29c0,.95-2.65,2.38-6.65,2.38s-6.65-1.43-6.65-2.38V15.23c0-.95,2.65-2.38,6.65-2.38l.75,0a3.69,3.69,0,0,1-.08-2l-.66,0c-4.93,0-8.65,1.88-8.65,4.38V27.54c0,2.5,3.72,4.38,8.65,4.38s8.65-1.88,8.65-4.38V15.4h-2Z"/><path d="M22,4.8c-1.75.63-3,1.68-3,3.12V9.5l.25,0Z"/><path d="M33.68,15.4H32v2.84c0,.54-1.46,1.44-3.9,1.73v2c3.13-.32,5.9-1.6,5.9-3.75V15.38Z"/>', outlineBadged: '<path d="M4,18.24V7.91c0-.65,2.09-1.84,5.5-1.84S15,7.27,15,7.91V9.7a18.75,18.75,0,0,1,2-.2V7.91c0-2.52-3.77-3.84-7.5-3.84S2,5.4,2,7.91V18.24C2,20.4,4.77,21.67,7.9,22V20C5.46,19.68,4,18.78,4,18.24Z"/><path d="M18,10.85c-4.93,0-8.65,1.88-8.65,4.38V27.54c0,2.5,3.72,4.38,8.65,4.38s8.65-1.88,8.65-4.38V15.23C26.65,12.73,22.93,10.85,18,10.85Zm6.65,7.67c-.85,1-3.42,2-6.65,2A14.49,14.49,0,0,1,14,20v1.46a16.33,16.33,0,0,0,4,.47,12.76,12.76,0,0,0,6.65-1.56v3.12c-.85,1-3.42,2-6.65,2a14.49,14.49,0,0,1-4-.53v1.46a16.33,16.33,0,0,0,4,.47,12.76,12.76,0,0,0,6.65-1.56v2.29c0,.95-2.65,2.38-6.65,2.38s-6.65-1.43-6.65-2.38V15.23c0-.95,2.65-2.38,6.65-2.38s6.65,1.43,6.65,2.38Z"/><path d="M21,7.91c0-.33.55-.8,1.54-1.18,0-.24,0-.48,0-.73a7.52,7.52,0,0,1,.14-1.41C20.55,5.19,19,6.3,19,7.91V9.5a18.75,18.75,0,0,1,2,.2Z"/><path d="M32,13.22v5c0,.54-1.46,1.44-3.9,1.73v2c3.13-.32,5.9-1.6,5.9-3.75v-5.9A7.45,7.45,0,0,1,32,13.22Z"/>', solid: '<path d="M26.5,4.08C22.77,4.08,19,5.4,19,7.91V9.48c5.3.26,9,2.6,9,5.76v6.7l.05.06c3.13-.32,5.9-1.6,5.9-3.75V7.91C34,5.4,30.23,4.08,26.5,4.08Z"/><path d="M17,9.48V7.91c0-2.52-3.77-3.84-7.5-3.84S2,5.4,2,7.91V18.24C2,20.4,4.77,21.67,7.9,22L8,21.93v-6.7C8,12.08,11.7,9.74,17,9.48Z"/><path d="M18,10.85c-4.93,0-8.65,1.88-8.65,4.38V27.54c0,2.5,3.72,4.38,8.65,4.38s8.65-1.88,8.65-4.38V25.38A13.58,13.58,0,0,1,18,28a16.77,16.77,0,0,1-6-1V25.27a14.5,14.5,0,0,0,6,1.17c4.21,0,7.65-1.23,8.63-3.23V20.47C24.8,22,21.72,23,18,23a16.77,16.77,0,0,1-6-1V20.23a14.5,14.5,0,0,0,6,1.17c4.21,0,7.65-1.11,8.63-3.11V15.23C26.65,12.73,22.93,10.85,18,10.85Z"/>', solidAlerted: '<path d="M17,9.48V7.91c0-2.52-3.77-3.84-7.5-3.84S2,5.4,2,7.91V18.24C2,20.4,4.77,21.67,7.9,22L8,21.93v-6.7C8,12.08,11.7,9.74,17,9.48Z"/><path d="M19,13.56a3.68,3.68,0,0,1-.39-2.7l-.66,0c-4.93,0-8.65,1.88-8.65,4.38V27.54c0,2.5,3.72,4.38,8.65,4.38s8.65-1.88,8.65-4.38V25.38A13.58,13.58,0,0,1,18,28a16.77,16.77,0,0,1-6-1V25.27a14.5,14.5,0,0,0,6,1.17c4.21,0,7.65-1.23,8.63-3.23V20.47C24.8,22,21.72,23,18,23a16.77,16.77,0,0,1-6-1V20.23a14.5,14.5,0,0,0,6,1.17c4.21,0,7.65-1.11,8.63-3.11V15.4H22.23A3.69,3.69,0,0,1,19,13.56Z"/><path d="M22,4.8c-1.75.63-3,1.68-3,3.12V9.48l.27,0Z"/><path d="M33.68,15.4H28v6.53l.05.06c3.13-.32,5.9-1.6,5.9-3.75V15.38Z"/>', solidBadged: '<path d="M17,9.48V7.91c0-2.52-3.77-3.84-7.5-3.84S2,5.4,2,7.91V18.24C2,20.4,4.77,21.67,7.9,22L8,21.93v-6.7C8,12.08,11.7,9.74,17,9.48Z"/><path d="M18,10.85c-4.93,0-8.65,1.88-8.65,4.38V27.54c0,2.5,3.72,4.38,8.65,4.38s8.65-1.88,8.65-4.38V25.38A13.58,13.58,0,0,1,18,28a16.77,16.77,0,0,1-6-1V25.27a14.5,14.5,0,0,0,6,1.17c4.21,0,7.65-1.23,8.63-3.23V20.47C24.8,22,21.72,23,18,23a16.77,16.77,0,0,1-6-1V20.23a14.5,14.5,0,0,0,6,1.17c4.21,0,7.65-1.11,8.63-3.11V15.23C26.65,12.73,22.93,10.85,18,10.85Z"/><path d="M22.5,6a7.52,7.52,0,0,1,.14-1.4C20.55,5.19,19,6.3,19,7.91V9.48a15.33,15.33,0,0,1,5,1A7.46,7.46,0,0,1,22.5,6Z"/><path d="M30,13.49A7.47,7.47,0,0,1,27.35,13a4,4,0,0,1,.7,2.23v6.7l.05.06c3.13-.32,5.9-1.6,5.9-3.75V12.33A7.46,7.46,0,0,1,30,13.49Z"/>' })];

// node_modules/@cds/core/icon/shapes/deploy.js
var d26 = ["deploy", n23({ outline: '<path d="M33,2H22.1a1,1,0,0,0,0,2h8.53l-8.82,9a1,1,0,1,0,1.43,1.4L32,5.46V13.9a1,1,0,0,0,2,0V3A1,1,0,0,0,33,2Z"/><path d="M11.54,10.73l-9,5.17a1,1,0,0,0-.5.87v11a1,1,0,0,0,.5.87l9,5.15a1,1,0,0,0,1,0l9-5.15a1,1,0,0,0,.5-.87v-11a1,1,0,0,0-.5-.87l-9-5.17A1,1,0,0,0,11.54,10.73ZM11,31.08l-7-4V18.44l7,4ZM12,21,4.81,16.87,12,12.78l7.21,4.12Zm8,6.09-7,4V22.44l7-4Z"/>', solid: '<path d="M33,2H22.1a1,1,0,0,0,0,2h8.53l-8.82,9a1,1,0,1,0,1.43,1.4L32,5.46V13.9a1,1,0,0,0,2,0V3A1,1,0,0,0,33,2Z"/><path d="M12.46,10.73a1,1,0,0,0-1,0l-8.68,5L12,21l9.19-5.26Z"/><path d="M2,27.73a1,1,0,0,0,.5.87L11,33.46v-11L2,17.28Z"/><path d="M13,33.46l8.5-4.86a1,1,0,0,0,.5-.87V17.29l-9,5.15Z"/>' })];

// node_modules/@cds/core/icon/shapes/devices.js
var H18 = ["devices", n23({ outline: '<path d="M32,13H24a2,2,0,0,0-2,2V30a2,2,0,0,0,2,2h8a2,2,0,0,0,2-2V15A2,2,0,0,0,32,13Zm0,2V26H24V15ZM24,30V27.6h8V30Z"/><path d="M20,22H4V6H28v5h2V6a2,2,0,0,0-2-2H4A2,2,0,0,0,2,6V22a2,2,0,0,0,2,2H20Z"/><path d="M20,26H9a1,1,0,0,0,0,2H20Z"/>', solid: '<path d="M32,13H24a2,2,0,0,0-2,2V30a2,2,0,0,0,2,2h8a2,2,0,0,0,2-2V15A2,2,0,0,0,32,13Zm0,2V28H24V15Z"/><path d="M28,4H4A2,2,0,0,0,2,6V22a2,2,0,0,0,2,2h8v2H9.32A1.2,1.2,0,0,0,8,27a1.2,1.2,0,0,0,1.32,1H19.92v-.37H20V22H4V6H28v5h2V6A2,2,0,0,0,28,4Z"/>' })];

// node_modules/@cds/core/icon/shapes/digital-signature.js
var t85 = ["digital-signature", n23({ outline: '<path d="M17,33.9c-3.9,0-7.9-1.5-10.5-4.5c-0.9,0.7-2,1.3-3.1,1.8c-0.5,0.2-1.1,0-1.3-0.5c-0.2-0.5,0-1.1,0.5-1.3c1-0.4,1.9-0.9,2.7-1.5c-1.2-1.9-1.9-4.3-1.9-7.1c0-5.3,2.5-8.1,4.8-8.1c1.5,0,3.2,1.2,3.2,4.7c0,4.7-1.1,8.2-3.5,10.8c2.2,2.6,5.6,3.9,9,3.9c0.6,0,1,0.4,1,1S17.6,33.9,17,33.9z M8.2,14.6c-1,0-2.8,1.8-2.8,6.1c0,2.2,0.5,4.1,1.4,5.6c1.8-2.1,2.7-5.1,2.7-9.1C9.5,15.7,9,14.6,8.2,14.6z"/><path d="M33.3,4.8c-0.8-1.4-2.1-2.4-3.6-2.8c-0.5-0.1-1.1,0.2-1.2,0.7l-0.9,3.4l-1.6-2.8c-0.1-0.2-0.4-0.4-0.7-0.5c-0.3-0.1-0.6,0-0.8,0.2c-1.1,0.8-1.8,1.9-2.2,3.2l-4.2,15.4c-0.4,1.5-0.2,3.2,0.6,4.6c0.6,1.1,1.6,1.9,2.7,2.5l-1.1,4c-0.1,0.5,0.2,1.1,0.7,1.2c0.1,0,0.2,0,0.3,0c0.4,0,0.8-0.3,1-0.7l1.1-3.9c0.2,0,0.4,0,0.6,0c1,0,2-0.3,3-0.8c1.4-0.8,2.4-2.1,2.8-3.6l1.6-5.8c0,0,0,0,0,0l1.6-5.8c0.1-0.4,0-0.8-0.4-1.1c-0.3-0.2-0.8-0.3-1.1-0.1l-4,2.3l0.6-2.1l5.7-3.2c0.3-0.2,0.5-0.5,0.5-0.8C34.2,7.1,33.9,5.9,33.3,4.8z M24.2,6.8c0.1-0.5,0.3-0.9,0.6-1.3l1.9,3.4l-1.4,5.1l-2.1-3.7L24.2,6.8zM20.4,25.2c-0.5-0.9-0.7-2-0.4-3l2.5-9.2l2.1,3.7L23.2,22c0,0,0,0,0,0l-1.3,4.7C21.3,26.4,20.8,25.9,20.4,25.2z M27.7,24.3c-0.3,1-0.9,1.9-1.9,2.4c-0.6,0.4-1.3,0.5-2,0.5L25,23l3.7-2.1L27.7,24.3z M30.3,15.1l-0.8,3.1l-3.7,2.1l0.8-3.1L30.3,15.1zM28.6,9.6l0.1-0.4c0.1-0.1,0.1-0.3,0.1-0.4l1.2-4.5c0.6,0.3,1.1,0.9,1.5,1.5c0.3,0.6,0.5,1.2,0.5,1.8L28.6,9.6z"/>' })];

// node_modules/@cds/core/icon/shapes/disconnect.js
var h33 = ["disconnect", n23({ outline: '<path d="M12.17,6A6.21,6.21,0,0,0,6,11H2.13v2H6a6.23,6.23,0,0,0,6.21,5H17V6ZM15.1,16H12.17a4.2,4.2,0,0,1-4.31-4,4.17,4.17,0,0,1,4.31-4H15.1Z"/><path d="M33.92,23H30.14a6.25,6.25,0,0,0-6.21-5H19v2H14a1,1,0,1,0,0,2h5v4H14a1,1,0,0,0-1,1,1,1,0,0,0,1,1h5v2h4.94a6.23,6.23,0,0,0,6.22-5h3.76Zm-10,5H21V20h2.94a4.17,4.17,0,0,1,4.31,4A4.17,4.17,0,0,1,23.94,28Z"/>', solid: '<path d="M12,6a6.21,6.21,0,0,0-6.21,5H2v2H5.83A6.23,6.23,0,0,0,12,18H17V6Z"/><path d="M33.79,23H30.14a6.25,6.25,0,0,0-6.21-5H19v2H14a1,1,0,0,0-1,1,1,1,0,0,0,1,1h5v4H14a1,1,0,0,0-1,1,1,1,0,0,0,1,1h5v2h4.94a6.23,6.23,0,0,0,6.22-5h3.64Z"/>' })];

// node_modules/@cds/core/icon/shapes/display.js
var A16 = ["display", n23({ outline: '<path d="M32.5,3H3.5A1.5,1.5,0,0,0,2,4.5v21A1.5,1.5,0,0,0,3.5,27h29A1.5,1.5,0,0,0,34,25.5V4.5A1.5,1.5,0,0,0,32.5,3ZM32,25H4V5H32Z"/><polygon points="7.7 8.76 28.13 8.76 29.94 7.16 6.1 7.16 6.1 23 7.7 23 7.7 8.76"/><path d="M26,32H24.26a3.61,3.61,0,0,1-1.5-2.52V28.13H21.24V29.5A4.2,4.2,0,0,0,22.17,32H13.83a4.2,4.2,0,0,0,.93-2.52V28.13H13.24V29.5A3.61,3.61,0,0,1,11.74,32H9.94a1,1,0,1,0,0,2H26.06a.92.92,0,0,0,1-1A1,1,0,0,0,26,32Z"/>', outlineAlerted: '<path d="M26,32H24.26a3.61,3.61,0,0,1-1.5-2.52V28.13H21.24V29.5A4.2,4.2,0,0,0,22.17,32H13.83a4.2,4.2,0,0,0,.93-2.52V28.13H13.24V29.5A3.61,3.61,0,0,1,11.74,32H9.94a1,1,0,1,0,0,2H26.06a.92.92,0,0,0,1-1A1,1,0,0,0,26,32Z"/><path d="M33.68,15.4H32V25H4V5H21.87L23,3H3.5A1.5,1.5,0,0,0,2,4.5v21A1.5,1.5,0,0,0,3.5,27h29A1.5,1.5,0,0,0,34,25.5V15.38Z"/><polygon points="7.7 23 7.7 8.76 19.7 8.76 20.62 7.16 6.1 7.16 6.1 23 7.7 23"/>', outlineBadged: '<path d="M26,32H24.26a3.61,3.61,0,0,1-1.5-2.52V28.13H21.24V29.5A4.2,4.2,0,0,0,22.17,32H13.83a4.2,4.2,0,0,0,.93-2.52V28.13H13.24V29.5A3.61,3.61,0,0,1,11.74,32H9.94a1,1,0,1,0,0,2H26.06a.92.92,0,0,0,1-1A1,1,0,0,0,26,32Z"/><path d="M6.1,23H7.7V8.76H23a7.44,7.44,0,0,1-.43-1.6H6.1Z"/><path d="M32,13.22V25H4V5H22.57a7.45,7.45,0,0,1,.55-2H3.5A1.5,1.5,0,0,0,2,4.5v21A1.5,1.5,0,0,0,3.5,27h29A1.5,1.5,0,0,0,34,25.5V12.34A7.45,7.45,0,0,1,32,13.22Z"/>', solid: '<path d="M26,32H24.26a3.61,3.61,0,0,1-1.5-2.52V28.13H13.24V29.5A3.61,3.61,0,0,1,11.74,32H9.94a1,1,0,1,0,0,2H26.06a.92.92,0,0,0,1-1A1,1,0,0,0,26,32Z"/><path d="M32.5,3H3.5A1.5,1.5,0,0,0,2,4.5v21A1.5,1.5,0,0,0,3.5,27h29A1.5,1.5,0,0,0,34,25.5V4.5A1.5,1.5,0,0,0,32.5,3ZM31,21.83H5V7H31Z"/>', solidAlerted: '<path d="M26,32H24.26a3.61,3.61,0,0,1-1.5-2.52V28.13H13.24V29.5A3.61,3.61,0,0,1,11.74,32H9.94a1,1,0,1,0,0,2H26.06a.92.92,0,0,0,1-1A1,1,0,0,0,26,32Z"/><path d="M33.68,15.4H31v6.43H5V7H20.71L23,3H3.5A1.5,1.5,0,0,0,2,4.5v21A1.5,1.5,0,0,0,3.5,27h29A1.5,1.5,0,0,0,34,25.5V15.38Z"/>', solidBadged: '<path d="M26,32H24.26a3.61,3.61,0,0,1-1.5-2.52V28.13H13.24V29.5A3.61,3.61,0,0,1,11.74,32H9.94a1,1,0,1,0,0,2H26.06a.92.92,0,0,0,1-1A1,1,0,0,0,26,32Z"/><path d="M31,13.43v8.41H5V7H22.57a7.29,7.29,0,0,1,.55-4H3.5A1.5,1.5,0,0,0,2,4.5v21A1.5,1.5,0,0,0,3.5,27h29A1.5,1.5,0,0,0,34,25.5V12.34A7.44,7.44,0,0,1,31,13.43Z"/>' })];

// node_modules/@cds/core/icon/shapes/download-cloud.js
var d27 = ["download-cloud", n23({ outline: '<path d="M30.31,13c0-.1,0-.21,0-.32a10.26,10.26,0,0,0-10.45-10,10.47,10.47,0,0,0-9.6,6.1A9.65,9.65,0,0,0,10.89,28a3,3,0,0,1,0-2A7.65,7.65,0,0,1,11,10.74l.67,0,.23-.63a8.43,8.43,0,0,1,8-5.4,8.26,8.26,0,0,1,8.45,8,7.75,7.75,0,0,1,0,.8l-.08.72.65.3A6,6,0,0,1,26.38,26H25.09a3,3,0,0,1,0,2h1.28a8,8,0,0,0,3.93-15Z"/><path d="M22.28,26.07a1,1,0,0,0-.71.29L19,28.94V16.68a1,1,0,1,0-2,0V28.94l-2.57-2.57A1,1,0,0,0,13,27.78l5,5,5-5a1,1,0,0,0-.71-1.71Z"/>', outlineAlerted: '<path d="M22.28,26.07a1,1,0,0,0-.71.29L19,28.94V16.68a1,1,0,1,0-2,0V28.94l-2.57-2.57A1,1,0,0,0,13,27.78l5,5,5-5a1,1,0,0,0-.71-1.71Z"/><path d="M19.87,4.69a8.81,8.81,0,0,1,2,.25l1-1.8a10.8,10.8,0,0,0-3.07-.45,10.47,10.47,0,0,0-9.6,6.1A9.65,9.65,0,0,0,10.89,28a3,3,0,0,1,0-2A7.65,7.65,0,0,1,11,10.74l.67,0,.23-.63A8.43,8.43,0,0,1,19.87,4.69Z"/><path d="M32.9,15.4H30.21A6,6,0,0,1,26.38,26H25.09a3,3,0,0,1,0,2h1.28A8,8,0,0,0,32.9,15.4Z"/>', outlineBadged: '<path d="M22.28,26.07a1,1,0,0,0-.71.29L19,28.94V16.68a1,1,0,1,0-2,0V28.94l-2.57-2.57A1,1,0,0,0,13,27.78l5,5,5-5a1,1,0,0,0-.71-1.71Z"/><path d="M19.87,4.69a8.79,8.79,0,0,1,2.68.42,7.45,7.45,0,0,1,.5-1.94,10.79,10.79,0,0,0-3.18-.48,10.47,10.47,0,0,0-9.6,6.1A9.65,9.65,0,0,0,10.89,28a3,3,0,0,1,0-2A7.65,7.65,0,0,1,11,10.74l.67,0,.23-.63A8.43,8.43,0,0,1,19.87,4.69Z"/><path d="M30.92,13.44a7.13,7.13,0,0,1-2.63-.14c0,.08,0,.15,0,.23l-.08.72.65.3A6,6,0,0,1,26.38,26H25.09a3,3,0,0,1,0,2h1.28a8,8,0,0,0,4.54-14.61Z"/>' })];

// node_modules/@cds/core/icon/shapes/export.js
var h34 = ["export", n23({ outline: '<path d="M6,13.61h7.61V6H24v8.38h2V6a2,2,0,0,0-2-2H10.87L4,10.87V30a2,2,0,0,0,2,2H24a2,2,0,0,0,2-2H6Zm0-1.92L11.69,6H12v6H6Z"/><path d="M28.32,16.35a1,1,0,0,0-1.41,1.41L30.16,21H18a1,1,0,0,0,0,2H30.19l-3.28,3.28a1,1,0,1,0,1.41,1.41L34,22Z"/>', outlineAlerted: '<path d="M28.32,16.35a1,1,0,0,0-1.41,1.41L30.16,21H18a1,1,0,0,0,0,2H30.19l-3.28,3.28a1,1,0,1,0,1.41,1.41L34,22Z"/><path d="M6,13.61h7.61V6h7.68l1.15-2H10.87L4,10.87V30a2,2,0,0,0,2,2H24a2,2,0,0,0,2-2H6Zm0-1.92L11.69,6H12v6H6Z"/>', outlineBadged: '<path d="M28.32,16.35a1,1,0,0,0-1.41,1.41L30.16,21H18a1,1,0,0,0,0,2H30.19l-3.28,3.28a1,1,0,1,0,1.41,1.41L34,22Z"/><path d="M26,12.34a7.53,7.53,0,0,1-2-1.85v3.89h2Z"/><path d="M6,13.61h7.61V6H22.5a7.49,7.49,0,0,1,.28-2H10.87L4,10.87V30a2,2,0,0,0,2,2H24a2,2,0,0,0,2-2H6Zm0-1.92L11.69,6H12v6H6Z"/>', solid: '<path d="M17,22a1,1,0,0,1,1-1h8V6a2,2,0,0,0-2-2H10.87L4,10.86V30a2,2,0,0,0,2,2H24a2,2,0,0,0,2-2V23H18A1,1,0,0,1,17,22ZM12,12H6v-.32L11.69,6H12Z"/><path d="M29.32,16.35a1,1,0,0,0-1.41,1.41L31.16,21H26v2h5.19l-3.28,3.28a1,1,0,1,0,1.41,1.41L35,22Z"/>', solidAlerted: '<path d="M29.32,16.35a1,1,0,0,0-1.41,1.41L31.16,21H26v2h5.19l-3.28,3.28a1,1,0,1,0,1.41,1.41L35,22Z"/><path d="M17,22a1,1,0,0,1,1-1h8V15.4H22.23A3.68,3.68,0,0,1,19,9.89L22.45,4H10.87L4,10.86V30a2,2,0,0,0,2,2H24a2,2,0,0,0,2-2V23H18A1,1,0,0,1,17,22ZM12,12H6v-.32L11.69,6H12Z"/>', solidBadged: '<path d="M29.32,16.35a1,1,0,0,0-1.41,1.41L31.16,21H26v2h5.19l-3.28,3.28a1,1,0,1,0,1.41,1.41L35,22Z"/><path d="M17,22a1,1,0,0,1,1-1h8V12.34A7.46,7.46,0,0,1,22.78,4H10.87L4,10.86V30a2,2,0,0,0,2,2H24a2,2,0,0,0,2-2V23H18A1,1,0,0,1,17,22ZM12,12H6v-.32L11.69,6H12Z"/>' })];

// node_modules/@cds/core/icon/shapes/file-share-2.js
var e56 = ["file-share-2", n23({ outline: '<path d="M25,4H7.83A1.89,1.89,0,0,0,6,5.91V30.09A1.89,1.89,0,0,0,7.83,32H28.17A1.87,1.87,0,0,0,30,30.09V9ZM24,5.78,28.2,10H24ZM8,30V6H22v6h6V30Z"/><path d="M22,21.81a2.11,2.11,0,0,0-1.44.62l-5.72-2.66v-.44l5.66-2.65a2.08,2.08,0,1,0,.06-2.94h0a2.14,2.14,0,0,0-.64,1.48v.23l-5.64,2.66a2.08,2.08,0,1,0-.08,2.95l.08-.08,5.67,2.66v.3A2.09,2.09,0,1,0,22,21.84Z"/>', solid: '<path d="M25,4.06H7.83A1.89,1.89,0,0,0,6,6V30.15a1.89,1.89,0,0,0,1.83,1.91H28.17A1.87,1.87,0,0,0,30,30.15V9ZM22,26a2.09,2.09,0,0,1-2.1-2.08v-.3L14.27,21l-.08.08a2.08,2.08,0,1,1,.08-2.95l5.64-2.66v-.23a2.14,2.14,0,0,1,.64-1.48h0a2.08,2.08,0,1,1-.06,2.94l-5.66,2.65v.44l5.72,2.66A2.11,2.11,0,0,1,22,21.81l0,0A2.09,2.09,0,0,1,22,26Zm2-16V5.84l4.2,4.22Z"/>' })];

// node_modules/@cds/core/icon/shapes/file-share.js
var H19 = ["file-share", n23({ outline: '<path d="M30,9H16.42L14.11,5.82A2,2,0,0,0,12.49,5H6A2,2,0,0,0,4,7V29a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V11A2,2,0,0,0,30,9Zm0,20H6V13h7.31a2,2,0,0,0,2-2H6V7h6.49l2.61,3.59a1,1,0,0,0,.81.41H30Z"/><path d="M21.91,22.48a2.06,2.06,0,0,0-1.44.62l-5.72-2.66V20l5.66-2.65a2.08,2.08,0,1,0,.06-2.94,2.12,2.12,0,0,0-.64,1.48v.23l-5.64,2.66a2.08,2.08,0,1,0-.08,2.95l.08-.08,5.67,2.66v.3a2.09,2.09,0,1,0,2.08-2.1Z"/>', solid: '<path d="M30,9H16.42L14.11,5.82A2,2,0,0,0,12.49,5H6A2,2,0,0,0,4,7V29a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V11A2,2,0,0,0,30,9ZM6,7h6.49l2.72,4H6ZM21.94,26.64a2.09,2.09,0,0,1-2.11-2.06l0-.3-5.67-2.66-.08.08a2.08,2.08,0,1,1,.08-2.95l5.64-2.66v-.23a2.08,2.08,0,1,1,.58,1.46L14.75,20v.47l5.72,2.66a2.07,2.07,0,1,1,1.47,3.54Z"/>' })];

// node_modules/@cds/core/icon/shapes/flask.js
var V13 = ["flask", n23({ outline: '<path d="M31.43,27.28,23,14.84V4h1a1,1,0,0,0,0-2H12a1,1,0,0,0,0,2h1V14.84L4.51,27.36A4.29,4.29,0,0,0,5,32.8,4.38,4.38,0,0,0,8.15,34H28a4.24,4.24,0,0,0,3.42-6.72ZM29.85,31a2.62,2.62,0,0,1-2,1H8a2.2,2.2,0,0,1-2.06-1.41,2.68,2.68,0,0,1,.29-2.17l3-4.44,14,0-1.31-2H10.57L15,15.46V4h6V15.46l8.84,13.05A2.23,2.23,0,0,1,29.85,31Z"/>', solid: '<path d="M31.49,27.4,23,14.94V4h1a1,1,0,0,0,0-2H12.08a1,1,0,0,0,0,2H13V14.94L4.58,27.31a4.31,4.31,0,0,0-.78,3A4.23,4.23,0,0,0,8,34H27.86A4.36,4.36,0,0,0,31,32.8,4.23,4.23,0,0,0,31.49,27.4ZM15,15.49V4h6V15.49L26.15,23H9.85Z"/>' })];

// node_modules/@cds/core/icon/shapes/floppy.js
var V14 = ["floppy", n23({ outline: '<path d="M27.36,4H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V8.78ZM25,30H11V22H25Zm5,0H27V22a2,2,0,0,0-2-2H11a2,2,0,0,0-2,2v8H6V6h4v6a2,2,0,0,0,2,2H24a2,2,0,0,0,2-2H12V6H26.51L30,9.59Z"/>', outlineAlerted: '<path d="M30,15.4V30H27V22a2,2,0,0,0-2-2H11a2,2,0,0,0-2,2v8H6V6h4v6a2,2,0,0,0,2,2h7.35a3.54,3.54,0,0,1-.77-2H12V6h9.29l1.15-2H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V15.4ZM25,30H11V22H25Z"/>', outlineBadged: '<path d="M30,13.5h0V30H27V22a2,2,0,0,0-2-2H11a2,2,0,0,0-2,2v8H6V6h4v6a2,2,0,0,0,2,2H24a2,2,0,0,0,2-1.68l-.43-.3H12V6H22.5a7.49,7.49,0,0,1,.28-2H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V13.22A7.49,7.49,0,0,1,30,13.5ZM25,30H11V22H25Z"/>', solid: '<path d="M27.36,4H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V8.78ZM26,30H10V21.5A1.5,1.5,0,0,1,11.5,20h13A1.5,1.5,0,0,1,26,21.5ZM24,14H12a2,2,0,0,1-2-2V6h2v6H26A2,2,0,0,1,24,14Z"/>', solidAlerted: '<path d="M22.23,15.4A3.69,3.69,0,0,1,19.35,14H12a2,2,0,0,1-2-2V6h2v6h6.58A3.67,3.67,0,0,1,19,9.89L22.45,4H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V15.4ZM26,30H10V21.5A1.5,1.5,0,0,1,11.5,20h13A1.5,1.5,0,0,1,26,21.5Z"/>', solidBadged: '<path d="M30,13.5a7.46,7.46,0,0,1-4-1.18A2,2,0,0,1,24,14H12a2,2,0,0,1-2-2V6h2v6H25.54a7.45,7.45,0,0,1-2.76-8H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V13.22A7.49,7.49,0,0,1,30,13.5ZM26,30H10V21.5A1.5,1.5,0,0,1,11.5,20h13A1.5,1.5,0,0,1,26,21.5Z"/>' })];

// node_modules/@cds/core/icon/shapes/forking.js
var o55 = ["forking", n23({ outline: '<path d="M18.37,21.71,10.3,16.88a1,1,0,0,1-.47-.83V6.27l2.24,3A1,1,0,0,0,13.66,8l-4-5.33A1,1,0,0,0,8,2.69L4,8a1,1,0,0,0,.2,1.4,1,1,0,0,0,.6.2,1,1,0,0,0,.8-.39l2.23-3v9.78A3,3,0,0,0,9.28,18.6l8.06,4.82A1.37,1.37,0,0,1,18,24.59v8.83a1,1,0,0,0,2,0V24.59A3.37,3.37,0,0,0,18.37,21.71Z"/><path d="M31.66,8l-4-5.33a1,1,0,0,0-1.59,0L22,8a1,1,0,0,0,.2,1.4,1,1,0,0,0,.6.2,1,1,0,0,0,.8-.39l2.32-3.07v9.89a1,1,0,0,1-.47.83l-.11.08-4.87,3.88a5.52,5.52,0,0,1,1.11,1.68l5-4a3,3,0,0,0,1.38-2.51V6.38l2.15,2.85A1,1,0,1,0,31.66,8Z"/>' })];

// node_modules/@cds/core/icon/shapes/hard-disk.js
var a36 = ["hard-disk", n23({ outline: '<path d="M34,21.08,30.86,8.43A2,2,0,0,0,28.94,7H7.06A2,2,0,0,0,5.13,8.47L2,21.08a1,1,0,0,0,0,.24V29a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V21.31A1,1,0,0,0,34,21.08ZM4,29V21.44L7.06,9H28.93L32,21.44V29Z"/><rect x="6" y="20" width="24" height="2"/><rect x="26" y="24" width="4" height="2"/>', outlineAlerted: '<rect x="6" y="20" width="24" height="2"/><rect x="26" y="24" width="4" height="2"/><path d="M34,21.08l-1.4-5.68H30.51l1.49,6V29H4V21.44L7.06,9h12.5l1.15-2H7.06A2,2,0,0,0,5.13,8.47L2,21.08a1,1,0,0,0,0,.24V29a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V21.31A1,1,0,0,0,34,21.08Z"/>', outlineBadged: '<rect x="6" y="20" width="24" height="2"/><rect x="26" y="24" width="4" height="2"/><path d="M34,21.08,32,13.21a7.49,7.49,0,0,1-2,.29l2,7.94V29H4V21.44L7.06,9H23.13a7.45,7.45,0,0,1-.55-2H7.06A2,2,0,0,0,5.13,8.47L2,21.08a1,1,0,0,0,0,.24V29a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V21.31A1,1,0,0,0,34,21.08Z"/>', solid: '<path d="M30.86,8.43A2,2,0,0,0,28.94,7H7.06A2,2,0,0,0,5.13,8.47L2.29,20H33.71Z"/><path d="M2,22v7a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V22Zm28,5H26V25h4Z"/>', solidAlerted: '<path d="M2,22v7a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V22Zm28,5H26V25h4Z"/><path d="M32.58,15.4H22.23A3.68,3.68,0,0,1,19,9.89L20.71,7H7.06A2,2,0,0,0,5.13,8.47L2.29,20H33.71Z"/>', solidBadged: '<path d="M2,22v7a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V22Zm28,5H26V25h4Z"/><path d="M32,13.21A7.47,7.47,0,0,1,22.57,7H7.06A2,2,0,0,0,5.13,8.47L2.29,20H33.71Z"/>' })];

// node_modules/@cds/core/icon/shapes/hard-drive-disks.js
var H20 = ["hard-drive-disks", n23({ outline: '<path d="M26,5.74A1.74,1.74,0,0,0,24.26,4H3.74A1.74,1.74,0,0,0,2,5.74V20.26A1.74,1.74,0,0,0,3.74,22H4V6H26Z"/><path d="M30,9.74A1.74,1.74,0,0,0,28.26,8H7.74A1.74,1.74,0,0,0,6,9.74V24.26A1.74,1.74,0,0,0,7.74,26H8V10H30Z"/><path d="M32.26,12H11.74A1.74,1.74,0,0,0,10,13.74V28.26A1.74,1.74,0,0,0,11.74,30H32.26A1.74,1.74,0,0,0,34,28.26V13.74A1.74,1.74,0,0,0,32.26,12ZM32,28H12V14H32Z"/><path d="M19.94,23.68a2.64,2.64,0,1,0-2.7-2.63A2.67,2.67,0,0,0,19.94,23.68Zm0-3.87a1.24,1.24,0,1,1-1.29,1.24A1.27,1.27,0,0,1,19.94,19.81Z"/><path d="M19.94,16.22a4.93,4.93,0,0,1,4.95,4.35H23.71V22h4.41a.7.7,0,0,0,0-1.4H26.31a6.33,6.33,0,0,0-6.37-5.75,6.58,6.58,0,0,0-1.48.17l.35,1.37A4.73,4.73,0,0,1,19.94,16.22Z"/><path d="M19.94,27.27a6.42,6.42,0,0,0,5.67-3.35H23.93a5,5,0,0,1-4,1.95,4.91,4.91,0,0,1-5-4.82,5.16,5.16,0,0,1,.08-.79L13.63,20a7,7,0,0,0-.09,1A6.32,6.32,0,0,0,19.94,27.27Z"/>', solid: '<path d="M26,5.74A1.74,1.74,0,0,0,24.26,4H3.74A1.74,1.74,0,0,0,2,5.74V20.26A1.74,1.74,0,0,0,3.74,22H4V6H26Z"/><path d="M30,9.74A1.74,1.74,0,0,0,28.26,8H7.74A1.74,1.74,0,0,0,6,9.74V24.26A1.74,1.74,0,0,0,7.74,26H8V10H30Z"/><path d="M19.62,22.6A1.55,1.55,0,1,0,18,21.05,1.6,1.6,0,0,0,19.62,22.6Z"/><path d="M32.26,12H11.74A1.74,1.74,0,0,0,10,13.74V28.26A1.74,1.74,0,0,0,11.74,30H32.26A1.74,1.74,0,0,0,34,28.26V13.74A1.74,1.74,0,0,0,32.26,12ZM19.62,17.74a3.31,3.31,0,1,1-3.38,3.31A3.35,3.35,0,0,1,19.62,17.74Zm0,11.13a7.94,7.94,0,0,1-8-7.82,7.83,7.83,0,0,1,.11-1.29l1.75.3a5.36,5.36,0,0,0-.11,1,6.18,6.18,0,0,0,6.28,6.06,6.35,6.35,0,0,0,5-2.46h2.1A8.06,8.06,0,0,1,19.62,28.87ZM29.89,22.2H24.36V20.44h1.48A6.19,6.19,0,0,0,19.62,15a6.48,6.48,0,0,0-1.41.16l-.45-1.7a8.16,8.16,0,0,1,1.86-.22,8,8,0,0,1,8,7.21h2.26a.88.88,0,0,1,0,1.76Z"/>' })];

// node_modules/@cds/core/icon/shapes/hard-drive.js
var r45 = ["hard-drive", n23({ outline: '<path d="M34,8a2,2,0,0,0-2-2H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2ZM32,28H4V8H32V28Z"/><circle cx="6.21" cy="10.25" r="1.25"/><circle cx="29.81" cy="10.25" r="1.25"/><circle cx="6.21" cy="25.42" r="1.25"/><circle cx="29.81" cy="25.42" r="1.25"/><path d="M11.88,18.08a3.59,3.59,0,1,0,3.59-3.59,3.84,3.84,0,0,0-.91.13L15,16.16a2.08,2.08,0,0,1,.5-.07,2,2,0,1,1-2,2,1.64,1.64,0,0,1,.08-.5L12,17.16A3.53,3.53,0,0,0,11.88,18.08Z"/><path d="M15.47,25.73a7.66,7.66,0,0,1-7.65-7.65,7.55,7.55,0,0,1,.27-2L6.54,15.7a9.24,9.24,0,0,0,17.8,4.95H22.66A7.64,7.64,0,0,1,15.47,25.73Z"/><path d="M28.22,17.83a.8.8,0,0,0-.8-.8H24.66a9.26,9.26,0,0,0-9.19-8.2,9.36,9.36,0,0,0-2.38.32l.42,1.54a7.86,7.86,0,0,1,2-.26A7.66,7.66,0,0,1,23,17H20.92a.8.8,0,0,0,0,1.6h6.5A.8.8,0,0,0,28.22,17.83Z"/>', solid: '<path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6ZM12,17.16l1.54.42a1.64,1.64,0,0,0-.08.5,2,2,0,1,0,2-2,2.08,2.08,0,0,0-.5.07l-.41-1.54a3.84,3.84,0,0,1,.91-.13,3.59,3.59,0,1,1-3.59,3.59A3.53,3.53,0,0,1,12,17.16ZM5.31,8A1.25,1.25,0,1,1,4.06,9.25,1.25,1.25,0,0,1,5.31,8Zm0,20.06a1.25,1.25,0,1,1,1.25-1.25A1.25,1.25,0,0,1,5.31,28.06Zm10.16-.73A9.22,9.22,0,0,1,6.54,15.7l1.55.41a7.55,7.55,0,0,0-.27,2,7.64,7.64,0,0,0,14.84,2.57h1.68A9.25,9.25,0,0,1,15.47,27.33Zm12-8.7h-6.5a.8.8,0,0,1,0-1.6H23a7.66,7.66,0,0,0-7.57-6.6,7.86,7.86,0,0,0-2,.26l-.42-1.54a9.36,9.36,0,0,1,2.38-.32A9.26,9.26,0,0,1,24.66,17h2.76a.8.8,0,0,1,0,1.6Zm3.39,9.43a1.25,1.25,0,1,1,1.25-1.25A1.25,1.25,0,0,1,30.81,28.06Zm0-17.56a1.25,1.25,0,1,1,1.25-1.25A1.25,1.25,0,0,1,30.81,10.5Z"/>' })];

// node_modules/@cds/core/icon/shapes/helix.js
var h35 = ["helix", n23({ outline: '<path d="M8.88,13.07a.9.9,0,0,1-.49-1.66l8.93-5.73a.9.9,0,1,1,1,1.52L9.37,12.92A.9.9,0,0,1,8.88,13.07Z"/><path d="M13.25,15.11a.9.9,0,0,1-.49-1.66L18,10.08a.9.9,0,1,1,1,1.52L13.74,15A.9.9,0,0,1,13.25,15.11Z"/><path d="M19.72,30.23a.9.9,0,0,1-.49-1.66l8.93-5.73a.9.9,0,0,1,1,1.52L20.2,30.09A.9.9,0,0,1,19.72,30.23Z"/><path d="M18.92,25.94a.9.9,0,0,1-.49-1.66l5.25-3.37a.9.9,0,1,1,1,1.51L19.4,25.8A.89.89,0,0,1,18.92,25.94Z"/><path d="M21.56,5.69a3.59,3.59,0,0,1,.15,3.53L18.83,15h2.25l2.43-4.87a5.61,5.61,0,0,0-5-8.14H13.26l-1,2h6.22A3.61,3.61,0,0,1,21.56,5.69Z"/><path d="M32.91,20.78A5.53,5.53,0,0,0,27.66,17H9.31a3.54,3.54,0,0,1-3.56-3.67,3.61,3.61,0,0,1,.42-1.54l4.26-8.49a1,1,0,1,0-1.79-.9L4.4,10.84A5.67,5.67,0,0,0,4,15.22,5.53,5.53,0,0,0,9.28,19h7.6l-3.44,6.87a5.64,5.64,0,0,0,1.5,6.92A5.38,5.38,0,0,0,18.41,34h5.25l1-2H18.43a3.58,3.58,0,0,1-3.22-5.21L19.11,19h8.54a3.42,3.42,0,0,1,2.15.71,3.57,3.57,0,0,1,1,4.43l-4.12,8.22a1,1,0,1,0,1.79.9l4.06-8.1A5.67,5.67,0,0,0,32.91,20.78Z"/>', solid: '<path d="M32.16,19.63A5.55,5.55,0,0,0,27.42,17H10.06a4.36,4.36,0,0,1-3.67-2,4.07,4.07,0,0,1-.19-4.13l3.62-7,1.42,1.63-2.74,5.3,8.84-5.66a.91.91,0,0,1,1,1.53L7.84,13.38a2.13,2.13,0,0,0,.24.52,2.28,2.28,0,0,0,1.65,1L18.11,9.5a.91.91,0,0,1,1,1.52L13,14.94H20.8l2.41-4.82a5.6,5.6,0,0,0-5-8.12H9a1,1,0,0,0-.9.56L3.88,10.89a5.6,5.6,0,0,0,5,8.12h7.65l-3.43,6.87a5.6,5.6,0,0,0,5,8.12h9.28a1,1,0,0,0,.93-.65l4.14-8.24A5.58,5.58,0,0,0,32.16,19.63ZM17.75,25.57A.91.91,0,0,1,18,24.31l6-3.88A.91.91,0,1,1,25,22l-6,3.88a.91.91,0,0,1-1.26-.27ZM29,24.34l-9,5.78a.91.91,0,1,1-1-1.53l9-5.78a.91.91,0,1,1,1,1.53Z"/>' })];

// node_modules/@cds/core/icon/shapes/host-group.js
var t86 = ["host-group", n23({ outline: '<path d="M21.08,34h-14A1.08,1.08,0,0,1,6,33V12a1.08,1.08,0,0,1,1.08-1.08h14A1.08,1.08,0,0,1,22.16,12V33A1.08,1.08,0,0,1,21.08,34ZM8.16,31.88H20V13H8.16Z"/><rect x="10.08" y="14.96" width="8" height="2"/><path d="M26.1,27.81h-2V9h-12V7h13a1,1,0,0,1,1,1Z"/><path d="M30.08,23h-2V5h-11V3h12a1,1,0,0,1,1,1Z"/><rect x="13.08" y="27.88" width="2" height="2.16"/>', solid: '<path d="M15.08,31 L1.08,31 C0.513427197,31.0015564 0.0419663765,30.5650186 0,30 L0,9 C0,8.40353247 0.48353247,7.92 1.08,7.92 L15.08,7.92 C15.6764675,7.92 16.16,8.40353247 16.16,9 L16.16,30 C16.1180336,30.5650186 15.6465728,31.0015564 15.08,31 Z M4.08,11.96 L4.08,13.96 L12.08,13.96 L12.08,11.96 L4.08,11.96 Z M7.08,24.88 L7.08,27.04 L9.08,27.04 L9.08,24.88 L7.08,24.88 Z"/><path d="M20.1,24.81 L18.1,24.81 L18.1,6 L6.1,6 L6.1,4 L19.1,4 C19.6522847,4 20.1,4.44771525 20.1,5 L20.1,24.81 Z"/><path d="M24.08,20 L22.08,20 L22.08,2 L11.08,2 L11.08,0 L23.08,0 C23.6322847,0 24.08,0.44771525 24.08,1 L24.08,20 Z"/>' })];

// node_modules/@cds/core/icon/shapes/host.js
var t87 = ["host", n23({ outline: '<path d="M26.5,2H9.5A1.5,1.5,0,0,0,8,3.5V34H28V3.5A1.5,1.5,0,0,0,26.5,2ZM26,32H10V4H26Z"/><rect x="12" y="6.2" width="12" height="1.6"/><rect x="12" y="10.2" width="12" height="1.6"/><path d="M18,22.78a3,3,0,1,0,3,3A3,3,0,0,0,18,22.78Zm0,4.5a1.5,1.5,0,1,1,1.5-1.5A1.5,1.5,0,0,1,18,27.28Z"/>', outlineAlerted: '<path d="M18,28.78a3,3,0,1,0-3-3A3,3,0,0,0,18,28.78Zm0-4.5a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,18,24.28Z"/><path d="M18.89,10.2H12v1.6h6.56A3.7,3.7,0,0,1,18.89,10.2Z"/><polygon points="12 6.2 12 7.8 20.25 7.8 21.18 6.2 12 6.2"/><path d="M26,32H10V4H22.45L23.6,2H9.5A1.5,1.5,0,0,0,8,3.5V34H28V15.4H26Z"/><path d="M34.78,11.05,29.06,1.14a1.28,1.28,0,0,0-2.21,0l-5.72,9.91A1.27,1.27,0,0,0,22.23,13H33.68A1.27,1.27,0,0,0,34.78,11.05Z"/>', outlineBadged: '<path d="M15,25.78a3,3,0,1,0,3-3A3,3,0,0,0,15,25.78Zm4.5,0a1.5,1.5,0,1,1-1.5-1.5A1.5,1.5,0,0,1,19.5,25.78Z"/><path d="M12,11.8H24V10.49c-.07-.1-.15-.19-.21-.29H12Z"/><path d="M12,6.2V7.8H22.73a7,7,0,0,1-.22-1.6Z"/><path d="M26,32H10V4H22.78a7.65,7.65,0,0,1,.88-2H9.5A1.5,1.5,0,0,0,8,3.5V34H28V13.22a7.65,7.65,0,0,1-2-.88Z"/><circle cx="30" cy="6" r="5"/>', solid: '<circle cx="18" cy="25.64" r="1.5"/><path d="M26.5,1.86H9.5A1.5,1.5,0,0,0,8,3.36v30.5H28V3.36A1.5,1.5,0,0,0,26.5,1.86ZM18,28.64a3,3,0,1,1,3-3A3,3,0,0,1,18,28.64Zm6-17H12v-1.6H24Zm0-4H12V6.06H24Z"/>', solidAlerted: '<circle cx="18" cy="25.64" r="1.5"/><path d="M19.05,13.56a3.64,3.64,0,0,1-.49-1.9H12v-1.6h7a.91.91,0,0,1,.09-.17l1.28-2.23H12V6.06h9.25l2.43-4.2H9.5A1.5,1.5,0,0,0,8,3.36v30.5H28V15.4H22.23A3.66,3.66,0,0,1,19.05,13.56ZM18,28.64a3,3,0,1,1,3-3A3,3,0,0,1,18,28.64Z"/><path d="M34.78,11.05,29.06,1.14a1.28,1.28,0,0,0-2.21,0l-5.72,9.91A1.27,1.27,0,0,0,22.23,13H33.68A1.27,1.27,0,0,0,34.78,11.05Z"/>', solidBadged: '<circle cx="18" cy="25.64" r="1.5"/><path d="M24,10.49v1.17H12v-1.6H23.7a7.42,7.42,0,0,1-1-2.4H12V6.06H22.5V6a7.45,7.45,0,0,1,1.25-4.14H9.5A1.5,1.5,0,0,0,8,3.36v30.5H28V13.22A7.5,7.5,0,0,1,24,10.49ZM18,28.64a3,3,0,1,1,3-3A3,3,0,0,1,18,28.64Z"/><circle cx="30" cy="6" r="5"/>' })];

// node_modules/@cds/core/icon/shapes/import.js
var L9 = ["import", n23({ outline: '<path d="M28,4H14.87L8,10.86V15h2V13.61h7.61V6H28V30H8a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V6A2,2,0,0,0,28,4ZM16,12H10v-.32L15.7,6H16Z"/><path d="M11.94,26.28a1,1,0,1,0,1.41,1.41L19,22l-5.68-5.68a1,1,0,0,0-1.41,1.41L15.2,21H3a1,1,0,1,0,0,2H15.23Z"/>', outlineAlerted: '<path d="M11.94,26.28a1,1,0,1,0,1.41,1.41L19,22l-5.68-5.68a1,1,0,0,0-1.41,1.41L15.2,21H3a1,1,0,1,0,0,2H15.23Z"/><path d="M28,15.4V30H8a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V15.4Z"/><path d="M10,13.61h7.61V6h3.68l1.15-2H14.87L8,10.86V15h2Zm0-1.92L15.7,6H16v6H10Z"/>', outlineBadged: '<path d="M11.94,26.28a1,1,0,1,0,1.41,1.41L19,22l-5.68-5.68a1,1,0,0,0-1.41,1.41L15.2,21H3a1,1,0,1,0,0,2H15.23Z"/><path d="M28,13.22V30H8a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V13.5A7.49,7.49,0,0,1,28,13.22Z"/><path d="M10,13.61h7.61V6H22.5a7.49,7.49,0,0,1,.28-2H14.87L8,10.86V15h2Zm0-1.92L15.7,6H16v6H10Z"/>', solid: '<path d="M3,21a1,1,0,1,0,0,2H8V21Z"/><path d="M28,4H14.87L8,10.86V21H15.2l-3.25-3.25a1,1,0,0,1,1.41-1.41L19,22l-5.68,5.68a1,1,0,0,1-1.41-1.41L15.23,23H8v7a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V6A2,2,0,0,0,28,4ZM16,12H10v-.32L15.69,6H16Z"/>', solidAlerted: '<path d="M3,21a1,1,0,1,0,0,2H8V21Z"/><path d="M22.23,15.4A3.68,3.68,0,0,1,19,9.89L22.45,4H14.87L8,10.86V21H15.2l-3.25-3.25a1,1,0,0,1,1.41-1.41L19,22l-5.68,5.68a1,1,0,0,1-1.41-1.41L15.23,23H8v7a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V15.4ZM16,12H10v-.32L15.69,6H16Z"/>', solidBadged: '<path d="M3,21a1,1,0,1,0,0,2H8V21Z"/><path d="M22.5,6a7.49,7.49,0,0,1,.28-2H14.87L8,10.86V21H15.2l-3.25-3.25a1,1,0,0,1,1.41-1.41L19,22l-5.68,5.68a1,1,0,0,1-1.41-1.41L15.23,23H8v7a2,2,0,0,0,2,2H28a2,2,0,0,0,2-2V13.5A7.5,7.5,0,0,1,22.5,6ZM16,12H10v-.32L15.69,6H16Z"/>' })];

// node_modules/@cds/core/icon/shapes/inductor.js
var o56 = ["inductor", n23({ outline: '<path d="M24.31,25.81c-1.75,0-3-2.49-3-6a12.79,12.79,0,0,1,1.72-6.7,2.57,2.57,0,0,0-3.79,0A12.79,12.79,0,0,1,21,19.76c0,3.56-1.23,6-3,6s-3-2.49-3-6a12.79,12.79,0,0,1,1.72-6.7,2.57,2.57,0,0,0-3.79,0,12.79,12.79,0,0,1,1.72,6.7c0,3.56-1.23,6-3,6s-3-2.49-3-6a12.88,12.88,0,0,1,1.71-6.7,2.7,2.7,0,0,0-1.89-.87C7.1,12.19,5.69,13.7,5,16l-.23.7H2a1,1,0,0,1,0-2H3.29c1.1-2.83,3.06-4.55,5.24-4.55a4.67,4.67,0,0,1,3.16,1.32,4.62,4.62,0,0,1,3.15-1.32A4.65,4.65,0,0,1,18,11.51a4.43,4.43,0,0,1,6.31,0,4.67,4.67,0,0,1,3.16-1.32c2.18,0,4.14,1.72,5.24,4.55H34a1,1,0,0,1,0,2H31.28l-.23-.7c-.74-2.34-2.15-3.85-3.58-3.85a2.7,2.7,0,0,0-1.89.87,12.88,12.88,0,0,1,1.71,6.7C27.29,23.32,26.07,25.81,24.31,25.81ZM18,14.93a11.71,11.71,0,0,0-1,4.83c0,2.54.66,3.75,1,4,.32-.27,1-1.48,1-4A11.71,11.71,0,0,0,18,14.93Zm6.31,0a11.71,11.71,0,0,0-1,4.83c0,2.54.66,3.75,1,4,.32-.27,1-1.48,1-4A11.71,11.71,0,0,0,24.31,14.93Zm-12.62,0a11.71,11.71,0,0,0-1,4.83c0,2.54.66,3.75,1,4,.32-.27,1-1.48,1-4A11.71,11.71,0,0,0,11.69,14.93Z"/>' })];

// node_modules/@cds/core/icon/shapes/install.js
var l24 = ["install", n23({ outline: '<path d="M30.92,8H26.55a1,1,0,0,0,0,2H31V30H5V10H9.38a1,1,0,0,0,0-2H5.08A2,2,0,0,0,3,10V30a2,2,0,0,0,2.08,2H30.92A2,2,0,0,0,33,30V10A2,2,0,0,0,30.92,8Z"/><path d="M10.3,18.87l7,6.89a1,1,0,0,0,1.4,0l7-6.89a1,1,0,0,0-1.4-1.43L19,22.65V4a1,1,0,0,0-2,0V22.65l-5.3-5.21a1,1,0,0,0-1.4,1.43Z"/>', outlineAlerted: '<path d="M10.3,18.87l7,6.89a1,1,0,0,0,1.4,0l7-6.89a1,1,0,0,0-1.4-1.43L19,22.65V4a1,1,0,0,0-2,0V22.65l-5.3-5.21a1,1,0,0,0-1.4,1.43Z"/><path d="M31,15.4V30H5V10H9.38a1,1,0,0,0,0-2H5.08A2,2,0,0,0,3,10V30a2,2,0,0,0,2.08,2H30.92A2,2,0,0,0,33,30V15.4Z"/>', outlineBadged: '<path d="M10.3,18.87l7,6.89a1,1,0,0,0,1.4,0l7-6.89a1,1,0,0,0-1.4-1.43L19,22.65V4a1,1,0,0,0-2,0V22.65l-5.3-5.21a1,1,0,0,0-1.4,1.43Z"/><path d="M31,13.43V30H5V10H9.38a1,1,0,0,0,0-2H5.08A2,2,0,0,0,3,10V30a2,2,0,0,0,2.08,2H30.92A2,2,0,0,0,33,30V12.87A7.45,7.45,0,0,1,31,13.43Z"/>' })];

// node_modules/@cds/core/icon/shapes/internet-of-things.js
var t88 = ["internet-of-things", n23({ outline: '<path d="M30.86,20.94a4.74,4.74,0,0,1,1.86.64h.05a15.12,15.12,0,0,0-.61-8.37,1,1,0,0,0-1.28-.59h0a1,1,0,0,0-.59,1.28A13.19,13.19,0,0,1,30.86,20.94Z"/><path d="M26.33,28.58a13,13,0,0,1-6.07,2.82,1,1,0,1,0,.17,2h.18A15.16,15.16,0,0,0,27.82,30l0-.07A4.67,4.67,0,0,1,26.33,28.58Z"/><path d="M15.62,31.34v0a13.19,13.19,0,0,1-4.29-1.61A15.44,15.44,0,0,1,9.7,28.62,4.69,4.69,0,0,1,8.24,30a15.9,15.9,0,0,0,2.07,1.48,15.4,15.4,0,0,0,4.94,1.86h.19a1,1,0,0,0,.18-2Z"/><path d="M4.56,21.15a4.14,4.14,0,0,0,.6-.09A13,13,0,0,1,5.7,14a1,1,0,0,0-1.88-.69,15,15,0,0,0-.56,8.43A4.77,4.77,0,0,1,4.56,21.15Z"/><path d="M31.9,23a3.2,3.2,0,0,0-2.43-.42,3.27,3.27,0,0,0-1.4.77L24.2,21.11a6.87,6.87,0,0,0-2.77-8.43l-.11-.07a6.6,6.6,0,0,0-2.42-.81V8A3.22,3.22,0,0,0,20.78,6.5,3.3,3.3,0,0,0,19.65,2a3.15,3.15,0,0,0-2.42-.32,3.24,3.24,0,0,0-2,1.51,3.3,3.3,0,0,0,1.13,4.46A2.86,2.86,0,0,0,17.1,8V11.8a6.64,6.64,0,0,0-4.86,3.28,6.85,6.85,0,0,0-.42,6l-4,2.29a3.79,3.79,0,0,0-.45-.34l0,0A3.2,3.2,0,0,0,3,24.21a3.3,3.3,0,0,0,1.1,4.46,3.21,3.21,0,0,0,1.65.46,2.93,2.93,0,0,0,.78-.1,3.24,3.24,0,0,0,2.29-4.11l3.88-2.24a7.06,7.06,0,0,0,1.89,1.71,6.49,6.49,0,0,0,8.73-1.7l3.83,2.21a3.29,3.29,0,0,0,1.45,3.64,3.15,3.15,0,0,0,1.64.46A3.17,3.17,0,0,0,33,27.41,3.3,3.3,0,0,0,31.9,23ZM7,26.62a1.4,1.4,0,0,1-.91.64A1.36,1.36,0,0,1,5,27.11a1.48,1.48,0,0,1-.5-2,1.4,1.4,0,0,1,.88-.66,1.33,1.33,0,0,1,.34-.05,1.4,1.4,0,0,1,.75.22A1.48,1.48,0,0,1,7,26.62ZM16.78,4.09a1.4,1.4,0,0,1,.88-.66A1.33,1.33,0,0,1,18,3.38a1.42,1.42,0,0,1,.72.2,1.48,1.48,0,0,1,.5,2,1.4,1.4,0,0,1-.88.66,1.36,1.36,0,0,1-1.06-.15A1.48,1.48,0,0,1,16.78,4.09Zm2.41,19.32a4.79,4.79,0,0,1-3.68-.54A5.07,5.07,0,0,1,13.78,16,4.88,4.88,0,0,1,18,13.57a4.81,4.81,0,0,1,2.46.67,5.07,5.07,0,0,1,1.73,6.87A4.86,4.86,0,0,1,19.19,23.41Zm12.25,3.08a1.45,1.45,0,0,1-.88.67A1.36,1.36,0,0,1,29.5,27a1.48,1.48,0,0,1-.5-2,1.39,1.39,0,0,1,.9-.72,1.93,1.93,0,0,1,.34,0v0a1.31,1.31,0,0,1,.69.19A1.48,1.48,0,0,1,31.44,26.49Z"/><path d="M8.05,10A13,13,0,0,1,13.4,6.23a5,5,0,0,1-.17-2.07,15.15,15.15,0,0,0-6.7,4.51A1,1,0,0,0,8.05,10Z"/><path d="M24.67,7.23A13.11,13.11,0,0,1,27.93,10a1,1,0,1,0,1.52-1.3v0A15,15,0,0,0,25.69,5.5a15.87,15.87,0,0,0-2.94-1.33,4.79,4.79,0,0,1-.15,2.06A14.1,14.1,0,0,1,24.67,7.23Z"/>', solid: '<path d="M30.86,20.94a4.74,4.74,0,0,1,1.86.64h.05a15.12,15.12,0,0,0-.61-8.37,1,1,0,1,0-1.87.69A13.19,13.19,0,0,1,30.86,20.94Z"/><path d="M26.33,28.58a13,13,0,0,1-6.07,2.82,1,1,0,1,0,.17,2h.18A15.16,15.16,0,0,0,27.82,30v-.07A4.7,4.7,0,0,1,26.33,28.58Z"/><path d="M15.62,31.34a13.27,13.27,0,0,1-4.29-1.61A15.09,15.09,0,0,1,9.7,28.62,4.69,4.69,0,0,1,8.24,30a15.9,15.9,0,0,0,2.07,1.48,15.4,15.4,0,0,0,4.94,1.86h.19a1,1,0,0,0,.18-2Z"/><path d="M4.56,21.15q.3,0,.6-.09A13,13,0,0,1,5.7,14a1,1,0,0,0-1.88-.69,15,15,0,0,0-.56,8.43A4.77,4.77,0,0,1,4.56,21.15Z"/><path d="M31.9,23a3.2,3.2,0,0,0-2.43-.42,3.33,3.33,0,0,0-1.4.77L24.2,21.11a6.87,6.87,0,0,0-2.77-8.43l-.11-.07a6.73,6.73,0,0,0-2.42-.81V8a3.23,3.23,0,0,0,1.88-1.5A3.3,3.3,0,0,0,19.65,2a3.15,3.15,0,0,0-2.42-.32,3.24,3.24,0,0,0-2,1.51,3.3,3.3,0,0,0,1.13,4.46A3,3,0,0,0,17.1,8v3.8a6.63,6.63,0,0,0-4.86,3.28,6.85,6.85,0,0,0-.42,6l-4,2.29A3.79,3.79,0,0,0,7.37,23,3.2,3.2,0,0,0,3,24.21H3a3.3,3.3,0,0,0,1.1,4.46,3.21,3.21,0,0,0,1.65.46,2.93,2.93,0,0,0,.78-.1,3.25,3.25,0,0,0,2.34-3.94l0-.17,3.88-2.24a7,7,0,0,0,1.89,1.71,6.49,6.49,0,0,0,8.73-1.7l3.83,2.21a3.29,3.29,0,0,0,1.45,3.64A3.18,3.18,0,0,0,33,27.41,3.3,3.3,0,0,0,31.9,23Z"/><path d="M8.05,10A13,13,0,0,1,13.4,6.23a5,5,0,0,1-.17-2.07,15.15,15.15,0,0,0-6.7,4.51A1,1,0,0,0,8.05,10Z"/><path d="M24.67,7.23A13.11,13.11,0,0,1,27.93,10a1,1,0,1,0,1.52-1.3,15,15,0,0,0-3.76-3.2,15.87,15.87,0,0,0-2.94-1.33,4.79,4.79,0,0,1-.15,2.06A14.1,14.1,0,0,1,24.67,7.23Z"/>' })];

// node_modules/@cds/core/icon/shapes/keyboard.js
var e57 = ["keyboard", n23({ outline: '<path d="M32,8H4a2,2,0,0,0-2,2V26a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V10A2,2,0,0,0,32,8Zm0,18H4V10H32Z"/><rect x="7" y="13" width="2" height="2"/><rect x="11" y="13" width="2" height="2"/><rect x="15" y="13" width="2" height="2"/><rect x="19" y="13" width="2" height="2"/><rect x="23" y="13" width="2" height="2"/><rect x="27" y="13" width="2" height="2"/><rect x="7" y="17" width="2" height="2"/><rect x="11" y="17" width="2" height="2"/><rect  x="15" y="17" width="2" height="2"/><rect  x="19" y="17" width="2" height="2"/><rect  x="23" y="17" width="2" height="2"/><rect  x="27" y="17" width="2" height="2"/><rect  x="27" y="22" width="1.94" height="2"/><rect  x="7" y="22" width="2" height="2"/><rect  x="11.13" y="22" width="13.75" height="2"/>', solid: '<path d="M32,8H4a2,2,0,0,0-2,2V26a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V10A2,2,0,0,0,32,8ZM19,13h2v2H19Zm0,4h2v2H19Zm-4-4h2v2H15Zm0,4h2v2H15Zm-4-4h2v2H11ZM9,24H7V22H9Zm0-5H7V17H9Zm0-4H7V13H9Zm2,2h2v2H11Zm13.88,7H11.13V22H24.88ZM25,19H23V17h2Zm0-4H23V13h2Zm3.94,9H27V22h1.94ZM29,19H27V17h2Zm0-4H27V13h2Z"/>' })];

// node_modules/@cds/core/icon/shapes/layers.js
var t89 = ["layers", n23({ outline: '<path d="M18,20.25a1,1,0,0,1-.43-.1l-15-7.09a1,1,0,0,1,0-1.81l15-7.09a1,1,0,0,1,.85,0l15,7.09a1,1,0,0,1,0,1.81l-15,7.09A1,1,0,0,1,18,20.25ZM5.34,12.16l12.66,6,12.66-6L18,6.18Z"/><path d="M18,26.16a1,1,0,0,1-.43-.1L2.57,19a1,1,0,1,1,.85-1.81L18,24.06l14.57-6.89A1,1,0,1,1,33.43,19l-15,7.09A1,1,0,0,1,18,26.16Z"/><path d="M18,32.07a1,1,0,0,1-.43-.1l-15-7.09a1,1,0,0,1,.85-1.81L18,30l14.57-6.89a1,1,0,1,1,.85,1.81L18.43,32A1,1,0,0,1,18,32.07Z"/>', solid: '<path d="M18,20.25a1,1,0,0,1-.43-.1l-15-7.09a1,1,0,0,1,0-1.81l15-7.09a1,1,0,0,1,.85,0l15,7.09a1,1,0,0,1,0,1.81l-15,7.09A1,1,0,0,1,18,20.25Z"/><path d="M18,26.16a1,1,0,0,1-.43-.1L2.57,19a1,1,0,1,1,.85-1.81L18,24.06l14.57-6.89A1,1,0,1,1,33.43,19l-15,7.09A1,1,0,0,1,18,26.16Z"/><path d="M18,32.07a1,1,0,0,1-.43-.1l-15-7.09a1,1,0,0,1,.85-1.81L18,30l14.57-6.89a1,1,0,1,1,.85,1.81L18.43,32A1,1,0,0,1,18,32.07Z"/>' })];

// node_modules/@cds/core/icon/shapes/link.js
var n33 = ["link", n23({ outline: '<path d="M17.6,24.32l-2.46,2.44a4,4,0,0,1-5.62,0,3.92,3.92,0,0,1,0-5.55l4.69-4.65a4,4,0,0,1,5.62,0,3.86,3.86,0,0,1,1,1.71A2,2,0,0,0,21.1,18l1.29-1.28a5.89,5.89,0,0,0-1.15-1.62,6,6,0,0,0-8.44,0L8.1,19.79a5.91,5.91,0,0,0,0,8.39,6,6,0,0,0,8.44,0l3.65-3.62c-.17,0-.33,0-.5,0A8,8,0,0,1,17.6,24.32Z"/><path d="M28.61,7.82a6,6,0,0,0-8.44,0l-3.65,3.62c.17,0,.33,0,.49,0h0a8,8,0,0,1,2.1.28l2.46-2.44a4,4,0,0,1,5.62,0,3.92,3.92,0,0,1,0,5.55l-4.69,4.65a4,4,0,0,1-5.62,0,3.86,3.86,0,0,1-1-1.71,2,2,0,0,0-.28.23l-1.29,1.28a5.89,5.89,0,0,0,1.15,1.62,6,6,0,0,0,8.44,0l4.69-4.65a5.92,5.92,0,0,0,0-8.39Z"/>' })];

// node_modules/@cds/core/icon/shapes/media-changer.js
var e58 = ["media-changer", n23({ outline: '<path d="M30,4H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H7.88v1.57a1,1,0,0,0,2,0V32h16v1.57a1,1,0,0,0,2,0V32H30a2,2,0,0,0,2-2V6A2,2,0,0,0,30,4ZM6,30V6H30V30Z"/><rect x="20" y="18" width="2" height="2"/><rect x="24" y="18" width="2" height="2"/><rect x="20" y="22" width="2" height="2"/><rect x="24" y="22" width="2" height="2"/><path d="M27.22,10H20v4a.8.8,0,1,0,1.59,0V11.6h5.63a.8.8,0,1,0,0-1.6Z"/><rect x="8.81" y="10" width="8.14" height="2"/><rect x="8.81" y="14" width="8.14" height="2"/><rect x="8.81" y="18" width="8.14" height="2"/><rect x="8.81" y="22" width="8.14" height="2"/><rect x="8.81" y="26" width="8.14" height="2"/>', outlineAlerted: '<rect x="20" y="18" width="2" height="2"/><rect x="24" y="18" width="2" height="2"/><rect x="20" y="22" width="2" height="2"/><rect x="24" y="22" width="2" height="2"/><rect x="8.81" y="10" width="8.14" height="2"/><rect x="8.81" y="14" width="8.14" height="2"/><rect x="8.81" y="18" width="8.14" height="2"/><rect x="8.81" y="22" width="8.14" height="2"/><rect x="8.81" y="26" width="8.14" height="2"/><path d="M30,15.4V30H6V6H21.27l1.18-2H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H7.88v1.57a1,1,0,0,0,2,0V32h16v1.57a1,1,0,0,0,2,0V32H30a2,2,0,0,0,2-2V15.4Z"/>', outlineBadged: '<rect x="20" y="18" width="2" height="2"/><rect x="24" y="18" width="2" height="2"/><rect x="20" y="22" width="2" height="2"/><rect x="24" y="22" width="2" height="2"/><rect x="8.81" y="10" width="8.14" height="2"/><rect x="8.81" y="14" width="8.14" height="2"/><rect x="8.81" y="18" width="8.14" height="2"/><rect x="8.81" y="22" width="8.14" height="2"/><rect x="8.81" y="26" width="8.14" height="2"/><path d="M20,14a.8.8,0,1,0,1.59,0V11.6H25A7.74,7.74,0,0,1,23.66,10H20Z"/><path d="M30,13.5h0V30H6V6H22.5V6a7.37,7.37,0,0,1,.28-2H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H7.88v1.57a1,1,0,0,0,2,0V32h16v1.57a1,1,0,0,0,2,0V32H30a2,2,0,0,0,2-2V13.22A7.37,7.37,0,0,1,30,13.5Z"/>', solid: '<path d="M30,4H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H7.88v1.57a1,1,0,0,0,2,0V32h16v1.57a1,1,0,0,0,2,0V32H30a2,2,0,0,0,2-2V6A2,2,0,0,0,30,4ZM17,28H8.81V26H17Zm0-4H8.81V22H17Zm0-4H8.81V18H17Zm0-4H8.81V14H17Zm0-4H8.81V10H17ZM22,24H20V22h2Zm0-4H20V18h2Zm4,4H24V22h2Zm0-4H24V18h2Zm0-6H20V10h6Z"/>', solidAlerted: '<path d="M22.23,15.4a3.68,3.68,0,0,1-3.18-5.51L22.45,4H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H7.88v1.57a1,1,0,0,0,2,0V32h16v1.57a1,1,0,0,0,2,0V32H30a2,2,0,0,0,2-2V15.4ZM17,28H8.81V26H17Zm0-4H8.81V22H17Zm0-4H8.81V18H17Zm0-4H8.81V14H17Zm0-4H8.81V10H17ZM22,24H20V22h2Zm0-4H20V18h2Zm4,4H24V22h2Zm0-4H24V18h2Z"/>', solidBadged: '<path d="M30,13.5a7.49,7.49,0,0,1-4-1.16V14H20V10h3.66A7.49,7.49,0,0,1,22.5,6a7.37,7.37,0,0,1,.28-2H6A2,2,0,0,0,4,6V30a2,2,0,0,0,2,2H7.88v1.57a1,1,0,0,0,2,0V32h16v1.57a1,1,0,0,0,2,0V32H30a2,2,0,0,0,2-2V13.22A7.37,7.37,0,0,1,30,13.5ZM17,28H8.81V26H17Zm0-4H8.81V22H17Zm0-4H8.81V18H17Zm0-4H8.81V14H17Zm0-4H8.81V10H17ZM22,24H20V22h2Zm0-4H20V18h2Zm4,4H24V22h2Zm0-4H24V18h2Z"/>' })];

// node_modules/@cds/core/icon/shapes/memory.js
var V15 = ["memory", n23({ outline: '<rect x="8" y="12" width="4" height="8"/><rect x="16" y="12" width="4" height="8"/><rect x="24" y="12" width="4" height="8"/><path d="M15,27H4V17H2V27a2,2,0,0,0,2,2H16.61V25.55h2.26V24H15Z"/><path d="M32,7H4A2,2,0,0,0,2,9v4H4V9H32v4h2V9A2,2,0,0,0,32,7Z"/><path d="M32,27H19v2H32a2,2,0,0,0,2-2V17H32Z"/>', outlineAlerted: '<rect x="8" y="12" width="4" height="8"/><path d="M15,27H4V17H2V27a2,2,0,0,0,2,2H16.61V25.55h2.26V24H15Z"/><path d="M32,17V27H19v2H32a2,2,0,0,0,2-2V17Z"/><path d="M19,13.56A3.66,3.66,0,0,1,18.57,12H16v8h4V14.64A3.67,3.67,0,0,1,19,13.56Z"/><rect x="24" y="15.4" width="4" height="4.6"/><path d="M4,9H19.56l1.15-2H4A2,2,0,0,0,2,9v4H4Z"/>', outlineBadged: '<rect x="8" y="12" width="4" height="8"/><rect x="16" y="12" width="4" height="8"/><path d="M15,27H4V17H2V27a2,2,0,0,0,2,2H16.61V25.55h2.26V24H15Z"/><path d="M32,17V27H19v2H32a2,2,0,0,0,2-2V17Z"/><path d="M28,13.22A7.46,7.46,0,0,1,25.51,12H24v8h4Z"/><path d="M4,9H23.13a7.45,7.45,0,0,1-.55-2H4A2,2,0,0,0,2,9v4H4Z"/>', solid: '<path d="M34,13V9a2,2,0,0,0-2-2H4A2,2,0,0,0,2,9v4H4v4H2V27a2,2,0,0,0,2,2H16.61V25.55H19V29H32a2,2,0,0,0,2-2V17H32V13ZM12,20H8V12h4Zm8,0H16V12h4Zm8,0H24V12h4Z"/>', solidAlerted: '<path d="M32,17V15.07H28V20H24V15.07H22.23A3.68,3.68,0,0,1,20,14.31V20H16V12h2.61A3.68,3.68,0,0,1,19,9.55L20.52,7H4A2,2,0,0,0,2,9v4H4v4H2V27a2,2,0,0,0,2,2H16.61V25.55H19V29H32a2,2,0,0,0,2-2V17ZM12,20H8V12h4Z"/>', solidBadged: '<path d="M32,17V13.22a7.33,7.33,0,0,1-4,0V20H24V12h1.51a7.48,7.48,0,0,1-2.94-5H4A2,2,0,0,0,2,9v4H4v4H2V27a2,2,0,0,0,2,2H16.61V25.55H19V29H32a2,2,0,0,0,2-2V17ZM12,20H8V12h4Zm8,0H16V12h4Z"/>' })];

// node_modules/@cds/core/icon/shapes/mobile.js
var t90 = ["mobile", n23({ outline: '<path d="M25,4H11A2,2,0,0,0,9,6V30a2,2,0,0,0,2,2H25a2,2,0,0,0,2-2V6A2,2,0,0,0,25,4ZM11,6H25V24H11Zm0,24V26H25v4Z"/><rect x="17" y="27" width="2" height="2"/>', solid: '<path d="M25,4H11A2,2,0,0,0,9,6V30a2,2,0,0,0,2,2H25a2,2,0,0,0,2-2V6A2,2,0,0,0,25,4ZM19,30H17V28h2Zm-8-4V6H25V26Z"/>' })];

// node_modules/@cds/core/icon/shapes/mouse.js
var V16 = ["mouse", n23({ outline: '<path d="M18,34A10,10,0,0,1,8,24V12a10,10,0,0,1,20,0V24A10,10,0,0,1,18,34ZM18,4a8,8,0,0,0-8,8V24a8,8,0,0,0,16,0V12A8,8,0,0,0,18,4Z"/><path d="M18,15a1,1,0,0,1-1-1V10a1,1,0,0,1,2,0v4A1,1,0,0,1,18,15Z"/>', solid: '<path d="M18,2A10,10,0,0,0,8,12V24a10,10,0,0,0,20,0V12A10,10,0,0,0,18,2Zm1.3,11.44a1.3,1.3,0,0,1-2.6,0V10a1.3,1.3,0,0,1,2.6,0Z"/>' })];

// node_modules/@cds/core/icon/shapes/namespace.js
var h36 = ["namespace", n23({ outline: '<path d="M27,4.18a1,1,0,1,0-1,1.73l6,3.47V26.62l-6,3.47a1,1,0,0,0-.37,1.36,1,1,0,0,0,1.37.37l7-4.05V8.23Z"/><path d="M9.68,29.9,4,26.62V9.38L9.68,6.1a1,1,0,1,0-1-1.73L2,8.23V27.77l6.68,3.86a1,1,0,0,0,1.37-.37A1,1,0,0,0,9.68,29.9Z"/><path d="M10,12V24a2,2,0,0,0,2,2H24a2,2,0,0,0,2-2V12a2,2,0,0,0-2-2H12A2,2,0,0,0,10,12Zm7,0v5H12V12Zm-5,7h5v5H12Zm7,5V19h5v5Zm5-7H19V12h5Z"/>', outlineAlerted: '<path d="M9.68,29.9,4,26.62V9.38L9.68,6.1a1,1,0,1,0-.93-1.77l-.07,0L2,8.23V27.77l6.68,3.86a1,1,0,0,0,1.37-.36h0A1,1,0,0,0,9.68,29.9Z"/><path d="M26,15.4H24V17H19V13.46A3.69,3.69,0,0,1,19,10H12a2,2,0,0,0-2,2V24a2,2,0,0,0,2,2H24a2,2,0,0,0,2-2ZM17,24H12V19h5Zm0-7H12V12h5Zm7,7H19V19h5Z"/><path d="M32,15.4V26.62l-6,3.47a1,1,0,1,0,1,1.73h0l7-4.05V15.38l-.32,0Z"/>', outlineBadged: '<path d="M9.68,29.9,4,26.62V9.38L9.68,6.1a1,1,0,1,0-.93-1.77l-.07,0L2,8.23V27.77l6.68,3.86a1,1,0,0,0,1.37-.36h0A1,1,0,0,0,9.68,29.9Z"/><path d="M26,12.34A7.68,7.68,0,0,1,23.66,10H12a2,2,0,0,0-2,2V24a2,2,0,0,0,2,2H24a2,2,0,0,0,2-2ZM17,24H12V19h5Zm0-7H12V12h5Zm7,7H19V19h5Zm0-7H19V12h5Z"/><path d="M32,26.62l-6,3.47a1,1,0,1,0,1,1.73h0l7-4.05V12.34a7.65,7.65,0,0,1-2,.88Z"/>' })];

// node_modules/@cds/core/icon/shapes/network-globe.js
var l25 = ["network-globe", n23({ outline: '<path d="M26.58,32h-18a1,1,0,1,0,0,2h18a1,1,0,0,0,0-2Z"/><path d="M17.75,2a14,14,0,0,0-14,14c0,.45,0,.89.07,1.33l0,0h0A14,14,0,1,0,17.75,2Zm0,2a12,12,0,0,1,8.44,3.48c0,.33,0,.66,0,1A18.51,18.51,0,0,0,14,8.53a2.33,2.33,0,0,0-1.14-.61l-.25,0c-.12-.42-.23-.84-.32-1.27s-.14-.81-.19-1.22A11.92,11.92,0,0,1,17.75,4Zm-3,5.87A17,17,0,0,1,25.92,10a16.9,16.9,0,0,1-3.11,7,2.28,2.28,0,0,0-2.58.57c-.35-.2-.7-.4-1-.63a16,16,0,0,1-4.93-5.23,2.25,2.25,0,0,0,.47-1.77Zm-4-3.6c0,.21.06.43.1.64.09.44.21.87.33,1.3a2.28,2.28,0,0,0-1.1,2.25A18.32,18.32,0,0,0,5.9,14.22,12,12,0,0,1,10.76,6.27Zm0,15.71A2.34,2.34,0,0,0,9.2,23.74l-.64,0A11.94,11.94,0,0,1,5.8,16.92l.11-.19a16.9,16.9,0,0,1,4.81-4.89,2.31,2.31,0,0,0,2.28.63,17.53,17.53,0,0,0,5.35,5.65c.41.27.83.52,1.25.76A2.32,2.32,0,0,0,19.78,20a16.94,16.94,0,0,1-6.2,3.11A2.34,2.34,0,0,0,10.76,22Zm7,6a11.92,11.92,0,0,1-5.81-1.51l.28-.06a2.34,2.34,0,0,0,1.57-1.79,18.43,18.43,0,0,0,7-3.5,2.29,2.29,0,0,0,3-.62,17.41,17.41,0,0,0,4.32.56l.53,0A12,12,0,0,1,17.75,28Zm6.51-8.9a2.33,2.33,0,0,0-.33-1.19,18.4,18.4,0,0,0,3.39-7.37q.75.35,1.48.78a12,12,0,0,1,.42,8.2A16,16,0,0,1,24.27,19.11Z"/>', outlineAlerted: '<path d="M26.58,32h-18a1,1,0,1,0,0,2h18a1,1,0,0,0,0-2Z"/><path d="M31.73,15.4h-2c0,.2,0,.4,0,.61a12,12,0,0,1-.53,3.52,16,16,0,0,1-5-.41,2.33,2.33,0,0,0-.33-1.19,18.87,18.87,0,0,0,1.62-2.52H23.83a17.29,17.29,0,0,1-1,1.54,2.28,2.28,0,0,0-2.58.57c-.35-.2-.7-.4-1-.63a16,16,0,0,1-4.93-5.23,2.25,2.25,0,0,0,.47-1.77A17.08,17.08,0,0,1,19.56,9l.87-1.51a18.59,18.59,0,0,0-6.39,1,2.33,2.33,0,0,0-1.14-.61l-.25,0c-.12-.42-.23-.84-.32-1.27s-.14-.81-.19-1.22A11.88,11.88,0,0,1,22,4.79L23,3A14,14,0,0,0,3.75,16c0,.45,0,.89.07,1.33l0,0h0A14,14,0,0,0,31.76,16C31.76,15.8,31.74,15.6,31.73,15.4Zm-21-9.13c0,.21.06.43.1.64.09.44.21.87.33,1.3a2.28,2.28,0,0,0-1.1,2.25A18.32,18.32,0,0,0,5.9,14.22,12,12,0,0,1,10.76,6.27Zm0,15.71A2.34,2.34,0,0,0,9.2,23.74l-.64,0A11.94,11.94,0,0,1,5.8,16.92l.11-.19a16.9,16.9,0,0,1,4.81-4.89,2.31,2.31,0,0,0,2.28.63,17.53,17.53,0,0,0,5.35,5.65c.41.27.83.52,1.25.76A2.32,2.32,0,0,0,19.78,20a16.94,16.94,0,0,1-6.2,3.11A2.34,2.34,0,0,0,10.76,22Zm7,6a11.92,11.92,0,0,1-5.81-1.51l.28-.06a2.34,2.34,0,0,0,1.57-1.79,18.43,18.43,0,0,0,7-3.5,2.29,2.29,0,0,0,3-.62,17.41,17.41,0,0,0,4.32.56l.53,0A12,12,0,0,1,17.75,28Z"/>', outlineBadged: '<path d="M26.58,32h-18a1,1,0,1,0,0,2h18a1,1,0,0,0,0-2Z"/><path d="M31.5,13.35a7.54,7.54,0,0,1-1.5.15l-.51,0a11.91,11.91,0,0,1-.25,6,16,16,0,0,1-5-.41,2.33,2.33,0,0,0-.33-1.19,18.59,18.59,0,0,0,2.78-5.18,7.49,7.49,0,0,1-1.31-.82,17,17,0,0,1-2.61,5,2.28,2.28,0,0,0-2.58.57c-.35-.2-.7-.4-1-.63a16,16,0,0,1-4.93-5.23,2.25,2.25,0,0,0,.47-1.77,17,17,0,0,1,8.53-.62,7.43,7.43,0,0,1-.56-1.59A18.56,18.56,0,0,0,14,8.53a2.33,2.33,0,0,0-1.14-.61l-.25,0c-.12-.42-.23-.84-.32-1.27s-.14-.81-.19-1.22A11.92,11.92,0,0,1,22.57,5a7.45,7.45,0,0,1,.53-2A14,14,0,0,0,3.75,16c0,.45,0,.89.07,1.33l0,0h0a14,14,0,1,0,27.68-4ZM10.76,6.27c0,.21.06.43.1.64.09.44.21.87.33,1.3a2.28,2.28,0,0,0-1.1,2.25A18.32,18.32,0,0,0,5.9,14.22,12,12,0,0,1,10.76,6.27Zm0,15.71A2.34,2.34,0,0,0,9.2,23.74l-.64,0A11.94,11.94,0,0,1,5.8,16.92l.11-.19a16.9,16.9,0,0,1,4.81-4.89,2.31,2.31,0,0,0,2.28.63,17.53,17.53,0,0,0,5.35,5.65c.41.27.83.52,1.25.76A2.32,2.32,0,0,0,19.78,20a16.94,16.94,0,0,1-6.2,3.11A2.34,2.34,0,0,0,10.76,22Zm7,6a11.92,11.92,0,0,1-5.81-1.51l.28-.06a2.34,2.34,0,0,0,1.57-1.79,18.43,18.43,0,0,0,7-3.5,2.29,2.29,0,0,0,3-.62,17.41,17.41,0,0,0,4.32.56l.53,0A12,12,0,0,1,17.75,28Z"/>', solid: '<path d="M26.58,32h-18a1,1,0,1,0,0,2h18a1,1,0,0,0,0-2Z"/><path d="M14.72,9.87a2.25,2.25,0,0,1-.47,1.77,16,16,0,0,0,4.93,5.23c.34.23.69.43,1,.63a2.28,2.28,0,0,1,2.58-.57,16.9,16.9,0,0,0,3.11-7A17,17,0,0,0,14.72,9.87Z"/><path d="M17.75,2a14,14,0,0,0-14,14c0,.45,0,.89.07,1.33l0,0h0A14,14,0,1,0,17.75,2ZM28.1,21.09a17.41,17.41,0,0,1-4.32-.56,2.29,2.29,0,0,1-3,.62,18.43,18.43,0,0,1-7,3.5,2.34,2.34,0,0,1-1.57,1.79l-.29.06a11.93,11.93,0,0,1-3.39-2.8l.66,0a2.33,2.33,0,0,1,4.37-.58A16.94,16.94,0,0,0,19.78,20a2.32,2.32,0,0,1-.18-1.17c-.42-.24-.84-.49-1.25-.76A17.53,17.53,0,0,1,13,12.47a2.31,2.31,0,0,1-2.28-.63,27.31,27.31,0,0,0-5,4.74c0-.2,0-.39,0-.57a12,12,0,0,1,.14-1.73,18.75,18.75,0,0,1,4.2-3.8,2.28,2.28,0,0,1,1.1-2.25c-.12-.43-.24-.86-.33-1.3,0-.14,0-.29-.11-.64a12,12,0,0,1,1.37-.87c.1.59.14.9.21,1.21s.2.85.32,1.27l.25,0A2.33,2.33,0,0,1,14,8.53a18.51,18.51,0,0,1,12.11-.07c0-.32,0-.65,0-1h0a12,12,0,0,1,2.62,3.85h0q-.73-.43-1.48-.78a18.4,18.4,0,0,1-3.39,7.37,2.33,2.33,0,0,1,.33,1.19,22,22,0,0,0,5,.45,11.88,11.88,0,0,1-.61,1.53Z"/>', solidAlerted: '<path d="M26.58,32h-18a1,1,0,1,0,0,2h18a1,1,0,0,0,0-2Z"/><path d="M31.73,15.4H25.56a18.87,18.87,0,0,1-1.62,2.52,2.33,2.33,0,0,1,.33,1.19,22,22,0,0,0,5,.45,11.88,11.88,0,0,1-.61,1.53H28.1a17.41,17.41,0,0,1-4.32-.56,2.29,2.29,0,0,1-3,.62,18.43,18.43,0,0,1-7,3.5,2.34,2.34,0,0,1-1.57,1.79l-.29.06a11.93,11.93,0,0,1-3.39-2.8l.66,0a2.33,2.33,0,0,1,4.37-.58A16.94,16.94,0,0,0,19.78,20a2.32,2.32,0,0,1-.18-1.17c-.42-.24-.84-.49-1.25-.76A17.53,17.53,0,0,1,13,12.47a2.31,2.31,0,0,1-2.28-.63,27.31,27.31,0,0,0-5,4.74c0-.2,0-.39,0-.57a12,12,0,0,1,.14-1.73,18.75,18.75,0,0,1,4.2-3.8,2.28,2.28,0,0,1,1.1-2.25c-.12-.43-.24-.86-.33-1.3,0-.14,0-.29-.11-.64a12,12,0,0,1,1.37-.87c.1.59.14.9.21,1.21s.2.85.32,1.27l.25,0A2.33,2.33,0,0,1,14,8.53a18.59,18.59,0,0,1,6.39-1L23,3A14,14,0,0,0,3.75,16c0,.45,0,.89.07,1.33l0,0h0A14,14,0,0,0,31.76,16C31.76,15.8,31.74,15.6,31.73,15.4Z"/><path d="M14.26,11.64a16,16,0,0,0,4.93,5.23c.34.23.69.43,1,.63a2.28,2.28,0,0,1,2.58-.57,17.29,17.29,0,0,0,1-1.54h-1.6A3.68,3.68,0,0,1,19,9.89L19.56,9a17.08,17.08,0,0,0-4.84.88,2.25,2.25,0,0,1-.47,1.77Z"/>', solidBadged: '<path d="M26.58,32h-18a1,1,0,1,0,0,2h18a1,1,0,0,0,0-2Z"/><path d="M31.5,13.35a7.54,7.54,0,0,1-1.5.15,7.46,7.46,0,0,1-3.28-.76,18.59,18.59,0,0,1-2.78,5.18,2.33,2.33,0,0,1,.33,1.19,22,22,0,0,0,5,.45,11.88,11.88,0,0,1-.61,1.53H28.1a17.41,17.41,0,0,1-4.32-.56,2.29,2.29,0,0,1-3,.62,18.43,18.43,0,0,1-7,3.5,2.34,2.34,0,0,1-1.57,1.79l-.29.06a11.93,11.93,0,0,1-3.39-2.8l.66,0a2.33,2.33,0,0,1,4.37-.58A16.94,16.94,0,0,0,19.78,20a2.32,2.32,0,0,1-.18-1.17c-.42-.24-.84-.49-1.25-.76A17.53,17.53,0,0,1,13,12.47a2.31,2.31,0,0,1-2.28-.63,27.31,27.31,0,0,0-5,4.74c0-.2,0-.39,0-.57a12,12,0,0,1,.14-1.73,18.75,18.75,0,0,1,4.2-3.8,2.28,2.28,0,0,1,1.1-2.25c-.12-.43-.24-.86-.33-1.3,0-.14,0-.29-.11-.64a12,12,0,0,1,1.37-.87c.1.59.14.9.21,1.21s.2.85.32,1.27l.25,0A2.33,2.33,0,0,1,14,8.53a18.56,18.56,0,0,1,8.65-.87,7.45,7.45,0,0,1,.41-4.59A14,14,0,0,0,3.75,16c0,.45,0,.89.07,1.33l0,0h0a14,14,0,1,0,27.68-4Z"/><path d="M14.72,9.87a2.25,2.25,0,0,1-.47,1.77,16,16,0,0,0,4.93,5.23c.34.23.69.43,1,.63a2.28,2.28,0,0,1,2.58-.57,17,17,0,0,0,2.61-5,7.52,7.52,0,0,1-2.16-2.67A17,17,0,0,0,14.72,9.87Z"/>' })];

// node_modules/@cds/core/icon/shapes/network-settings.js
var A17 = ["network-settings", n23({ outline: '<path d="M10.85,27.44a2.29,2.29,0,0,0,1.74-1.68c.54-.14,1.06-.32,1.59-.51v-1.2a2.77,2.77,0,0,1,.06-.51,17.44,17.44,0,0,1-1.82.62,2.28,2.28,0,0,0-4.28.63l-.45,0h0a11.93,11.93,0,0,1-2.88-7.27,17.79,17.79,0,0,1,5-4.72,2.23,2.23,0,0,0,2.29.56,18.52,18.52,0,0,0,4.47,5,2.74,2.74,0,0,1,.21-.24l.95-.91a16.9,16.9,0,0,1-4.35-4.79,2.27,2.27,0,0,0,.35-1.2c0-.07,0-.14,0-.22A17.69,17.69,0,0,1,25,11a17.49,17.49,0,0,1-1.15,3.34l.19,0h1.56a19,19,0,0,0,.91-2.72c.43.19.84.41,1.26.64a11.94,11.94,0,0,1,1,4.09l0,0A2.77,2.77,0,0,1,30,16a2.73,2.73,0,0,1,.68.1A14,14,0,1,0,16.08,31a2.72,2.72,0,0,1,0-2A11.93,11.93,0,0,1,10.85,27.44ZM16.76,5a12,12,0,0,1,8.61,3.66c0,.25,0,.51-.08.76a19.21,19.21,0,0,0-12.35.11A2.28,2.28,0,0,0,11.74,9a17,17,0,0,1-.61-2.53A11.92,11.92,0,0,1,16.76,5ZM9.66,7.36a18.72,18.72,0,0,0,.49,1.92,2.28,2.28,0,0,0-1.07,1.93s0,.1,0,.15A19.45,19.45,0,0,0,5,14.79,12,12,0,0,1,9.66,7.36Z"/><path d="M25,21.19A3.84,3.84,0,1,0,28.88,25,3.87,3.87,0,0,0,25,21.19Zm0,6.08A2.24,2.24,0,1,1,27.28,25,2.26,2.26,0,0,1,25,27.27Z"/><path d="M34.17,24.14a1.14,1.14,0,0,0-.7-1.1l-1.56-.46q-.11-.32-.26-.63l.72-1.33a1.14,1.14,0,0,0-.21-1.34l-1.34-1.32a1.14,1.14,0,0,0-1.34-.2l-1.34.71a7.28,7.28,0,0,0-.67-.28L27,16.71a1.14,1.14,0,0,0-1.08-.76H24a1.14,1.14,0,0,0-1.08.8l-.44,1.43a7.32,7.32,0,0,0-.68.28l-1.32-.7a1.14,1.14,0,0,0-1.33.19l-1.37,1.31a1.14,1.14,0,0,0-.21,1.35l.7,1.28q-.16.32-.28.65L16.58,23a1.13,1.13,0,0,0-.81,1.09v1.87A1.14,1.14,0,0,0,16.59,27l1.47.44q.12.32.28.64l-.72,1.35a1.14,1.14,0,0,0,.2,1.35l1.34,1.32a1.14,1.14,0,0,0,1.34.2l1.37-.72q.31.14.63.26l.44,1.47a1.14,1.14,0,0,0,1.09.8h1.9A1.14,1.14,0,0,0,27,33.31l.44-1.47c.21-.07.42-.16.62-.25l1.38.73a1.14,1.14,0,0,0,1.33-.2l1.34-1.32a1.14,1.14,0,0,0,.21-1.35l-.73-1.34q.14-.3.25-.6l1.5-.44A1.13,1.13,0,0,0,34.17,26Zm-1.6,1.5-2,.58-.12.42A5.55,5.55,0,0,1,30,27.73l-.21.38,1,1.79-.86.84-1.82-1-.37.2a5.78,5.78,0,0,1-1.12.46l-.42.12-.59,2H24.38l-.59-1.95-.42-.12A5.86,5.86,0,0,1,22.24,30l-.37-.2-1.81,1-.86-.85,1-1.82-.22-.38a5.6,5.6,0,0,1-.49-1.13l-.13-.41-1.95-.58V24.42l1.94-.58.12-.41a5.53,5.53,0,0,1,.49-1.14l.22-.39-1-1.73.87-.84,1.77.94.38-.21a5.8,5.8,0,0,1,1.17-.49l.41-.12.59-1.91h1.23l.58,1.9.41.12a5.79,5.79,0,0,1,1.16.48l.38.21,1.8-.95.86.85-1,1.77.21.38a5.53,5.53,0,0,1,.47,1.13l.12.42,1.93.57Z"/>', solid: '<path d="M34,23.63,32,23a7.06,7.06,0,0,0-.58-1.41l1-1.86a.37.37,0,0,0-.07-.44L30.9,17.86a.37.37,0,0,0-.44-.07l-1.85,1a7,7,0,0,0-1.43-.61l-.61-2a.37.37,0,0,0-.36-.25h-2a.37.37,0,0,0-.35.26l-.61,2a7,7,0,0,0-1.44.61L20,17.8a.37.37,0,0,0-.44.07L18,19.31a.37.37,0,0,0-.07.44l1,1.82A7,7,0,0,0,18.35,23l-2,.61a.37.37,0,0,0-.26.35v2a.37.37,0,0,0,.26.35l2,.61A7,7,0,0,0,19,28.37l-1,1.9a.37.37,0,0,0,.07.44l1.45,1.45a.37.37,0,0,0,.44.07l1.87-1a7.06,7.06,0,0,0,1.39.57l.61,2a.37.37,0,0,0,.35.26h2a.37.37,0,0,0,.35-.26l.61-2a7,7,0,0,0,1.38-.57l1.89,1a.37.37,0,0,0,.44-.07l1.45-1.45a.37.37,0,0,0,.07-.44l-1-1.88A7,7,0,0,0,31.95,27l2-.61a.37.37,0,0,0,.26-.35V24A.37.37,0,0,0,34,23.63Zm-8.83,4.72A3.33,3.33,0,1,1,28.53,25,3.33,3.33,0,0,1,25.19,28.34Z"/><path d="M10.85,27.44a2.29,2.29,0,0,0,1.74-1.68,19.71,19.71,0,0,0,1.89-.6V23.95a2,2,0,0,1,.09-.55,17.42,17.42,0,0,1-2.17.78,2.28,2.28,0,0,0-4.28.63l-.45,0h0a11.93,11.93,0,0,1-2.88-7.27,17.79,17.79,0,0,1,5-4.72,2.23,2.23,0,0,0,2.29.56,18.52,18.52,0,0,0,4.65,5.09,1.93,1.93,0,0,1,.23-.32l.89-.87a16.89,16.89,0,0,1-4.49-4.89,2.27,2.27,0,0,0,.35-1.2c0-.07,0-.14,0-.22A17.69,17.69,0,0,1,25,11a17.49,17.49,0,0,1-1.15,3.35,1.94,1.94,0,0,1,.31-.05h1.45a19.06,19.06,0,0,0,.9-2.7c.43.19.84.41,1.26.64a11.93,11.93,0,0,1,1,4.63l1-.51a2,2,0,0,1,.92-.23h.08A14,14,0,1,0,16.44,31a1.94,1.94,0,0,1,.12-1.46l.28-.53h-.07A11.91,11.91,0,0,1,10.85,27.44ZM16.76,5a12,12,0,0,1,8.61,3.66c0,.25,0,.51-.08.76a19.21,19.21,0,0,0-12.35.11A2.28,2.28,0,0,0,11.74,9a17,17,0,0,1-.61-2.53A11.92,11.92,0,0,1,16.76,5ZM9.66,7.36a18.72,18.72,0,0,0,.49,1.92,2.28,2.28,0,0,0-1.07,1.93s0,.1,0,.15A19.45,19.45,0,0,0,5,14.79,12,12,0,0,1,9.66,7.36Z"/>' })];

// node_modules/@cds/core/icon/shapes/network-switch.js
var e59 = ["network-switch", n23({ outline: '<path d="M33.91,18.47,30.78,8.41A2,2,0,0,0,28.87,7H7.13A2,2,0,0,0,5.22,8.41L2.09,18.48a2,2,0,0,0-.09.59V27a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V19.06A2,2,0,0,0,33.91,18.47ZM32,27H4V19.06L7.13,9H28.87L32,19.06Z"/><rect x="7.12" y="22" width="1.8" height="3"/><rect x="12.12" y="22" width="1.8" height="3"/><rect x="17.11" y="22" width="1.8" height="3"/><rect x="22.1" y="22" width="1.8" height="3"/><rect x="27.1" y="22" width="1.8" height="3"/><rect x="6.23" y="18" width="23.69" height="1.4"/>', outlineAlerted: '<rect x="7.12" y="22" width="1.8" height="3"/><rect x="12.12" y="22" width="1.8" height="3"/><rect x="17.11" y="22" width="1.8" height="3"/><rect x="22.1" y="22" width="1.8" height="3"/><rect x="27.1" y="22" width="1.8" height="3"/><rect x="6.23" y="18" width="23.69" height="1.4"/><path d="M33.91,18.47,33,15.4H30.86L32,19.06V27H4V19.06L7.13,9H19.56l1.15-2H7.13A2,2,0,0,0,5.22,8.41L2.09,18.48a2,2,0,0,0-.09.59V27a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V19.06A2,2,0,0,0,33.91,18.47Z"/>', outlineBadged: '<rect x="7.12" y="22" width="1.8" height="3"/><rect x="12.12" y="22" width="1.8" height="3"/><rect x="17.11" y="22" width="1.8" height="3"/><rect x="22.1" y="22" width="1.8" height="3"/><rect x="27.1" y="22" width="1.8" height="3"/><rect x="6.23" y="18" width="23.69" height="1.4"/><path d="M33.91,18.47l-1.65-5.32a7.49,7.49,0,0,1-2,.33L32,19.06V27H4V19.06L7.13,9h16a7.45,7.45,0,0,1-.55-2H7.13A2,2,0,0,0,5.22,8.41L2.09,18.48a2,2,0,0,0-.09.59V27a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V19.06A2,2,0,0,0,33.91,18.47Z"/>', solid: '<path d="M33.91,18.47,30.78,8.41A2,2,0,0,0,28.87,7H7.13A2,2,0,0,0,5.22,8.41L2.09,18.48a2,2,0,0,0-.09.59V27a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V19.06A2,2,0,0,0,33.91,18.47ZM8.92,25H7.12V22h1.8Zm5,0h-1.8V22h1.8Zm5,0h-1.8V22h1.8Zm5,0H22.1V22h1.8Zm5,0H27.1V22h1.8ZM31,19.4H5V18H31Z"/>', solidAlerted: '<path d="M33,15.4H22.23A3.68,3.68,0,0,1,19,9.89L20.71,7H7.13A2,2,0,0,0,5.22,8.41L2.09,18.48a2,2,0,0,0-.09.59V27a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V19.06a2,2,0,0,0-.09-.59ZM8.92,25H7.12V22h1.8Zm5,0h-1.8V22h1.8Zm5,0h-1.8V22h1.8Zm5,0H22.1V22h1.8Zm5,0H27.1V22h1.8ZM31,19.4H5V18H31Z"/>', solidBadged: '<path d="M32.26,13.15A7.49,7.49,0,0,1,22.57,7H7.13A2,2,0,0,0,5.22,8.41L2.09,18.48a2,2,0,0,0-.09.59V27a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V19.06a2,2,0,0,0-.09-.59ZM8.92,25H7.12V22h1.8Zm5,0h-1.8V22h1.8Zm5,0h-1.8V22h1.8Zm5,0H22.1V22h1.8Zm5,0H27.1V22h1.8ZM31,19.4H5V18H31Z"/>' })];

// node_modules/@cds/core/icon/shapes/node-group.js
var V17 = ["node-group", n23({ outline: '<path d="M33.53,21.58l-4.94-2.83V13.09a1,1,0,0,0-.51-.87L22.64,9.1a1,1,0,0,0-1,0L16.2,12.22a1,1,0,0,0-.51.87v5.66l-4.94,2.83a1,1,0,0,0-.5.87v6.24a1,1,0,0,0,.5.86l5.45,3.12a1,1,0,0,0,1,0l4.95-2.83,4.95,2.83a1,1,0,0,0,.5.14,1,1,0,0,0,.49-.14l5.45-3.12a1,1,0,0,0,.5-.86V22.45A1,1,0,0,0,33.53,21.58ZM22.14,11.12l4.45,2.55V19l-4.46,2.56-4.44-2.6V13.67ZM16.69,30.65l-4.44-2.54V23l4.68-2.68,4.4,2.57V28ZM32,28.11l-4.44,2.54L22.93,28V22.93l4.46-2.57L32,23Z"/><path d="M7,27.43a1,1,0,0,1-1-1V19.9A1,1,0,0,1,6.5,19l4.95-2.83V10.54a1,1,0,0,1,.5-.87l5.21-3a1,1,0,0,1,1.37.37,1,1,0,0,1-.38,1.37l-4.7,2.68v5.66a1,1,0,0,1-.51.87L8,20.48v5.95A1,1,0,0,1,7,27.43Z"/><path d="M3,25.05a1,1,0,0,1-1-1V17.53a1,1,0,0,1,.5-.86l5-2.84V8.17A1,1,0,0,1,8,7.31l5.25-3a1,1,0,0,1,1,1.74L9.45,8.75v5.66a1,1,0,0,1-.51.87L4,18.11v5.94A1,1,0,0,1,3,25.05Z"/>' })];

// node_modules/@cds/core/icon/shapes/node.js
var n34 = ["node", n23({ outline: '<path d="M18,30.66,7,24.33V11.67L18,5.34l11,6.33V24.33ZM9,23.18l9,5.17,9-5.17V12.82L18,7.65,9,12.82Z"/>' })];

// node_modules/@cds/core/icon/shapes/nodes.js
var t91 = ["nodes", n23({ outline: '<path d="M10.5,34.29,2,29.39V19.58l8.5-4.9,8.5,4.9v9.81ZM4,28.23,10.5,32,17,28.23V20.74L10.5,17,4,20.74Z"/><path d="M25.5,34.29,17,29.39V19.58l8.5-4.9,8.5,4.9v9.81ZM19,28.23,25.5,32,32,28.23V20.74L25.5,17,19,20.74Z"/><path d="M18,21.32l-8.5-4.9V6.61L18,1.71l8.5,4.9v9.81Zm-6.5-6.06L18,19l6.5-3.75V7.77L18,4,11.5,7.77Z"/>' })];

// node_modules/@cds/core/icon/shapes/no-wifi.js
var A18 = ["no-wifi", n23({ outline: '<path d="M18,24.42a4,4,0,1,0,4,4A4,4,0,0,0,18,24.42Zm0,6a2,2,0,1,1,2-2A2,2,0,0,1,18,30.42Z"/><path d="M26.21,21.85a1,1,0,0,0-.23-1.4,13.56,13.56,0,0,0-5-2.23l3.87,3.87A1,1,0,0,0,26.21,21.85Z"/><path d="M18.05,10.72a20.88,20.88,0,0,0-4.16.43l1.74,1.74a19,19,0,0,1,2.42-.17A18.76,18.76,0,0,1,28.64,16a1,1,0,0,0,1.12-1.65A20.75,20.75,0,0,0,18.05,10.72Z"/><path d="M33.55,8.2A28.11,28.11,0,0,0,8.11,5.36L9.69,6.93A26,26,0,0,1,32.45,9.87a1,1,0,0,0,1.1-1.67Z"/><path d="M1.84,4.75,4.27,7.18c-.62.34-1.23.7-1.83,1.1A1,1,0,1,0,3.56,9.94C4.26,9.47,5,9,5.74,8.65l3.87,3.87A20.59,20.59,0,0,0,6.23,14.4,1,1,0,0,0,7.36,16a18.82,18.82,0,0,1,3.77-2l4.16,4.16A13.51,13.51,0,0,0,10,20.55a1,1,0,0,0,1.18,1.61A11.52,11.52,0,0,1,17,20l10.8,10.8,1.41-1.41-26-26Z"/>', solid: '<circle cx="18" cy="29.54" r="3"/><path d="M29.18,17.71l.11-.17a1.51,1.51,0,0,0-.47-2.1A20.57,20.57,0,0,0,18,12.37c-.56,0-1.11,0-1.65.07l3.21,3.21a17.41,17.41,0,0,1,7.6,2.52A1.49,1.49,0,0,0,29.18,17.71Z"/><path d="M32.76,9.38A27.9,27.9,0,0,0,10.18,6.27L12.81,8.9A24.68,24.68,0,0,1,31.1,12.12a1.49,1.49,0,0,0,2-.46l.11-.17A1.51,1.51,0,0,0,32.76,9.38Z"/><path d="M3,4.75l3.1,3.1A27.28,27.28,0,0,0,3.18,9.42a1.51,1.51,0,0,0-.48,2.11l.11.17a1.49,1.49,0,0,0,2,.46,24.69,24.69,0,0,1,3.67-1.9l3.14,3.14a20.63,20.63,0,0,0-4.53,2.09,1.51,1.51,0,0,0-.46,2.1l.11.17a1.49,1.49,0,0,0,2,.46A17.46,17.46,0,0,1,14.25,16l3.6,3.6a13.39,13.39,0,0,0-6.79,1.93,1.5,1.5,0,0,0-.46,2.09l.1.16a1.52,1.52,0,0,0,2.06.44,10.2,10.2,0,0,1,9-.7L29,30.75l1.41-1.41-26-26Z"/>' })];

// node_modules/@cds/core/icon/shapes/nvme.js
var e60 = ["nvme", n23({ outline: '<path d="M27,22V14a2,2,0,0,0-2-2H11a2,2,0,0,0-2,2v8a2,2,0,0,0,2,2H25A2,2,0,0,0,27,22ZM11,14H25v8H11Z"/><rect x="19" y="6" width="4" height="2"/><rect x="25.01" y="6" width="1.97" height="2"/><path d="M5.8,8H16.87V6h-11L7.78,4.08a1,1,0,0,0,0-1.42,1,1,0,0,0-1.41,0L2,7,6.37,11.4a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41Z"/><path d="M29.61,24.68a1,1,0,0,0-1.41,0,1,1,0,0,0,0,1.42L30.1,28H19v2H30.2l-2,2a1,1,0,0,0,0,1.41,1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29L34,29.05Z"/><rect x="13" y="28" width="4" height="2"/><rect x="9" y="28" width="1.97" height="2"/>' })];

// node_modules/@cds/core/icon/shapes/pdf-file.js
var h37 = ["pdf-file", n23({ outline: '<path d="M22.89,2H8.83A1.88,1.88,0,0,0,7,3.91V15H9V4H21v8h8V32H9V27H7v5.09A1.88,1.88,0,0,0,8.83,34H29.17A1.88,1.88,0,0,0,31,32.09V9.92ZM23,10V4.1L29,10Z"/><path d="M9.45,19.7A2.73,2.73,0,0,0,6.7,17H3v8H4.67V22.4H6.51a2.72,2.72,0,0,0,2.93-2.51A1.21,1.21,0,0,0,9.45,19.7ZM6.33,20.83H4.67V18.57H6.33c.83,0,1.39.44,1.39,1.13S7.16,20.83,6.33,20.83Z"/><path d="M17.82,21c0-2.34-1.86-4-4.48-4H10.55v8h2.79C16,25,17.82,23.33,17.82,21Zm-4.26,2.45H12.22V18.56h1.34a2.44,2.44,0,0,1,0,4.88h0Z"/><polygon points="25.11 18.55 25.11 17 19.1 17 19.1 25 20.78 25 20.78 21.83 24.7 21.83 24.7 20.28 20.78 20.28 20.78 18.55 25.11 18.55"/>', solid: '<path d="M14.56,19.56H13.22v4.88h1.34a2.44,2.44,0,0,0,0-4.88Z"/><path d="M7.33,19.57H5.67v2.26H7.33c.83,0,1.39-.44,1.39-1.13S8.16,19.57,7.33,19.57Z"/><path d="M21.89,2H7.83A1.88,1.88,0,0,0,6,3.91V14H8V4H20v8h8v4H3a1,1,0,0,0-1,1V27a1,1,0,0,0,1,1H28v4H8V30H6v2.09A1.88,1.88,0,0,0,7.83,34H28.17A1.88,1.88,0,0,0,30,32.09V9.92ZM7.51,23.4H5.67V26H4V18H7.51A2.71,2.71,0,0,1,8,23.4,3.68,3.68,0,0,1,7.51,23.4ZM14.34,26H11.55V18h2.79c2.62,0,4.48,1.65,4.48,4S17,26,14.34,26Zm11.77-6.45H21.78v1.73H25.7v1.55H21.78V26H20.1V18h6ZM22,10V4.1L28,10Z"/>' })];

// node_modules/@cds/core/icon/shapes/phone-handset.js
var e61 = ["phone-handset", n23({ outline: '<path d="M27.73,35.44a4.72,4.72,0,0,1-1-.11,33.91,33.91,0,0,1-16.62-8.75,32.71,32.71,0,0,1-9-16.25A4.58,4.58,0,0,1,2.46,6.05l4-3.85A2,2,0,0,1,8,1.66a2,2,0,0,1,1.45.87l5,7.39a1.6,1.6,0,0,1-.11,1.9l-2.51,3a18.94,18.94,0,0,0,4.17,5.89h0a19.26,19.26,0,0,0,6.07,4.09l3.11-2.47a1.64,1.64,0,0,1,1.86-.12l7.55,4.88A2,2,0,0,1,35,30.2l-3.9,3.86A4.74,4.74,0,0,1,27.73,35.44ZM7.84,3.64l-4,3.85a2.54,2.54,0,0,0-.75,2.4,30.7,30.7,0,0,0,8.41,15.26,31.9,31.9,0,0,0,15.64,8.23,2.75,2.75,0,0,0,2.5-.74l3.9-3.86-7.29-4.71-3.34,2.66a1,1,0,0,1-.92.17,20.06,20.06,0,0,1-7.36-4.75h0a19.49,19.49,0,0,1-4.87-7.2A1,1,0,0,1,10,14l2.7-3.23Z"/>', solid: '<path d="M15.22,20.64a20.37,20.37,0,0,0,7.4,4.79l3.77-3a.67.67,0,0,1,.76,0l7,4.51a2,2,0,0,1,.33,3.18l-3.28,3.24a4,4,0,0,1-3.63,1.07,35.09,35.09,0,0,1-17.15-9A33.79,33.79,0,0,1,1.15,8.6a3.78,3.78,0,0,1,1.1-3.55l3.4-3.28a2,2,0,0,1,3.12.32L13.43,9a.63.63,0,0,1,0,.75l-3.07,3.69A19.75,19.75,0,0,0,15.22,20.64Z"/>' })];

// node_modules/@cds/core/icon/shapes/plugin.js
var A19 = ["plugin", n23({ outline: '<path d="M29.81,16H29V8.83a2,2,0,0,0-2-2H21A5.14,5.14,0,0,0,16.51,2,5,5,0,0,0,11,6.83H4a2,2,0,0,0-2,2V17H4.81A3.13,3.13,0,0,1,8,19.69,3,3,0,0,1,7.22,22,3,3,0,0,1,5,23H2v8.83a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V26h1a5,5,0,0,0,5-5.51A5.15,5.15,0,0,0,29.81,16Zm2.41,7A3,3,0,0,1,30,24H27v7.83H4V25H5a5,5,0,0,0,5-5.51A5.15,5.15,0,0,0,4.81,15H4V8.83h9V7a3,3,0,0,1,1-2.22A3,3,0,0,1,16.31,4,3.13,3.13,0,0,1,19,7.19V8.83h8V18h2.81A3.13,3.13,0,0,1,33,20.69,3,3,0,0,1,32.22,23Z"/>', outlineAlerted: '<path d="M29.81,16H29v-.6H27V18h2.81A3.13,3.13,0,0,1,33,20.69,3,3,0,0,1,32.22,23,3,3,0,0,1,30,24H27v7.83H4V25H5a5,5,0,0,0,5-5.51A5.15,5.15,0,0,0,4.81,15H4V8.83h9V7a3,3,0,0,1,1-2.22A3,3,0,0,1,16.31,4,3.13,3.13,0,0,1,19,7.19V8.83h.66L21,6.59A5.12,5.12,0,0,0,16.51,2,5,5,0,0,0,11,6.83H4a2,2,0,0,0-2,2V17H4.81A3.13,3.13,0,0,1,8,19.69,3,3,0,0,1,7.22,22,3,3,0,0,1,5,23H2v8.83a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V26h1a5,5,0,0,0,5-5.51A5.15,5.15,0,0,0,29.81,16Z"/>', outlineBadged: '<path d="M29.81,16H29V13.43a7.45,7.45,0,0,1-2-.55V18h2.81A3.13,3.13,0,0,1,33,20.69,3,3,0,0,1,32.22,23,3,3,0,0,1,30,24H27v7.83H4V25H5a5,5,0,0,0,5-5.51A5.15,5.15,0,0,0,4.81,15H4V8.83h9V7a3,3,0,0,1,1-2.22A3,3,0,0,1,16.31,4,3.13,3.13,0,0,1,19,7.19V8.83h4.06a7.44,7.44,0,0,1-.51-2H21A5.14,5.14,0,0,0,16.51,2,5,5,0,0,0,11,6.83H4a2,2,0,0,0-2,2V17H4.81A3.13,3.13,0,0,1,8,19.69,3,3,0,0,1,7.22,22,3,3,0,0,1,5,23H2v8.83a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V26h1a5,5,0,0,0,5-5.51A5.15,5.15,0,0,0,29.81,16Z"/>', solid: '<path d="M29.81,16H29V8.83a2,2,0,0,0-2-2H21A5.14,5.14,0,0,0,16.51,2,5,5,0,0,0,11,6.83H4a2,2,0,0,0-2,2V17H4.81A3.13,3.13,0,0,1,8,19.69,3,3,0,0,1,7.22,22,3,3,0,0,1,5,23H2v8.83a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V26h1a5,5,0,0,0,5-5.51A5.15,5.15,0,0,0,29.81,16Z"/>', solidAlerted: '<path d="M29.81,16H29v-.6H22.23A3.68,3.68,0,0,1,19,9.89L21,6.59A5.12,5.12,0,0,0,16.51,2,5,5,0,0,0,11,6.83H4a2,2,0,0,0-2,2V17H4.81A3.13,3.13,0,0,1,8,19.69,3,3,0,0,1,7.22,22,3,3,0,0,1,5,23H2v8.83a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V26h1a5,5,0,0,0,5-5.51A5.15,5.15,0,0,0,29.81,16Z"/>', solidBadged: '<path d="M29.81,16H29V13.43a7.5,7.5,0,0,1-6.45-6.59H21A5.14,5.14,0,0,0,16.51,2,5,5,0,0,0,11,6.83H4a2,2,0,0,0-2,2V17H4.81A3.13,3.13,0,0,1,8,19.69,3,3,0,0,1,7.22,22,3,3,0,0,1,5,23H2v8.83a2,2,0,0,0,2,2H27a2,2,0,0,0,2-2V26h1a5,5,0,0,0,5-5.51A5.15,5.15,0,0,0,29.81,16Z"/>' })];

// node_modules/@cds/core/icon/shapes/pod.js
var o57 = ["pod", n23({ outline: '<path d="M26,32H10a6,6,0,0,1-6-6V10a6,6,0,0,1,6-6H26a6,6,0,0,1,6,6V26A6,6,0,0,1,26,32ZM10,6a4,4,0,0,0-4,4V26a4,4,0,0,0,4,4H26a4,4,0,0,0,4-4V10a4,4,0,0,0-4-4Z"/><path d="M26.56,15H15.44A1.43,1.43,0,0,0,14,16.44v8.12A1.43,1.43,0,0,0,15.44,26H26.56A1.43,1.43,0,0,0,28,24.56V16.44A1.43,1.43,0,0,0,26.56,15ZM26,24H16V17H26Z"/><path d="M12.4,19H10V12H20v1.4h2v-2A1.43,1.43,0,0,0,20.56,10H9.44A1.43,1.43,0,0,0,8,11.44v8.12A1.43,1.43,0,0,0,9.44,21h3Z"/>' })];

// node_modules/@cds/core/icon/shapes/process-on-vm.js
var l26 = ["process-on-vm", n23({ outline: '<path d="M33.49,26.28a1,1,0,0,0-1.2-.7l-2.49.67a14.23,14.23,0,0,0,2.4-6.75A14.48,14.48,0,0,0,27.37,7.35,1,1,0,0,0,26,7.44a1,1,0,0,0,.09,1.41,12.45,12.45,0,0,1,4.16,10.46,12.19,12.19,0,0,1-2,5.74L28,22.54a1,1,0,1,0-1.95.16l.5,6.44,6.25-1.66A1,1,0,0,0,33.49,26.28Z"/><path d="M4.31,17.08a1.06,1.06,0,0,0,.44.16,1,1,0,0,0,1.12-.85A12.21,12.21,0,0,1,18.69,5.84L16.45,7.37a1,1,0,0,0,.47,1.79A1,1,0,0,0,17.56,9l5.33-3.66L18.33.76a1,1,0,1,0-1.39,1.38l1.7,1.7A14.2,14.2,0,0,0,3.89,16.12,1,1,0,0,0,4.31,17.08Z"/><path d="M21.73,29.93a12,12,0,0,1-4.84.51,12.3,12.3,0,0,1-9.57-6.3l2.49.93a1,1,0,0,0,.69-1.84l-4.59-1.7h0L4.44,21,3.33,27.35a1,1,0,0,0,.79,1.13l.17,0a1,1,0,0,0,1-.81l.42-2.4a14.3,14.3,0,0,0,11,7.14,13.91,13.91,0,0,0,5.63-.6,1,1,0,0,0-.6-1.9Z"/><path d="M22,13H14a1,1,0,0,0-1,1v8a1,1,0,0,0,1,1h8a1,1,0,0,0,1-1V14A1,1,0,0,0,22,13Zm-1,8H15V15h6Z"/>' })];

// node_modules/@cds/core/icon/shapes/qr-code.js
var h38 = ["qr-code", n23({ outline: '<path d="M5.6,4A1.6,1.6,0,0,0,4,5.6V12h8V4ZM10,10H6V6h4Z"/><path d="M4,30.4A1.6,1.6,0,0,0,5.6,32H12V24H4ZM6,26h4v4H6Z"/><path d="M24,32h6.4A1.6,1.6,0,0,0,32,30.4V24H24Zm2-6h4v4H26Z"/><path d="M30.4,4H24v8h8V5.6A1.6,1.6,0,0,0,30.4,4ZM30,10H26V6h4Z"/><polygon points="20 10 20 8 16 8 16 12 18 12 18 10 20 10"/><rect x="12" y="12" width="2" height="2"/><rect x="14" y="14" width="4" height="2"/><polygon points="20 6 20 8 22 8 22 4 14 4 14 8 16 8 16 6 20 6"/><rect x="4" y="14" width="2" height="4"/><polygon points="12 16 12 18 10 18 10 14 8 14 8 18 6 18 6 20 4 20 4 22 8 22 8 20 10 20 10 22 12 22 12 20 14 20 14 16 12 16"/><polygon points="20 16 22 16 22 18 24 18 24 16 26 16 26 14 22 14 22 10 20 10 20 12 18 12 18 14 20 14 20 16"/><polygon points="18 30 14 30 14 32 22 32 22 30 20 30 20 28 18 28 18 30"/><polygon points="22 20 22 18 20 18 20 16 18 16 18 18 16 18 16 20 18 20 18 22 20 22 20 20 22 20"/><rect x="30" y="20" width="2" height="2"/><rect x="22" y="20" width="6" height="2"/><polygon points="30 14 28 14 28 16 26 16 26 18 28 18 28 20 30 20 30 18 32 18 32 16 30 16 30 14"/><rect x="20" y="22" width="2" height="6"/><polygon points="14 28 16 28 16 26 18 26 18 24 16 24 16 20 14 20 14 28"/>' })];

// node_modules/@cds/core/icon/shapes/rack-server.js
var h39 = ["rack-server", n23({ outline: '<rect x="6" y="9" width="2" height="2"/><rect x="10" y="9" width="14" height="2"/><rect x="6" y="17" width="2" height="2"/><rect x="10" y="17" width="14" height="2"/><path d="M32,5H4A2,2,0,0,0,2,7V29a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V7A2,2,0,0,0,32,5ZM4,7H32v6H4Zm0,8H32v6H4ZM4,29V23H32v6Z"/><rect x="6" y="25" width="2" height="2"/><rect x="10" y="25" width="14" height="2"/>', outlineAlerted: '<rect x="10" y="17" width="14" height="2"/><rect x="6" y="25" width="2" height="2"/><rect x="10" y="25" width="14" height="2"/><path d="M18.64,11A3.65,3.65,0,0,1,19,9.89L19.56,9H10v2Z"/><path d="M33.68,15.4H32V21H4V15H20.58A3.67,3.67,0,0,1,19,13.56a3.63,3.63,0,0,1-.26-.56H4V7H20.71l1.15-2H4A2,2,0,0,0,2,7V29a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V15.38ZM4,29V23H32v6Z"/>', outlineBadged: '<rect x="6" y="9" width="2" height="2"/><rect x="6" y="17" width="2" height="2"/><rect x="10" y="17" width="14" height="2"/><rect x="6" y="25" width="2" height="2"/><rect x="10" y="25" width="14" height="2"/><path d="M10,11H24v-.51A7.48,7.48,0,0,1,23.13,9H10Z"/><path d="M30,13.5a7.47,7.47,0,0,1-2.68-.5H4V7H22.57a7.52,7.52,0,0,1-.07-1,7.52,7.52,0,0,1,.07-1H4A2,2,0,0,0,2,7V29a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V12.34A7.46,7.46,0,0,1,30,13.5ZM4,15H32v6H4ZM4,29V23H32v6Z"/>', solid: '<path d="M2,22H34V14H2Zm8-5H24v2H10ZM6,17H8v2H6Z"/><path d="M32,4H4A2,2,0,0,0,2,6v6H34V6A2,2,0,0,0,32,4ZM8,9H6V7H8ZM24,9H10V7H24Z"/><path d="M2,30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V24H2Zm8-3H24v2H10ZM6,27H8v2H6Z"/>', solidAlerted: '<path d="M2,30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V24H2Zm8-3H24v2H10ZM6,27H8v2H6Z"/><path d="M19,9.89,19.56,9H10V7H20.71l1.73-3H4A2,2,0,0,0,2,6v6H18.57A3.67,3.67,0,0,1,19,9.89ZM8,9H6V7H8Z"/><path d="M33.68,15.4H22.23A3.69,3.69,0,0,1,19.35,14H2v8H34V15.38ZM8,19H6V17H8Zm16,0H10V17H24Z"/>', solidBadged: '<path d="M2,14v8H34V14Zm6,5H6V17H8Zm16,0H10V17H24Z"/><path d="M2,30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V24H2Zm8-3H24v2H10ZM6,27H8v2H6Z"/><path d="M23.13,9H10V7H22.57a7.52,7.52,0,0,1-.07-1,7.49,7.49,0,0,1,.28-2H4A2,2,0,0,0,2,6v6H25.51A7.52,7.52,0,0,1,23.13,9ZM8,9H6V7H8Z"/>' })];

// node_modules/@cds/core/icon/shapes/radar.js
var r46 = ["radar", n23({ outline: '<path d="M32,18c0,7.7-6.3,14-14,14c-7.7,0-14-6.3-14-14C4,10.6,9.7,4.5,17.1,4v3.7c-5.7,0.5-9.9,5.5-9.4,11.2s5.5,9.9,11.2,9.4c5.3-0.5,9.4-4.9,9.4-10.3h-2c0,4.6-3.7,8.3-8.3,8.3s-8.3-3.7-8.3-8.3c0-4.2,3.1-7.8,7.3-8.3v4.4c-1.8,0.4-3.1,2-3.1,3.9c0,2.2,1.8,4,4,4s4-1.8,4-4c0-1.8-1.3-3.4-3-3.8V2.1C18.6,2,18.3,2,18,2C9.2,2,2,9.2,2,18s7.2,16,16,16s16-7.2,16-16H32z M20,18c0,1.1-0.9,2-2,2s-2-0.9-2-2s0.9-2,2-2S20,16.9,20,18z"/>', solid: '<path d="M32,18c0,7.7-6.2,14-14,14S4,25.8,4,18c0-7.4,5.7-13.5,13.1-14v3.7c-5.7,0.5-9.8,5.5-9.3,11.2s5.5,9.8,11.2,9.3c5.3-0.5,9.3-4.9,9.3-10.2h-2c0,4.6-3.7,8.3-8.3,8.3S9.7,22.6,9.7,18c0-4.2,3.2-7.8,7.3-8.2v4.4c-2.1,0.6-3.4,2.7-2.9,4.9c0.6,2.1,2.7,3.4,4.9,2.9c2.1-0.6,3.4-2.7,2.9-4.9c-0.4-1.4-1.5-2.5-2.9-2.9V2c-0.4,0-0.7,0-1.1,0c-8.8,0-16,7.2-16,16c0,8.8,7.2,16,16,16s16-7.2,16-16c0,0,0,0,0,0H32z"/>' })];

// node_modules/@cds/core/icon/shapes/resistor.js
var o58 = ["resistor", n23({ outline: '<path d="M29.43,26.34h0A1.47,1.47,0,0,1,28,25.22L24.86,13.15,21.74,25.22a1.49,1.49,0,0,1-1.45,1.12h0a1.49,1.49,0,0,1-1.46-1.12L15.71,13.15,12.6,25.22a1.51,1.51,0,0,1-2.91,0L6.57,13.15,5.22,18.37H2a1,1,0,0,1,0-2H3.67l1.45-5.59A1.48,1.48,0,0,1,6.57,9.66h0A1.47,1.47,0,0,1,8,10.78l3.12,12.07,3.12-12.07a1.49,1.49,0,0,1,1.45-1.12h0a1.49,1.49,0,0,1,1.46,1.12l3.12,12.07,3.12-12.07a1.5,1.5,0,0,1,2.9,0l3.12,12.07,1.35-5.22H34a1,1,0,0,1,0,2H32.33l-1.45,5.59A1.48,1.48,0,0,1,29.43,26.34Z"/>' })];

// node_modules/@cds/core/icon/shapes/resource-pool.js
var A20 = ["resource-pool", n23({ outline: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2ZM4,18a14,14,0,0,1,27.95-1H17.49L8.3,28.07A14,14,0,0,1,4,18ZM18,32a13.91,13.91,0,0,1-8.16-2.65L18.43,19H31.95A14,14,0,0,1,18,32Z"/>', outlineAlerted: '<path d="M33.68,15.4H31.73a14,14,0,0,1,.22,1.6H17.49L8.3,28.07A14,14,0,0,1,22.09,4.62l1-1.76A16,16,0,1,0,34,18a16,16,0,0,0-.23-2.61ZM18,32a13.91,13.91,0,0,1-8.16-2.65L18.43,19H31.95A14,14,0,0,1,18,32Z"/>', outlineBadged: '<path d="M31.2,13.4a13.91,13.91,0,0,1,.75,3.6H17.49L8.3,28.07A14,14,0,0,1,22.61,4.8a7.43,7.43,0,0,1,.58-1.92,16.06,16.06,0,1,0,9.93,9.93A7.43,7.43,0,0,1,31.2,13.4ZM18,32a13.91,13.91,0,0,1-8.16-2.65L18.43,19H31.95A14,14,0,0,1,18,32Z"/>', solid: '<path d="M8.57,30.9A16,16,0,0,0,33.95,19H18.43Z"/><path d="M33.95,17A16,16,0,1,0,7,29.6L17.49,17Z"/>', solidAlerted: '<path d="M8.57,30.9A16,16,0,0,0,33.95,19H18.43Z"/><path d="M33.95,17a16,16,0,0,0-.18-1.61H22.23A3.68,3.68,0,0,1,19,9.89l4.06-7A16,16,0,0,0,7,29.6L17.49,17Z"/>', solidBadged: '<path d="M8.57,30.9A16,16,0,0,0,33.95,19H18.43Z"/><path d="M33.95,17a15.91,15.91,0,0,0-.84-4.18,7.49,7.49,0,0,1-9.92-9.94A16,16,0,0,0,7,29.6L17.49,17Z"/>' })];

// node_modules/@cds/core/icon/shapes/router.js
var L10 = ["router", n23({ outline: '<path d="M18,14.87l5.11-5.14a1,1,0,1,0-1.42-1.41L19,11V3.33a1,1,0,0,0-2,0V11L14.31,8.32a1,1,0,1,0-1.42,1.41Z"/><path d="M18,21.13l-5.11,5.14a1,1,0,0,0,1.42,1.41L17,25v7.69a1,1,0,0,0,2,0V25l2.69,2.71a1,1,0,0,0,1.42-1.41Z"/><path d="M28.85,12.89a1,1,0,0,0-1.41,1.42L30.15,17H22.46a1,1,0,1,0,0,2h7.69l-2.71,2.69a1,1,0,0,0,1.41,1.42L34,18Z"/><path d="M5.85,19h7.69a1,1,0,0,0,0-2H5.85l2.71-2.69a1,1,0,1,0-1.41-1.42L2,18l5.14,5.11a1,1,0,1,0,1.41-1.42Z"/>', outlineAlerted: '<path d="M18,21.13l-5.11,5.14a1,1,0,0,0,1.42,1.41L17,25v7.69a1,1,0,0,0,2,0V25l2.69,2.71a1,1,0,0,0,1.42-1.41Z"/><path d="M5.85,19h7.69a1,1,0,0,0,0-2H5.85l2.71-2.69a1,1,0,1,0-1.41-1.42L2,18l5.14,5.11a1,1,0,1,0,1.41-1.42Z"/><path d="M31.38,15.4H28.54L30.15,17H22.46a1,1,0,1,0,0,2h7.69l-2.71,2.69a1,1,0,0,0,1.41,1.42L34,18Z"/><path d="M18,14.87l1.15-1.16-.1-.15A3.68,3.68,0,0,1,19,10V3.33a1,1,0,0,0-2,0V11L14.31,8.32a1,1,0,1,0-1.42,1.41Z"/>', outlineBadged: '<path d="M18,14.87l5.11-5.14a1,1,0,1,0-1.42-1.41L19,11V3.33a1,1,0,0,0-2,0V11L14.31,8.32a1,1,0,1,0-1.42,1.41Z"/><path d="M18,21.13l-5.11,5.14a1,1,0,0,0,1.42,1.41L17,25v7.69a1,1,0,0,0,2,0V25l2.69,2.71a1,1,0,0,0,1.42-1.41Z"/><path d="M28.85,12.89a1,1,0,0,0-1.41,1.42L30.15,17H22.46a1,1,0,1,0,0,2h7.69l-2.71,2.69a1,1,0,0,0,1.41,1.42L34,18Z"/><path d="M5.85,19h7.69a1,1,0,0,0,0-2H5.85l2.71-2.69a1,1,0,1,0-1.41-1.42L2,18l5.14,5.11a1,1,0,1,0,1.41-1.42Z"/>', solid: '<path d="M18,1.67a16,16,0,1,0,16,16A16,16,0,0,0,18,1.67ZM13.86,9.92a.8.8,0,0,1,1.13,0l2.21,2.19V5.93a.8.8,0,0,1,1.6,0v6.18L21,9.92a.8.8,0,1,1,1.13,1.14L18,15.15l-4.14-4.1A.8.8,0,0,1,13.86,9.92ZM10.32,21.74a.8.8,0,0,1-1.13,0L5,17.67l4.19-4.09a.8.8,0,1,1,1.12,1.14l-2.2,2.14h6.27a.8.8,0,0,1,0,1.6H8.11l2.2,2.15A.8.8,0,0,1,10.32,21.74Zm11.82,3.67a.8.8,0,0,1-1.13,0L18.8,23.23V29.4a.8.8,0,0,1-1.6,0V23.23L15,25.42a.8.8,0,1,1-1.13-1.14L18,20.18l4.14,4.1A.8.8,0,0,1,22.14,25.41Zm4.67-3.66a.8.8,0,1,1-1.12-1.14l2.2-2.15H21.63a.8.8,0,0,1,0-1.6h6.27l-2.2-2.14a.8.8,0,1,1,1.12-1.14L31,17.67Z"/>', solidAlerted: '<path d="M33.82,15.39H28.68L31,17.67l-4.19,4.09a.8.8,0,1,1-1.12-1.14l2.2-2.15H21.63a.8.8,0,0,1,0-1.6h6.27l-1.5-1.47H22.23a3.68,3.68,0,0,1-3-1.51L18,15.15l-4.14-4.1A.8.8,0,1,1,15,9.92l2.21,2.19V5.93a.8.8,0,0,1,1.6,0v4.49A3.65,3.65,0,0,1,19,9.89l4.22-7.31A16,16,0,1,0,34,17.67,16,16,0,0,0,33.82,15.39Zm-23.5,6.35a.8.8,0,0,1-1.13,0L5,17.67l4.19-4.09a.8.8,0,1,1,1.12,1.14l-2.2,2.14h6.27a.8.8,0,0,1,0,1.6H8.11l2.2,2.15A.8.8,0,0,1,10.32,21.74Zm11.82,3.67a.8.8,0,0,1-1.13,0L18.8,23.23V29.4a.8.8,0,0,1-1.6,0V23.23L15,25.42a.8.8,0,1,1-1.13-1.14L18,20.18l4.14,4.1A.8.8,0,0,1,22.14,25.41Z"/>', solidBadged: '<path d="M33.22,12.76A7.49,7.49,0,0,1,23.32,2.6a16,16,0,1,0,9.9,10.17ZM13.86,9.92a.8.8,0,0,1,1.13,0l2.21,2.19V5.93a.8.8,0,0,1,1.6,0v6.18L21,9.92a.8.8,0,1,1,1.13,1.14L18,15.15l-4.14-4.1A.8.8,0,0,1,13.86,9.92ZM10.32,21.74a.8.8,0,0,1-1.13,0L5,17.67l4.19-4.09a.8.8,0,1,1,1.12,1.14l-2.2,2.14h6.27a.8.8,0,0,1,0,1.6H8.11l2.2,2.15A.8.8,0,0,1,10.32,21.74Zm11.82,3.67a.8.8,0,0,1-1.13,0L18.8,23.23V29.4a.8.8,0,0,1-1.6,0V23.23L15,25.42a.8.8,0,1,1-1.13-1.14L18,20.18l4.14,4.1A.8.8,0,0,1,22.14,25.41Zm4.67-3.66a.8.8,0,1,1-1.12-1.14l2.2-2.15H21.63a.8.8,0,0,1,0-1.6h6.27l-2.2-2.14a.8.8,0,1,1,1.12-1.14L31,17.67Z"/>' })];

// node_modules/@cds/core/icon/shapes/ruler-pencil.js
var a37 = ["ruler-pencil", n23({ outline: '<polygon points="9 17.41 9 27 18.59 27 16.59 25 11 25 11 19.41 9 17.41"/><path d="M34.87,32.29,32,29.38V32H4V27.85H6v-1.6H4V19.6H6V18H4V11.6H6V10H4V4.41L19.94,20.26V17.44L3.71,1.29A1,1,0,0,0,2,2V33a1,1,0,0,0,1,1H34.16a1,1,0,0,0,.71-1.71Z"/><path d="M24,30h4a2,2,0,0,0,2-2V8.7L27.7,4.47a2,2,0,0,0-1.76-1h0a2,2,0,0,0-1.76,1.08L22,8.72V28A2,2,0,0,0,24,30ZM24,9.2l1.94-3.77L28,9.21V24H24Zm0,16.43h4v2.44H24Z"/>', solid: '<path d="M34.87,32.21,30,27.37V8.75L27.7,4.52a2,2,0,0,0-3.54,0L22,8.76V19.41L3.71,1.21A1,1,0,0,0,2,1.92V10H4.17v1.6H2V18H4.17v1.6H2v6.65H4.17v1.6H2v5.07a1,1,0,0,0,1,1H34.16a1,1,0,0,0,.71-1.71ZM10,26V16.94L19.07,26Zm18,2.11H24V25.68h4Zm0-4H24V9.25l1.94-3.77L28,9.26Z"/>' })];

// node_modules/@cds/core/icon/shapes/script-execute.js
var t92 = ["script-execute", n23({ outline: '<path d="M7.38,32a4.54,4.54,0,0,0,.76-2.5V6.5a2.5,2.5,0,0,1,5,0V11H25.22v7.12l2,1v-8h3.92V6.58a4.49,4.49,0,0,0-4.48-4.5h-16a4.49,4.49,0,0,0-4.5,4.48v23a2.5,2.5,0,0,1-2.5,2.5A2.44,2.44,0,0,1,2.88,32v2a3.84,3.84,0,0,0,.76.08h14A4.26,4.26,0,0,1,17,32ZM26.64,4.12a2.49,2.49,0,0,1,2.5,2.46V9.12h-14V6.58a4.54,4.54,0,0,0-.76-2.5Z"/><path d="M32.86,24.39,22.17,18.92a2.17,2.17,0,0,0-1-.24h0A2.17,2.17,0,0,0,19,20.87v11a2.19,2.19,0,0,0,1,1.86,2.12,2.12,0,0,0,1.18.32,2.29,2.29,0,0,0,1-.23l10.68-5.48a2.15,2.15,0,0,0,1.19-1.95A2.2,2.2,0,0,0,32.86,24.39ZM32,26.51,21.27,32a.19.19,0,0,1-.18,0,.17.17,0,0,1-.09-.16v-11a.17.17,0,0,1,.09-.16.14.14,0,0,1,.09,0l.09,0L32,26.17a.19.19,0,0,1,.1.17A.16.16,0,0,1,32,26.51Z"/>', solid: '<path d="M34,24.94,21.18,18.38A1.5,1.5,0,0,0,19,19.71V32.84a1.5,1.5,0,0,0,2.18,1.34L34,27.61A1.5,1.5,0,0,0,34,24.94Z"/><path d="M17,32H7.38a4.54,4.54,0,0,0,.76-2.5V6.5a2.5,2.5,0,0,1,5,0V11H25.22v7.12l2,1v-8h3.92V6.58a4.49,4.49,0,0,0-4.48-4.5h-16a4.49,4.49,0,0,0-4.5,4.48h0v23a2.5,2.5,0,0,1-2.5,2.5A2.44,2.44,0,0,1,2.88,32v2a3.84,3.84,0,0,0,.76.08H17.23A3.41,3.41,0,0,1,17,32.84ZM26.64,4.12a2.49,2.49,0,0,1,2.5,2.46V9.12h-14V6.58a4.54,4.54,0,0,0-.76-2.5Z"/>' })];

// node_modules/@cds/core/icon/shapes/script-schedule.js
var e62 = ["script-schedule", n23({ outline: '<path d="M7.38,32a4.54,4.54,0,0,0,.76-2.5V6.5a2.5,2.5,0,0,1,5,0V11H25.22v3.07a11.37,11.37,0,0,1,2,.3v-3.3h3.92V6.58a4.49,4.49,0,0,0-4.48-4.5h-16a4.49,4.49,0,0,0-4.5,4.48h0v23a2.5,2.5,0,0,1-2.5,2.5h0A2.57,2.57,0,0,1,2.88,32v2a3.84,3.84,0,0,0,.76.08H19a10.92,10.92,0,0,1-2.34-2ZM26.64,4.12a2.49,2.49,0,0,1,2.5,2.46V9.12h-14V6.58a4.54,4.54,0,0,0-.76-2.5Z"/></g><g id="Layer_5" data-name="Layer 5"><path d="M24.88,33.88a9,9,0,1,1,9-9h0A9,9,0,0,1,24.88,33.88Zm0-16a7,7,0,1,0,7,7,7,7,0,0,0-7-7Z"/><polygon points="29.12 25.92 24 25.92 24 20 26 20 26 24 29.12 24 29.12 25.92"/>', solid: '<path d="M7.38,32a4.54,4.54,0,0,0,.76-2.5V6.5a2.5,2.5,0,0,1,5,0V11H25.22v3.07a11.37,11.37,0,0,1,2,.3v-3.3h3.92V6.58a4.49,4.49,0,0,0-4.48-4.5h-16a4.49,4.49,0,0,0-4.5,4.48h0v23a2.5,2.5,0,0,1-2.5,2.5A2.57,2.57,0,0,1,2.88,32v2a3.84,3.84,0,0,0,.76.08H19a10.92,10.92,0,0,1-2.34-2ZM26.64,4.12a2.49,2.49,0,0,1,2.5,2.46V9.12h-14V6.58a4.54,4.54,0,0,0-.76-2.5Z"/><path d="M24.88,15.88a9,9,0,1,0,9,9h0A9,9,0,0,0,24.88,15.88ZM29.46,27H24V20h2v5h3.46Z"/>' })];

// node_modules/@cds/core/icon/shapes/shield-check.js
var l27 = ["shield-check", n23({ outline: '<path d="M31.25,7.4a43.79,43.79,0,0,1-6.62-2.35,45,45,0,0,1-6.08-3.21L18,1.5l-.54.35a45,45,0,0,1-6.08,3.21A43.79,43.79,0,0,1,4.75,7.4L4,7.59v8.34c0,13.39,13.53,18.4,13.66,18.45l.34.12.34-.12c.14,0,13.66-5.05,13.66-18.45V7.59ZM30,15.93c0,11-10,15.61-12,16.43-2-.82-12-5.44-12-16.43V9.14a47.54,47.54,0,0,0,6.18-2.25,48.23,48.23,0,0,0,5.82-3,48.23,48.23,0,0,0,5.82,3A47.54,47.54,0,0,0,30,9.14Z"/><path d="M10.88,16.87a1,1,0,0,0-1.41,1.41l6,6L26.4,13.77A1,1,0,0,0,25,12.33l-9.47,9.19Z"/>', solid: '<path d="M31.25,7.4a43.79,43.79,0,0,1-6.62-2.35,45,45,0,0,1-6.08-3.21L18,1.5l-.54.35a45,45,0,0,1-6.08,3.21A43.79,43.79,0,0,1,4.75,7.4L4,7.59v8.34c0,13.39,13.53,18.4,13.66,18.45l.34.12.34-.12c.14,0,13.66-5.05,13.66-18.45V7.59Zm-4.57,6.65L15.51,24.9,9.19,18.57a1.4,1.4,0,0,1,2-2L15.54,21,24.73,12a1.4,1.4,0,1,1,2,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/shield.js
var c20 = ["shield", n23({ outline: '<path d="M31.25,7.4a43.79,43.79,0,0,1-6.62-2.35,45,45,0,0,1-6.08-3.21L18,1.5l-.54.35a45,45,0,0,1-6.08,3.21A43.79,43.79,0,0,1,4.75,7.4L4,7.59v8.34c0,13.39,13.53,18.4,13.66,18.45l.34.12.34-.12c.14,0,13.66-5.05,13.66-18.45V7.59ZM30,15.93c0,11-10,15.61-12,16.43-2-.82-12-5.44-12-16.43V9.14a47.54,47.54,0,0,0,6.18-2.25,48.23,48.23,0,0,0,5.82-3,48.23,48.23,0,0,0,5.82,3A47.54,47.54,0,0,0,30,9.14Z"/>', outlineAlerted: '<path d="M30,15.4v.53c0,11-10,15.61-12,16.43-2-.82-12-5.44-12-16.43V9.14a47.54,47.54,0,0,0,6.18-2.25,48.23,48.23,0,0,0,5.82-3c1,.64,2.2,1.27,3.43,1.89l1-1.74a41.1,41.1,0,0,1-3.89-2.18L18,1.5l-.54.35a45,45,0,0,1-6.08,3.21A43.79,43.79,0,0,1,4.75,7.4L4,7.59v8.34c0,13.39,13.53,18.4,13.66,18.45l.34.12.34-.12c.14,0,13.66-5.05,13.66-18.45V15.4Z"/>', outlineBadged: '<path d="M30,13.5v2.43c0,11-10,15.61-12,16.43-2-.82-12-5.44-12-16.43V9.14a47.54,47.54,0,0,0,6.18-2.25,48.23,48.23,0,0,0,5.82-3,46.19,46.19,0,0,0,4.51,2.42c0-.1,0-.19,0-.29a7.49,7.49,0,0,1,.23-1.83,41.61,41.61,0,0,1-4.19-2.33L18,1.5l-.54.35a45,45,0,0,1-6.08,3.21A43.79,43.79,0,0,1,4.75,7.4L4,7.59v8.34c0,13.39,13.53,18.4,13.66,18.45l.34.12.34-.12c.14,0,13.66-5.05,13.66-18.45V13.22A7.49,7.49,0,0,1,30,13.5Z"/>', solid: '<path d="M31.25,7.4a43.79,43.79,0,0,1-6.62-2.35,45,45,0,0,1-6.08-3.21L18,1.5l-.54.35a45,45,0,0,1-6.08,3.21A43.79,43.79,0,0,1,4.75,7.4L4,7.59v8.34c0,13.39,13.53,18.4,13.66,18.45l.34.12.34-.12c.14,0,13.66-5.05,13.66-18.45V7.59Z"/>', solidAlerted: '<path d="M22.23,15.4A3.68,3.68,0,0,1,19,9.89L22.43,4a41.1,41.1,0,0,1-3.89-2.18L18,1.5l-.54.35a45,45,0,0,1-6.08,3.21A43.79,43.79,0,0,1,4.75,7.4L4,7.59v8.34c0,13.39,13.53,18.4,13.66,18.45l.34.12.34-.12c.14,0,13.66-5.05,13.66-18.45V15.4Z"/>', solidBadged: '<path d="M30,13.5a7.47,7.47,0,0,1-7.27-9.33,41.61,41.61,0,0,1-4.19-2.33L18,1.5l-.54.35a45,45,0,0,1-6.08,3.21A43.79,43.79,0,0,1,4.75,7.4L4,7.59v8.34c0,13.39,13.53,18.4,13.66,18.45l.34.12.34-.12c.14,0,13.66-5.05,13.66-18.45V13.22A7.49,7.49,0,0,1,30,13.5Z"/>' })];

// node_modules/@cds/core/icon/shapes/shield-x.js
var L11 = ["shield-x", n23({ outline: '<path d="M31.25,7.4a43.79,43.79,0,0,1-6.62-2.35,45,45,0,0,1-6.08-3.21L18,1.5l-.54.35a45,45,0,0,1-6.08,3.21A43.79,43.79,0,0,1,4.75,7.4L4,7.59v8.34c0,13.39,13.53,18.4,13.66,18.45l.34.12.34-.12c.14,0,13.66-5.05,13.66-18.45V7.59ZM30,15.93c0,11-10,15.61-12,16.43-2-.82-12-5.44-12-16.43V9.14a47.54,47.54,0,0,0,6.18-2.25,48.23,48.23,0,0,0,5.82-3,48.23,48.23,0,0,0,5.82,3A47.54,47.54,0,0,0,30,9.14Z"/><path d="M22.81,10.79,18,15.61l-4.81-4.81a1,1,0,0,0-1.41,1.41L16.59,17l-4.81,4.81a1,1,0,1,0,1.41,1.41L18,18.43l4.81,4.81a1,1,0,0,0,1.41-1.41L19.41,17l4.81-4.81a1,1,0,0,0-1.41-1.41Z"/>', solid: '<path d="M31.25,7.4a43.79,43.79,0,0,1-6.62-2.35,45,45,0,0,1-6.08-3.21L18,1.5l-.54.35a45,45,0,0,1-6.08,3.21A43.79,43.79,0,0,1,4.75,7.4L4,7.59v8.34c0,13.39,13.53,18.4,13.66,18.45l.34.12.34-.12c.14,0,13.66-5.05,13.66-18.45V7.59ZM24.51,21.55a1.4,1.4,0,0,1-2,2L18,19l-4.53,4.53a1.43,1.43,0,0,1-2,0,1.4,1.4,0,0,1,0-2L16,17l-4.53-4.53a1.4,1.4,0,1,1,2-2L18,15l4.53-4.53a1.4,1.4,0,0,1,2,2L20,17Z"/>' })];

// node_modules/@cds/core/icon/shapes/squid.js
var t93 = ["squid", n23({ outline: '<path d="M18,7a1,1,0,0,1-1-1V3.19a1,1,0,0,1,2,0V6A1,1,0,0,1,18,7Z"/><path d="M18,34a1,1,0,0,1-1-1V30a1,1,0,0,1,2,0v3A1,1,0,0,1,18,34Z"/><path d="M7.41,18l1.78-1.77a1,1,0,1,0-1.42-1.42L6,16.59,4.23,14.81a1,1,0,1,0-1.42,1.42L4.59,18,2.81,19.77a1,1,0,0,0,0,1.42,1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29L6,19.41l1.77,1.78a1,1,0,0,0,1.42,0,1,1,0,0,0,0-1.42Z"/><path d="M6,13.76l.36-.36a3,3,0,0,1,2.11-.88,11,11,0,0,1,19,0,3,3,0,0,1,2.12.88l.36.36.2-.2a13,13,0,0,0-24.4,0Z"/><path d="M30,22.24l-.36.36a3,3,0,0,1-2.12.88,11,11,0,0,1-19,0,3,3,0,0,1-2.12-.88L6,22.24l-.2.2a13,13,0,0,0,24.4,0Z"/><path d="M31.41,18l1.78-1.77a1,1,0,0,0-1.42-1.42L30,16.59l-1.77-1.78a1,1,0,1,0-1.42,1.42L28.59,18l-1.78,1.77a1,1,0,0,0,0,1.42,1,1,0,0,0,.71.29,1,1,0,0,0,.71-.29L30,19.41l1.77,1.78a1,1,0,0,0,1.42,0,1,1,0,0,0,0-1.42Z"/>' })];

// node_modules/@cds/core/icon/shapes/ssd.js
var Z7 = ["ssd", n23({ outline: '<path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6Zm0,22H4V8H32Z"/><circle cx="6.21" cy="10.25" r="1.25"/><circle cx="29.81" cy="10.25" r="1.25"/><circle cx="6.21" cy="25.42" r="1.25"/><circle cx="29.81" cy="25.42" r="1.25"/><path d="M10,18.62c1.32.31,1.91.54,1.91,1.22s-.53,1.09-1.55,1.09a4,4,0,0,1-2.71-1.11l-.86,1.06a5,5,0,0,0,3.52,1.34c2,0,3.1-1,3.1-2.52s-1.15-2.05-2.87-2.44c-1.31-.3-1.92-.54-1.92-1.21A1.25,1.25,0,0,1,10,15a3.68,3.68,0,0,1,2.37,1l.81-1.1A4.58,4.58,0,0,0,10,13.69c-1.74,0-3,1.05-3,2.49S8.26,18.22,10,18.62Z"/><path d="M17.83,20.93a4,4,0,0,1-2.71-1.11l-.86,1.06a5,5,0,0,0,3.52,1.34c2,0,3.1-1,3.1-2.52S19.73,17.65,18,17.26c-1.31-.3-1.92-.54-1.92-1.21A1.25,1.25,0,0,1,17.48,15a3.68,3.68,0,0,1,2.37,1l.81-1.1a4.56,4.56,0,0,0-3.12-1.15c-1.73,0-3,1.05-3,2.49s1.19,2,2.89,2.44c1.32.31,1.91.54,1.91,1.22S18.85,20.93,17.83,20.93Z"/><path d="M29.9,18c0-2.41-1.92-4.12-4.64-4.12h-2.9v8.24h2.9C28,22.08,29.9,20.37,29.9,18Zm-6-2.76h1.56a2.77,2.77,0,1,1,0,5.53H23.86Z"/>', solid: '<path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6ZM5.21,8A1.25,1.25,0,1,1,4,9.25,1.25,1.25,0,0,1,5.21,8Zm0,20a1.25,1.25,0,1,1,1.25-1.25A1.25,1.25,0,0,1,5.21,28Zm5.06-5.78a5,5,0,0,1-3.52-1.34l.86-1.06a4,4,0,0,0,2.71,1.11c1,0,1.55-.5,1.55-1.09s-.59-.91-1.91-1.22c-1.7-.4-2.89-.89-2.89-2.44s1.22-2.49,3-2.49a4.58,4.58,0,0,1,3.12,1.15l-.81,1.1A3.68,3.68,0,0,0,10,15a1.25,1.25,0,0,0-1.39,1.08c0,.67.61.91,1.92,1.21,1.72.39,2.87.94,2.87,2.44S12.24,22.22,10.27,22.22Zm7.51,0a5,5,0,0,1-3.52-1.34l.86-1.06a4,4,0,0,0,2.71,1.11c1,0,1.55-.5,1.55-1.09s-.59-.91-1.91-1.22c-1.7-.4-2.89-.89-2.89-2.44s1.23-2.49,3-2.49a4.56,4.56,0,0,1,3.12,1.15l-.81,1.1a3.68,3.68,0,0,0-2.37-1,1.25,1.25,0,0,0-1.39,1.08c0,.67.61.91,1.92,1.21,1.72.39,2.87.94,2.87,2.44S19.75,22.22,17.78,22.22Zm4.58-.14V13.84h2.9c2.72,0,4.64,1.71,4.64,4.12S28,22.08,25.26,22.08ZM30.69,28a1.25,1.25,0,1,1,1.25-1.25A1.25,1.25,0,0,1,30.69,28Zm0-17.5a1.25,1.25,0,1,1,1.25-1.25A1.25,1.25,0,0,1,30.69,10.5Z"/><path d="M23.86,15.2h1.56a2.77,2.77,0,1,1,0,5.53H23.86Z"/>' })];

// node_modules/@cds/core/icon/shapes/storage-adapter.js
var a38 = ["storage-adapter", n23({ outline: '<path d="M6.06,30a1,1,0,0,1-1-1V8h-2a1,1,0,0,1,0-2h4V29A1,1,0,0,1,6.06,30Z"/><path d="M30.06,27h-25V9h25a3,3,0,0,1,3,3V24A3,3,0,0,1,30.06,27Zm-23-2h23a1,1,0,0,0,1-1V12a1,1,0,0,0-1-1h-23Z"/><rect x="22.06" y="20" width="6" height="2"/><rect x="22.06" y="14" width="6" height="2"/><path d="M19.06,22h-8V20h7V14h2v7A1,1,0,0,1,19.06,22Z"/>' })];

// node_modules/@cds/core/icon/shapes/storage.js
var a39 = ["storage", n23({ outline: '<path d="M33,6.69h0c-.18-3.41-9.47-4.33-15-4.33S3,3.29,3,6.78V29.37c0,3.49,9.43,4.43,15,4.43s15-.93,15-4.43V6.78s0,0,0,0S33,6.7,33,6.69Zm-2,7.56c-.33.86-5.06,2.45-13,2.45A37.45,37.45,0,0,1,7,15.34v2.08A43.32,43.32,0,0,0,18,18.7c4,0,9.93-.48,13-2v5.17c-.33.86-5.06,2.45-13,2.45A37.45,37.45,0,0,1,7,22.92V25a43.32,43.32,0,0,0,11,1.28c4,0,9.93-.48,13-2v5.1c-.35.86-5.08,2.45-13,2.45S5.3,30.2,5,29.37V6.82C5.3,6,10,4.36,18,4.36c7.77,0,12.46,1.53,13,2.37-.52.87-5.21,2.39-13,2.39A37.6,37.6,0,0,1,7,7.76V9.85a43.53,43.53,0,0,0,11,1.27c4,0,9.93-.48,13-2Z"/>', outlineAlerted: '<path d="M19.51,9.09,18,9.11A37.6,37.6,0,0,1,7,7.76V9.85a43.53,43.53,0,0,0,11,1.27h.61A3.66,3.66,0,0,1,19,9.89Z"/><path d="M28.83,15.4A38.37,38.37,0,0,1,18,16.7,37.45,37.45,0,0,1,7,15.34v2.08A43.33,43.33,0,0,0,18,18.7c4,0,9.93-.48,13-2v5.17c-.33.86-5.06,2.45-13,2.45A37.45,37.45,0,0,1,7,22.92V25a43.33,43.33,0,0,0,11,1.28c4,0,9.93-.48,13-2v5.1c-.35.86-5.08,2.45-13,2.45S5.3,30.2,5,29.37V6.82C5.3,6,10,4.36,18,4.36c1.5,0,2.89.06,4.15.16l1.1-1.9c-1.86-.18-3.7-.26-5.25-.26-5.57,0-15,.93-15,4.43V29.37c0,3.49,9.43,4.43,15,4.43s15-.93,15-4.43v-14Z"/>', outlineBadged: '<path d="M7,7.76V9.85a43.53,43.53,0,0,0,11,1.27,54.82,54.82,0,0,0,6.2-.36,7.5,7.5,0,0,1-1.13-1.88c-1.5.15-3.2.24-5.07.24A37.6,37.6,0,0,1,7,7.76Z"/><path d="M31,13.43v.82c-.33.86-5.06,2.45-13,2.45A37.45,37.45,0,0,1,7,15.34v2.08A43.33,43.33,0,0,0,18,18.7c4,0,9.93-.48,13-2v5.17c-.33.86-5.06,2.45-13,2.45A37.45,37.45,0,0,1,7,22.92V25a43.33,43.33,0,0,0,11,1.28c4,0,9.93-.48,13-2v5.1c-.35.86-5.08,2.45-13,2.45S5.3,30.2,5,29.37V6.82C5.3,6,10,4.36,18,4.36c1.7,0,3.25.08,4.64.2a7.44,7.44,0,0,1,.67-1.94c-1.88-.18-3.75-.26-5.31-.26-5.57,0-15,.93-15,4.43V29.37c0,3.49,9.43,4.43,15,4.43s15-.93,15-4.43V12.87A7.45,7.45,0,0,1,31,13.43Z"/>', solid: '<path d="M17.91,18.28c8.08,0,14.66-1.74,15.09-3.94V8.59c-.43,2.2-7,3.94-15.09,3.94A39.4,39.4,0,0,1,6.25,11V9a39.4,39.4,0,0,0,11.66,1.51C26,10.53,32.52,8.79,33,6.61h0C32.8,3.2,23.52,2.28,18,2.28S3,3.21,3,6.71V29.29c0,3.49,9.43,4.43,15,4.43s15-.93,15-4.43V24.09C32.57,26.28,26,28,17.91,28A39.4,39.4,0,0,1,6.25,26.52v-2A39.4,39.4,0,0,0,17.91,26C26,26,32.57,24.28,33,22.09V16.34c-.43,2.2-7,3.94-15.09,3.94A39.4,39.4,0,0,1,6.25,18.77v-2A39.4,39.4,0,0,0,17.91,18.28Z"/>', solidAlerted: '<path class="clr-i-solid--alerted clr-i-solid-path-1--alerted" d="M17.91,20.28A39.4,39.4,0,0,1,6.25,18.77v-2a39.4,39.4,0,0,0,11.66,1.51c6.9,0,12.7-1.27,14.51-3H22.23a3.67,3.67,0,0,1-3.55-2.75h-.77A39.4,39.4,0,0,1,6.25,11V9a39.4,39.4,0,0,0,11.66,1.51h.82A3.64,3.64,0,0,1,19,9.75l4.17-7.22c-1.85-.18-3.68-.25-5.21-.25-5.57,0-15,.93-15,4.43V29.29c0,3.49,9.43,4.43,15,4.43s15-.93,15-4.43V24.09C32.57,26.28,26,28,17.91,28A39.4,39.4,0,0,1,6.25,26.52v-2A39.4,39.4,0,0,0,17.91,26C26,26,32.57,24.28,33,22.09V16.34C32.57,18.53,26,20.28,17.91,20.28Z"/>', solidBadged: '<path d="M17.91,18.28c8.08,0,14.66-1.74,15.09-3.94v-1.6a7.47,7.47,0,0,1-7.38-.8,48.3,48.3,0,0,1-7.71.59A39.4,39.4,0,0,1,6.25,11V9a39.4,39.4,0,0,0,11.66,1.51,51,51,0,0,0,6-.34,7.46,7.46,0,0,1-.59-7.65c-1.87-.18-3.73-.26-5.28-.26-5.57,0-15,.93-15,4.43V29.29c0,3.49,9.43,4.43,15,4.43s15-.93,15-4.43V24.09C32.57,26.28,26,28,17.91,28A39.4,39.4,0,0,1,6.25,26.52v-2A39.4,39.4,0,0,0,17.91,26C26,26,32.57,24.28,33,22.09V16.34c-.43,2.2-7,3.94-15.09,3.94A39.4,39.4,0,0,1,6.25,18.77v-2A39.4,39.4,0,0,0,17.91,18.28Z"/>' })];

// node_modules/@cds/core/icon/shapes/tablet.js
var e63 = ["tablet", n23({ outline: '<rect x="17" y="29" width="2" height="2"/><path d="M30,2H6A2,2,0,0,0,4,4V32a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V4A2,2,0,0,0,30,2Zm0,2V26.38H6V4ZM6,32V28H30v4Z"/>', solid: '<path d="M30,2H6A2,2,0,0,0,4,4V32a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V4A2,2,0,0,0,30,2ZM19,32H17V30h2ZM6,28V4H30V28Z"/>' })];

// node_modules/@cds/core/icon/shapes/tape-drive.js
var H21 = ["tape-drive", n23({ outline: '<path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6ZM4,28V8H32V28Z"/><path d="M13.33,13.35a4.52,4.52,0,1,0,4.53,4.52A4.53,4.53,0,0,0,13.33,13.35Zm0,7.44a2.92,2.92,0,1,1,2.93-2.92A2.92,2.92,0,0,1,13.33,20.79Z"/><path d="M23.62,13.35a4.52,4.52,0,1,0,4.52,4.52A4.53,4.53,0,0,0,23.62,13.35Zm0,7.44a2.92,2.92,0,1,1,2.92-2.92A2.92,2.92,0,0,1,23.62,20.79Z"/><path d="M6,11V23.55H8V12H29.34V10H7A1,1,0,0,0,6,11Z"/>', outlineAlerted: '<path d="M8.81,17.87a4.53,4.53,0,1,0,4.52-4.52A4.53,4.53,0,0,0,8.81,17.87Zm7.45,0A2.93,2.93,0,1,1,13.33,15,2.93,2.93,0,0,1,16.26,17.87Z"/><path d="M7,10a1,1,0,0,0-1,1V23.55H8V12H18.57A3.7,3.7,0,0,1,19,10Z"/><path d="M33.68,15.4H32V28H4V8H20.14l1.15-2H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V15.38Z"/><path d="M22.09,15.39a3.65,3.65,0,0,1-1.8-.55,4.51,4.51,0,1,0,7.11.56H25.17a2.92,2.92,0,1,1-3.08,0Z"/>', outlineBadged: '<path d="M8.81,17.87a4.53,4.53,0,1,0,4.52-4.52A4.53,4.53,0,0,0,8.81,17.87Zm7.45,0A2.93,2.93,0,1,1,13.33,15,2.93,2.93,0,0,1,16.26,17.87Z"/><path d="M19.1,17.87a4.52,4.52,0,1,0,4.52-4.52A4.53,4.53,0,0,0,19.1,17.87Zm7.44,0A2.92,2.92,0,1,1,23.62,15,2.92,2.92,0,0,1,26.54,17.87Z"/><path d="M32,13.22V28H4V8H22.78a7.37,7.37,0,0,1-.28-2H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V12.34A7.65,7.65,0,0,1,32,13.22Z"/><path d="M6,11V23.55H8V12H25.51a7.66,7.66,0,0,1-1.85-2H7A1,1,0,0,0,6,11Z"/>', solid: '<path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6ZM30,24H6V12H30Z"/><path d="M12.21,23a5,5,0,1,0-5-5A5,5,0,0,0,12.21,23Zm0-7a2,2,0,1,1-2,2A2,2,0,0,1,12.21,16Z"/><path d="M23.79,23a5,5,0,1,0-5-5A5,5,0,0,0,23.79,23Zm0-7a2,2,0,1,1-2,2A2,2,0,0,1,23.79,16Z"/>', solidAlerted: '<path d="M7.2,18a5,5,0,1,0,5-5A5,5,0,0,0,7.2,18Zm7,0a2,2,0,1,1-2-2A2,2,0,0,1,14.22,18Z"/><path d="M18.78,18a5,5,0,1,0,9.27-2.6H22.23a3.71,3.71,0,0,1-2.17-.71A5,5,0,0,0,18.78,18Zm5-2a2,2,0,1,1-2,2A2,2,0,0,1,23.79,16Z"/><path d="M33.68,15.4H30V24H6V12H18.57a3.65,3.65,0,0,1,.48-2.11L21.29,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V15.38Z"/>', solidBadged: '<path d="M12.21,23a5,5,0,1,0-5-5A5,5,0,0,0,12.21,23Zm0-7a2,2,0,1,1-2,2A2,2,0,0,1,12.21,16Z"/><path d="M23.79,23a5,5,0,1,0-5-5A5,5,0,0,0,23.79,23Zm0-7a2,2,0,1,1-2,2A2,2,0,0,1,23.79,16Z"/><path d="M30,13.5V24H6V12H25.51a7.49,7.49,0,0,1-3-6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V12.34A7.49,7.49,0,0,1,30,13.5Z"/>' })];

// node_modules/@cds/core/icon/shapes/terminal.js
var t94 = ["terminal", n23({ outline: '<path d="M32,5H4A2,2,0,0,0,2,7V29a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V7A2,2,0,0,0,32,5ZM4,7H32V9.2H4ZM4,29V10.8H32V29Z"/><rect x="17" y="23" width="6" height="2"/><polygon points="7 15.68 13.79 18.8 7 21.91 7 24.11 16.6 19.7 16.6 17.89 7 13.48 7 15.68"/>', outlineAlerted: '<rect x="17" y="23" width="6" height="2"/><polygon points="7 24.11 16.6 19.7 16.6 17.89 7 13.48 7 15.68 13.79 18.8 7 21.91 7 24.11"/><path d="M33.68,15.4H32V29H4V10.8H18.68A3.66,3.66,0,0,1,19,9.89l.4-.69H4V7H20.71l1.15-2H4A2,2,0,0,0,2,7V29a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V15.38Z"/>', outlineBadged: '<rect x="17" y="23" width="6" height="2"/><polygon points="7 24.11 16.6 19.7 16.6 17.89 7 13.48 7 15.68 13.79 18.8 7 21.91 7 24.11"/><path d="M32,13.22V29H4V10.8H24.24a7.51,7.51,0,0,1-1-1.6H4V7H22.57a7.52,7.52,0,0,1-.07-1,7.52,7.52,0,0,1,.07-1H4A2,2,0,0,0,2,7V29a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V12.34A7.45,7.45,0,0,1,32,13.22Z"/>', solid: '<path d="M32,5H4A2,2,0,0,0,2,7V29a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V7A2,2,0,0,0,32,5ZM6.8,15.81V13.17l10,4.59v2.08l-10,4.59V21.78l6.51-3ZM23.4,25.4H17V23h6.4ZM4,9.2V7H32V9.2Z"/>', solidAlerted: '<path d="M33.68,15.4H22.23A3.68,3.68,0,0,1,19,9.89l.4-.69H4V7H20.71l1.15-2H4A2,2,0,0,0,2,7V29a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V15.38ZM16.8,19.83l-10,4.59V21.78l6.51-3-6.51-3V13.17l10,4.59Zm6.6,5.57H17V23h6.4Z"/>', solidBadged: '<path d="M30,13.5a7.49,7.49,0,0,1-6.78-4.3H4V7H22.57a7.52,7.52,0,0,1-.07-1,7.52,7.52,0,0,1,.07-1H4A2,2,0,0,0,2,7V29a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V12.34A7.46,7.46,0,0,1,30,13.5ZM16.8,19.83l-10,4.59V21.78l6.51-3-6.51-3V13.17l10,4.59Zm6.6,5.57H17V23h6.4Z"/>' })];

// node_modules/@cds/core/icon/shapes/thin-client.js
var i29 = ["thin-client", n23({ outline: '<path d="M13,30H5a1,1,0,0,1-1-1V4A2,2,0,0,1,6,2h6a2,2,0,0,1,2,2V29A1,1,0,0,1,13,30ZM6,28h6V4H6Z"/><circle cx="9" cy="7.42" r="1.5"/><path d="M15,34H3a1,1,0,0,1,0-2H15a1,1,0,0,1,0,2Z"/><rect x="7.55" y="12.2" width="3" height="1.6"/><rect x="7.55" y="15.2" width="3" height="1.6"/><rect x="7.55" y="18.2" width="3" height="1.6"/><rect x="16" y="8" width="2" height="1.6"/><rect x="20" y="8" width="2" height="1.6"/><path d="M33,11.8H25a.8.8,0,0,1-.8-.8V5a.8.8,0,0,1,.8-.8h8a.8.8,0,0,1,.8.8v6A.8.8,0,0,1,33,11.8Zm-7.2-1.6h6.4V5.8H25.8Z"/><rect x="16" y="20" width="2" height="1.6"/><rect x="20" y="20" width="2" height="1.6"/><path d="M33,23.8H25a.8.8,0,0,1-.8-.8V17a.8.8,0,0,1,.8-.8h8a.8.8,0,0,1,.8.8v6A.8.8,0,0,1,33,23.8Zm-7.2-1.6h6.4V17.8H25.8Z"/>', solid: '<path d="M15,32H3a1,1,0,0,0,0,2H15a1,1,0,0,0,0-2Z"/><path d="M5,30h8a1,1,0,0,0,1-1V4a2,2,0,0,0-2-2H6A2,2,0,0,0,4,4V29A1,1,0,0,0,5,30ZM9,5.92a1.5,1.5,0,1,1-1.5,1.5A1.5,1.5,0,0,1,9,5.92ZM6,12.2h5.84v1.6H6Zm0,3h5.84v1.6H6Zm0,3h6v1.6H6Z"/><rect x="16" y="8" width="2" height="1.6"/><rect x="20" y="8" width="2" height="1.6"/><path d="M33,4.2H25a.8.8,0,0,0-.8.8v6a.8.8,0,0,0,.8.8h8a.8.8,0,0,0,.8-.8V5A.8.8,0,0,0,33,4.2Zm-.8,6H25.8V5.8h6.4Z"/><rect x="16" y="20" width="2" height="1.6"/><rect x="20" y="20" width="2" height="1.6"/><path d="M33,16.2H25a.8.8,0,0,0-.8.8v6a.8.8,0,0,0,.8.8h8a.8.8,0,0,0,.8-.8V17A.8.8,0,0,0,33,16.2Zm-.8,6H25.8V17.8h6.4Z"/>' })];

// node_modules/@cds/core/icon/shapes/unarchive.js
var h40 = ["unarchive", n23({ outline: '<path d="M29,32H7V22H5V32a2,2,0,0,0,2,2H29a2,2,0,0,0,2-2V22H29Z"/><path d="M14,24a1,1,0,0,0,1,1h6a1,1,0,0,0,0-2H15A1,1,0,0,0,14,24Z"/><path d="M15,18H6V14h9V12H5.5A1.5,1.5,0,0,0,4,13.5V20H15.78A3,3,0,0,1,15,18Z"/><path d="M30.5,12H21v2h9v4H21a3,3,0,0,1-.78,2H32V13.5A1.5,1.5,0,0,0,30.5,12Z"/><path d="M13,9.55,17,5.6V18a1,1,0,1,0,2,0V5.6l4,3.95a1,1,0,1,0,1.41-1.42L18,1.78,11.61,8.13A1,1,0,0,0,13,9.55Z"/>', solid: '<path d="M18,21a3,3,0,0,1-2.22-1H5V32a2,2,0,0,0,2,2H29a2,2,0,0,0,2-2V20H20.21A3,3,0,0,1,18,21Zm4,3a1,1,0,0,1-1,1H15a1,1,0,0,1,0-2h6A1,1,0,0,1,22,24Z"/><path d="M15,12H5.5A1.5,1.5,0,0,0,4,13.5V18H15Z"/><path d="M30.5,12H21v6H32V13.5A1.5,1.5,0,0,0,30.5,12Z"/><path d="M13,9.55,17,5.6V18a1,1,0,1,0,2,0V5.6l4,3.95a1,1,0,1,0,1.41-1.42L18,1.78,11.61,8.13A1,1,0,0,0,13,9.55Z"/>' })];

// node_modules/@cds/core/icon/shapes/uninstall.js
var t95 = ["uninstall", n23({ outline: '<path d="M11.29,26.72a1,1,0,0,0,1.41,0L18,21.49l5.3,5.23A1,1,0,0,0,24.7,25.3l-5.28-5.21,5.28-5.21a1,1,0,0,0-1.41-1.42L18,18.68l-5.3-5.23a1,1,0,0,0-1.41,1.42l5.28,5.21L11.3,25.3A1,1,0,0,0,11.29,26.72Z"/><path d="M30.92,8H26.55a1,1,0,0,0,0,2H31V30H5V10H9.38a1,1,0,0,0,0-2H5.08A2,2,0,0,0,3,10V30a2,2,0,0,0,2.08,2H30.92A2,2,0,0,0,33,30V10A2,2,0,0,0,30.92,8Z"/>', outlineAlerted: '<path d="M11.29,26.72a1,1,0,0,0,1.41,0L18,21.49l5.3,5.23A1,1,0,0,0,24.7,25.3l-5.28-5.21,4.75-4.69H22.23a3.65,3.65,0,0,1-.81-.1L18,18.68l-5.3-5.23a1,1,0,0,0-1.41,1.42l5.28,5.21L11.3,25.3A1,1,0,0,0,11.29,26.72Z"/><path d="M31,15.4V30H5V10H9.38a1,1,0,0,0,0-2H5.08A2,2,0,0,0,3,10V30a2,2,0,0,0,2.08,2H30.92A2,2,0,0,0,33,30V15.4Z"/>', outlineBadged: '<path d="M11.29,26.72a1,1,0,0,0,1.41,0L18,21.49l5.3,5.23A1,1,0,0,0,24.7,25.3l-5.28-5.21,5.28-5.21a1,1,0,0,0-1.41-1.42L18,18.68l-5.3-5.23a1,1,0,0,0-1.41,1.42l5.28,5.21L11.3,25.3A1,1,0,0,0,11.29,26.72Z"/><path d="M31,13.43V30H5V10H9.38a1,1,0,0,0,0-2H5.08A2,2,0,0,0,3,10V30a2,2,0,0,0,2.08,2H30.92A2,2,0,0,0,33,30V12.87A7.45,7.45,0,0,1,31,13.43Z"/>' })];

// node_modules/@cds/core/icon/shapes/unlink.js
var a40 = ["unlink", n23({ outline: '<path d="M5,5,3.59,6.41l9,9L8.1,19.79a5.91,5.91,0,0,0,0,8.39,6,6,0,0,0,8.44,0L21,23.78l8.63,8.63L31,31ZM15.13,26.76a4,4,0,0,1-5.62,0,3.92,3.92,0,0,1,0-5.55L14,16.79l5.58,5.58Z"/><path d="M21.53,9.22a4,4,0,0,1,5.62,0,3.92,3.92,0,0,1,0,5.55l-4.79,4.76L23.78,21l4.79-4.76a5.92,5.92,0,0,0,0-8.39,6,6,0,0,0-8.44,0l-4.76,4.74L16.78,14Z"/>' })];

// node_modules/@cds/core/icon/shapes/update.js
var h41 = ["update", n23({ outline: '<path d="M19.5,28.1h-2.9c-0.5,0-0.9-0.3-1-0.8l-0.5-1.8c-0.2-0.1-0.2-0.1-0.4-0.2l-1.6,0.9c-0.4,0.2-0.9,0.2-1.2-0.2l-2.1-2.1c-0.3-0.3-0.4-0.8-0.2-1.2l0.9-1.6c-0.1-0.2-0.1-0.2-0.2-0.4l-1.8-0.5c-0.4-0.1-0.8-0.5-0.8-1v-2.9c0-0.5,0.3-0.9,0.8-1l1.8-0.5c0.1-0.2,0.1-0.2,0.2-0.4l-0.9-1.6c-0.2-0.4-0.2-0.9,0.2-1.2l2.1-2.1c0.3-0.3,0.8-0.4,1.2-0.2l1.6,0.9c0.2-0.1,0.2-0.1,0.4-0.2l0.5-1.8c0.1-0.4,0.5-0.8,1-0.8h2.9c0.5,0,0.9,0.3,1,0.8l0.5,1.8c0.2,0.1,0.2,0.1,0.4,0.2l1.6-0.9c0.4-0.2,0.9-0.2,1.2,0.2l2.1,2.1c0.3,0.3,0.4,0.8,0.2,1.2l-0.9,1.6c0.1,0.2,0.1,0.2,0.2,0.4l1.8,0.5c0.4,0.1,0.8,0.5,0.8,1v2.9c0,0.5-0.3,0.9-0.8,1l-1.8,0.5c-0.1,0.2-0.1,0.2-0.2,0.4l0.9,1.6c0.2,0.4,0.2,0.9-0.2,1.2l-2.1,2.1c-0.3,0.3-0.8,0.4-1.2,0.2l-1.6-0.9c-0.2,0.1-0.2,0.1-0.4,0.2l-0.5,1.8C20.3,27.8,19.9,28.1,19.5,28.1z M17.3,26.1h1.4l0.5-2.1l0.5-0.2c0.4-0.1,0.7-0.3,1.1-0.4l0.5-0.3l1.9,1.1l1-1l-1.1-1.9l0.3-0.5c0.2-0.3,0.3-0.7,0.4-1.1l0.2-0.5l2.1-0.5v-1.4L24,16.8l-0.2-0.5c-0.1-0.4-0.3-0.7-0.4-1.1l-0.3-0.5l1.1-1.9l-1-1l-1.9,1.1l-0.5-0.3c-0.3-0.2-0.7-0.3-1.1-0.4L19.2,12l-0.5-2.1h-1.4L16.8,12l-0.5,0.2c-0.4,0.1-0.7,0.3-1.1,0.4l-0.5,0.3l-1.9-1.1l-1,1l1.1,1.9l-0.3,0.5c-0.2,0.3-0.3,0.7-0.4,1.1L12,16.8l-2.1,0.5v1.4l2.1,0.5l0.2,0.5c0.1,0.4,0.3,0.7,0.4,1.1l0.3,0.5l-1.1,1.9l1,1l1.9-1.1l0.5,0.3c0.3,0.2,0.7,0.3,1.1,0.4l0.5,0.2L17.3,26.1z M27.1,19.5L27.1,19.5L27.1,19.5z"/><path d="M18,22.3c-2.4,0-4.3-1.9-4.3-4.3s1.9-4.3,4.3-4.3c2.4,0,4.3,1.9,4.3,4.3S20.4,22.3,18,22.3z M18,15.7c-1.3,0-2.3,1-2.3,2.3s1,2.3,2.3,2.3c1.3,0,2.3-1,2.3-2.3S19.3,15.7,18,15.7z"/><path d="M18,2c-0.6,0-1,0.4-1,1s0.4,1,1,1c7.7,0,14,6.3,14,14s-6.3,14-14,14S4,25.7,4,18c0-2.8,0.8-5.5,2.4-7.8v1.2c0,0.6,0.4,1,1,1s1-0.4,1-1v-5h-5c-0.6,0-1,0.4-1,1s0.4,1,1,1h1.8C3.1,11.1,2,14.5,2,18c0,8.8,7.2,16,16,16s16-7.2,16-16S26.8,2,18,2z"/>' })];

// node_modules/@cds/core/icon/shapes/upload-cloud.js
var A21 = ["upload-cloud", n23({ outline: '<path d="M30.31,13c0-.1,0-.21,0-.32a10.26,10.26,0,0,0-10.45-10,10.47,10.47,0,0,0-9.6,6.1A9.74,9.74,0,0,0,1.6,18.4,9.62,9.62,0,0,0,11.25,28H15V26H11.25A7.65,7.65,0,0,1,11,10.74l.67,0,.23-.63a8.43,8.43,0,0,1,8-5.4,8.26,8.26,0,0,1,8.45,8,7.75,7.75,0,0,1,0,.8l-.08.72.65.3A6,6,0,0,1,26.38,26H21v2h5.38a8,8,0,0,0,3.93-15Z"/><path d="M22.28,21.85A1,1,0,0,0,23,20.14l-5-5-5,5a1,1,0,0,0,1.41,1.41L17,19V31.25a1,1,0,1,0,2,0V19l2.57,2.57A1,1,0,0,0,22.28,21.85Z"/>', outlineAlerted: '<path d="M22.28,21.85A1,1,0,0,0,23,20.14l-5-5-5,5a1,1,0,0,0,1.41,1.41L17,19V31.25a1,1,0,1,0,2,0V19l2.57,2.57A1,1,0,0,0,22.28,21.85Z"/><path d="M3.6,18.38A7.71,7.71,0,0,1,11,10.74l.67,0,.23-.63a8.43,8.43,0,0,1,8-5.4,8.81,8.81,0,0,1,2,.25l1-1.8a10.8,10.8,0,0,0-3.07-.45,10.47,10.47,0,0,0-9.6,6.1A9.74,9.74,0,0,0,1.6,18.4,9.62,9.62,0,0,0,11.25,28H15V26H11.25A7.66,7.66,0,0,1,3.6,18.38Z"/><path d="M32.9,15.4H30.21A6,6,0,0,1,26.38,26H21v2h5.38A8,8,0,0,0,32.9,15.4Z"/>', outlineBadged: '<path d="M22.28,21.85A1,1,0,0,0,23,20.14l-5-5-5,5a1,1,0,0,0,1.41,1.41L17,19V31.25a1,1,0,1,0,2,0V19l2.57,2.57A1,1,0,0,0,22.28,21.85Z"/><path d="M30.92,13.44a7.13,7.13,0,0,1-2.63-.14c0,.08,0,.15,0,.23l-.08.72.65.3A6,6,0,0,1,26.38,26H21v2h5.38a8,8,0,0,0,4.54-14.56Z"/><path d="M3.6,18.38A7.71,7.71,0,0,1,11,10.74l.67,0,.23-.63a8.43,8.43,0,0,1,8-5.4,8.79,8.79,0,0,1,2.68.42,7.45,7.45,0,0,1,.5-1.94,10.79,10.79,0,0,0-3.18-.48,10.47,10.47,0,0,0-9.6,6.1A9.74,9.74,0,0,0,1.6,18.4,9.62,9.62,0,0,0,11.25,28H15V26H11.25A7.66,7.66,0,0,1,3.6,18.38Z"/>' })];

// node_modules/@cds/core/icon/shapes/usb.js
var l28 = ["usb", n23({ outline: '<path d="M14.29,11.4a1.49,1.49,0,0,1,1.28-.72h1a2.89,2.89,0,0,0,2.75,2.09,3,3,0,0,0,0-5.91,2.9,2.9,0,0,0-2.67,1.82H15.57a3.49,3.49,0,0,0-3,1.66l-3,4.83h2.36Zm5-2.94A1.36,1.36,0,1,1,18,9.81,1.32,1.32,0,0,1,19.33,8.46Z"/><path d="M34.3,17.37l-6.11-3.66a.7.7,0,0,0-.7,0,.71.71,0,0,0-.36.61V17H6.92a2.33,2.33,0,0,1,.32,1.17,2.47,2.47,0,1,1-2.47-2.46,2.37,2.37,0,0,1,1.15.3l.93-1.76A4.44,4.44,0,1,0,9.15,19h3.58l4.17,6.65a3.49,3.49,0,0,0,3,1.66h1.66v1.28a.79.79,0,0,0,.8.79h4.49a.79.79,0,0,0,.8-.79v-4.4a.79.79,0,0,0-.8-.8H22.34a.8.8,0,0,0-.8.8v1.12H19.88a1.51,1.51,0,0,1-1.28-.72L15.09,19h12v2.66a.69.69,0,0,0,.36.61.67.67,0,0,0,.34.09.65.65,0,0,0,.36-.1l6.11-3.66a.69.69,0,0,0,.34-.6A.71.71,0,0,0,34.3,17.37ZM23.14,25H26v2.8H23.14Zm5.39-4.56V15.55l4,2.42Z"/>', solid: '<path d="M34.72,17.37l-5.51-3.31a.71.71,0,0,0-1.07.6V17H11.77l3.52-5.6a1.49,1.49,0,0,1,1.28-.72h1.64a2.41,2.41,0,0,0,2.25,1.61,2.48,2.48,0,0,0,0-4.95,2.38,2.38,0,0,0-2.13,1.34H16.57a3.49,3.49,0,0,0-3,1.66L9.41,17H8a3.46,3.46,0,1,0,.08,2h5.64l4.15,6.62a3.49,3.49,0,0,0,3,1.66h2.59v.92h4.4V23.8h-4.4v1.48H20.88a1.51,1.51,0,0,1-1.28-.72L16.11,19h12v2.28a.7.7,0,0,0,.36.61.72.72,0,0,0,.34.09.65.65,0,0,0,.36-.1l5.52-3.31a.7.7,0,0,0,0-1.2Z"/>' })];

// node_modules/@cds/core/icon/shapes/vm.js
var h42 = ["vm", n23({ outline: '<path d="M11,5H25V8h2V5a2,2,0,0,0-2-2H11A2,2,0,0,0,9,5v6.85h2Z"/><path d="M30,10H17v2h8v6h2V12h3V26H22V17a2,2,0,0,0-2-2H6a2,2,0,0,0-2,2V31a2,2,0,0,0,2,2H20a2,2,0,0,0,2-2V28h8a2,2,0,0,0,2-2V12A2,2,0,0,0,30,10ZM6,31V17H20v9H16V20H14v6a2,2,0,0,0,2,2h4v3Z"/>', outlineAlerted: '<path d="M11,5H21.87L23,3H11A2,2,0,0,0,9,5v6.85h2Z"/><rect x="25.01" y="15.4" width="1.99" height="2.6"/><path d="M30,15.4V26H22V17a2,2,0,0,0-2-2H6a2,2,0,0,0-2,2V31a2,2,0,0,0,2,2H20a2,2,0,0,0,2-2V28h8a2,2,0,0,0,2-2V15.4ZM6,31V17H20v9H16V20H14v6a2,2,0,0,0,2,2h4v3Z"/><path d="M17,10v2h1.57A3.67,3.67,0,0,1,19,10Z"/>', outlineBadged: '<path d="M11,5H22.57a7.45,7.45,0,0,1,.55-2H11A2,2,0,0,0,9,5v6.85h2Z"/><path d="M30,13.5h0V26H22V17a2,2,0,0,0-2-2H6a2,2,0,0,0-2,2V31a2,2,0,0,0,2,2H20a2,2,0,0,0,2-2V28h8a2,2,0,0,0,2-2V13.22A7.49,7.49,0,0,1,30,13.5ZM6,31V17H20v9H16V20H14v6a2,2,0,0,0,2,2h4v3Z"/><path d="M17,12h8v6h2V12.87A7.52,7.52,0,0,1,23.66,10H17Z"/>', solid: '<path d="M13.59,12a3.6,3.6,0,0,1,3.6-3.6H27V5a2,2,0,0,0-2-2H11A2,2,0,0,0,9,5v8.4h4.59Z"/><path d="M30,10H17.19a2,2,0,0,0-2,2v1.4H20A3.6,3.6,0,0,1,23.6,17v8H22V17a2,2,0,0,0-2-2H6a2,2,0,0,0-2,2V31a2,2,0,0,0,2,2H20a2,2,0,0,0,2-2V29.6H17.19a3.6,3.6,0,0,1-3.6-3.6V20h1.6v6a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V12A2,2,0,0,0,30,10Z"/>', solidAlerted: '<path d="M13.59,12a3.6,3.6,0,0,1,3.6-3.6h2.72L23,3H11A2,2,0,0,0,9,5v8.4h4.59Z"/><path d="M17.19,10a2,2,0,0,0-2,2v1.4H19A3.68,3.68,0,0,1,19,10Z"/><path d="M23.21,15.4A3.55,3.55,0,0,1,23.6,17v8H22V17a2,2,0,0,0-2-2H6a2,2,0,0,0-2,2V31a2,2,0,0,0,2,2H20a2,2,0,0,0,2-2V29.6H17.19a3.6,3.6,0,0,1-3.6-3.6V20h1.6v6a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V15.4Z"/>', solidBadged: '<path d="M13.59,12a3.6,3.6,0,0,1,3.6-3.6H22.9A7.45,7.45,0,0,1,23.13,3H11A2,2,0,0,0,9,5v8.4h4.59Z"/><path d="M30,13.5A7.49,7.49,0,0,1,23.66,10H17.19a2,2,0,0,0-2,2v1.4H20A3.6,3.6,0,0,1,23.6,17v8H22V17a2,2,0,0,0-2-2H6a2,2,0,0,0-2,2V31a2,2,0,0,0,2,2H20a2,2,0,0,0,2-2V29.6H17.19a3.6,3.6,0,0,1-3.6-3.6V20h1.6v6a2,2,0,0,0,2,2H30a2,2,0,0,0,2-2V13.22A7.49,7.49,0,0,1,30,13.5Z"/>' })];

// node_modules/@cds/core/icon/shapes/vmw-app.js
var o59 = ["vmw-app", n23({ outline: '<polygon points="28 22 30 22 30 30 22 30 22 28 20 28 20 32 32 32 32 20 28 20 28 22"/><polygon points="14 30 6 30 6 22 8 22 8 20 4 20 4 32 16 32 16 28 14 28 14 30"/><polygon points="8 14 6 14 6 6 14 6 14 8 16 8 16 4 4 4 4 16 8 16 8 14"/><polygon points="20 4 20 8 22 8 22 6 30 6 30 14 28 14 28 16 32 16 32 4 20 4"/><rect x="11" y="11" width="6" height="6"/><rect x="19" y="11" width="6" height="6"/><rect x="11" y="19" width="6" height="6"/><rect x="19" y="19" width="6" height="6"/>', outlineAlerted: '<polygon points="28 22 30 22 30 30 22 30 22 28 20 28 20 32 32 32 32 20 28 20 28 22"/><polygon points="14 30 6 30 6 22 8 22 8 20 4 20 4 32 16 32 16 28 14 28 14 30"/><polygon points="8 14 6 14 6 6 14 6 14 8 16 8 16 4 4 4 4 16 8 16 8 14"/><rect x="11" y="11" width="6" height="6"/><rect x="11" y="19" width="6" height="6"/><rect x="19" y="19" width="6" height="6"/><path d="M25,15.4H22.23A3.69,3.69,0,0,1,19,13.56l0-.1V17h6Z"/><polygon points="22.45 4 20 4 20 8 20.14 8 22.45 4"/><rect x="28" y="15.4" width="4" height="0.6"/>', outlineBadged: '<polygon points="28 22 30 22 30 30 22 30 22 28 20 28 20 32 32 32 32 20 28 20 28 22"/><polygon points="14 30 6 30 6 22 8 22 8 20 4 20 4 32 16 32 16 28 14 28 14 30"/><polygon points="8 14 6 14 6 6 14 6 14 8 16 8 16 4 4 4 4 16 8 16 8 14"/><rect x="11" y="11" width="6" height="6"/><rect x="11" y="19" width="6" height="6"/><rect x="19" y="19" width="6" height="6"/><path d="M22,6h.5a7.49,7.49,0,0,1,.28-2H20V8h2Z"/><path d="M30,13.5V14H28v2h4V13.22A7.49,7.49,0,0,1,30,13.5Z"/><path d="M25,11.58a7.53,7.53,0,0,1-.58-.58H19v6h6Z"/>' })];

// node_modules/@cds/core/icon/shapes/wifi.js
var d28 = ["wifi", n23({ outline: '<path d="M33.55,8.2a28.1,28.1,0,0,0-31.11.08A1,1,0,1,0,3.56,9.94a26.11,26.11,0,0,1,28.89-.07,1,1,0,0,0,1.1-1.67Z"/><path d="M18.05,10.72A20.74,20.74,0,0,0,6.23,14.4,1,1,0,0,0,7.36,16,18.85,18.85,0,0,1,28.64,16a1,1,0,0,0,1.12-1.65A20.75,20.75,0,0,0,18.05,10.72Z"/><path d="M18.05,17.9a13.51,13.51,0,0,0-8,2.64,1,1,0,0,0,1.18,1.61,11.56,11.56,0,0,1,13.62-.08A1,1,0,1,0,26,20.46,13.52,13.52,0,0,0,18.05,17.9Z"/><path d="M18,24.42a4,4,0,1,0,4,4A4,4,0,0,0,18,24.42Zm0,6a2,2,0,1,1,2-2A2,2,0,0,1,18,30.42Z"/>', solid: '<circle cx="18" cy="29.54" r="3"/><path d="M32.76,9.38a27.87,27.87,0,0,0-29.57,0,1.51,1.51,0,0,0-.48,2.11l.11.17a1.49,1.49,0,0,0,2,.46,24.68,24.68,0,0,1,26.26,0,1.49,1.49,0,0,0,2-.46l.11-.17A1.51,1.51,0,0,0,32.76,9.38Z"/><path d="M28.82,15.44a20.59,20.59,0,0,0-21.7,0,1.51,1.51,0,0,0-.46,2.1l.11.17a1.49,1.49,0,0,0,2,.46,17.4,17.4,0,0,1,18.36,0,1.49,1.49,0,0,0,2-.46l.11-.17A1.51,1.51,0,0,0,28.82,15.44Z"/><path d="M24.88,21.49a13.41,13.41,0,0,0-13.82,0,1.5,1.5,0,0,0-.46,2.09l.1.16a1.52,1.52,0,0,0,2.06.44,10.27,10.27,0,0,1,10.42,0,1.52,1.52,0,0,0,2.06-.45l.1-.16A1.49,1.49,0,0,0,24.88,21.49Z"/>' })];

// node_modules/@cds/core/icon/shapes/xls-file.js
var o60 = ["xls-file", n23({ outline: '<path d="M21.89,2H7.83A1.88,1.88,0,0,0,6,3.91V15H8V4H20v8h8V32H8V27H6v5.09A1.88,1.88,0,0,0,7.83,34H28.17A1.88,1.88,0,0,0,30,32.09V9.92ZM22,10V4.1L28,10Z"/><polygon points="9.78 25.35 6.95 21.38 9.78 17.45 7.85 17.45 6 20.04 4.14 17.45 2.19 17.45 5.01 21.42 2.19 25.35 4.11 25.35 5.97 22.76 7.81 25.35 9.78 25.35"/><polygon points="10.66 17.45 10.66 25.35 16.15 25.35 16.15 23.82 12.32 23.82 12.32 17.45 10.66 17.45"/><path d="M20.19,24.05a3.74,3.74,0,0,1-2.54-1l-.95,1.16a4.92,4.92,0,0,0,3.42,1.31c1.88,0,3-1,3-2.51s-1.1-2-2.75-2.35c-1.19-.27-1.65-.46-1.65-1s.42-.85,1.13-.85a3.57,3.57,0,0,1,2.2.87l.86-1.22a4.36,4.36,0,0,0-3-1.09A2.54,2.54,0,0,0,17,19.51a2.28,2.28,0,0,0,0,.26c0,1.53,1.15,2,2.78,2.38,1.17.28,1.62.45,1.62,1S21,24.05,20.19,24.05Z"/>', solid: '<path d="M21.89,2H7.83A1.88,1.88,0,0,0,6,3.91V14H8V4H20v8h8v4H3a1,1,0,0,0-1,1V27a1,1,0,0,0,1,1H28v4H8V30H6v2.09A1.88,1.88,0,0,0,7.83,34H28.17A1.88,1.88,0,0,0,30,32.09V9.92ZM12,25.87H10L8.2,23.33,6.41,25.87H4.53L7.29,22,4.53,18.13H6.44l1.81,2.54,1.81-2.54H12L9.19,22Zm6.24,0H12.81V18.13h1.63v6.24h3.75Zm3.88.13a4.83,4.83,0,0,1-3.35-1.28l.94-1.14a3.64,3.64,0,0,0,2.48,1c.81,0,1.23-.38,1.23-.86s-.44-.72-1.6-1c-1.59-.37-2.72-.84-2.72-2.33A2.5,2.5,0,0,1,21.7,18h.14a4.27,4.27,0,0,1,2.95,1.07L24,20.26a3.49,3.49,0,0,0-2.15-.85c-.69,0-1.11.37-1.11.83s.45.74,1.61,1c1.62.37,2.7.87,2.7,2.3S23.91,26,22.07,26ZM22,10V4.1L28,10Z"/>' })];

// node_modules/@cds/core/icon/shapes/bookmark.js
var r47 = ["bookmark", n23({ outline: '<path d="M26,34a2,2,0,0,1-1.41-.58L18,26.82l-6.54,6.52A2,2,0,0,1,8,31.93V4a2,2,0,0,1,2-2H26a2,2,0,0,1,2,2V32a2,2,0,0,1-2,2Zm0-2h0V4H10V31.93L18,24Z"/>', solid: '<path d="M26,2H10A2,2,0,0,0,8,4V31.93a2,2,0,0,0,3.42,1.41l6.54-6.52,6.63,6.6A2,2,0,0,0,28,32V4A2,2,0,0,0,26,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/chat-bubble.js
var d29 = ["chat-bubble", n23({ outline: '<path d="M18,2.5c-8.82,0-16,6.28-16,14s7.18,14,16,14a18,18,0,0,0,4.88-.68l5.53,3.52a1,1,0,0,0,1.54-.84l0-6.73a13,13,0,0,0,4-9.27C34,8.78,26.82,2.5,18,2.5ZM28.29,24.61a1,1,0,0,0-.32.73l0,5.34-4.38-2.79a1,1,0,0,0-.83-.11A16,16,0,0,1,18,28.5c-7.72,0-14-5.38-14-12s6.28-12,14-12,14,5.38,14,12A11.08,11.08,0,0,1,28.29,24.61Z"/><path d="M25,15.5H11a1,1,0,0,0,0,2H25a1,1,0,0,0,0-2Z"/><path d="M21.75,20.5h-7.5a1,1,0,0,0,0,2h7.5a1,1,0,0,0,0-2Z"/><path d="M11.28,12.5H24.72a1,1,0,0,0,0-2H11.28a1,1,0,0,0,0,2Z"/>', outlineBadged: '<path d="M33.38,12.69a7.43,7.43,0,0,1-1.89.66A10.35,10.35,0,0,1,32,16.5a11.08,11.08,0,0,1-3.71,8.11,1,1,0,0,0-.32.73l0,5.34-4.38-2.79a1,1,0,0,0-.83-.11A16,16,0,0,1,18,28.5c-7.72,0-14-5.38-14-12s6.28-12,14-12a16,16,0,0,1,4.55.66A7.44,7.44,0,0,1,23,3.22a18,18,0,0,0-5-.72c-8.82,0-16,6.28-16,14s7.18,14,16,14a18,18,0,0,0,4.88-.68l5.53,3.52a1,1,0,0,0,1.54-.84l0-6.73a13,13,0,0,0,4-9.27A12.32,12.32,0,0,0,33.38,12.69Z"/><path d="M11,15.5a1,1,0,0,0,0,2H25a1,1,0,0,0,0-2Z"/><path d="M14.25,20.5a1,1,0,0,0,0,2h7.5a1,1,0,0,0,0-2Z"/><path d="M10.28,11.5a1,1,0,0,0,1,1H24.72a1,1,0,0,0,.83-.47A7.53,7.53,0,0,1,24,10.5H11.28A1,1,0,0,0,10.28,11.5Z"/>', solid: '<path d="M18,2.5c-8.82,0-16,6.28-16,14s7.18,14,16,14a18,18,0,0,0,4.88-.68l5.53,3.52a1,1,0,0,0,1.54-.84l0-6.73a13,13,0,0,0,4-9.27C34,8.78,26.82,2.5,18,2.5Zm8,14a1,1,0,0,1-1,1H11a1,1,0,0,1,0-2H25A1,1,0,0,1,26,16.5Zm-3.25,5a1,1,0,0,1-1,1h-7.5a1,1,0,0,1,0-2h7.5A1,1,0,0,1,22.75,21.5Zm-12.47-10a1,1,0,0,1,1-1H24.72a1,1,0,0,1,0,2H11.28A1,1,0,0,1,10.28,11.5Z"/>', solidBadged: '<path d="M30,13.25a7.46,7.46,0,0,1-4.35-1.4,1,1,0,0,1-.93.65H11.28a1,1,0,0,1,0-2H24.2A7.46,7.46,0,0,1,23,3.2a18,18,0,0,0-5-.7c-8.82,0-16,6.28-16,14s7.18,14,16,14a18,18,0,0,0,4.88-.68l5.53,3.52a1,1,0,0,0,1.54-.84l0-6.73a13,13,0,0,0,4-9.27,12.34,12.34,0,0,0-.68-4A7.46,7.46,0,0,1,30,13.25ZM21.75,22.5h-7.5a1,1,0,0,1,0-2h7.5a1,1,0,0,1,0,2Zm3.25-5H11a1,1,0,0,1,0-2H25a1,1,0,0,1,0,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/contract.js
var t96 = ["contract", n23({ outline: '<rect x="8" y="8.2002" width="16" height="1.5996"/><rect x="8" y="16.2002" width="8.0864" height="1.5996"/><polygon points="23.378 12.2 8 12.2 8 13.8 21.779 13.8 23.378 12.2"/><path d="M12.7935,29.0723a2.4694,2.4694,0,0,0,2.1948.8237h7.8032a.7.7,0,0,0,0-1.4H14.9883c-.9113-.0157-.749-.8071-.6216-1.0522a3.962,3.962,0,0,0,.3872-.9151,1.1827,1.1827,0,0,0-.6157-1.3213,1.8987,1.8987,0,0,0-2.24.5171c-.3442.3545-.8222.8975-1.28,1.4258.2832-1.1089.65-2.5322,1.01-3.9209a1.3154,1.3154,0,0,0-.7553-1.6255,1.4252,1.4252,0,0,0-1.7754.793c-.4312.8315-3.8511,6.562-3.8858,6.62a.7.7,0,1,0,1.2022.7178c.1279-.2144,2.8579-4.7881,3.7187-6.315C9.4854,25.92,8.771,28.7021,8.729,28.9521a.8686.8686,0,0,0,.4072.9688.9192.9192,0,0,0,1.106-.2236c.1255-.1143.3618-.3858.9565-1.0767.563-.6543,1.2686-1.4645,1.7032-1.9209.2179-.229.35-.1279.2221.0982A2.291,2.291,0,0,0,12.7935,29.0723Z"/><path d="M28,21.6951V32H4V4H28V8.9926l1.33-1.33a4.3043,4.3043,0,0,1,.67-.54V3a1,1,0,0,0-1-1H3A1,1,0,0,0,2,3V33a1,1,0,0,0,1,1H29a1,1,0,0,0,1-1V21.4274A2.91,2.91,0,0,1,28,21.6951Z"/><path d="M34.1282,11.8613l-.5227-.5229a1.8983,1.8983,0,0,0-.11-2.4234,1.9555,1.9555,0,0,0-2.7513.1618L18.22,21.6005l-.8368,3.1423a.2344.2344,0,0,0,.2958.2944L20.81,24.19,32.5021,12.4979l.4943.4948a.3711.3711,0,0,1,0,.5249l-4.917,4.917a.8.8,0,0,0,1.1318,1.1318l4.917-4.917a1.9721,1.9721,0,0,0,0-2.7881Z"/>', solid: '<path d="M34.4863,13.8608l-.4325-.4325a3.1693,3.1693,0,0,0-.5626-3.5631,3.0111,3.0111,0,0,0-2.3266-.87A3.4385,3.4385,0,0,0,30,9.2724V2H2V34H30V17.8193l3.0906-3.09.2639.2639a.3711.3711,0,0,1,0,.5249l-2.354,2.354a.8.8,0,0,0,1.1318,1.1318l2.354-2.354A1.9745,1.9745,0,0,0,34.4863,13.8608ZM8,8.2H24.0015V9.8H8Zm0,4H24.0015v1.6H8Zm0,4H18.5v1.6H8ZM22.7915,29.896H14.9883c-.9027,0-1.7461-.0855-2.1948-.8237-.4585-.7549-.0025-1.6328.3305-2.2744.0586-.1128-.0722-.2525-.2221-.0982-.439.4522-1.14,1.2666-1.7032,1.9209-.5947.6909-.831.9624-.9565,1.0767a.9192.9192,0,0,1-1.106.2236.8686.8686,0,0,1-.4072-.9688c.042-.25.7564-3.0322,1.4033-5.5332-.8608,1.5269-3.5908,6.1006-3.7187,6.315a.7.7,0,0,1-1.2022-.7178c.0347-.0576,3.4546-5.7881,3.8858-6.62a1.4247,1.4247,0,0,1,1.7754-.793,1.3154,1.3154,0,0,1,.7553,1.6255c-.36,1.3887-.7265,2.812-1.01,3.9209.4575-.5283.9355-1.0713,1.28-1.4258a1.8989,1.8989,0,0,1,2.24-.5171,1.1827,1.1827,0,0,1,.6157,1.3213,4.5566,4.5566,0,0,1-.3872.9151c-.2673.5549-.1411,1.0522.6216,1.0522h7.8032a.7.7,0,0,1,0,1.4Zm-2.0806-5.0508-2.6035.688a.2181.2181,0,0,1-.2168-.0581.2152.2152,0,0,1-.0586-.2158l.6636-2.5991,6.59-6.59,2.2,2.2ZM32.1768,13.3789l-3.7593,3.7593-2.2-2.2,3.7591-3.759a1.9488,1.9488,0,0,1,1.271-.5864c.03-.0015.059-.0025.0888-.0025a1.423,1.423,0,0,1,1.023.4063A1.7007,1.7007,0,0,1,32.1768,13.3789Z"/>' })];

// node_modules/@cds/core/icon/shapes/crown.js
var p8 = ["crown", n23({ outline: '<path d="M4,13.33A1.39,1.39,0,1,0,2.6,14.72,1.39,1.39,0,0,0,4,13.33Z"/><path d="M31.81,15.84a20.35,20.35,0,0,0-4.58,1.43,22.7,22.7,0,0,0-3.48,2.1A17.69,17.69,0,0,1,22,16.57a47.65,47.65,0,0,1-2.8-7.69,1,1,0,0,0-1-.74,1,1,0,0,0-1,.74,46.71,46.71,0,0,1-2.8,7.69,17,17,0,0,1-1.76,2.8,22.7,22.7,0,0,0-3.48-2.1,20.66,20.66,0,0,0-4.58-1.43,1,1,0,0,0-1,.39,1,1,0,0,0-.09,1.05A50.13,50.13,0,0,1,7.82,31.17a1,1,0,0,0,1,.83H27.62a1,1,0,0,0,1-.83,50.15,50.15,0,0,1,4.26-13.89,1,1,0,0,0-.09-1.05A1,1,0,0,0,31.81,15.84ZM26.79,30H9.64a55.66,55.66,0,0,0-3.4-11.71,15.75,15.75,0,0,1,2.09.78,20,20,0,0,1,3.85,2.45,1,1,0,0,0,1.39-.09,19.28,19.28,0,0,0,2.67-4,43.46,43.46,0,0,0,2-4.89,41.74,41.74,0,0,0,2,4.89,19.92,19.92,0,0,0,2.66,4,1,1,0,0,0,1.4.09,19.21,19.21,0,0,1,3.85-2.45,14.77,14.77,0,0,1,2.09-.78A55.07,55.07,0,0,0,26.79,30Z"/><ellipse cx="33.83" cy="13.33" rx="1.39" ry="1.39"/><path d="M18.22,6.39A1.39,1.39,0,1,0,16.84,5,1.39,1.39,0,0,0,18.22,6.39Z"/><path d="M18.23,26.34a1.11,1.11,0,1,0,1.1,1.1A1.1,1.1,0,0,0,18.23,26.34Z"/><path d="M12.58,26.34a1.11,1.11,0,1,0,1.1,1.1A1.1,1.1,0,0,0,12.58,26.34Z"/><path d="M23.89,26.34a1.11,1.11,0,1,0,1.1,1.1A1.1,1.1,0,0,0,23.89,26.34Z"/>', solid: '<path d="M2.6,11.93A1.4,1.4,0,1,0,4,13.33,1.4,1.4,0,0,0,2.6,11.93Z"/><ellipse cx="33.83" cy="13.33" rx="1.39" ry="1.39"/><path d="M18.22,6.39A1.39,1.39,0,1,0,16.84,5,1.39,1.39,0,0,0,18.22,6.39Z"/><path d="M31.63,16.1A18.61,18.61,0,0,0,28,17.34a21.57,21.57,0,0,0-4,2.49,19.2,19.2,0,0,1-2.26-3.49,48.92,48.92,0,0,1-2.52-6.58,1,1,0,0,0-1-.71h0a1,1,0,0,0-1,.71,48.42,48.42,0,0,1-2.52,6.58,18.69,18.69,0,0,1-2.26,3.48,22.81,22.81,0,0,0-4-2.48A18.83,18.83,0,0,0,4.9,16.1a1,1,0,0,0-1,.33,1,1,0,0,0-.13,1.07,55.9,55.9,0,0,1,4,13.5,1,1,0,0,0,1,.83h19a1,1,0,0,0,1-.83,55.9,55.9,0,0,1,4-13.5,1,1,0,0,0-.13-1.07A1,1,0,0,0,31.63,16.1ZM11.08,28.55a1.11,1.11,0,1,1,1.1-1.11A1.11,1.11,0,0,1,11.08,28.55Zm7.15,0a1.11,1.11,0,0,1,0-2.21,1.11,1.11,0,0,1,0,2.21Zm7.16,0a1.11,1.11,0,1,1,1.1-1.11A1.11,1.11,0,0,1,25.39,28.55Z"/>' })];

// node_modules/@cds/core/icon/shapes/envelope.js
var H22 = ["envelope", n23({ outline: '<path d="M32,6H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V8A2,2,0,0,0,32,6ZM30.46,28H5.66l7-7.24-1.44-1.39L4,26.84V9.52L16.43,21.89a2,2,0,0,0,2.82,0L32,9.21v17.5l-7.36-7.36-1.41,1.41ZM5.31,8H30.38L17.84,20.47Z"/>', outlineAlerted: '<path d="M33.68,15.26H32V26.71l-7.36-7.36-1.41,1.41L30.46,28H5.66l7-7.24-1.44-1.39L4,26.84V9.52L16.43,21.89a2,2,0,0,0,2.82,0l6.66-6.63H23.08l-5.24,5.21L5.31,8H20.06l1.15-2H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V15.24Z"/>', outlineBadged: '<path d="M32,13.08V26.71l-7.36-7.36-1.41,1.41L30.46,28H5.66l7-7.24-1.44-1.39L4,26.84V9.52L16.43,21.89a2,2,0,0,0,2.82,0l8.83-8.78a7.44,7.44,0,0,1-2-.85l-8.26,8.21L5.31,8H22.81a7.49,7.49,0,0,1-.31-2H4A2,2,0,0,0,2,8V28a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V12.2A7.45,7.45,0,0,1,32,13.08Z"/>', solid: '<path d="M32.33,6a2,2,0,0,0-.41,0h-28a2,2,0,0,0-.53.08L17.84,20.47Z"/><path d="M33.81,7.39,19.25,21.89a2,2,0,0,1-2.82,0L2,7.5a2,2,0,0,0-.07.5V28a2,2,0,0,0,2,2h28a2,2,0,0,0,2-2V8A2,2,0,0,0,33.81,7.39ZM5.3,28H3.91V26.57l7.27-7.21,1.41,1.41Zm26.61,0H30.51l-7.29-7.23,1.41-1.41,7.27,7.21Z"/>', solidAlerted: '<path d="M33.68,15.4H25.77l-6.52,6.49a2,2,0,0,1-2.82,0L2,7.5a2,2,0,0,0-.07.5V28a2,2,0,0,0,2,2h28a2,2,0,0,0,2-2V15.38ZM5.3,28H3.91V26.57l7.27-7.21,1.41,1.41Zm26.61,0H30.51l-7.29-7.23,1.41-1.41,7.27,7.21Z"/><path d="M22.94,15.4h-.7A3.68,3.68,0,0,1,19,9.89L21.29,6H3.92a2,2,0,0,0-.53.08L17.84,20.47Z"/>', solidBadged: '<path d="M26,12.34A7.49,7.49,0,0,1,22.5,6H3.92a2,2,0,0,0-.53.08L17.84,20.47Z"/><path d="M30,13.5a7.49,7.49,0,0,1-2-.29l-8.71,8.68a2,2,0,0,1-2.82,0L2,7.5a2,2,0,0,0-.07.5V28a2,2,0,0,0,2,2h28a2,2,0,0,0,2-2V12.39A7.45,7.45,0,0,1,30,13.5ZM5.3,28H3.91V26.57l7.27-7.21,1.41,1.41Zm26.61,0H30.51l-7.29-7.23,1.41-1.41,7.27,7.21Z"/>' })];

// node_modules/@cds/core/icon/shapes/flag.js
var V18 = ["flag", n23({ outline: '<path d="M6,34a1,1,0,0,1-1-1V3A1,1,0,0,1,7,3V33A1,1,0,0,1,6,34Z"/><path d="M30.55,3.82a1,1,0,0,0-1,0,14.9,14.9,0,0,1-6.13,1.16,13.11,13.11,0,0,1-5.18-1.49,12.78,12.78,0,0,0-5-1.45A10.86,10.86,0,0,0,9,2.85V5.08A8.8,8.8,0,0,1,13.25,4a11.22,11.22,0,0,1,4.2,1.28,14.84,14.84,0,0,0,6,1.66A18.75,18.75,0,0,0,29,6.12V18.95a16.16,16.16,0,0,1-5.58.93,13.11,13.11,0,0,1-5.18-1.49,12.78,12.78,0,0,0-5-1.45A10.86,10.86,0,0,0,9,17.79V20a8.8,8.8,0,0,1,4.25-1.08,11.22,11.22,0,0,1,4.2,1.28,14.84,14.84,0,0,0,6,1.66,16.79,16.79,0,0,0,7-1.37,1,1,0,0,0,.55-.89V4.67A1,1,0,0,0,30.55,3.82Z"/>', solid: '<path d="M5.92,2a1,1,0,0,0-1,1V33a1,1,0,0,0,2,0V3A1,1,0,0,0,5.92,2Z"/><path d="M30.5,3.82a1,1,0,0,0-1,0,14.9,14.9,0,0,1-6.13,1.16,13.11,13.11,0,0,1-5.18-1.49A12.78,12.78,0,0,0,13.2,2,10.86,10.86,0,0,0,9,2.85V20a8.8,8.8,0,0,1,4.25-1.08,11.22,11.22,0,0,1,4.2,1.28,14.84,14.84,0,0,0,6,1.66,16.79,16.79,0,0,0,7-1.37,1,1,0,0,0,.55-.89V4.67A1,1,0,0,0,30.5,3.82Z"/>' })];

// node_modules/@cds/core/icon/shapes/half-star.js
var h43 = ["half-star", n23({ outline: '<path d="M34,16.78a2.22,2.22,0,0,0-1.29-4l-9-.34a.23.23,0,0,1-.2-.15L20.4,3.89a2.22,2.22,0,0,0-4.17,0l-3.1,8.43a.23.23,0,0,1-.2.15l-9,.34a2.22,2.22,0,0,0-1.29,4l7.06,5.55a.22.22,0,0,1,.08.24L7.35,31.21A2.23,2.23,0,0,0,9.49,34a2.22,2.22,0,0,0,1.24-.38l7.46-5a.22.22,0,0,1,.25,0l7.46,5a2.22,2.22,0,0,0,3.38-2.45l-2.45-8.64a.23.23,0,0,1,.08-.24ZM18.33,26.62h0a2.21,2.21,0,0,0-1.24.38L9.62,32a.22.22,0,0,1-.34-.25l2.45-8.64A2.21,2.21,0,0,0,11,20.76L3.9,15.21a.22.22,0,0,1,.13-.4l9-.34A2.22,2.22,0,0,0,15,13l3.1-8.43a.2.2,0,0,1,.21-.15h0Z"/>', solid: '<path d="M34,16.78a2.22,2.22,0,0,0-1.29-4l-9-.34a.23.23,0,0,1-.2-.15L20.4,3.89a2.22,2.22,0,0,0-4.17,0l-3.1,8.43a.23.23,0,0,1-.2.15l-9,.34a2.22,2.22,0,0,0-1.29,4l7.06,5.55a.23.23,0,0,1,.08.24L7.35,31.21a2.22,2.22,0,0,0,3.38,2.45l7.46-5a.22.22,0,0,1,.25,0l7.46,5a2.2,2.2,0,0,0,2.55,0,2.2,2.2,0,0,0,.83-2.4l-2.45-8.64a.22.22,0,0,1,.08-.24ZM24.9,23.11l2.45,8.64A.22.22,0,0,1,27,32l-7.46-5a2.21,2.21,0,0,0-1.24-.38h0V4.44h0a.2.2,0,0,1,.21.15L21.62,13a2.22,2.22,0,0,0,2,1.46l9,.34a.22.22,0,0,1,.13.4l-7.06,5.55A2.21,2.21,0,0,0,24.9,23.11Z"/>' })];

// node_modules/@cds/core/icon/shapes/happy-face.js
var r48 = ["happy-face", n23({ outline: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,30A14,14,0,1,1,32,18,14,14,0,0,1,18,32Z"/><circle cx="10.89" cy="13.89" r="2"/><circle cx="25.05" cy="13.89" r="2"/><path d="M18.13,28.21a8.67,8.67,0,0,0,8.26-6H9.87A8.67,8.67,0,0,0,18.13,28.21Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2ZM8.89,13.89a2,2,0,1,1,2,2A2,2,0,0,1,8.89,13.89Zm9.24,14.32a8.67,8.67,0,0,1-8.26-6H26.38A8.67,8.67,0,0,1,18.13,28.21Zm6.93-12.32a2,2,0,1,1,2-2A2,2,0,0,1,25.05,15.89Z"/>' })];

// node_modules/@cds/core/icon/shapes/hashtag.js
var l29 = ["hashtag", n23({ outline: '<path d="M32,12H25.34l1.55-7.74a1,1,0,0,0-2-.39L23.3,12H15.11l1.55-7.74a1,1,0,0,0-2-.39L13.07,12H6a1,1,0,0,0,0,2h6.67l-1.6,8H4a1,1,0,0,0,0,2h6.66L9.11,31.74a1,1,0,0,0,.79,1.17.68.68,0,0,0,.2,0,1,1,0,0,0,1-.8L12.7,24h8.19l-1.55,7.74a1,1,0,0,0,.79,1.17.62.62,0,0,0,.19,0,1,1,0,0,0,1-.8L22.93,24H30a1,1,0,0,0,0-2H23.33l1.61-8H32a1,1,0,0,0,0-2ZM21.29,22H13.1l1.61-8H22.9Z"/>', solid: '<path d="M31.87,10H26.32l1-4.83A1,1,0,0,0,26.35,4h-2a1,1,0,0,0-1,.78L22.33,10h-5.4l1-4.83A1,1,0,0,0,17,4H15a1,1,0,0,0-1,.78L13,10H7a1,1,0,0,0-1,.8l-.41,2a1,1,0,0,0,1,1.2h5.55L10.5,22h-6a1,1,0,0,0-1,.8l-.41,2a1,1,0,0,0,1,1.2H9.68l-1,4.83a1,1,0,0,0,1,1.17h2a1,1,0,0,0,.95-.78L13.67,26h5.4l-1,4.83A1,1,0,0,0,19,32h2a1,1,0,0,0,1-.78L23.05,26h6a1,1,0,0,0,1-.8l.4-2a1,1,0,0,0-1-1.2H23.87l1.63-8h6a1,1,0,0,0,1-.8l.41-2A1,1,0,0,0,31.87,10Zm-12,12h-5.4l1.64-8h5.4Z"/>' })];

// node_modules/@cds/core/icon/shapes/heart.js
var r49 = ["heart", n23({ outline: '<path d="M18,32.43a1,1,0,0,1-.61-.21C11.83,27.9,8,24.18,5.32,20.51,1.9,15.82,1.12,11.49,3,7.64c1.34-2.75,5.19-5,9.69-3.69A9.87,9.87,0,0,1,18,7.72a9.87,9.87,0,0,1,5.31-3.77c4.49-1.29,8.35.94,9.69,3.69,1.88,3.85,1.1,8.18-2.32,12.87C28,24.18,24.17,27.9,18.61,32.22A1,1,0,0,1,18,32.43ZM10.13,5.58A5.9,5.9,0,0,0,4.8,8.51c-1.55,3.18-.85,6.72,2.14,10.81A57.13,57.13,0,0,0,18,30.16,57.13,57.13,0,0,0,29.06,19.33c3-4.1,3.69-7.64,2.14-10.81-1-2-4-3.59-7.34-2.65a8,8,0,0,0-4.94,4.2,1,1,0,0,1-1.85,0,7.93,7.93,0,0,0-4.94-4.2A7.31,7.31,0,0,0,10.13,5.58Z"/>', solid: '<path d="M33,7.64c-1.34-2.75-5.2-5-9.69-3.69A9.87,9.87,0,0,0,18,7.72a9.87,9.87,0,0,0-5.31-3.77C8.19,2.66,4.34,4.89,3,7.64c-1.88,3.85-1.1,8.18,2.32,12.87C8,24.18,11.83,27.9,17.39,32.22a1,1,0,0,0,1.23,0c5.55-4.31,9.39-8,12.07-11.71C34.1,15.82,34.88,11.49,33,7.64Z"/>' })];

// node_modules/@cds/core/icon/shapes/heart-broken.js
var r50 = ["heart-broken", n23({ outline: '<path d="M33,7.64c-1.34-2.75-5.09-5-9.69-3.69a9.87,9.87,0,0,0-6,4.84,18.9,18.9,0,0,0-2.23,5.33l5.28,2.34-4.6,4.37,3.49,4.1,1.52-1.3L18.54,21l5.4-5.13L17.58,13A16.23,16.23,0,0,1,19.75,8.9a7.68,7.68,0,0,1,4.11-3c3.34-.89,6.34.6,7.34,2.65,1.55,3.18.85,6.72-2.14,10.81A57.16,57.16,0,0,1,18,30.16,57.16,57.16,0,0,1,6.94,19.33c-3-4.1-3.69-7.64-2.14-10.81a5.9,5.9,0,0,1,5.33-2.93,7.31,7.31,0,0,1,2,.29,7.7,7.7,0,0,1,3.38,2l.15-.3a10.66,10.66,0,0,1,1-1.41,9.64,9.64,0,0,0-3.94-2.22C8.2,2.66,4.34,4.89,3,7.64c-1.88,3.85-1.1,8.18,2.32,12.87C8,24.18,11.83,27.9,17.39,32.22a1,1,0,0,0,1.23,0c5.55-4.31,9.39-8,12.07-11.71C34.1,15.82,34.88,11.49,33,7.64Z"/>', solid: '<path d="M33,7.64c-1.34-2.75-5.2-5-9.69-3.69A11.55,11.55,0,0,0,18.19,7.5a16.89,16.89,0,0,0-2.48,4.56L22.27,15,16.7,20.26,19,23l-1.57,1.34-3.6-4.22,4.74-4.51-5.44-2.41a19.49,19.49,0,0,1,2.3-5.5,14.77,14.77,0,0,1,1.06-1.54l.06,0a9.66,9.66,0,0,0-3.89-2.18C8.19,2.66,4.34,4.89,3,7.64c-1.88,3.85-1.1,8.18,2.32,12.87C8,24.18,11.83,27.9,17.39,32.22a1,1,0,0,0,1.23,0c5.55-4.31,9.39-8,12.07-11.71C34.1,15.82,34.88,11.49,33,7.64Z"/>' })];

// node_modules/@cds/core/icon/shapes/inbox.js
var A22 = ["inbox", n23({ outline: '<path d="M12.23,13.09a1,1,0,0,0,0,1.41L18,20.3l5.79-5.79a1,1,0,0,0-1.41-1.41L19,16.47V2A1,1,0,0,0,18,1a1,1,0,0,0-1,1v14.5l-3.38-3.38A1,1,0,0,0,12.23,13.09Z"/><path d="M29.5,5H22V7h7V21H23.61l-.1.89a5.42,5.42,0,0,1-10.77,0l-.1-.89H7V7h7V5H6.5A1.5,1.5,0,0,0,5,6.5v25A1.5,1.5,0,0,0,6.5,33h23A1.5,1.5,0,0,0,31,31.5V6.5A1.5,1.5,0,0,0,29.5,5ZM29,31H7V23h3.91a7.42,7.42,0,0,0,14.44,0H29Z"/>', outlineBadged: '<path d="M12.23,13.09a1,1,0,0,0,0,1.41L18,20.3l5.79-5.79a1,1,0,0,0-1.41-1.41L19,16.47V2A1,1,0,0,0,18,1a1,1,0,0,0-1,1v14.5l-3.38-3.38A1,1,0,0,0,12.23,13.09Z"/><path d="M30,13.5a7.52,7.52,0,0,1-1-.07V21H23.61l-.1.89a5.42,5.42,0,0,1-10.77,0l-.1-.89H7V7h7V5H6.5A1.5,1.5,0,0,0,5,6.5v25A1.5,1.5,0,0,0,6.5,33h23A1.5,1.5,0,0,0,31,31.5V13.43A7.52,7.52,0,0,1,30,13.5ZM29,31H7V23h3.91a7.42,7.42,0,0,0,14.44,0H29Z"/>' })];

// node_modules/@cds/core/icon/shapes/neutral-face.js
var r51 = ["neutral-face", n23({ outline: '<path d="M24.05,22.06h-12a1,1,0,0,0,0,2h12a1,1,0,0,0,0-2Z"/><path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,30A14,14,0,1,1,32,18,14,14,0,0,1,18,32Z"/><circle cx="25.16" cy="14.28" r="1.8"/><circle cx="11.16" cy="14.28" r="1.8"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm7.05,21.06a1,1,0,0,1-1,1h-12a1,1,0,0,1,0-2h12A1,1,0,0,1,25.05,23.06ZM27,14.28a1.8,1.8,0,1,1-1.8-1.8A1.8,1.8,0,0,1,27,14.28Zm-15.8,1.8a1.8,1.8,0,1,1,1.8-1.8A1.8,1.8,0,0,1,11.16,16.08Z"/>' })];

// node_modules/@cds/core/icon/shapes/picture.js
var Z8 = ["picture", n23({ outline: '<path d="M32,4H4A2,2,0,0,0,2,6V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V6A2,2,0,0,0,32,4ZM4,30V6H32V30Z"/><path d="M8.92,14a3,3,0,1,0-3-3A3,3,0,0,0,8.92,14Zm0-4.6A1.6,1.6,0,1,1,7.33,11,1.6,1.6,0,0,1,8.92,9.41Z"/><path d="M22.78,15.37l-5.4,5.4-4-4a1,1,0,0,0-1.41,0L5.92,22.9v2.83l6.79-6.79L16,22.18l-3.75,3.75H15l8.45-8.45L30,24V21.18l-5.81-5.81A1,1,0,0,0,22.78,15.37Z"/>', outlineBadged: '<path d="M11.93,11a3,3,0,1,0-3,3A3,3,0,0,0,11.93,11Zm-4.6,0a1.6,1.6,0,1,1,1.6,1.6A1.6,1.6,0,0,1,7.33,11Z"/><path d="M17.38,20.77l-4-4a1,1,0,0,0-1.41,0L5.92,22.9v2.83l6.79-6.79L16,22.18l-3.75,3.75H15l8.45-8.45L30,24V21.18l-5.81-5.81a1,1,0,0,0-1.41,0Z"/><path d="M32,13.22V30H4V6H22.5a7.49,7.49,0,0,1,.28-2H4A2,2,0,0,0,2,6V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V12.34A7.45,7.45,0,0,1,32,13.22Z"/>', solid: '<path d="M32,4H4A2,2,0,0,0,2,6V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V6A2,2,0,0,0,32,4ZM8.92,8a3,3,0,1,1-3,3A3,3,0,0,1,8.92,8ZM6,27V22.9l6-6.08a1,1,0,0,1,1.41,0L16,19.35,8.32,27Zm24,0H11.15l6.23-6.23,5.4-5.4a1,1,0,0,1,1.41,0L30,21.18Z"/>', solidBadged: '<path d="M30,13.5A7.48,7.48,0,0,1,22.78,4H4A2,2,0,0,0,2,6V30a2,2,0,0,0,2,2H32a2,2,0,0,0,2-2V12.34A7.46,7.46,0,0,1,30,13.5ZM8.92,8a3,3,0,1,1-3,3A3,3,0,0,1,8.92,8ZM6,27V22.9l6-6.08a1,1,0,0,1,1.41,0L16,19.35,8.32,27Zm24,0H11.15l6.23-6.23,5.4-5.4a1,1,0,0,1,1.41,0L30,21.18Z"/>' })];

// node_modules/@cds/core/icon/shapes/sad-face.js
var r52 = ["sad-face", n23({ outline: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm0,30A14,14,0,1,1,32,18,14,14,0,0,1,18,32Z"/><circle cx="25.16" cy="14.28" r="1.8"/><circle cx="11.41" cy="14.28" r="1.8"/><path d="M18.16,20a9,9,0,0,0-7.33,3.78,1,1,0,1,0,1.63,1.16,7,7,0,0,1,11.31-.13,1,1,0,0,0,1.6-1.2A9,9,0,0,0,18.16,20Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm9,12.28a1.8,1.8,0,1,1-1.8-1.8A1.8,1.8,0,0,1,27,14.28Zm-15.55,1.8a1.8,1.8,0,1,1,1.8-1.8A1.8,1.8,0,0,1,11.41,16.08Zm14,7.53a1,1,0,0,1-1.6,1.2,7,7,0,0,0-11.31.13,1,1,0,1,1-1.63-1.16,9,9,0,0,1,14.54-.17Z"/>' })];

// node_modules/@cds/core/icon/shapes/share.js
var e64 = ["share", n23({ outline: '<path d="M27.53,24a5,5,0,0,0-3.6,1.55L11.74,19.45a4.47,4.47,0,0,0,0-2.8l12.21-6.21a5.12,5.12,0,1,0-1.07-1.7L10.79,14.89a5,5,0,1,0,0,6.33l12.06,6.07A4.93,4.93,0,0,0,22.54,29a5,5,0,1,0,5-5Zm0-20a3,3,0,1,1-3,3A3,3,0,0,1,27.53,4ZM7,21a3,3,0,1,1,3-3A3,3,0,0,1,7,21ZM27.53,32a3,3,0,1,1,3-3A3,3,0,0,1,27.53,32Z"/>', solid: '<path d="M27.53,24a5,5,0,0,0-3.6,1.55L11.74,19.45a4.47,4.47,0,0,0,0-2.8l12.21-6.21a5.12,5.12,0,1,0-1.07-1.7L10.79,14.89a5,5,0,1,0,0,6.33l12.06,6.07A4.93,4.93,0,0,0,22.54,29a5,5,0,1,0,5-5Z"/>' })];

// node_modules/@cds/core/icon/shapes/star.js
var r53 = ["star", n23({ outline: '<path d="M27.19,34a2.22,2.22,0,0,1-1.24-.38l-7.46-5a.22.22,0,0,0-.25,0l-7.46,5A2.22,2.22,0,0,1,7.4,31.21l2.45-8.64a.23.23,0,0,0-.08-.24L2.71,16.78a2.22,2.22,0,0,1,1.29-4l9-.34a.23.23,0,0,0,.2-.15l3.1-8.43a2.22,2.22,0,0,1,4.17,0l3.1,8.43a.23.23,0,0,0,.2.15l9,.34a2.22,2.22,0,0,1,1.29,4L27,22.33a.22.22,0,0,0-.08.24l2.45,8.64A2.23,2.23,0,0,1,27.19,34Zm-8.82-7.42A2.21,2.21,0,0,1,19.6,27l7.46,5a.22.22,0,0,0,.34-.25l-2.45-8.64a2.21,2.21,0,0,1,.77-2.35l7.06-5.55a.22.22,0,0,0-.13-.4l-9-.34a2.22,2.22,0,0,1-2-1.46l-3.1-8.43a.22.22,0,0,0-.42,0L15.06,13a2.22,2.22,0,0,1-2,1.46l-9,.34a.22.22,0,0,0-.13.4L11,20.76a2.22,2.22,0,0,1,.77,2.35L9.33,31.75a.21.21,0,0,0,.08.24.2.2,0,0,0,.26,0l7.46-5A2.22,2.22,0,0,1,18.36,26.62Z"/>', solid: '<path d="M34,16.78a2.22,2.22,0,0,0-1.29-4l-9-.34a.23.23,0,0,1-.2-.15L20.4,3.89a2.22,2.22,0,0,0-4.17,0l-3.1,8.43a.23.23,0,0,1-.2.15l-9,.34a2.22,2.22,0,0,0-1.29,4l7.06,5.55a.23.23,0,0,1,.08.24L7.35,31.21a2.22,2.22,0,0,0,3.38,2.45l7.46-5a.22.22,0,0,1,.25,0l7.46,5a2.2,2.2,0,0,0,2.55,0,2.2,2.2,0,0,0,.83-2.4l-2.45-8.64a.22.22,0,0,1,.08-.24Z"/>' })];

// node_modules/@cds/core/icon/shapes/talk-bubbles.js
var V19 = ["talk-bubbles", n23({ outline: '<path d="M23,26a1,1,0,0,1-1,1H8c-.22,0-.43.2-.61.33L4,30V14a1,1,0,0,1,1-1H8.86V11H5a3,3,0,0,0-3,3V32a1,1,0,0,0,.56.89,1,1,0,0,0,1-.1L8.71,29H22.15A2.77,2.77,0,0,0,25,26.13V25H23Z"/><path d="M31,4H14a3,3,0,0,0-3,3V19a3,3,0,0,0,3,3H27.55l4.78,3.71a1,1,0,0,0,1,.11,1,1,0,0,0,.57-.9V7A3,3,0,0,0,31,4ZM32,22.94,28.5,20.21a1,1,0,0,0-.61-.21H14a1,1,0,0,1-1-1V7a1,1,0,0,1,1-1H31A1.1,1.1,0,0,1,32,7.06Z"/>', outlineBadged: '<path d="M23,26a1,1,0,0,1-1,1H8c-.22,0-.43.2-.61.33L4,30V14a1,1,0,0,1,1-1H8.86V11H5a3,3,0,0,0-3,3V32a1,1,0,0,0,.56.89,1,1,0,0,0,1-.1L8.71,29H22.15A2.77,2.77,0,0,0,25,26.13V25H23Z"/><path d="M32,13.22v9.72L28.5,20.21a1,1,0,0,0-.61-.21H14a1,1,0,0,1-1-1V7a1,1,0,0,1,1-1H22.5a7.49,7.49,0,0,1,.28-2H14a3,3,0,0,0-3,3V19a3,3,0,0,0,3,3H27.55l4.78,3.71a1,1,0,0,0,1,.11,1,1,0,0,0,.57-.9V12.37A7.45,7.45,0,0,1,32,13.22Z"/>', solid: '<path d="M8,19V11H5a3,3,0,0,0-3,3V32a1,1,0,0,0,.56.89,1,1,0,0,0,1-.1L8.71,29H22.15A2.77,2.77,0,0,0,25,26.13V25H14A6,6,0,0,1,8,19Z"/><path d="M31,4H14a3,3,0,0,0-3,3V19a3,3,0,0,0,3,3H27.55l4.78,3.71a1,1,0,0,0,1,.11,1,1,0,0,0,.57-.9V7A3,3,0,0,0,31,4Z"/>', solidBadged: '<path d="M8,19V11H5a3,3,0,0,0-3,3V32a1,1,0,0,0,.56.89,1,1,0,0,0,1-.1L8.71,29H22.15A2.77,2.77,0,0,0,25,26.13V25H14A6,6,0,0,1,8,19Z"/><path d="M30,13.5A7.48,7.48,0,0,1,22.78,4H14a3,3,0,0,0-3,3V19a3,3,0,0,0,3,3H27.55l4.78,3.71a1,1,0,0,0,1,.11,1,1,0,0,0,.57-.9V12.37A7.45,7.45,0,0,1,30,13.5Z"/>' })];

// node_modules/@cds/core/icon/shapes/tasks.js
var A23 = ["tasks", n23({ outline: '<path d="M29.29,34H6.71A1.7,1.7,0,0,1,5,32.31V6.69A1.75,1.75,0,0,1,7,5H9V7H7V32H29V7H27V5h2.25A1.7,1.7,0,0,1,31,6.69V32.31A1.7,1.7,0,0,1,29.29,34Z"/><path d="M16.66,25.76,11.3,20.4A1,1,0,0,1,12.72,19l3.94,3.94,8.64-8.64a1,1,0,0,1,1.41,1.41Z"/><path d="M26,11H10V7.33A2.34,2.34,0,0,1,12.33,5h1.79a4,4,0,0,1,7.75,0h1.79A2.34,2.34,0,0,1,26,7.33ZM12,9H24V7.33A.33.33,0,0,0,23.67,7H20V6a2,2,0,0,0-4,0V7H12.33a.33.33,0,0,0-.33.33Z"/>', outlineAlerted: '<path d="M19,9.89,19.56,9H12V7.33A.33.33,0,0,1,12.33,7H16V6a2,2,0,0,1,4,0V7h.71l1.16-2a4,4,0,0,0-7.74,0H12.33A2.34,2.34,0,0,0,10,7.33V11h8.64A3.65,3.65,0,0,1,19,9.89Z"/><path d="M24.19,15.4l-7.53,7.53L12.72,19A1,1,0,0,0,11.3,20.4l5.36,5.36L26.71,15.71a1,1,0,0,0,.2-.31Z"/><path d="M29,15.4V32H7V7H9V5H7A1.75,1.75,0,0,0,5,6.69V32.31A1.7,1.7,0,0,0,6.71,34H29.29A1.7,1.7,0,0,0,31,32.31V15.4Z"/>', outlineBadged: '<path d="M12.72,19A1,1,0,0,0,11.3,20.4l5.36,5.36L26.71,15.71a1,1,0,0,0-1.41-1.41l-8.64,8.64Z"/><path d="M23.13,9H12V7.33A.33.33,0,0,1,12.33,7H16V6a2,2,0,0,1,4,0V7h2.57a7.52,7.52,0,0,1-.07-1,7.52,7.52,0,0,1,.07-1h-.7a4,4,0,0,0-7.75,0H12.33A2.34,2.34,0,0,0,10,7.33V11H24.42A7.5,7.5,0,0,1,23.13,9Z"/><path d="M30,13.5a7.52,7.52,0,0,1-1-.07V32H7V7H9V5H7A1.75,1.75,0,0,0,5,6.69V32.31A1.7,1.7,0,0,0,6.71,34H29.29A1.7,1.7,0,0,0,31,32.31V13.43A7.52,7.52,0,0,1,30,13.5Z"/>', solid: '<path d="M29.29,4.95h-7.2a4.31,4.31,0,0,0-8.17,0H7A1.75,1.75,0,0,0,5,6.64V32.26a1.7,1.7,0,0,0,1.71,1.69H29.29A1.7,1.7,0,0,0,31,32.26V6.64A1.7,1.7,0,0,0,29.29,4.95Zm-18,3a1,1,0,0,1,1-1h3.44V6.32a2.31,2.31,0,0,1,4.63,0V7h3.44a1,1,0,0,1,1,1V9.8H11.25Zm14.52,9.23-9.12,9.12-5.24-5.24a1.4,1.4,0,0,1,2-2l3.26,3.26,7.14-7.14a1.4,1.4,0,1,1,2,2Z"/>', solidAlerted: '<path d="M25.88,15.4a1.38,1.38,0,0,1-.11,1.81l-9.12,9.12-5.24-5.24a1.4,1.4,0,0,1,2-2l3.26,3.26,7-7H22.23A3.68,3.68,0,0,1,19,9.89l0-.09H11.25V8a1,1,0,0,1,1-1h3.44V6.32a2.31,2.31,0,0,1,4.63,0V7h.42L22,4.76a4.3,4.3,0,0,0-8.09.19H7A1.75,1.75,0,0,0,5,6.64V32.26a1.7,1.7,0,0,0,1.71,1.69H29.29A1.7,1.7,0,0,0,31,32.26V15.4Z"/>', solidBadged: '<path d="M30,13.5a7.49,7.49,0,0,1-6.46-3.7H11.25V8a1,1,0,0,1,1-1h3.44V6.32a2.31,2.31,0,0,1,4.63,0V7h2.26a7.53,7.53,0,0,1-.07-1,7.53,7.53,0,0,1,.08-1.05h-.5a4.31,4.31,0,0,0-8.17,0H7A1.75,1.75,0,0,0,5,6.64V32.26a1.7,1.7,0,0,0,1.71,1.69H29.29A1.7,1.7,0,0,0,31,32.26V13.43A7.52,7.52,0,0,1,30,13.5Zm-4.23,3.71-9.12,9.12-5.24-5.24a1.4,1.4,0,0,1,2-2l3.26,3.26,7.14-7.14a1.4,1.4,0,1,1,2,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/thumbs-down.js
var h44 = ["thumbs-down", n23({ outline: '<path d="M12,10c2.92-1.82,7.3-4,9.37-4h6a16.68,16.68,0,0,1,3.31,6.08A26.71,26.71,0,0,1,32,20H23V30a2.05,2.05,0,0,1-1.26,1.69c-.77-2-2.62-6.57-4.23-8.72A11.39,11.39,0,0,0,12,19.09v2.13a9.13,9.13,0,0,1,3.91,3c1.88,2.51,4.29,9.11,4.31,9.17a1,1,0,0,0,1.19.63C22.75,33.62,25,32.4,25,30V22h8a1,1,0,0,0,1-1,29,29,0,0,0-1.4-9.62c-1.89-5.4-4.1-7.14-4.2-7.22A1,1,0,0,0,27.79,4H21.37C18.94,4,14.83,6,12,7.63Z"/><path d="M2,5H9a1,1,0,0,1,1,1V22a1,1,0,0,1-1,1H2ZM8,7H4V21H8Z"/>', solid: '<path d="M16.37,23.84c2.12,2.84,4.76,10.07,4.76,10.07S24,33.13,24,30.71V21h9.77a29.46,29.46,0,0,0-1.44-9.74C30.39,5.68,28.2,4,28.2,4H21.35C19.1,4,15,5.9,12,7.65v12.8A10.84,10.84,0,0,1,16.37,23.84Z"/><path d="M9,23a1,1,0,0,0,1-1V6A1,1,0,0,0,9,5H2V23Z"/>' })];

// node_modules/@cds/core/icon/shapes/thumbs-up.js
var t97 = ["thumbs-up", n23({ outline: '<path d="M24,26c-2.92,1.82-7.3,4-9.37,4h-6a16.68,16.68,0,0,1-3.31-6.08A26.71,26.71,0,0,1,4,16h9V6a2.05,2.05,0,0,1,1.26-1.69c.77,2,2.62,6.57,4.23,8.72A11.39,11.39,0,0,0,24,16.91V14.78a9.13,9.13,0,0,1-3.91-3c-1.88-2.51-4.29-9.11-4.31-9.17A1,1,0,0,0,14.59,2C13.25,2.38,11,3.6,11,6v8H3a1,1,0,0,0-1,1,29,29,0,0,0,1.4,9.62c1.89,5.4,4.1,7.14,4.2,7.22a1,1,0,0,0,.61.21h6.42c2.43,0,6.55-2,9.37-3.63Z"/><path d="M34,31H27a1,1,0,0,1-1-1V14a1,1,0,0,1,1-1h7Zm-6-2h4V15H28Z"/>', solid: '<path d="M19.63,12.12C17.51,9.28,14.88,2,14.88,2S12,2.83,12,5.25V15H2.23a29.46,29.46,0,0,0,1.44,9.74C5.61,30.27,7.8,32,7.8,32h6.86C16.9,32,21,30.06,24,28.31V15.51A10.84,10.84,0,0,1,19.63,12.12Z"/><path d="M27,13a1,1,0,0,0-1,1V30a1,1,0,0,0,1,1h7V13Z"/>' })];

// node_modules/@cds/core/icon/shapes/align-bottom.js
var o61 = ["align-bottom", n23({ outline: '<path d="M34,30H2a1,1,0,0,0,0,2H34a1,1,0,0,0,0-2Z"/><path d="M16,5a1,1,0,0,0-1-1H7A1,1,0,0,0,6,5V28H16ZM14,26H8V6h6Z"/><path d="M30,13a1,1,0,0,0-1-1H21a1,1,0,0,0-1,1V28H30ZM28,26H22V14h6Z"/>' })];

// node_modules/@cds/core/icon/shapes/align-center.js
var H23 = ["align-center", n23({ outline: '<path d="M31,20H19V16h6a1,1,0,0,0,1-1V7a1,1,0,0,0-1-1H19V2a1,1,0,0,0-2,0V6H11a1,1,0,0,0-1,1v8a1,1,0,0,0,1,1h6v4H5a1,1,0,0,0-1,1v8a1,1,0,0,0,1,1H17v4a1,1,0,0,0,2,0V30H31a1,1,0,0,0,1-1V21A1,1,0,0,0,31,20ZM12,14V8H24v6ZM30,28H6V22H30Z"/>' })];

// node_modules/@cds/core/icon/shapes/align-left.js
var H24 = ["align-left", n23({ outline: '<path d="M5,1A1,1,0,0,0,4,2V34a1,1,0,0,0,2,0V2A1,1,0,0,0,5,1Z"/><path d="M31,20H8V30H31a1,1,0,0,0,1-1V21A1,1,0,0,0,31,20Zm-1,8H10V22H30Z"/><path d="M24,15V7a1,1,0,0,0-1-1H8V16H23A1,1,0,0,0,24,15Zm-2-1H10V8H22Z"/>' })];

// node_modules/@cds/core/icon/shapes/align-left-text.js
var a41 = ["align-left-text", n23({ outline: '<path d="M20.25,26H6v2.2H20.25a1.1,1.1,0,0,0,0-2.2Z"/><path d="M28,20H6v2.2H28A1.1,1.1,0,0,0,28,20Z"/><path d="M22.6,15.1A1.1,1.1,0,0,0,21.5,14H6v2.2H21.5A1.1,1.1,0,0,0,22.6,15.1Z"/><path d="M29.25,8H6v2.2H29.25a1.1,1.1,0,1,0,0-2.2Z"/>' })];

// node_modules/@cds/core/icon/shapes/align-middle.js
var V20 = ["align-middle", n23({ outline: '<path d="M34,17H30V11a1,1,0,0,0-1-1H21a1,1,0,0,0-1,1v6H16V5a1,1,0,0,0-1-1H7A1,1,0,0,0,6,5V17H2a1,1,0,0,0,0,2H6V31a1,1,0,0,0,1,1h8a1,1,0,0,0,1-1V19h4v6a1,1,0,0,0,1,1h8a1,1,0,0,0,1-1V19h4a1,1,0,0,0,0-2ZM14,30H8V6h6Zm14-6H22V12h6Z"/>' })];

// node_modules/@cds/core/icon/shapes/align-right.js
var r54 = ["align-right", n23({ outline: '<path d="M31,1a1,1,0,0,0-1,1V34a1,1,0,0,0,2,0V2A1,1,0,0,0,31,1Z"/><path d="M4,21v8a1,1,0,0,0,1,1H28V20H5A1,1,0,0,0,4,21Zm2,1H26v6H6Z"/><path d="M12,7v8a1,1,0,0,0,1,1H28V6H13A1,1,0,0,0,12,7Zm2,1H26v6H14Z"/>' })];

// node_modules/@cds/core/icon/shapes/align-right-text.js
var r55 = ["align-right-text", n23({ outline: '<path d="M14.65,27.1a1.1,1.1,0,0,0,1.1,1.1H30V26H15.75A1.1,1.1,0,0,0,14.65,27.1Z"/><path d="M6.9,21.1A1.1,1.1,0,0,0,8,22.2H30V20H8A1.1,1.1,0,0,0,6.9,21.1Z"/><path d="M13.4,15.1a1.1,1.1,0,0,0,1.1,1.1H30V14H14.5A1.1,1.1,0,0,0,13.4,15.1Z"/><path d="M6.75,8a1.1,1.1,0,1,0,0,2.2H30V8Z"/>' })];

// node_modules/@cds/core/icon/shapes/align-top.js
var o62 = ["align-top", n23({ outline: '<path d="M34,4H2A1,1,0,0,0,2,6H34a1,1,0,0,0,0-2Z"/><path d="M6,31a1,1,0,0,0,1,1h8a1,1,0,0,0,1-1V8H6ZM8,10h6V30H8Z"/><path d="M20,23a1,1,0,0,0,1,1h8a1,1,0,0,0,1-1V8H20Zm2-13h6V22H22Z"/>' })];

// node_modules/@cds/core/icon/shapes/block-quote.js
var a42 = ["block-quote", n23({ outline: '<path d="M11.86,16.55a4.31,4.31,0,0,0-2.11.56,14.44,14.44,0,0,1,4.36-6,1.1,1.1,0,0,0-1.4-1.7c-4,3.25-5.78,7.75-5.78,10.54A5.08,5.08,0,0,0,10,24.58a4.4,4.4,0,0,0,1.88.44,4.24,4.24,0,1,0,0-8.47Z"/><path d="M23,16.55a4.29,4.29,0,0,0-2.11.56,14.5,14.5,0,0,1,4.35-6,1.1,1.1,0,1,0-1.39-1.7c-4,3.25-5.78,7.75-5.78,10.54a5.08,5.08,0,0,0,3,4.61A4.37,4.37,0,0,0,23,25a4.24,4.24,0,1,0,0-8.47Z"/>' })];

// node_modules/@cds/core/icon/shapes/bold.js
var r56 = ["bold", n23({ outline: '<path d="M22.43,17.54a4.67,4.67,0,0,0,2.8-4.37v-.06a4.43,4.43,0,0,0-1.31-3.25,7.09,7.09,0,0,0-5.13-1.73h-7A1.71,1.71,0,0,0,10,9.86V26a1.72,1.72,0,0,0,1.74,1.74h7.33c4.37,0,7.25-1.88,7.25-5.38V22.3C26.32,19.64,24.73,18.32,22.43,17.54ZM13.68,11.4h4.54c2,0,3.15.89,3.15,2.33v.06c0,1.68-1.36,2.49-3.38,2.49H13.68ZM22.37,22c0,1.59-1.31,2.43-3.46,2.43H13.68V19.62h5c2.49,0,3.69.88,3.69,2.37Z"/>' })];

// node_modules/@cds/core/icon/shapes/bullet-list.js
var t98 = ["bullet-list", n23({ outline: '<circle cx="5.21" cy="9.17" r="2"/><circle cx="5.21" cy="17.17" r="2"/><circle cx="5.21" cy="25.17" r="2"/><path d="M32.42,9a1,1,0,0,0-1-1H10v2H31.42A1,1,0,0,0,32.42,9Z"/><path d="M31.42,16H10v2H31.42a1,1,0,0,0,0-2Z"/><path d="M31.42,24H10v2H31.42a1,1,0,0,0,0-2Z"/>' })];

// node_modules/@cds/core/icon/shapes/center-text.js
var e65 = ["center-text", n23({ outline: '<path d="M30.88,8H5.12a1.1,1.1,0,0,0,0,2.2H30.88a1.1,1.1,0,1,0,0-2.2Z"/><path d="M25.5,16.2a1.1,1.1,0,1,0,0-2.2h-15a1.1,1.1,0,1,0,0,2.2Z"/><path d="M30.25,20H5.75a1.1,1.1,0,0,0,0,2.2h24.5a1.1,1.1,0,0,0,0-2.2Z"/><path d="M24.88,26H11.12a1.1,1.1,0,1,0,0,2.2H24.88a1.1,1.1,0,1,0,0-2.2Z"/>' })];

// node_modules/@cds/core/icon/shapes/checkbox-list.js
var h45 = ["checkbox-list", n23({ outline: '<path d="M31.43,16H10v2H31.43a1,1,0,0,0,0-2Z"/><path d="M31.43,24H10v2H31.43a1,1,0,0,0,0-2Z"/><path d="M15.45,10h16a1,1,0,0,0,0-2h-14Z"/><path d="M17.5,3.42a1.09,1.09,0,0,0-1.55,0L7.89,11.48,4.51,7.84A1.1,1.1,0,1,0,2.9,9.34l4.94,5.3L17.5,5A1.1,1.1,0,0,0,17.5,3.42Z"/>' })];

// node_modules/@cds/core/icon/shapes/font-size.js
var a43 = ["font-size", n23({ outline: '<path d="M21,9.08A1.13,1.13,0,0,0,19.86,8H4.62a1.1,1.1,0,1,0,0,2.19H11V27a1.09,1.09,0,0,0,2.17,0V10.19h6.69A1.14,1.14,0,0,0,21,9.08Z"/><path d="M30.67,15H21.15a1.1,1.1,0,1,0,0,2.19H25V26.5a1.09,1.09,0,0,0,2.17,0V17.23h3.54a1.1,1.1,0,1,0,0-2.19Z"/>' })];

// node_modules/@cds/core/icon/shapes/highlighter.js
var t99 = ["highlighter", n23({ outline: '<path d="M15.82,26.06a1,1,0,0,1-.71-.29L8.67,19.33a1,1,0,0,1-.29-.71,1,1,0,0,1,.29-.71L23,3.54a5.55,5.55,0,1,1,7.85,7.86L16.53,25.77A1,1,0,0,1,15.82,26.06Zm-5-7.44,5,5L29.48,10a3.54,3.54,0,0,0,0-5,3.63,3.63,0,0,0-5,0Z"/><path d="M10.38,28.28A1,1,0,0,1,9.67,28L6.45,24.77a1,1,0,0,1-.22-1.09l2.22-5.44a1,1,0,0,1,1.63-.33l6.45,6.44A1,1,0,0,1,16.2,26l-5.44,2.22A1.33,1.33,0,0,1,10.38,28.28ZM8.33,23.82l2.29,2.28,3.43-1.4L9.74,20.39Z"/><path d="M8.94,30h-5a1,1,0,0,1-.84-1.55l3.22-4.94a1,1,0,0,1,1.55-.16l3.21,3.22a1,1,0,0,1,.06,1.35L9.7,29.64A1,1,0,0,1,8.94,30ZM5.78,28H8.47L9,27.34l-1.7-1.7Z"/><rect x="3.06" y="31" width="30" height="3"/>' })];

// node_modules/@cds/core/icon/shapes/indent.js
var t100 = ["indent", n23({ outline: '<path d="M31.06,9h-26a1,1,0,1,1,0-2h26a1,1,0,1,1,0,2Z"/><path d="M31.06,14h-17a1,1,0,0,1,0-2h17a1,1,0,1,1,0,2Z"/><path d="M31.06,19h-17a1,1,0,0,1,0-2h17a1,1,0,1,1,0,2Z"/><path d="M31.06,24h-17a1,1,0,0,1,0-2h17a1,1,0,1,1,0,2Z"/><path d="M31.06,29h-26a1,1,0,0,1,0-2h26a1,1,0,1,1,0,2Z"/><path d="M5.56,22.54a1,1,0,0,1-.7-1.71L7.68,18,4.86,15.17a1,1,0,0,1,0-1.41,1,1,0,0,1,1.41,0L10.51,18,6.27,22.24A1,1,0,0,1,5.56,22.54Z"/>' })];

// node_modules/@cds/core/icon/shapes/italic.js
var t101 = ["italic", n23({ outline: '<path d="M24.42,8H17.1a1.1,1.1,0,1,0,0,2.19h2.13L13.11,25.55H10.47a1.1,1.1,0,1,0,0,2.19H17.8a1.1,1.1,0,1,0,0-2.19H15.51l6.13-15.36h2.78a1.1,1.1,0,1,0,0-2.19Z"/>' })];

// node_modules/@cds/core/icon/shapes/justify-text.js
var e66 = ["justify-text", n23({ outline: '<path d="M6,10.2H31.75a1.1,1.1,0,1,0,0-2.2H6a1.1,1.1,0,1,0,0,2.2Z"/><path d="M31.75,14H6a1.1,1.1,0,1,0,0,2.2H31.75a1.1,1.1,0,1,0,0-2.2Z"/><path d="M31.12,20H6.62a1.1,1.1,0,1,0,0,2.2h24.5a1.1,1.1,0,1,0,0-2.2Z"/><path d="M30.45,25.83H6.6a1.1,1.1,0,0,0,0,2.2H30.45a1.1,1.1,0,0,0,0-2.2Z"/>' })];

// node_modules/@cds/core/icon/shapes/language.js
var v8 = ["language", n23({ outline: '<path d="M30,3H14v5h2V5h14c0.6,0,1,0.4,1,1v11c0,0.6-0.4,1-1,1H17v7h-5.3L8,27.9V25H5c-0.6,0-1-0.4-1-1V13c0-0.6,0.4-1,1-1h13v-2H5c-1.7,0-3,1.3-3,3v11c0,1.7,1.3,3,3,3h1v5.1l6.3-5.1H19v-7h11c1.7,0,3-1.3,3-3V6C33,4.3,31.7,3,30,3z"/><path d="M6.2,22.9h2.4l0.6-1.6h3.1l0.6,1.6h2.4L11.9,14H9.5L6.2,22.9z M10.7,16.5l1,3.1h-2L10.7,16.5z"/><path d="M20,17c1.1,0,2.6-0.3,4-1c1.4,0.7,3,1,4,1v-2c0,0-1,0-2.1-0.4c1.2-1.2,2.1-3,2.1-5.6V8h-3V6h-2v2h-3v2h5.9c-0.2,1.8-1,2.9-1.9,3.6c-0.6-0.5-1.2-1.2-1.6-2.1h-2.1c0.4,1.3,1,2.3,1.8,3.1C21.1,15,20.2,15,20,15V17z"/>', solid: '<polygon points="11,16.5 10,19.6 12,19.6 11,16.5 	"/><path d="M30.3,3h-16v5h4v2h-13c-1.7,0-3,1.3-3,3v11c0,1.7,1.3,3,3,3h1v5.1l6.3-5.1h6.7v-7h11c1.7,0,3-1.3,3-3V6C33.3,4.3,32,3,30.3,3z M13.1,22.9l-0.5-1.6H9.5l-0.6,1.6H6.5L9.8,14h2.4l3.3,8.9L13.1,22.9z M28.3,15v2c-1.3,0-2.7-0.4-3.9-1c-1.2,0.6-2.6,0.9-4,1l-0.1-2c0.7,0,1.4-0.1,2.1-0.3c-0.9-0.9-1.5-2-1.8-3.2h2.1c0.3,0.9,0.9,1.6,1.6,2.2c1.1-0.9,1.8-2.2,1.9-3.7h-6V8h3V6h2v2h3.3l0.1,1c0.1,2.1-0.7,4.2-2.2,5.7C27.1,14.9,27.7,15,28.3,15z"/>' })];

// node_modules/@cds/core/icon/shapes/number-list.js
var l30 = ["number-list", n23({ outline: '<polygon points="5.46 7.41 5.46 11.56 6.65 11.56 6.65 6.05 5.7 6.05 4.05 7.16 4.52 8 5.46 7.41"/><path d="M5.57,14.82a.76.76,0,0,1,.83.73c0,.38-.21.74-.87,1.27l-2,1.57v1H7.67V18.28H5.33l1-.77c1-.7,1.28-1.27,1.28-2a1.83,1.83,0,0,0-2-1.76,2.63,2.63,0,0,0-2.14,1.08l.76.73A1.75,1.75,0,0,1,5.57,14.82Z"/><path d="M6.56,24.64a1.32,1.32,0,0,0,1-1.27c0-.87-.78-1.51-2-1.51a2.61,2.61,0,0,0-2.1,1l.69.72a1.78,1.78,0,0,1,1.3-.64c.54,0,.92.26.92.66s-.36.62-1,.62H4.79v1h.64c.74,0,1.07.21,1.07.63s-.35.68-1,.68a2,2,0,0,1-1.46-.65l-.7.78a2.85,2.85,0,0,0,2.21.93c1.29,0,2.13-.69,2.13-1.64A1.33,1.33,0,0,0,6.56,24.64Z"/><path d="M32.42,9a1,1,0,0,0-1-1H10v2H31.42A1,1,0,0,0,32.42,9Z"/><path d="M31.42,16H10v2H31.42a1,1,0,0,0,0-2Z"/><path d="M31.42,24H10v2H31.42a1,1,0,0,0,0-2Z"/>' })];

// node_modules/@cds/core/icon/shapes/outdent.js
var t102 = ["outdent", n23({ outline: '<path d="M31.06,9h-26a1,1,0,1,1,0-2h26a1,1,0,1,1,0,2Z"/><path d="M31.06,14h-17a1,1,0,0,1,0-2h17a1,1,0,1,1,0,2Z"/><path d="M31.06,19h-17a1,1,0,0,1,0-2h17a1,1,0,1,1,0,2Z"/><path d="M31.06,24h-17a1,1,0,0,1,0-2h17a1,1,0,1,1,0,2Z"/><path d="M31.06,29h-26a1,1,0,0,1,0-2h26a1,1,0,1,1,0,2Z"/><path d="M9.56,22.54a1,1,0,0,1-.7-.3L4.61,18l4.25-4.24a1,1,0,0,1,1.41,1.41L7.44,18l2.83,2.83a1,1,0,0,1-.71,1.71Z"/>' })];

// node_modules/@cds/core/icon/shapes/paint-roller.js
var t103 = ["paint-roller", n23({ outline: '<path d="M31,10V4a2,2,0,0,0-2-2H6A2,2,0,0,0,4,4v6a2,2,0,0,0,2,2H29A2,2,0,0,0,31,10ZM6,4H29v6H6Z"/><path d="M33,6H32v6.29L18.7,16.54a1,1,0,0,0-.7,1V19H16V33a2,2,0,0,0,2,2h2a2,2,0,0,0,2-2V19H20v-.73L33.3,14a1,1,0,0,0,.7-1V7A1,1,0,0,0,33,6ZM20,33H18V21h2Z"/>', solid: '<rect x="4" y="2" width="27" height="10" rx="1" ry="1"/><path d="M33,6H32v6.24L18.71,16.45a1,1,0,0,0-.71,1V19H16V34a1,1,0,0,0,1,1h4a1,1,0,0,0,1-1V19H20v-.82L33.29,14A1,1,0,0,0,34,13V7A1,1,0,0,0,33,6Z"/>' })];

// node_modules/@cds/core/icon/shapes/strikethrough.js
var t104 = ["strikethrough", n23({ outline: '<path d="M32.88,19.92h-30a1,1,0,1,1,0-2h30a1,1,0,0,1,0,2Z"/><path d="M7.27,15.86a12.9,12.9,0,0,1,1.29-.52A5.69,5.69,0,0,1,10.39,15a3.18,3.18,0,0,1,2.75,1.11A4.44,4.44,0,0,1,14,18.85v.49a13.83,13.83,0,0,0-4.29-.74,6.19,6.19,0,0,0-2.59.54A5,5,0,0,0,5.81,20H15.88V18.85a5.67,5.67,0,0,0-1.37-4,5.16,5.16,0,0,0-4-1.49,10,10,0,0,0-3.91.88.87.87,0,0,0-.44,1.18A.84.84,0,0,0,7.27,15.86Z"/><path d="M21,20a5.94,5.94,0,0,1,.54-2.31,4.35,4.35,0,0,1,1.58-1.83,4.27,4.27,0,0,1,4.59,0,4.47,4.47,0,0,1,1.57,1.83A6.12,6.12,0,0,1,29.85,20h2a7.73,7.73,0,0,0-.78-3.19,6,6,0,0,0-2.18-2.45,5.74,5.74,0,0,0-3.1-.88,5.39,5.39,0,0,0-2.8.73,5.55,5.55,0,0,0-2,2.05V10a.87.87,0,0,0-.86-.86H20a.87.87,0,0,0-.86.86V20Z"/><path d="M29.67,22a5.61,5.61,0,0,1-.36,1.07,4.47,4.47,0,0,1-1.57,1.85,4.32,4.32,0,0,1-4.59,0,4.35,4.35,0,0,1-1.58-1.85A5.64,5.64,0,0,1,21.2,22H19.09v4.13A.87.87,0,0,0,20,27h.2a.87.87,0,0,0,.86-.86V24.51a5.58,5.58,0,0,0,2,2.06,5.48,5.48,0,0,0,2.8.72,5.66,5.66,0,0,0,3.1-.88A5.88,5.88,0,0,0,31.09,24,7.09,7.09,0,0,0,31.73,22Z"/><path d="M14,22v.76a3.34,3.34,0,0,1-1.62,2,5.34,5.34,0,0,1-2.69.72,3.78,3.78,0,0,1-2.36-.7,2.24,2.24,0,0,1-.94-1.9,2.29,2.29,0,0,1,.2-.91H4.62a4,4,0,0,0-.13,1,3.83,3.83,0,0,0,1.35,3.06A5.15,5.15,0,0,0,9.31,27.2,6,6,0,0,0,12,26.57a4.62,4.62,0,0,0,2-1.74V26a.86.86,0,0,0,.86.86H15a.86.86,0,0,0,.86-.86V22Z"/>' })];

// node_modules/@cds/core/icon/shapes/subscript.js
var t105 = ["subscript", n23({ outline: '<path d="M14.55,18l6.8,8.6a1.17,1.17,0,0,1-.92,1.9h0a1.17,1.17,0,0,1-.92-.44L13,19.91,6.6,28a1.17,1.17,0,0,1-.92.44h0a1.17,1.17,0,0,1-.92-1.9L11.55,18l-6.8-8.6a1.17,1.17,0,0,1,.92-1.9h0A1.17,1.17,0,0,1,6.63,8l6.44,8.13L19.5,8a1.17,1.17,0,0,1,.92-.44h0a1.17,1.17,0,0,1,.92,1.9Z"/><path d="M23,31.8,27.49,28a9.9,9.9,0,0,0,1.88-2.05A3.44,3.44,0,0,0,30,24a2.35,2.35,0,0,0-.35-1.27,2.44,2.44,0,0,0-1-.84,2.9,2.9,0,0,0-1.26-.28,3.36,3.36,0,0,0-1.83.5,5.64,5.64,0,0,0-1.48,1.42l-1-.81a5.11,5.11,0,0,1,4.36-2.37,4.35,4.35,0,0,1,2,.45,3.43,3.43,0,0,1,2,3.18,4.45,4.45,0,0,1-.68,2.35,10.9,10.9,0,0,1-2.24,2.46l-3.24,2.81H31.5V33H23Z"/>' })];

// node_modules/@cds/core/icon/shapes/superscript.js
var p9 = ["superscript", n23({ outline: '<path d="M14.43,18l6.79,8.6a1.17,1.17,0,0,1-.92,1.9h0a1.17,1.17,0,0,1-.92-.44l-6.44-8.13L6.47,28a1.17,1.17,0,0,1-.92.44h0a1.17,1.17,0,0,1-.92-1.9L11.43,18l-6.8-8.6a1.17,1.17,0,0,1,.92-1.9h0A1.2,1.2,0,0,1,6.51,8l6.43,8.13L19.38,8a1.17,1.17,0,0,1,.92-.44h0a1.17,1.17,0,0,1,.92,1.9Z"/><path d="M22.85,14.47l4.51-3.85a9.37,9.37,0,0,0,1.88-2,3.43,3.43,0,0,0,.59-1.86,2.27,2.27,0,0,0-.36-1.27,2.38,2.38,0,0,0-.95-.83,2.77,2.77,0,0,0-1.26-.29,3.39,3.39,0,0,0-1.83.5,5.83,5.83,0,0,0-1.49,1.42l-1-.81a5.12,5.12,0,0,1,4.36-2.37,4.36,4.36,0,0,1,2,.45,3.47,3.47,0,0,1,2,3.18A4.44,4.44,0,0,1,30.58,9a11.14,11.14,0,0,1-2.24,2.46L25.1,14.31h6.28v1.33H22.85Z"/>' })];

// node_modules/@cds/core/icon/shapes/text.js
var c21 = ["text", n23({ outline: '<path d="M12.19,8.84a1.45,1.45,0,0,0-1.4-1h-.12a1.46,1.46,0,0,0-1.42,1L1.14,26.56a1.29,1.29,0,0,0-.14.59,1,1,0,0,0,1,1,1.12,1.12,0,0,0,1.08-.77l2.08-4.65h11l2.08,4.59a1.24,1.24,0,0,0,1.12.83,1.08,1.08,0,0,0,1.08-1.08,1.64,1.64,0,0,0-.14-.57ZM6.08,20.71l4.59-10.22,4.6,10.22Z"/><path d="M32.24,14.78A6.35,6.35,0,0,0,27.6,13.2a11.36,11.36,0,0,0-4.7,1,1,1,0,0,0-.58.89,1,1,0,0,0,.94.92,1.23,1.23,0,0,0,.39-.08,8.87,8.87,0,0,1,3.72-.81c2.7,0,4.28,1.33,4.28,3.92v.5a15.29,15.29,0,0,0-4.42-.61c-3.64,0-6.14,1.61-6.14,4.64v.05c0,2.95,2.7,4.48,5.37,4.48a6.29,6.29,0,0,0,5.19-2.48V26.9a1,1,0,0,0,1,1,1,1,0,0,0,1-1.06V19A5.71,5.71,0,0,0,32.24,14.78Zm-.56,7.7c0,2.28-2.17,3.89-4.81,3.89-1.94,0-3.61-1.06-3.61-2.86v-.06c0-1.8,1.5-3,4.2-3a15.2,15.2,0,0,1,4.22.61Z"/>' })];

// node_modules/@cds/core/icon/shapes/text-color.js
var o63 = ["text-color", n23({ outline: '<path d="M19.47,3.84a1.45,1.45,0,0,0-1.4-1H18a1.45,1.45,0,0,0-1.42,1L8.42,21.56a1.35,1.35,0,0,0-.14.59,1,1,0,0,0,1,1,1.11,1.11,0,0,0,1.08-.77l2.08-4.65h11l2.08,4.59a1.24,1.24,0,0,0,1.12.83,1.08,1.08,0,0,0,1.08-1.08,1.59,1.59,0,0,0-.14-.57ZM13.36,15.71,18,5.49l4.6,10.22Z"/><rect x="4.06" y="25" width="28" height="8" rx="2" ry="2"/>' })];

// node_modules/@cds/core/icon/shapes/underline.js
var r57 = ["underline", n23({ outline: '<path d="M18,28.17c5.08,0,8.48-3.08,8.48-9V8.54a1.15,1.15,0,1,0-2.3,0v10.8c0,4.44-2.38,6.71-6.13,6.71s-6.21-2.47-6.21-6.85V8.54a1.15,1.15,0,1,0-2.3,0v10.8C9.53,25.09,13,28.17,18,28.17Z"/><path d="M31,30H5a1.11,1.11,0,0,0,0,2.21H31A1.11,1.11,0,0,0,31,30Z"/>' })];

// node_modules/@cds/core/icon/shapes/airplane.js
var L12 = ["airplane", n23({ outline: '<path d="M35.77,8.16a2.43,2.43,0,0,0-1.9-2L28,4.87a4.5,4.5,0,0,0-3.65.79L7,18.3,2.14,18.1A1.86,1.86,0,0,0,.91,21.41l5,3.93c.6.73,1,.59,10.93-4.82l.93,9.42a1.36,1.36,0,0,0,.85,1.18,1.43,1.43,0,0,0,.54.1,1.54,1.54,0,0,0,1-.41l2.39-2.18a1.52,1.52,0,0,0,.46-.83L25.2,15.9c3.57-2,6.95-3.88,9.36-5.25A2.43,2.43,0,0,0,35.77,8.16Zm-2.2.75c-2.5,1.42-6,3.41-9.76,5.47l-.41.23L21.07,27.28l-1.47,1.34L18.5,17.32,17.17,18C10,22,7.61,23.16,6.79,23.52l-4.3-3.41,5.08.22,18-13.06a2.51,2.51,0,0,1,2-.45l5.85,1.26a.43.43,0,0,1,.35.37A.42.42,0,0,1,33.57,8.91Z"/><path d="M7,12.54l3.56,1,1.64-1.19-4-1.16L10,10.09l5.47-.16,2.3-1.67L10,8.5a1.25,1.25,0,0,0-.7.17L6.67,10.2A1.28,1.28,0,0,0,7,12.54Z"/>', solid: '<path d="M6.25,11.5,12,13.16l6.32-4.59-9.07.26A.52.52,0,0,0,9,8.91L6.13,10.56A.51.51,0,0,0,6.25,11.5Z"/><path d="M34.52,6.36,28.22,5a3.78,3.78,0,0,0-3.07.67L6.12,19.5l-4.57-.2a1.25,1.25,0,0,0-.83,2.22l4.45,3.53a.55.55,0,0,0,.53.09c1.27-.49,6-3,11.59-6.07l1.12,11.51a.55.55,0,0,0,.9.37l2.5-2.08a.76.76,0,0,0,.26-.45l2.37-13.29c4-2.22,7.82-4.37,10.51-5.89A1.55,1.55,0,0,0,34.52,6.36Z"/>' })];

// node_modules/@cds/core/icon/shapes/bicycle.js
var h46 = ["bicycle", n23({ outline: '<path d="M8.5,29.65A6.51,6.51,0,0,1,2,23.15a6.39,6.39,0,0,1,6.5-6.36A6.39,6.39,0,0,1,15,23.15,6.51,6.51,0,0,1,8.5,29.65Zm0-11a4.5,4.5,0,1,0,4.5,4.5A4.51,4.51,0,0,0,8.5,18.65Z"/><path d="M27.5,29.65a6.51,6.51,0,0,1-6.5-6.5,6.5,6.5,0,0,1,13,0A6.51,6.51,0,0,1,27.5,29.65Zm0-11a4.5,4.5,0,1,0,4.5,4.5A4.51,4.51,0,0,0,27.5,18.65Z"/><path d="M19,24.66H8a1,1,0,0,1-.89-1.45l5-10,1.78.9L9.62,22.73H19Z"/><rect x="13" y="12.68" width="11" height="1.91"/><path d="M28,24.66a1,1,0,0,1-.94-.66L22.29,10.66H20a1,1,0,0,1-1-1,1,1,0,0,1,1-.93h3a.94.94,0,0,1,.94.6l5,14a1,1,0,0,1-.6,1.27A1,1,0,0,1,28,24.66Z"/><path d="M13,14.66a1,1,0,0,1-.71-.29l-1.7-1.71H8a1,1,0,0,1-1-1,.94.94,0,0,1,1-1h3a1.08,1.08,0,0,1,.75.27l2,2a1,1,0,0,1,0,1.41A1,1,0,0,1,13,14.66Z"/>', solid: '<path d="M15,21.9c-0.2-2-1.2-3.8-2.9-4.9l-2.5,4.9H15z"/><path d="M7.2,23.4c-0.2-0.3-0.2-0.7,0-1l3.2-6.3c-0.6-0.2-1.2-0.2-1.8-0.2C5,15.9,2,18.8,2,22.4c0,3.6,2.9,6.5,6.5,6.5c3,0,5.6-2.1,6.3-5H8C7.7,23.9,7.3,23.7,7.2,23.4z"/><path d="M19,21.9h-4c0,0.2,0,0.3,0,0.5c0,0.5-0.1,1-0.2,1.5H19V21.9z"/><path d="M27.5,15.9c-0.3,0-0.6,0-0.9,0.1l2.4,6.6c0.2,0.5-0.1,1.1-0.6,1.3c-0.1,0-0.2,0.1-0.3,0.1c-0.4,0-0.8-0.3-0.9-0.7l-2.4-6.7c-3.2,1.6-4.5,5.5-3,8.7c1.6,3.2,5.5,4.5,8.7,3c3.2-1.6,4.5-5.5,3-8.7C32.2,17.3,30,15.9,27.5,15.9z"/><path d="M24.7,16.7c0.6-0.3,1.3-0.5,1.9-0.6l-2.7-7.4C23.8,8.2,23.4,8,23,7.9h-3c-0.6,0-1,0.5-1,1.1c0,0.5,0.4,0.9,1,0.9c0,0,0,0,0,0h2.3l0.7,2h-9.6l-1.7-1.7C11.5,10.1,11.3,10,11,10H8c-0.6,0-1,0.4-1,1s0.4,1,1,1h2.6l1.2,1.2l-1.5,3c0.6,0.2,1.3,0.5,1.8,0.8l1.6-3.2h10L24.7,16.7z"/>' })];

// node_modules/@cds/core/icon/shapes/boat.js
var t106 = ["boat", n23({ outline: '<path d="M29.1,27.1C28,27,26.9,27.4,26,28.2c-1.1,1.1-2.9,1.1-4.1,0c-1-0.7-2.1-1.1-3.3-1.1c-1.2-0.1-2.4,0.3-3.3,1.1C14.7,28.7,14,29,13.2,29s-1.5-0.3-2.1-0.8c-1-0.8-2.2-1.2-3.4-1.2s-2.4,0.4-3.4,1.2C3.7,28.7,2.8,29,2,29v2c1.3,0.1,2.6-0.3,3.6-1.2C6.2,29.3,7.1,29,7.9,29c0.7,0,1.5,0.3,2.1,0.8c1.8,1.6,4.6,1.6,6.5,0c0.6-0.5,1.3-0.8,2.1-0.8c0.7,0,1.4,0.3,2,0.8c1.9,1.6,4.6,1.6,6.5,0c0.5-0.5,1.3-0.8,2-0.8c0.7,0,1.4,0.3,1.9,0.8c0.9,0.7,1.9,1.1,3,1.2v-2c-1,0-1.2-0.4-1.7-0.8C31.4,27.5,30.3,27.1,29.1,27.1z"/><path d="M6,23c0-0.6,0.5-1,1.1-1H32l-3.5,3.1h0.2c0.8,0,1.6,0.2,2.2,0.5l2.5-2.2l0.2-0.2c0.7-0.8,0.6-2.1-0.2-2.8C33,20.2,32.6,20,32.1,20h-25c-1.7,0-3,1.3-3,3v3.2c0.5-0.5,1.2-0.8,1.9-1.1V23z"/><path d="M8.9,19H15v-7.8c0-0.6-0.3-1.2-0.8-1.6C13.3,8.9,12,9.1,11.4,10l-4.1,5.9c-0.4,0.6-0.4,1.4-0.1,2.1C7.5,18.6,8.2,19,8.9,19z M13.1,11.2L13,17H8.9L13.1,11.2z"/><path d="M26,18c0.4-0.6,0.4-1.4,0-2L19.7,5.6c-0.4-0.6-1-1-1.7-1c-1.1,0-2,0.9-2,2V19h8.3C25,19,25.7,18.6,26,18z M17.9,6.6l6.4,10.5h-6.4V6.6z"/>', solid: '<path d="M34,31c-1.1-0.1-2.1-0.5-3-1.2c-0.5-0.5-1.2-0.8-2-0.8c-0.7,0-1.5,0.3-2,0.8c-0.9,0.8-2,1.1-3.1,1.1c-1.2,0-2.4-0.4-3.3-1.1c-1.2-1.1-3-1.1-4.1,0c-0.9,0.8-2.1,1.2-3.4,1.2c-1.2,0-2.3-0.4-3.2-1.2c-0.6-0.5-1.3-0.8-2-0.8c-0.8,0-1.7,0.3-2.3,0.8c-1,0.8-2.3,1.2-3.5,1.1V29c0.8,0,1.7-0.3,2.3-0.9c1-0.8,2.2-1.2,3.4-1.1c1.2,0,2.4,0.4,3.3,1.2c1.2,1.1,3,1.1,4.2,0c1.9-1.6,4.7-1.6,6.5,0c1.2,1.1,3,1.1,4.1,0c0.9-0.8,2.1-1.2,3.3-1.2c1.1,0,2.2,0.4,3,1.2C32.8,28.7,33,29,34,29L34,31z"/><path d="M4.1,26.2c0.6-0.5,1.2-0.8,1.9-1V23c0-0.6,0.4-1.1,1-1.1h25L28.4,25h0.2c0.8,0,1.6,0.2,2.2,0.5l2.5-2.2l0.2-0.2c0.7-0.9,0.5-2.1-0.4-2.8C32.9,20.1,32.4,20,32,20H7c-1.7,0-3,1.3-3,3L4.1,26.2L4.1,26.2z"/><path d="M14.9,18.9H8.9c-1.1,0-2-0.9-2-2c0-0.4,0.1-0.8,0.4-1.2l4.1-5.8c0.6-0.9,1.9-1.1,2.8-0.5c0.5,0.4,0.8,1,0.8,1.6V18.9z"/><path d="M24.3,18.9H16V6.4c0-1.1,0.9-2,2-2c0.7,0,1.3,0.4,1.7,1L26,15.8c0.6,1,0.2,2.2-0.7,2.7C25,18.7,24.6,18.8,24.3,18.9L24.3,18.9z"/>' })];

// node_modules/@cds/core/icon/shapes/campervan.js
var t107 = ["campervan", n23({ outline: '<path d="M9.5,24C9.5,24,9.5,24,9.5,24C7.6,24,6,25.6,6,27.5c0,0,0,0,0,0C6,29.4,7.6,31,9.5,31c1.9,0,3.5-1.6,3.5-3.5S11.4,24,9.5,24z M9.5,29C8.7,29,8,28.3,8,27.5S8.7,26,9.5,26s1.5,0.7,1.5,1.5S10.3,29,9.5,29z"/><path d="M23.5,4C23.5,24,23.5,24,23.5,24c-1.9,0-3.5,1.6-3.5,3.5c0,0,0,0,0,0c0,1.9,1.5,3.5,3.5,3.5c1.9,0,3.5-1.6,3.5-3.5S25.4,24,23.5,24z M23.5,29c-0.8,0-1.5-0.7-1.5-1.5s0.7-1.5,1.5-1.5s1.5,0.7,1.5,1.5S24.3,29,23.5,29z"/><path d="M33,20.1V20h-0.1l-3.5-5.5C31,13.6,32,12,32,10.3V9.7C32,7.1,29.9,5,27.3,5h-8.5c-1.9,0-3.7,1.2-4.4,3H5c-1.7,0-3,1.3-3,3v17h2V11c0-0.6,0.4-1,1-1h10.9L16,9.2C16.3,7.9,17.4,7,18.7,7h8.5C28.8,7,30,8.2,30,9.7v0.5c0,1.5-1.2,2.7-2.7,2.7H24v9h7.8l0.2,0.3V25c0,0.6-0.4,1-1,1h-2v2h2c1.7,0,3-1.3,3-3v-3.3L33,20.1z M26,20v-5h1.5l3.1,5H26z"/><rect x="19" y="9" width="8" height="2"/><polygon points="20,22 22,22 22,13 15,13 15,28 17,28 17,15 20,15"/><path d="M6,20h7v-7H6V20z M8,15h3v3H8V15z"/>', solid: '<path d="M9.5,24C7.6,24,6,25.6,6,27.5S7.6,31,9.5,31c0,0,0,0,0,0c1.9,0,3.5-1.6,3.5-3.5c0,0,0-0.1,0-0.1C13,25.5,11.4,24,9.5,24z"/><circle cx="23.5" cy="27.5" r="3.5"/><path d="M29.5,14.5C31,13.6,32,12,32,10.2V9.7c0,0,0,0,0-0.1C32,7,29.9,5,27.3,5h-8.5c-1.9,0-3.7,1.2-4.4,3H5c-1.7,0-3,1.3-3,3v17h2V11c0-0.6,0.4-1,1-1h10.9L16,9.2C16.3,7.9,17.4,7,18.7,7h8.5C28.8,7,30,8.2,30,9.7v0.5c0,1.5-1.2,2.7-2.7,2.7H27h-3v9h7.8l0.2,0.3V25c0,0.6-0.4,1-1,1h-2v2h2c1.7,0,3-1.3,3-3v-3.3L29.5,14.5z"/><rect x="19" y="9" width="7.9" height="2"/><polygon points="20,22 21.9,22 21.9,13 15,13 15,28 16.9,28 16.9,15 20,15"/><rect x="6" y="13" width="6.9" height="7"/>' })];

// node_modules/@cds/core/icon/shapes/car.js
var h47 = ["car", n23({ outline: '<rect x="15" y="17" width="3" height="2"/><path d="M26.45,14.17A22.1,22.1,0,0,0,19.38,7a9.64,9.64,0,0,0-9-.7,8.6,8.6,0,0,0-4.82,6.4c-.08.47-.14.92-.2,1.36A4,4,0,0,0,2,18v6.13a2,2,0,0,0,2,2V20H4V18a2,2,0,0,1,2-2H24.73A7.28,7.28,0,0,1,32,23.27V24h-2a4.53,4.53,0,1,0,.33,2H32a2,2,0,0,0,2-2v-.73A9.28,9.28,0,0,0,26.45,14.17ZM11,14H6.93c0-.31.09-.63.15-1A6.52,6.52,0,0,1,11,8h0Zm2,0V7.58a8.17,8.17,0,0,1,5.36,1.16A19,19,0,0,1,23.9,14ZM25.8,28.38a2.5,2.5,0,1,1,2.5-2.5A2.5,2.5,0,0,1,25.8,28.38Z"/><path d="M14.17,24a4.53,4.53,0,1,0,.33,2h5.3c0-.08,0-.17,0-.25A6,6,0,0,1,20,24ZM10,28.38a2.5,2.5,0,1,1,2.5-2.5A2.5,2.5,0,0,1,10,28.38Z"/>', solid: '<path d="M26.87,14.28A22.36,22.36,0,0,0,19.65,6.9a9.64,9.64,0,0,0-9-.7,8.6,8.6,0,0,0-4.82,6.4c-.08.49-.15,1-.21,1.4h-1A2.59,2.59,0,0,0,2,16.59v8.55a.86.86,0,0,0,.86.86H4.59c0-.13,0-.26,0-.39a5.77,5.77,0,0,1,7.71-5.45l-1,1a4.56,4.56,0,0,0-4.34,1.58,3,3,0,0,0-.63.93A4.5,4.5,0,1,0,14.82,26h5.48c0-.13,0-.26,0-.39A5.77,5.77,0,0,1,28,20.16l-1,1a4.56,4.56,0,0,0-4.34,1.58,3,3,0,0,0-.63.93A4.5,4.5,0,1,0,30.53,26h2.61a.86.86,0,0,0,.86-.86V23.36A9.39,9.39,0,0,0,26.87,14.28ZM12,14H8c0-.35.1-.71.16-1.07a6.52,6.52,0,0,1,3.87-5h0ZM10.36,28.36a2.5,2.5,0,1,1,2.5-2.5A2.5,2.5,0,0,1,10.36,28.36ZM19,19H16V17h3Zm-6-5V7.47a8.16,8.16,0,0,1,5.4,1.15A19.15,19.15,0,0,1,24,14ZM26.06,28.36a2.5,2.5,0,1,1,2.5-2.5A2.5,2.5,0,0,1,26.06,28.36Z"/>' })];

// node_modules/@cds/core/icon/shapes/caravan.js
var v9 = ["caravan", n23({ outline: '<path d="M13.5,21C11,21,9,23,9,25.5s2,4.5,4.5,4.5c2.5,0,4.5-2,4.5-4.5C18,23,16,21,13.5,21z M13.5,28c-1.4,0-2.5-1.1-2.5-2.5s1.1-2.5,2.5-2.5s2.5,1.1,2.5,2.5S14.9,28,13.5,28z"/><path d="M33,24h-2v-7.5c0-0.5-0.1-1-0.4-1.5l-4.2-7.5c-0.5-1-1.5-1.5-2.6-1.5H5C3.3,6,2,7.3,2,9v14c0,1.7,1.3,3,3,3h2v-2H5c-0.6,0-1-0.4-1-1V9c0-0.6,0.4-1,1-1h18.8c0.4,0,0.7,0.2,0.9,0.5l4.2,7.5c0.1,0.1,0.1,0.3,0.1,0.5V24h-4V12h-7v8h2v-6h3v10h-3v2h13c0.6,0,1-0.4,1-1S33.6,24,33,24z"/><path d="M16,12H7v6h9V12z M14,16H9v-2h5V16z"/>', solid: '<path d="M13.5,30C11,30,9,28,9,25.5s2-4.5,4.5-4.5s4.5,2,4.5,4.5C18,28,16,30,13.5,30z"/><path d="M33,24h-2v-7.5c0-0.5-0.1-1-0.4-1.5l-4.2-7.5c-0.5-1-1.5-1.5-2.6-1.5H5C3.3,6,2,7.3,2,9v14c0,1.7,1.3,3,3,3h2v-2H5c-0.6,0-1-0.4-1-1V9c0-0.6,0.4-1,1-1h18.8c0.4,0,0.7,0.2,0.9,0.5l4.2,7.5c0.1,0.1,0.1,0.3,0.1,0.5V24h-4V12h-7v8h2v-6h3v10h-3v2h13c0.6,0,1-0.4,1-1S33.6,24,33,24z"/><path d="M16,18H7v-6h9V18z"/>' })];

// node_modules/@cds/core/icon/shapes/compass.js
var c22 = ["compass", n23({ outline: '<path d="M20.82,15.31h0L10.46,9c-.46-.26-1.11.37-.86.84l6.15,10.56,10.56,6.15a.66.66,0,0,0,.84-.86Zm-4,4,3-3,4.55,7.44Z"/><path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2Zm1,29.95V29.53H17v2.42A14,14,0,0,1,4.05,19H6.47V17H4.05A14,14,0,0,1,17,4.05V6.47h2V4.05A14,14,0,0,1,31.95,17H29.53v2h2.42A14,14,0,0,1,19,31.95Z"/>', solid: '<path d="M18,2A16,16,0,1,0,34,18,16,16,0,0,0,18,2ZM6.47,19H4.05c0-.33-.05-.66-.05-1s0-.67.05-1H6.47ZM17,4.05c.33,0,.66-.05,1-.05s.67,0,1,.05V6.47H17Zm2,27.9c-.33,0-.66.05-1,.05s-.67,0-1-.05V29.53h2Zm8-5.58a.59.59,0,0,1-.69.16L15.75,20.38,9.6,9.82c-.25-.47.39-1.1.86-.84l10.37,6.33h0l6.33,10.37A.59.59,0,0,1,27,26.37ZM29.53,19V17h2.42c0,.33.05.66.05,1s0,.67-.05,1Z"/><polygon points="16.77 19.35 24.35 23.77 19.8 16.33 16.77 19.35"/>' })];

// node_modules/@cds/core/icon/shapes/ferry.js
var l31 = ["ferry", n23({ outline: '<path d="M29,25.1c-1.2,0-2.3,0.4-3.3,1.1c0,0,0,0,0,0c-1.1,1.1-3,1.1-4.1,0c-0.9-0.8-2.1-1.2-3.3-1.2c-1.2,0-2.3,0.4-3.2,1.2c-1.2,1.1-3,1.1-4.2,0C10,25.4,8.8,25,7.6,25c-1.2,0-2.4,0.4-3.4,1.1C3.6,26.7,2.8,27,2,27v2c1.3,0.1,2.5-0.4,3.4-1.2C6.1,27.3,6.9,27,7.7,27c0.8,0,1.5,0.3,2.1,0.8c1.9,1.6,4.7,1.6,6.5,0c0.6-0.5,1.3-0.8,2.1-0.8c0.8,0,1.5,0.3,2.1,0.8c1.9,1.6,4.6,1.6,6.5,0c0.5-0.5,1.3-0.8,2-0.8c0.7,0,1.5,0.3,2,0.8c0.9,0.7,2,1.1,3.1,1.2v-1.9c-0.7,0-1.4-0.3-1.9-0.9C31.3,25.4,30.1,25,29,25.1z"/><path d="M5.9,23.2V20H32l-3.5,3h0.2c0.8,0,1.6,0.2,2.2,0.5l2.5-2.2l0.2-0.2c0.5-0.6,0.5-1.4,0.2-2.1c-0.4-0.7-1-1-1.8-1h-4.4L22.5,11H17c-1.7,0-3,1.3-3,3h-2V8.1H6v6.1c-1.2,0.4-2,1.5-2,2.8v1.1V20v4.3l0.1-0.1C4.6,23.7,5.2,23.4,5.9,23.2z M8,10h2v4H8V10zM6,17c0-0.6,0.4-1,1-1h9v-2c0-0.6,0.4-1,1-1h5l0.6,1H18v2h5.8l1.2,2.1H6V17z"/>', solid: '<path d="M28.2,25c-1.2,0-2.4,0.4-3.3,1.2c-1.2,1.1-3,1.1-4.1,0c-1.9-1.6-4.6-1.6-6.5,0c-1.2,1.1-2.9,1.1-4.1,0c-0.9-0.8-2-1.2-3.2-1.2c-1.2,0-2.3,0.4-3.2,1.2C3.4,26.7,2.7,27,2,27v2c1.1-0.1,2.2-0.5,3.1-1.2C5.6,27.3,6.3,27,7,27c0.7,0,1.5,0.3,2,0.8c1.9,1.6,4.7,1.6,6.6,0c0.6-0.5,1.3-0.8,2.1-0.8c0.8,0,1.5,0.3,2.1,0.8c1.9,1.6,4.7,1.6,6.5,0c0.6-0.5,1.3-0.8,2.1-0.8c0.8,0,1.6,0.3,2.1,0.8c0.9,0.8,2.2,1.3,3.4,1.2v-2c-0.8,0-1.6-0.3-2.2-0.8C30.7,25.4,29.5,25,28.2,25z"/><path d="M5.8,23.2v-3.3h26.1L28.4,23h0.2c0.8,0,1.6,0.2,2.2,0.5l2.5-2.2l0.1-0.2c0.7-0.9,0.5-2.1-0.4-2.8c-0.3-0.3-0.8-0.4-1.2-0.4h-4.1l-5.4-7h-5.5c-1.7,0-3,1.3-3,3h-2V8H6v6.2c-1.2,0.4-2.1,1.5-2.1,2.8l0,7.2l0.1,0C4.5,23.7,5.1,23.4,5.8,23.2z M17.9,14h4.2l1.4,2h-5.7V14z M7.9,10h2v4h-2V10z"/>' })];

// node_modules/@cds/core/icon/shapes/map.js
var t108 = ["map", n23({ outline: '<path d="M33.59,6.19A1,1,0,0,0,32.7,6L23.09,9,13.46,4.11a1,1,0,0,0-.84,0L2.62,8.2A1,1,0,0,0,2,9.13V29.61a1,1,0,0,0,1.38.92L13,26.58l9.59,4.92a1,1,0,0,0,.46.11,1,1,0,0,0,.3,0l10-3.12a1,1,0,0,0,.7-1V7A1,1,0,0,0,33.59,6.19ZM32,26.75l-8.32,2.6V27.06h-1.6v2l-8.4-4.31V23.06h-1.6v1.72L4,28.11V9.79l8.08-3.33V8.81h1.6V6.47l8.4,4.3v2.1h1.6V11L32,8.36Z"/><rect x="22.08" y="15.06" width="1.6" height="3.81"/><rect x="22.08" y="21.06" width="1.6" height="3.81"/><rect x="12.08" y="11.06" width="1.6" height="3.81"/><rect x="12.08" y="17.13" width="1.6" height="3.75"/>', outlineAlerted: '<rect x="22.08" y="15.06" width="1.6" height="3.81"/><rect x="22.08" y="21.06" width="1.6" height="3.81"/><rect x="12.08" y="11.06" width="1.6" height="3.81"/><rect x="12.08" y="17.13" width="1.6" height="3.75"/><path d="M33.68,15.4H32V26.75l-8.32,2.6V27.06h-1.6v2l-8.4-4.31V23.06h-1.6v1.72L4,28.11V9.79l8.08-3.33V8.81h1.6V6.47l5.67,2.9,1-1.76-6.9-3.5a1,1,0,0,0-.84,0L2.62,8.2A1,1,0,0,0,2,9.13V29.61a1,1,0,0,0,1.38.92l9.62-4,9.59,4.92a1,1,0,0,0,.46.11.76.76,0,0,0,.3,0l10-3.12a1,1,0,0,0,.7-1V15.38Z"/>', outlineBadged: '<rect x="22.08" y="21.06" width="1.6" height="3.81"/><rect x="12.08" y="11.06" width="1.6" height="3.81"/><rect x="12.08" y="17.13" width="1.6" height="3.75"/><path d="M32,13.22V26.75l-8.32,2.6V27.06h-1.6v2l-8.4-4.31V23.06h-1.6v1.72L4,28.11V9.79l8.08-3.33V8.81h1.6V6.47l8.4,4.3v2.1h1.6V11l.58-.18A7.69,7.69,0,0,1,23.12,9h0L13.46,4.11a1,1,0,0,0-.84,0L2.62,8.2A1,1,0,0,0,2,9.13V29.61a1,1,0,0,0,1.38.92l9.62-4,9.59,4.92a1,1,0,0,0,.46.11.76.76,0,0,0,.3,0l10-3.12a1,1,0,0,0,.7-1V12.31A7.55,7.55,0,0,1,32,13.22Z"/>', solid: '<path d="M33.31,7.35,25,9.94V14H23V10.29L14,5.68V9H12V5.27l-9.67,4A.53.53,0,0,0,2,9.75V30.45a.53.53,0,0,0,.74.49L12,27.12V23h2v4.53l9,4.61V28h2v3.79l8.63-2.7a.53.53,0,0,0,.37-.51V7.86A.53.53,0,0,0,33.31,7.35ZM14,21H12V17h2Zm0-6H12V11h2ZM25,26H23V22h2Zm0-6H23V16h2Z"/>', solidAlerted: '<path d="M33.68,15.4H22.23a3.68,3.68,0,0,1-3.18-5.51l.72-1.25L14,5.68V9H12V5.27l-9.67,4A.52.52,0,0,0,2,9.75v20.7a.54.54,0,0,0,.74.49L12,27.12V23h2v4.53l9,4.61V28h2v3.79l8.63-2.7a.54.54,0,0,0,.37-.51V15.38ZM14,21H12V17h2Zm0-6H12V11h2ZM25,26H23V22h2Zm0-6H23V16h2Z"/>', solidBadged: '<path d="M30,13.5a7.48,7.48,0,0,1-5-1.92V14H23V10.29L14,5.68V9H12V5.27l-9.67,4A.52.52,0,0,0,2,9.75v20.7a.54.54,0,0,0,.74.49L12,27.12V23h2v4.53l9,4.61V28h2v3.79l8.63-2.7a.54.54,0,0,0,.37-.51V12.34A7.49,7.49,0,0,1,30,13.5ZM14,21H12V17h2Zm0-6H12V11h2ZM25,26H23V22h2Zm0-6H23V16h2Z"/>' })];

// node_modules/@cds/core/icon/shapes/map-marker.js
var l32 = ["map-marker", n23({ outline: '<path d="M18,6.72a5.73,5.73,0,1,0,5.73,5.73A5.73,5.73,0,0,0,18,6.72Zm0,9.46a3.73,3.73,0,1,1,3.73-3.73A3.73,3.73,0,0,1,18,16.17Z"/><path d="M18,2A11.79,11.79,0,0,0,6.22,13.73c0,4.67,2.62,8.58,4.54,11.43l.35.52a99.61,99.61,0,0,0,6.14,8l.76.89.76-.89a99.82,99.82,0,0,0,6.14-8l.35-.53c1.91-2.85,4.53-6.75,4.53-11.42A11.79,11.79,0,0,0,18,2ZM23.59,24l-.36.53c-1.72,2.58-4,5.47-5.23,6.9-1.18-1.43-3.51-4.32-5.23-6.9L12.42,24c-1.77-2.64-4.2-6.25-4.2-10.31a9.78,9.78,0,1,1,19.56,0C27.78,17.79,25.36,21.4,23.59,24Z"/>', outlineBadged: '<path d="M18,6.72a5.73,5.73,0,1,0,5.73,5.73A5.73,5.73,0,0,0,18,6.72Zm0,9.46a3.73,3.73,0,1,1,3.73-3.73A3.73,3.73,0,0,1,18,16.17Z"/><path d="M29.77,13.49a7.49,7.49,0,0,1-2-.33c0,.19,0,.38,0,.57,0,4.06-2.42,7.67-4.19,10.31l-.36.53c-1.72,2.58-4,5.47-5.23,6.9-1.18-1.43-3.51-4.32-5.23-6.9L12.42,24c-1.77-2.64-4.2-6.25-4.2-10.31A9.77,9.77,0,0,1,22.56,5.09a7.45,7.45,0,0,1,.52-2A11.75,11.75,0,0,0,6.22,13.73c0,4.67,2.62,8.58,4.54,11.43l.35.52a99.61,99.61,0,0,0,6.14,8l.76.89.76-.89a99.82,99.82,0,0,0,6.14-8l.35-.53c1.91-2.85,4.53-6.75,4.53-11.42C29.78,13.65,29.77,13.57,29.77,13.49Z"/>', solid: '<path d="M18,2A11.79,11.79,0,0,0,6.22,13.73c0,4.67,2.62,8.58,4.54,11.43l.35.52a99.61,99.61,0,0,0,6.14,8l.76.89.76-.89a99.82,99.82,0,0,0,6.14-8l.35-.53c1.91-2.85,4.53-6.75,4.53-11.42A11.79,11.79,0,0,0,18,2Zm0,17a6.56,6.56,0,1,1,6.56-6.56A6.56,6.56,0,0,1,18,19Z"/><circle cx="18" cy="12.44" r="3.73"/>', solidBadged: '<path d="M29.77,13.49A7.47,7.47,0,0,1,24.38,11a6.58,6.58,0,1,1-1.61-3,7.42,7.42,0,0,1,.31-4.84A11.75,11.75,0,0,0,6.22,13.73c0,4.67,2.62,8.58,4.54,11.43l.35.52a99.61,99.61,0,0,0,6.14,8l.76.89.76-.89a99.82,99.82,0,0,0,6.14-8l.35-.53c1.91-2.85,4.53-6.75,4.53-11.42C29.78,13.65,29.77,13.57,29.77,13.49Z"/><circle cx="18" cy="12.44" r="3.73"/>' })];

// node_modules/@cds/core/icon/shapes/on-holiday.js
var o64 = ["on-holiday", n23({ outline: '<path d="M18.08,2.34c-8.82,0-16,6.28-16,14s7.18,14,16,14A17.91,17.91,0,0,0,23,29.66l5.53,3.52a1,1,0,0,0,1.38-.3,1,1,0,0,0,.16-.54V25.61a13,13,0,0,0,4-9.27C34.08,8.62,26.9,2.34,18.08,2.34ZM28.37,24.45a1,1,0,0,0-.32.73v5.34l-4.38-2.79a1,1,0,0,0-.83-.11,16,16,0,0,1-4.76.72c-7.72,0-14-5.38-14-12s6.28-12,14-12,14,5.38,14,12A11.1,11.1,0,0,1,28.37,24.45Z"/><path d="M31.1,15.82,31,15.67,28.5,13.44a3.25,3.25,0,0,0-2.39-.84l-5.38.34-3.59-3a.81.81,0,0,0-.52-.19H13.56a.78.78,0,0,0-.69.4.77.77,0,0,0,0,.79l1.36,2.44-4.71.29,1.31,1.52,15.39-1a1.65,1.65,0,0,1,1.22.43l2.36,2.13a.11.11,0,0,1,0,.07c0,.06-.09.05-.1.06H21.82l-.35.37-5.19,5.53H14.64l2.73-5.9H8.54L7.13,14.16,6.51,13a.8.8,0,0,0-1-.2A.81.81,0,0,0,5.2,13.9l2,3.94a1.21,1.21,0,0,0,1.08.65h6.57l-1.94,4.18A1.2,1.2,0,0,0,13,23.83a1.22,1.22,0,0,0,1,.56h2.43a1.17,1.17,0,0,0,.88-.39l5.18-5.51h7.16a1.65,1.65,0,0,0,1.52-.91A1.74,1.74,0,0,0,31.1,15.82ZM14.92,11.31h1.41l2.09,1.77L16,13.23Z"/>', solid: '<path d="M18,2.5c-8.82,0-16,6.28-16,14s7.18,14,16,14a17.91,17.91,0,0,0,4.88-.68l5.53,3.52a1,1,0,0,0,1.38-.3A1,1,0,0,0,30,32.5V25.77a13,13,0,0,0,4-9.27C34,8.78,26.82,2.5,18,2.5ZM29.84,18H21.51a.42.42,0,0,0-.3.13l-5.3,5.64a.39.39,0,0,1-.29.13H13.19a.41.41,0,0,1-.37-.58l2.47-5.32H7.46a.42.42,0,0,1-.36-.22l-2.7-5H6.24a.53.53,0,0,1,.39.18l1.56,1.69a.38.38,0,0,0,.33.14l6.18-.38-2-3.55h2.89a.47.47,0,0,1,.31.11L19.63,14l6.69-.35a2.44,2.44,0,0,1,1.81.63l2.47,2.23A.92.92,0,0,1,29.84,18Z"/>' })];

// node_modules/@cds/core/icon/shapes/trailer.js
var t109 = ["trailer", n23({ outline: '<path d="M15,19.2c-3.2,0-5.8,2.6-5.8,5.8s2.6,5.8,5.8,5.8s5.8-2.6,5.8-5.8S18.2,19.2,15,19.2z M15,29.2c-2.3,0-4.2-1.9-4.2-4.2s1.9-4.2,4.2-4.2s4.2,1.9,4.2,4.2S17.3,29.2,15,29.2z"/><rect x="14" y="24" width="2" height="2"/><path d="M33,9H2v13.1c0,0,0,0,0,0C2,24.3,3.7,26,5.9,26H7v-2H5.9c-1,0-1.8-0.8-1.9-1.9V15h22v7.1c0,1-0.8,1.8-1.9,1.9H23v2h1.1c0,0,0,0,0,0c2.1,0,3.8-1.7,3.8-3.9V11h5c0.6,0,1-0.4,1-1S33.6,9,33,9z M26,13H4v-2h22V13z"/>', solid: '<path d="M33,9H2v13.1c0,0,0,0,0,0C2,24.3,3.7,26,5.9,26H7v-2H5.9c-1,0-1.8-0.8-1.9-1.9V15h22v7.1c0,1-0.8,1.8-1.9,1.9H23v2h1.1c0,0,0,0,0,0c2.1,0,3.8-1.7,3.8-3.9V11h5c0.6,0,1-0.4,1-1S33.6,9,33,9z"/><path d="M15,19.2c-3.2,0-5.8,2.6-5.8,5.8s2.6,5.8,5.8,5.8s5.8-2.6,5.8-5.8l0,0C20.8,21.8,18.2,19.2,15,19.2z M16,26h-2v-2h2V26z"/>' })];

// node_modules/@cds/core/icon/shapes/truck.js
var V21 = ["truck", n23({ outline: '<path d="M30,12H26V7a1,1,0,0,0-1-1H3A1,1,0,0,0,2,7V25a1,1,0,0,0,1,1H4V8H24V19.7a6.45,6.45,0,0,1,1.56-.2c.15,0,.29,0,.44,0V14h4a2,2,0,0,1,2,2v1H28v2h4v5H29.6a4.54,4.54,0,0,0-8.34,0H14.43a4.5,4.5,0,0,0-4.17-2.76A4.38,4.38,0,1,0,14.72,26H21a4.49,4.49,0,0,0,8.92,0H33a1,1,0,0,0,1-1V16A4,4,0,0,0,30,12ZM10.26,28a2.38,2.38,0,1,1,0-4.75,2.38,2.38,0,1,1,0,4.75Zm15.17,0a2.38,2.38,0,1,1,2.5-2.37A2.44,2.44,0,0,1,25.43,28Z"/>', solid: '<path d="M30,12H26V7a1,1,0,0,0-1-1H3A1,1,0,0,0,2,7V25a1,1,0,0,0,1,1H4V8H24V21.49A4.45,4.45,0,0,0,21.25,24H14.43a4.5,4.5,0,0,0-4.17-2.76A4.38,4.38,0,1,0,14.72,26H21a4.48,4.48,0,0,0,8.91,0H34V16A4,4,0,0,0,30,12ZM10.26,28a2.38,2.38,0,1,1,0-4.75,2.38,2.38,0,1,1,0,4.75Zm15.17,0a2.38,2.38,0,1,1,2.5-2.37A2.44,2.44,0,0,1,25.42,28ZM32,17H26V14h4a2,2,0,0,1,2,2Z"/>' })];

// node_modules/@cds/core/icon/shapes/canoe.js
var t115 = ["canoe", n23({ outline: '<path d="M7.24006 34C6.98006 34 6.73006 33.9 6.53006 33.71L2.29006 29.47C1.90006 29.08 1.90006 28.45 2.29006 28.06L4.41006 25.94C5.97006 24.38 8.51006 24.38 10.0701 25.94C11.6301 27.5 11.6301 30.04 10.0701 31.6L7.95006 33.72C7.75006 33.92 7.50006 34.01 7.24006 34.01V34ZM4.41006 28.76L7.24006 31.59L8.66006 30.18C9.44006 29.4 9.44006 28.13 8.66006 27.35C7.88006 26.57 6.61006 26.57 5.83006 27.35L4.42006 28.77L4.41006 28.76Z"/><path d="M28.76 11.23C27.81 11.23 26.91 10.9 26.18 10.28C25.37 9.58997 24.87 8.61997 24.78 7.55997C24.69 6.49997 25.03 5.45997 25.72 4.64997L27.66 2.35997C28.02 1.93997 28.65 1.88997 29.07 2.24997L33.64 6.12997C34.06 6.48997 34.11 7.11997 33.75 7.53997L31.81 9.82997C31.12 10.64 30.15 11.14 29.09 11.23C28.98 11.23 28.87 11.24 28.76 11.24V11.23ZM28.54 4.40997L27.25 5.92997C26.9 6.33997 26.74 6.84997 26.78 7.38997C26.82 7.91997 27.07 8.40997 27.48 8.74997C27.89 9.09997 28.41 9.25997 28.94 9.21997C29.47 9.17997 29.96 8.92997 30.3 8.51997L31.6 6.99997L28.55 4.40997H28.54Z"/><path d="M26.2964 8.30073L8.66113 25.936L10.0753 27.3502L27.7106 9.71495L26.2964 8.30073Z"/><path d="M16.59 22.24C17.35 23 18.35 23.41 19.42 23.41C20.49 23.41 21.49 22.99 22.25 22.24C23.01 21.49 23.42 20.48 23.42 19.41C23.42 18.34 23 17.34 22.25 16.58L20.14 14.47L18.73 15.88L20.84 17.99C21.22 18.37 21.43 18.87 21.43 19.4C21.43 19.93 21.22 20.44 20.84 20.81C20.08 21.57 18.77 21.57 18.01 20.81L15.9 18.7L14.49 20.11L16.6 22.22L16.59 22.24Z"/><path d="M11.71 20.07C6.89996 14.15 4.92996 7.20002 4.26996 4.27002C7.19996 4.93002 14.15 6.90002 20.07 11.71L21.5 10.28C13.38 3.58002 3.58996 2.08002 3.13996 2.01002C2.82996 1.96002 2.50996 2.07002 2.28996 2.29002C2.06996 2.51002 1.95996 2.83002 2.00996 3.14002C2.07996 3.59002 3.57996 13.37 10.28 21.49L11.71 20.06V20.07Z"/><path d="M23.71 12.29C23.48 12.06 23.24 11.83 23 11.6L21.58 13.02C21.82 13.24 22.06 13.46 22.3 13.7C28.58 19.98 31 28.42 31.74 31.72C28.43 30.98 20 28.56 13.72 22.28C13.48 22.04 13.27 21.8 13.04 21.56L11.62 22.98C11.84 23.22 12.07 23.46 12.31 23.69C20.73 32.11 32.38 33.9 32.87 33.97C32.92 33.97 32.97 33.98 33.01 33.98C33.27 33.98 33.53 33.88 33.72 33.69C33.94 33.47 34.05 33.15 34 32.84C33.93 32.35 32.14 20.7 23.72 12.28L23.71 12.29Z"/><path d="M13.76 13.76C13 14.52 12.59 15.52 12.59 16.59C12.59 17.32 12.8 18.01 13.16 18.62L14.67 17.11C14.62 16.94 14.59 16.77 14.59 16.59C14.59 16.06 14.8 15.55 15.18 15.18C15.56 14.8 16.06 14.59 16.59 14.59C16.77 14.59 16.94 14.62 17.11 14.67L18.62 13.16C18.01 12.8 17.32 12.59 16.59 12.59C15.52 12.59 14.52 13.01 13.76 13.76Z"/>', solid: '<path d="M7.24006 34C6.98006 34 6.73006 33.9 6.53006 33.71L2.29006 29.47C1.90006 29.08 1.90006 28.45 2.29006 28.06L4.41006 25.94C5.97006 24.38 8.51006 24.38 10.0701 25.94C11.6301 27.5 11.6301 30.04 10.0701 31.6L7.95006 33.72C7.75006 33.92 7.50006 34.01 7.24006 34.01V34Z"/><path d="M28.76 11.23C27.81 11.23 26.91 10.9 26.18 10.28C25.37 9.58997 24.87 8.61997 24.78 7.55997C24.69 6.49997 25.03 5.45997 25.72 4.64997L27.66 2.35997C28.02 1.93997 28.65 1.88997 29.07 2.24997L33.64 6.12997C34.06 6.48997 34.11 7.11997 33.75 7.53997L31.81 9.82997C31.12 10.64 30.15 11.14 29.09 11.23C28.98 11.23 28.87 11.24 28.76 11.24V11.23Z"/><path d="M26.2964 8.30073L8.66113 25.936L10.0753 27.3502L27.7106 9.71495L26.2964 8.30073Z"/><path d="M12.59 16.59C12.59 15.52 13.01 14.52 13.76 13.76C14.51 13 15.52 12.59 16.59 12.59C17.32 12.59 18.01 12.8 18.62 13.16L21.49 10.29C13.38 3.58002 3.58996 2.08002 3.13996 2.01002C2.82996 1.96002 2.50996 2.07002 2.28996 2.29002C2.06996 2.51002 1.95996 2.83002 2.00996 3.14002C2.07996 3.59002 3.57996 13.37 10.28 21.49L13.15 18.62C12.79 18.01 12.58 17.32 12.58 16.59H12.59Z"/><path d="M16.59 14.59C16.06 14.59 15.55 14.8 15.18 15.18C14.8 15.56 14.59 16.06 14.59 16.59C14.59 16.77 14.62 16.94 14.67 17.11L17.12 14.66C16.95 14.61 16.78 14.58 16.6 14.58L16.59 14.59Z"/><path d="M20.83 20.83C21.21 20.45 21.42 19.95 21.42 19.42C21.42 18.89 21.21 18.38 20.83 18.01L18.72 15.9L15.89 18.73L18 20.84C18.76 21.6 20.07 21.6 20.83 20.84V20.83Z"/><path d="M23.71 12.29C23.48 12.06 23.24 11.83 23 11.6L20.13 14.47L22.24 16.58C23 17.34 23.41 18.34 23.41 19.41C23.41 20.48 22.99 21.48 22.24 22.24C21.49 23 20.48 23.41 19.41 23.41C18.34 23.41 17.34 22.99 16.58 22.24L14.47 20.13L11.6 23C11.82 23.24 12.05 23.48 12.29 23.71C20.71 32.13 32.36 33.92 32.85 33.99C32.9 33.99 32.95 34 32.99 34C33.25 34 33.51 33.9 33.7 33.71C33.92 33.49 34.03 33.17 33.98 32.86C33.91 32.37 32.12 20.72 23.7 12.3L23.71 12.29Z"/>' })];

// node_modules/@cds/core/icon/shapes/castle.js
var H28 = ["castle", n23({ outline: '<path d="M33 14H3C2.45 14 2 13.55 2 13V3C2 2.45 2.45 2 3 2H9C9.55 2 10 2.45 10 3V6H14V3C14 2.45 14.45 2 15 2H21C21.55 2 22 2.45 22 3V6H26V3C26 2.45 26.45 2 27 2H33C33.55 2 34 2.45 34 3V13C34 13.55 33.55 14 33 14ZM4 12H32V4H28V7C28 7.55 27.55 8 27 8H21C20.45 8 20 7.55 20 7V4H16V7C16 7.55 15.55 8 15 8H9C8.45 8 8 7.55 8 7V4H4V12Z"/><path d="M29 34H7C6.45 34 6 33.55 6 33V16H8V32H28V16H30V33C30 33.55 29.55 34 29 34Z"/><path d="M21 28H15C14.45 28 14 27.55 14 27V22C14 19.79 15.79 18 18 18C20.21 18 22 19.79 22 22V27C22 27.55 21.55 28 21 28ZM16 26H20V22C20 20.9 19.1 20 18 20C16.9 20 16 20.9 16 22V26Z"/>', solid: '<path d="M33 14H3C2.45 14 2 13.55 2 13V3C2 2.45 2.45 2 3 2H9C9.55 2 10 2.45 10 3V6H14V3C14 2.45 14.45 2 15 2H21C21.55 2 22 2.45 22 3V6H26V3C26 2.45 26.45 2 27 2H33C33.55 2 34 2.45 34 3V13C34 13.55 33.55 14 33 14Z"/><path d="M28 16H6V33C6 33.55 6.45 34 7 34H29C29.55 34 30 33.55 30 33V16H28ZM22 27C22 27.55 21.55 28 21 28H15C14.45 28 14 27.55 14 27V22C14 19.79 15.79 18 18 18C20.21 18 22 19.79 22 22V27Z"/><path d="M18 20C16.9 20 16 20.9 16 22V26H20V22C20 20.9 19.1 20 18 20Z"/>' })];

// node_modules/@cds/core/icon/shapes/gym.js
var t116 = ["gym", n23({ outline: '<path d="M9 26C7.35 26 6 24.65 6 23V13C6 11.35 7.35 10 9 10C10.65 10 12 11.35 12 13V23C12 24.65 10.65 26 9 26ZM9 12C8.45 12 8 12.45 8 13V23C8 23.55 8.45 24 9 24C9.55 24 10 23.55 10 23V13C10 12.45 9.55 12 9 12Z"/><path d="M5 23C3.35 23 2 21.65 2 20V16C2 14.35 3.35 13 5 13C6.65 13 8 14.35 8 16V20C8 21.65 6.65 23 5 23ZM5 15C4.45 15 4 15.45 4 16V20C4 20.55 4.45 21 5 21C5.55 21 6 20.55 6 20V16C6 15.45 5.55 15 5 15Z"/><path d="M27 26C25.35 26 24 24.65 24 23V13C24 11.35 25.35 10 27 10C28.65 10 30 11.35 30 13V23C30 24.65 28.65 26 27 26ZM27 12C26.45 12 26 12.45 26 13V23C26 23.55 26.45 24 27 24C27.55 24 28 23.55 28 23V13C28 12.45 27.55 12 27 12Z"/><path d="M31 23C29.35 23 28 21.65 28 20V16C28 14.35 29.35 13 31 13C32.65 13 34 14.35 34 16V20C34 21.65 32.65 23 31 23ZM31 15C30.45 15 30 15.45 30 16V20C30 20.55 30.45 21 31 21C31.55 21 32 20.55 32 20V16C32 15.45 31.55 15 31 15Z"/><path d="M25 17H11V19H25V17Z"/>', solid: '<path d="M9 26C7.35 26 6 24.65 6 23V13C6 11.35 7.35 10 9 10C10.65 10 12 11.35 12 13V23C12 24.65 10.65 26 9 26Z"/><path d="M5 23C3.35 23 2 21.65 2 20V16C2 14.35 3.35 13 5 13C6.65 13 8 14.35 8 16V20C8 21.65 6.65 23 5 23Z"/><path d="M27 26C25.35 26 24 24.65 24 23V13C24 11.35 25.35 10 27 10C28.65 10 30 11.35 30 13V23C30 24.65 28.65 26 27 26Z"/><path d="M31 23C29.35 23 28 21.65 28 20V16C28 14.35 29.35 13 31 13C32.65 13 34 14.35 34 16V20C34 21.65 32.65 23 31 23Z"/><path d="M25 17H11V19H25V17Z"/>' })];

// node_modules/@cds/core/icon/shapes/hotel.js
var V23 = ["hotel", n23({ outline: '<path d="M28 34H26V13H10V34H8V12C8 11.45 8.45 11 9 11H27C27.55 11 28 11.45 28 12V34Z"/><path d="M6.89 1.58997L8.1 4.02997L10.79 4.41997L8.84 6.31997L9.3 8.99997L6.89 7.72997L4.49 8.99997L4.95 6.31997L3 4.41997L5.69 4.02997L6.89 1.58997Z"/><path d="M17.89 1.58997L19.1 4.02997L21.79 4.41997L19.84 6.31997L20.3 8.99997L17.89 7.72997L15.49 8.99997L15.95 6.31997L14 4.41997L16.69 4.02997L17.89 1.58997Z"/><path d="M28.89 1.58997L30.1 4.02997L32.79 4.41997L30.84 6.31997L31.3 8.99997L28.89 7.72997L26.49 8.99997L26.95 6.31997L25 4.41997L27.69 4.02997L28.89 1.58997Z"/><path d="M4 34H2V18C2 17.45 2.45 17 3 17H6V19H4V34Z"/><path d="M34 34H32V19H30V17H33C33.55 17 34 17.45 34 18V34Z"/><path d="M15 16H13V18H15V16Z"/><path d="M19 16H17V18H19V16Z"/><path d="M23 16H21V18H23V16Z"/><path d="M15 20H13V22H15V20Z"/><path d="M19 20H17V22H19V20Z"/><path d="M23 20H21V22H23V20Z"/><path d="M15 24H13V26H15V24Z"/><path d="M19 24H17V26H19V24Z"/><path d="M23 24H21V26H23V24Z"/>', solid: '<path d="M6.89 1.58997L8.1 4.02997L10.79 4.41997L8.84 6.31997L9.3 8.99997L6.89 7.72997L4.49 8.99997L4.95 6.31997L3 4.41997L5.69 4.02997L6.89 1.58997Z"/><path d="M17.89 1.58997L19.1 4.02997L21.79 4.41997L19.84 6.31997L20.3 8.99997L17.89 7.72997L15.49 8.99997L15.95 6.31997L14 4.41997L16.69 4.02997L17.89 1.58997Z"/><path d="M28.89 1.58997L30.1 4.02997L32.79 4.41997L30.84 6.31997L31.3 8.99997L28.89 7.72997L26.49 8.99997L26.95 6.31997L25 4.41997L27.69 4.02997L28.89 1.58997Z"/><path d="M4 34H2V18C2 17.45 2.45 17 3 17H6V19H4V34Z"/><path d="M34 34H32V19H30V17H33C33.55 17 34 17.45 34 18V34Z"/><path d="M27 11H9C8.45 11 8 11.45 8 12V34H28V12C28 11.45 27.55 11 27 11ZM15 26H13V24H15V26ZM15 22H13V20H15V22ZM15 18H13V16H15V18ZM19 26H17V24H19V26ZM19 22H17V20H19V22ZM19 18H17V16H19V18ZM23 26H21V24H23V26ZM23 22H21V20H23V22ZM23 18H21V16H23V18Z"/>' })];

// node_modules/@cds/core/icon/shapes/no-smoking.js
var t117 = ["noSmoking", n23({ outline: '<path d="M30 15C29.45 15 29 14.55 29 14C29 12.3 29.66 11.39 30.19 10.66C30.66 10.01 31 9.55 31 8.5C31 7.45 30.66 6.98 30.19 6.34C29.66 5.61 29 4.7 29 3C29 2.45 29.45 2 30 2C30.55 2 31 2.45 31 3C31 4.05 31.34 4.52 31.81 5.16C32.34 5.89 33 6.8 33 8.5C33 10.2 32.34 11.11 31.81 11.84C31.34 12.49 31 12.95 31 14C31 14.55 30.55 15 30 15Z"/><path d="M8 23C7.45 23 7 22.55 7 22V18C7 17.45 7.45 17 8 17C8.55 17 9 17.45 9 18V22C9 22.55 8.55 23 8 23Z"/><path d="M33.0001 33.9999C32.7401 33.9999 32.4901 33.8999 32.2901 33.7099L2.29006 3.70995C1.90006 3.31995 1.90006 2.68995 2.29006 2.29995C2.68006 1.90995 3.31006 1.90995 3.70006 2.29995L33.7001 32.2999C34.0901 32.6899 34.0901 33.3199 33.7001 33.7099C33.5001 33.9099 33.2501 33.9999 32.9901 33.9999H33.0001Z"/><path d="M23.13 19H30V21H25.13L27.13 23H31C31.55 23 32 22.55 32 22V18C32 17.45 31.55 17 31 17H21.13L23.13 19Z"/><path d="M22.3 21H4V19H20.3L18.3 17H3C2.45 17 2 17.45 2 18V22C2 22.55 2.45 23 3 23H24.3L22.3 21Z"/>', solid: '<path d="M30 15C29.45 15 29 14.55 29 14C29 12.3 29.66 11.39 30.19 10.66C30.66 10.01 31 9.55 31 8.5C31 7.45 30.66 6.98 30.19 6.34C29.66 5.61 29 4.7 29 3C29 2.45 29.45 2 30 2C30.55 2 31 2.45 31 3C31 4.05 31.34 4.52 31.81 5.16C32.34 5.89 33 6.8 33 8.5C33 10.2 32.34 11.11 31.81 11.84C31.34 12.49 31 12.95 31 14C31 14.55 30.55 15 30 15Z"/><path d="M33.0001 33.9999C32.7401 33.9999 32.4901 33.8999 32.2901 33.7099L2.29006 3.70995C1.90006 3.31995 1.90006 2.68995 2.29006 2.29995C2.68006 1.90995 3.31006 1.90995 3.70006 2.29995L33.7001 32.2999C34.0901 32.6899 34.0901 33.3199 33.7001 33.7099C33.5001 33.9099 33.2501 33.9999 32.9901 33.9999H33.0001Z"/><path d="M27.13 23H31C31.55 23 32 22.55 32 22V18C32 17.45 31.55 17 31 17H21.13L27.13 23Z"/><path d="M22.3 21L20.3 19L18.3 17H3C2.45 17 2 17.45 2 18V22C2 22.55 2.45 23 3 23H24.3L22.3 21ZM4 19H7V21H4V19Z"/>' })];

// node_modules/@cds/core/icon/shapes/palm-tree.js
var t118 = ["palmTree", n23({ outline: '<path d="M28.13 34.14C26.53 34.14 25.68 33.46 25 32.92C24.43 32.47 24.02 32.14 23.12 32.14C22.22 32.14 21.83 32.45 21.24 32.92C20.56 33.46 19.72 34.14 18.11 34.14C16.5 34.14 15.67 33.46 14.99 32.92C14.4 32.45 14.02 32.14 13.12 32.14C12.22 32.14 11.83 32.45 11.24 32.92C10.56 33.46 9.72 34.14 8.12 34.14C6.52 34.14 5.67 33.46 5 32.92C4.41 32.45 4.03 32.14 3.13 32.14C2.58 32.14 2.13 31.69 2.13 31.14C2.13 30.59 2.58 30.14 3.13 30.14C4.73 30.14 5.57 30.82 6.25 31.36C6.84 31.83 7.23 32.14 8.12 32.14C9.01 32.14 9.41 31.83 9.99 31.36C10.67 30.82 11.51 30.14 13.11 30.14C14.71 30.14 15.55 30.82 16.23 31.36C16.82 31.83 17.2 32.14 18.1 32.14C19 32.14 19.39 31.83 19.98 31.36C20.66 30.82 21.5 30.14 23.1 30.14C24.7 30.14 25.55 30.82 26.23 31.36C26.8 31.81 27.21 32.14 28.11 32.14C29.01 32.14 29.42 31.81 29.99 31.36C30.67 30.82 31.51 30.14 33.12 30.14C33.67 30.14 34.12 30.59 34.12 31.14C34.12 31.69 33.67 32.14 33.12 32.14C32.22 32.14 31.81 32.47 31.24 32.92C30.56 33.46 29.72 34.14 28.11 34.14H28.13Z"/><path d="M17.08 30C16.82 30 16.57 29.9 16.37 29.71C15.98 29.32 15.98 28.69 16.37 28.3C20.94 23.72 28.07 22.74 33.7 25.92C34.18 26.19 34.35 26.8 34.08 27.28C33.81 27.76 33.2 27.93 32.72 27.66C27.87 24.92 21.72 25.77 17.78 29.71C17.58 29.91 17.33 30 17.07 30H17.08Z"/><path d="M20.13 14.58C20.01 14.58 19.88 14.56 19.75 14.51C19.24 14.3 18.99 13.72 19.2 13.21C20.33 10.41 23.02 8.59998 26.04 8.59998C29.06 8.59998 31.75 10.41 32.88 13.21C33 13.52 32.97 13.87 32.78 14.14C32.59 14.42 32.28 14.58 31.95 14.58H26.21C25.66 14.58 25.21 14.13 25.21 13.58C25.21 13.03 25.66 12.58 26.21 12.58H30.22C29.22 11.34 27.7 10.59 26.04 10.59C23.84 10.59 21.88 11.91 21.05 13.95C20.89 14.34 20.52 14.58 20.12 14.58H20.13Z"/><path d="M20.65 13.22C20.59 13.18 20.52 13.16 20.45 13.14C20.45 13.14 20.46 13.13 20.47 13.13C20.15 13.1 19.82 13.05 19.51 12.97C19.61 13.04 19.71 13.1 19.82 13.14C19.72 13.17 19.63 13.22 19.54 13.28C19.21 13.52 19.07 13.94 19.17 14.33C19.18 14.39 20.55 19.92 19.25 26.42C19.91 25.98 20.67 25.67 21.45 25.45C21.96 22.1 21.85 19.09 21.63 16.98C22.73 18.53 23.9 21.07 24.1 24.94C24.76 24.86 25.43 24.81 26.1 24.81C25.65 16.34 20.87 13.35 20.66 13.22H20.65Z"/><path d="M9.18005 19.08C8.98005 19.08 8.78005 19.02 8.61005 18.9C8.34005 18.71 8.18005 18.4 8.18005 18.06C8.24005 15.04 10.0901 12.38 12.9101 11.3C15.7301 10.22 18.8801 10.95 20.9501 13.15C21.3301 13.55 21.3101 14.19 20.9001 14.56C20.5001 14.94 19.8601 14.92 19.4901 14.51C17.9901 12.9 15.6801 12.37 13.6301 13.16C12.0801 13.75 10.9301 15 10.4401 16.51L14.3701 15C14.8801 14.8 15.4601 15.06 15.6601 15.58C15.8601 16.1 15.6001 16.67 15.0801 16.87L9.53005 19C9.41005 19.04 9.29005 19.07 9.17005 19.07L9.18005 19.08Z"/><path d="M19.8 14.08C19.68 14.08 19.56 14.06 19.44 14.01C18.92 13.81 18.66 13.24 18.86 12.72C19.64 10.66 19.11 8.35998 17.5 6.85998C16.29 5.72998 14.67 5.23998 13.09 5.46998L15.78 7.96998C16.18 8.34998 16.21 8.97998 15.83 9.37998C15.45 9.78998 14.82 9.80998 14.42 9.42998L10.46 5.74998C10.22 5.51998 10.1 5.18998 10.15 4.85998C10.2 4.52998 10.41 4.24998 10.71 4.10998C13.45 2.82998 16.65 3.32998 18.86 5.38998C21.07 7.44998 21.81 10.6 20.73 13.42C20.58 13.82 20.2 14.06 19.8 14.06V14.08Z"/>', solid: '<path d="M28.13 34.14C26.53 34.14 25.68 33.46 25 32.92C24.43 32.47 24.02 32.14 23.12 32.14C22.22 32.14 21.83 32.45 21.24 32.92C20.56 33.46 19.72 34.14 18.11 34.14C16.5 34.14 15.67 33.46 14.99 32.92C14.4 32.45 14.02 32.14 13.12 32.14C12.22 32.14 11.83 32.45 11.24 32.92C10.56 33.46 9.72 34.14 8.12 34.14C6.52 34.14 5.67 33.46 5 32.92C4.41 32.45 4.03 32.14 3.13 32.14C2.58 32.14 2.13 31.69 2.13 31.14C2.13 30.59 2.58 30.14 3.13 30.14C4.73 30.14 5.57 30.82 6.25 31.36C6.84 31.83 7.23 32.14 8.12 32.14C9.01 32.14 9.41 31.83 9.99 31.36C10.67 30.82 11.51 30.14 13.11 30.14C14.71 30.14 15.55 30.82 16.23 31.36C16.82 31.83 17.2 32.14 18.1 32.14C19 32.14 19.39 31.83 19.98 31.36C20.66 30.82 21.5 30.14 23.1 30.14C24.7 30.14 25.55 30.82 26.23 31.36C26.8 31.81 27.21 32.14 28.11 32.14C29.01 32.14 29.42 31.81 29.99 31.36C30.67 30.82 31.51 30.14 33.12 30.14C33.67 30.14 34.12 30.59 34.12 31.14C34.12 31.69 33.67 32.14 33.12 32.14C32.22 32.14 31.81 32.47 31.24 32.92C30.56 33.46 29.72 34.14 28.11 34.14H28.13Z"/><path d="M17.08 30C16.82 30 16.57 29.9 16.37 29.71C15.98 29.32 15.98 28.69 16.37 28.3C20.94 23.72 28.07 22.74 33.7 25.92C34.18 26.19 34.35 26.8 34.08 27.28C33.81 27.76 33.2 27.93 32.72 27.66C27.87 24.92 21.72 25.77 17.78 29.71C17.58 29.91 17.33 30 17.07 30H17.08Z"/><path d="M20.13 14.58C20.01 14.58 19.88 14.56 19.75 14.51C19.24 14.3 18.99 13.72 19.2 13.21C20.33 10.41 23.02 8.59998 26.04 8.59998C29.06 8.59998 31.75 10.41 32.88 13.21C33 13.52 32.97 13.87 32.78 14.14C32.59 14.42 32.28 14.58 31.95 14.58H26.21C25.66 14.58 25.21 14.13 25.21 13.58C25.21 13.03 25.66 12.58 26.21 12.58H30.22C29.22 11.34 27.7 10.59 26.04 10.59C23.84 10.59 21.88 11.91 21.05 13.95C20.89 14.34 20.52 14.58 20.12 14.58H20.13Z"/><path d="M24.09 24.94C24.75 24.86 25.42 24.81 26.09 24.81C25.64 16.34 20.86 13.35 20.65 13.22C20.59 13.18 20.52 13.16 20.45 13.14C20.45 13.14 20.46 13.13 20.47 13.13C20.15 13.1 19.82 13.05 19.51 12.97C19.61 13.04 19.71 13.1 19.82 13.14C19.72 13.17 19.63 13.22 19.54 13.28C19.21 13.52 19.07 13.94 19.17 14.33C19.18 14.39 20.55 19.92 19.25 26.42C19.91 25.98 20.67 25.67 21.45 25.45"/><path d="M9.18005 19.08C8.98005 19.08 8.78005 19.02 8.61005 18.9C8.34005 18.71 8.18005 18.4 8.18005 18.06C8.24005 15.04 10.0901 12.38 12.9101 11.3C15.7301 10.22 18.8801 10.95 20.9501 13.15C21.3301 13.55 21.3101 14.19 20.9001 14.56C20.5001 14.94 19.8601 14.92 19.4901 14.51C17.9901 12.9 15.6801 12.37 13.6301 13.16C12.0801 13.75 10.9301 15 10.4401 16.51L14.3701 15C14.8901 14.8 15.4601 15.06 15.6601 15.58C15.8601 16.1 15.6001 16.67 15.0801 16.87L9.53005 19C9.41005 19.04 9.29005 19.07 9.17005 19.07L9.18005 19.08Z"/><path d="M19.8 14.08C19.68 14.08 19.56 14.06 19.44 14.01C18.92 13.81 18.66 13.24 18.86 12.72C19.64 10.66 19.11 8.35998 17.5 6.85998C16.29 5.72998 14.67 5.23998 13.09 5.46998L15.78 7.96998C16.18 8.34998 16.21 8.97998 15.83 9.37998C15.45 9.78998 14.82 9.80998 14.42 9.42998L10.46 5.74998C10.22 5.51998 10.1 5.18998 10.15 4.85998C10.2 4.52998 10.41 4.24998 10.71 4.10998C13.45 2.82998 16.65 3.32998 18.86 5.38998C21.07 7.44998 21.81 10.6 20.73 13.42C20.58 13.82 20.2 14.06 19.8 14.06V14.08Z"/>' })];

// node_modules/@cds/core/icon/shapes/passport.js
var t119 = ["passport", n23({ outline: '<path d="M29 34H7C6.45 34 6 33.55 6 33V6C6 5.45 6.45 5 7 5H29C29.55 5 30 5.45 30 6V33C30 33.55 29.55 34 29 34ZM8 32H28V7H8V32Z"/><path d="M7.00001 7.00001C6.51001 7.00001 6.09001 6.64001 6.01001 6.15001C5.93001 5.60001 6.30001 5.09001 6.85001 5.01001L26.85 2.01001C27.41 1.93001 27.91 2.30001 27.99 2.85001C28.07 3.40001 27.7 3.91001 27.15 3.99001L7.15001 6.99001C7.10001 6.99001 7.05001 7.00001 7.00001 7.00001Z"/><path d="M18 27.9C13.64 27.9 10.1 24.36 10.1 20C10.1 15.64 13.64 12.1 18 12.1C22.36 12.1 25.9 15.64 25.9 20C25.9 24.36 22.36 27.9 18 27.9ZM18 13.9C14.64 13.9 11.9 16.64 11.9 20C11.9 23.36 14.64 26.1 18 26.1C21.36 26.1 24.1 23.36 24.1 20C24.1 16.64 21.36 13.9 18 13.9Z"/><path d="M18 27.9C17.75 27.9 17.52 27.8 17.35 27.62C17.22 27.48 14.1 24.18 14.1 20C14.1 15.82 17.22 12.52 17.35 12.38C17.69 12.03 18.31 12.03 18.65 12.38C18.78 12.52 21.9 15.82 21.9 20C21.9 24.18 18.78 27.48 18.65 27.62C18.48 27.8 18.24 27.9 18 27.9ZM18 14.42C17.19 15.52 15.9 17.63 15.9 20C15.9 22.37 17.19 24.48 18 25.58C18.81 24.48 20.1 22.37 20.1 20C20.1 17.63 18.81 15.52 18 14.42Z"/><path d="M25 17.1H11V18.9H25V17.1Z"/><path d="M25 21.1H11V22.9H25V21.1Z"/>', solid: '<path d="M7.00001 7.00001C6.51001 7.00001 6.09001 6.64001 6.01001 6.15001C5.93001 5.60001 6.30001 5.09001 6.85001 5.01001L26.85 2.01001C27.41 1.93001 27.91 2.30001 27.99 2.85001C28.07 3.40001 27.7 3.91001 27.15 3.99001L7.15001 6.99001C7.10001 6.99001 7.05001 7.00001 7.00001 7.00001Z"/><path d="M18 25.58C18.46 24.96 19.06 24.02 19.5 22.9H16.5C16.94 24.02 17.54 24.96 18 25.58Z"/><path d="M12.64 22.9C13.35 24.2 14.52 25.21 15.92 25.73C15.44 24.96 14.94 24 14.58 22.9H12.64Z"/><path d="M23.36 17.1C22.65 15.8 21.48 14.79 20.08 14.27C20.56 15.04 21.06 16 21.42 17.1H23.36Z"/><path d="M18 14.42C17.54 15.04 16.94 15.98 16.5 17.1H19.5C19.06 15.98 18.46 15.04 18 14.42Z"/><path d="M15.92 14.27C14.51 14.78 13.34 15.79 12.64 17.1H14.58C14.94 16 15.44 15.04 15.92 14.27Z"/><path d="M14.1 20C14.1 19.62 14.13 19.26 14.18 18.9H12.01C11.94 19.26 11.91 19.62 11.91 20C11.91 20.38 11.95 20.74 12.01 21.1H14.18C14.13 20.74 14.1 20.38 14.1 20Z"/><path d="M29 5H7C6.45 5 6 5.45 6 6V33C6 33.55 6.45 34 7 34H29C29.55 34 30 33.55 30 33V6C30 5.45 29.55 5 29 5ZM18 27.9C13.64 27.9 10.1 24.36 10.1 20C10.1 15.64 13.64 12.1 18 12.1C22.36 12.1 25.9 15.64 25.9 20C25.9 24.36 22.36 27.9 18 27.9Z"/><path d="M21.8999 20C21.8999 20.38 21.8699 20.74 21.8199 21.1H23.9899C24.0599 20.74 24.0899 20.38 24.0899 20C24.0899 19.62 24.0499 19.26 23.9899 18.9H21.8199C21.8699 19.26 21.8999 19.62 21.8999 20Z"/><path d="M20 18.9H16C15.94 19.26 15.9 19.62 15.9 20C15.9 20.38 15.94 20.74 16 21.1H20C20.06 20.74 20.1 20.38 20.1 20C20.1 19.62 20.06 19.26 20 18.9Z"/><path d="M20.08 25.73C21.49 25.22 22.66 24.21 23.36 22.9H21.42C21.06 24 20.56 24.96 20.08 25.73Z"/>' })];

// node_modules/@cds/core/icon/shapes/plane-ticket.js
var H29 = ["planeTicket", n23({ outline: '<path d="M33 32H3C2.45 32 2 31.55 2 31V12C2 11.45 2.45 11 3 11H33C33.55 11 34 11.45 34 12V31C34 31.55 33.55 32 33 32ZM4 30H32V13H4V30Z"/><path d="M30 30H28V29H30V30ZM30 27H28V25H30V27ZM30 23H28V21H30V23ZM30 19H28V17H30V19ZM30 15H28V13H30V15Z"/><path d="M14.0001 19.9C13.7101 19.9 13.4201 19.76 13.2501 19.5L11.2501 16.5C11.0701 16.22 11.0501 15.87 11.2101 15.58C11.3701 15.29 11.6701 15.1 12.0001 15.1H15.0001C15.2401 15.1 15.4701 15.19 15.6401 15.36L18.6401 18.36C18.9901 18.71 18.9901 19.28 18.6401 19.63C18.2901 19.98 17.7201 19.98 17.3701 19.63L14.6301 16.89H13.6801L14.7501 18.49C15.0301 18.9 14.9101 19.46 14.5001 19.74C14.3501 19.84 14.1701 19.89 14.0001 19.89V19.9Z"/><path d="M26.0899 22.66L23.7499 19.4C23.1599 18.58 22.1699 18.11 21.1599 18.2L10.2399 19.08L11.0999 20.82L21.3099 19.99C21.6899 19.95 22.0699 20.13 22.2899 20.45L23.6099 22.29H18.6799C18.4399 22.29 18.2099 22.38 18.0399 22.55L14.4899 26.1H13.4599L14.7199 23.58C14.8599 23.3 14.8399 22.97 14.6799 22.7C14.5199 22.43 14.2299 22.27 13.9099 22.27H9.55994L7.89994 18.95C7.67994 18.51 7.13994 18.32 6.68994 18.55C6.24994 18.77 6.06994 19.31 6.28994 19.76L8.19994 23.58C8.34994 23.89 8.65994 24.08 8.99994 24.08H12.4499L11.1899 26.6C11.0499 26.88 11.0699 27.21 11.2299 27.48C11.3899 27.74 11.6799 27.91 11.9999 27.91H14.8599C15.0999 27.91 15.3299 27.82 15.4999 27.65L19.0499 24.09H25.3599C25.6999 24.09 26.0099 23.9 26.1599 23.6C26.3099 23.3 26.2899 22.94 26.0899 22.66Z"/><path d="M2.17999 13C2.80999 12.69 3.57999 12.71 4.25999 12.97L4.23999 12.92L27.27 6.08002L28.29 9.51002H30.38L28.91 4.55002C28.78 4.12002 28.38 3.83002 27.95 3.83002C27.86 3.83002 27.76 3.84002 27.67 3.87002L2.71999 11.28C2.46999 11.36 2.24999 11.53 2.12999 11.76C1.99999 11.99 1.96999 12.27 2.04999 12.52L2.18999 12.99L2.17999 13Z"/>', solid: '<path d="M33 11H3C2.45 11 2 11.45 2 12V31C2 31.55 2.45 32 3 32H33C33.55 32 34 31.55 34 31V12C34 11.45 33.55 11 33 11ZM26.16 23.59C26.01 23.89 25.7 24.08 25.36 24.08H19.05L15.5 27.64C15.33 27.81 15.1 27.9 14.86 27.9H12C11.69 27.9 11.4 27.74 11.23 27.47C11.07 27.2 11.05 26.87 11.19 26.59L12.45 24.07H9C8.66 24.07 8.35 23.88 8.2 23.57L6.29 19.75C6.07 19.31 6.25 18.77 6.69 18.54C7.14 18.32 7.68 18.5 7.9 18.94L9.56 22.26H13.91C14.22 22.26 14.51 22.42 14.68 22.69C14.85 22.96 14.86 23.29 14.72 23.57L13.46 26.09H14.49L18.04 22.54C18.21 22.37 18.44 22.28 18.68 22.28H23.61L22.29 20.44C22.07 20.13 21.69 19.95 21.31 19.98L11.1 20.81L10.24 19.07L12.83 18.86L11.25 16.49C11.07 16.21 11.05 15.86 11.21 15.57C11.37 15.28 11.67 15.09 12 15.09H15C15.24 15.09 15.47 15.18 15.64 15.35L18.64 18.35C18.64 18.35 18.65 18.37 18.66 18.38L21.17 18.18C22.18 18.09 23.17 18.56 23.76 19.38L26.1 22.64C26.3 22.91 26.32 23.28 26.17 23.58L26.16 23.59ZM30 30H28V29H30V30ZM30 27H28V25H30V27ZM30 23H28V21H30V23ZM30 19H28V17H30V19ZM30 15H28V13H30V15Z"/><path d="M13.68 16.9L14.75 18.5C14.79 18.56 14.81 18.64 14.83 18.71L16.31 18.59L14.62 16.9H13.67H13.68Z"/><path d="M2.17999 13C2.80999 12.69 3.57999 12.71 4.25999 12.97L4.23999 12.92L27.27 6.08002L28.29 9.51002H30.38L28.91 4.55002C28.78 4.12002 28.38 3.83002 27.95 3.83002C27.86 3.83002 27.76 3.84002 27.67 3.87002L2.71999 11.28C2.46999 11.36 2.24999 11.53 2.12999 11.76C1.99999 11.99 1.96999 12.27 2.04999 12.52L2.18999 12.99L2.17999 13Z"/>' })];

// node_modules/@cds/core/icon/shapes/pool.js
var t120 = ["pool", n23({ outline: '<path d="M34 32C32.33 32 31.45 31.33 30.73 30.8C30.11 30.34 29.66 30 28.66 30C27.66 30 27.21 30.34 26.6 30.8C25.89 31.34 25 32 23.33 32C21.66 32 20.78 31.33 20.06 30.8C19.44 30.34 18.99 30 18 30C17.01 30 16.55 30.34 15.93 30.8C15.22 31.34 14.33 32 12.66 32C10.99 32 10.1 31.33 9.38998 30.8C8.76998 30.34 8.31998 30 7.31998 30C6.31998 30 5.86998 30.34 5.24998 30.8C4.53998 31.34 3.64998 32 1.97998 32V30C2.97998 30 3.42998 29.66 4.04998 29.2C4.75998 28.67 5.64998 28 7.31998 28C8.98998 28 9.87998 28.67 10.59 29.2C11.21 29.66 11.66 30 12.66 30C13.66 30 14.11 29.66 14.73 29.2C15.44 28.66 16.33 28 18 28C19.67 28 20.55 28.67 21.26 29.2C21.88 29.66 22.33 30 23.32 30C24.31 30 24.77 29.66 25.39 29.2C26.1 28.66 26.99 28 28.66 28C30.33 28 31.21 28.67 31.93 29.2C32.55 29.66 33 30 33.99 30V32H34Z"/><path d="M34 27C32.33 27 31.45 26.33 30.73 25.8C30.11 25.34 29.66 25 28.66 25C27.66 25 27.21 25.34 26.6 25.8C25.89 26.34 25 27 23.33 27C21.66 27 20.78 26.33 20.06 25.8C19.44 25.34 18.99 25 18 25C17.01 25 16.55 25.34 15.93 25.8C15.22 26.34 14.33 27 12.66 27C10.99 27 10.1 26.33 9.38998 25.8C8.76998 25.34 8.31998 25 7.31998 25C6.31998 25 5.86998 25.34 5.24998 25.8C4.53998 26.34 3.64998 27 1.97998 27V25C2.97998 25 3.42998 24.66 4.04998 24.2C4.75998 23.67 5.64998 23 7.31998 23C8.98998 23 9.87998 23.67 10.59 24.2C11.21 24.66 11.66 25 12.66 25C13.66 25 14.11 24.66 14.73 24.2C15.44 23.66 16.33 23 18 23C19.67 23 20.55 23.67 21.26 24.2C21.88 24.66 22.33 25 23.32 25C24.31 25 24.77 24.66 25.39 24.2C26.1 23.66 26.99 23 28.66 23C30.33 23 31.21 23.67 31.93 24.2C32.55 24.66 33 25 33.99 25V27H34Z"/><path d="M13 22C12.45 22 12 21.55 12 21V10C12 6.69 14.69 4 18 4C18.55 4 19 4.45 19 5C19 5.55 18.55 6 18 6C15.79 6 14 7.79 14 10V21C14 21.55 13.55 22 13 22Z"/><path d="M22 22C21.45 22 21 21.55 21 21V10C21 6.69 23.69 4 27 4C27.55 4 28 4.45 28 5C28 5.55 27.55 6 27 6C24.79 6 23 7.79 23 10V21C23 21.55 22.55 22 22 22Z"/><path d="M22 11H13C12.45 11 12 10.55 12 10C12 9.45 12.45 9 13 9H22C22.55 9 23 9.45 23 10C23 10.55 22.55 11 22 11Z"/><path d="M22 15H13C12.45 15 12 14.55 12 14C12 13.45 12.45 13 13 13H22C22.55 13 23 13.45 23 14C23 14.55 22.55 15 22 15Z"/><path d="M22 19H13C12.45 19 12 18.55 12 18C12 17.45 12.45 17 13 17H22C22.55 17 23 17.45 23 18C23 18.55 22.55 19 22 19Z"/>', solid: '<path d="M34 32C32.33 32 31.45 31.33 30.73 30.8C30.11 30.34 29.66 30 28.66 30C27.66 30 27.21 30.34 26.6 30.8C25.89 31.34 25 32 23.33 32C21.66 32 20.78 31.33 20.06 30.8C19.44 30.34 18.99 30 18 30C17.01 30 16.55 30.34 15.93 30.8C15.22 31.34 14.33 32 12.66 32C10.99 32 10.1 31.33 9.38998 30.8C8.76998 30.34 8.31998 30 7.31998 30C6.31998 30 5.86998 30.34 5.24998 30.8C4.53998 31.34 3.64998 32 1.97998 32V30C2.97998 30 3.42998 29.66 4.04998 29.2C4.75998 28.67 5.64998 28 7.31998 28C8.98998 28 9.87998 28.67 10.59 29.2C11.21 29.66 11.66 30 12.66 30C13.66 30 14.11 29.66 14.73 29.2C15.44 28.66 16.33 28 18 28C19.67 28 20.55 28.67 21.26 29.2C21.88 29.66 22.33 30 23.32 30C24.31 30 24.77 29.66 25.39 29.2C26.1 28.66 26.99 28 28.66 28C30.33 28 31.21 28.67 31.93 29.2C32.55 29.66 33 30 33.99 30V32H34Z"/><path d="M34 31C32.33 31 31.45 30.33 30.73 29.8C30.11 29.34 29.66 29 28.66 29C27.66 29 27.21 29.34 26.6 29.8C25.89 30.34 25 31 23.33 31C21.66 31 20.78 30.33 20.06 29.8C19.44 29.34 18.99 29 18 29C17.01 29 16.55 29.34 15.93 29.8C15.22 30.34 14.33 31 12.66 31C10.99 31 10.1 30.33 9.38998 29.8C8.76998 29.34 8.31998 29 7.31998 29C6.31998 29 5.86998 29.34 5.24998 29.8C4.53998 30.34 3.64998 31 1.97998 31V25C2.97998 25 3.42998 24.66 4.04998 24.2C4.75998 23.67 5.64998 23 7.31998 23C8.98998 23 9.87998 23.67 10.59 24.2C11.21 24.66 11.66 25 12.66 25C13.66 25 14.11 24.66 14.73 24.2C15.44 23.66 16.33 23 18 23C19.67 23 20.55 23.67 21.26 24.2C21.88 24.66 22.33 25 23.32 25C24.31 25 24.77 24.66 25.39 24.2C26.1 23.66 26.99 23 28.66 23C30.33 23 31.21 23.67 31.93 24.2C32.55 24.66 33 25 33.99 25V31H34Z"/><path d="M13 22C12.45 22 12 21.55 12 21V10C12 6.69 14.69 4 18 4C18.55 4 19 4.45 19 5C19 5.55 18.55 6 18 6C15.79 6 14 7.79 14 10V21C14 21.55 13.55 22 13 22Z"/><path d="M22 22C21.45 22 21 21.55 21 21V10C21 6.69 23.69 4 27 4C27.55 4 28 4.45 28 5C28 5.55 27.55 6 27 6C24.79 6 23 7.79 23 10V21C23 21.55 22.55 22 22 22Z"/><path d="M22 11H13C12.45 11 12 10.55 12 10C12 9.45 12.45 9 13 9H22C22.55 9 23 9.45 23 10C23 10.55 22.55 11 22 11Z"/><path d="M22 15H13C12.45 15 12 14.55 12 14C12 13.45 12.45 13 13 13H22C22.55 13 23 13.45 23 14C23 14.55 22.55 15 22 15Z"/><path d="M22 19H13C12.45 19 12 18.55 12 18C12 17.45 12.45 17 13 17H22C22.55 17 23 17.45 23 18C23 18.55 22.55 19 22 19Z"/>' })];

// node_modules/@cds/core/icon/shapes/smoking.js
var V24 = ["smoking", n23({ outline: '<path d="M30 15C29.45 15 29 14.55 29 14C29 12.3 29.66 11.39 30.19 10.66C30.66 10.01 31 9.55 31 8.5C31 7.45 30.66 6.98 30.19 6.34C29.66 5.61 29 4.7 29 3C29 2.45 29.45 2 30 2C30.55 2 31 2.45 31 3C31 4.05 31.34 4.52 31.81 5.16C32.34 5.89 33 6.8 33 8.5C33 10.2 32.34 11.11 31.81 11.84C31.34 12.49 31 12.95 31 14C31 14.55 30.55 15 30 15Z"/><path d="M8 23C7.45 23 7 22.55 7 22V18C7 17.45 7.45 17 8 17C8.55 17 9 17.45 9 18V22C9 22.55 8.55 23 8 23Z"/><path d="M23.13 19H30V21H25.13L27.13 23H31C31.55 23 32 22.55 32 22V18C32 17.45 31.55 17 31 17H21.13L23.13 19Z"/><path d="M26.21 21H4V19H23.88L21.88 17H3C2.45 17 2 17.45 2 18V22C2 22.55 2.45 23 3 23H28.21L26.21 21Z"/>', solid: '<path d="M30 15C29.45 15 29 14.55 29 14C29 12.3 29.66 11.39 30.19 10.66C30.66 10.01 31 9.55 31 8.5C31 7.45 30.66 6.98 30.19 6.34C29.66 5.61 29 4.7 29 3C29 2.45 29.45 2 30 2C30.55 2 31 2.45 31 3C31 4.05 31.34 4.52 31.81 5.16C32.34 5.89 33 6.8 33 8.5C33 10.2 32.34 11.11 31.81 11.84C31.34 12.49 31 12.95 31 14C31 14.55 30.55 15 30 15Z"/><path d="M8 23C7.45 23 7 22.55 7 22V18C7 17.45 7.45 17 8 17C8.55 17 9 17.45 9 18V22C9 22.55 8.55 23 8 23Z"/><path d="M23.13 19H30V21H25.13L27.13 23H31C31.55 23 32 22.55 32 22V18C32 17.45 31.55 17 31 17H21.13L23.13 19Z"/><path d="M26.21 21H4V19H23.88L21.88 17H3C2.45 17 2 17.45 2 18V22C2 22.55 2.45 23 3 23H28.21L26.21 21Z"/><path d="M31 18H8V22H31V18Z"/>' })];

// node_modules/@cds/core/icon/shapes/suitcase.js
var t121 = ["suitcase", n23({ outline: '<path d="M26.13 32H9.87C8.29 32 7 30.71 7 29.13V10.87C7 9.29 8.29 8 9.87 8H26.13C27.71 8 29 9.29 29 10.87V29.13C29 30.71 27.71 32 26.13 32ZM9.87 10C9.39 10 9 10.39 9 10.87V29.13C9 29.61 9.39 30 9.87 30H26.13C26.61 30 27 29.61 27 29.13V10.87C27 10.39 26.61 10 26.13 10H9.87Z"/><path d="M12 34C11.45 34 11 33.55 11 33V31C11 30.45 11.45 30 12 30C12.55 30 13 30.45 13 31V33C13 33.55 12.55 34 12 34Z"/><path d="M24 34C23.45 34 23 33.55 23 33V31C23 30.45 23.45 30 24 30C24.55 30 25 30.45 25 31V33C25 33.55 24.55 34 24 34Z"/><path d="M22 6H20V4H16V6H14V3C14 2.45 14.45 2 15 2H21C21.55 2 22 2.45 22 3V6Z"/><path d="M13 28C12.45 28 12 27.55 12 27V13C12 12.45 12.45 12 13 12C13.55 12 14 12.45 14 13V27C14 27.55 13.55 28 13 28Z"/><path d="M18 28C17.45 28 17 27.55 17 27V13C17 12.45 17.45 12 18 12C18.55 12 19 12.45 19 13V27C19 27.55 18.55 28 18 28Z"/><path d="M23 28C22.45 28 22 27.55 22 27V13C22 12.45 22.45 12 23 12C23.55 12 24 12.45 24 13V27C24 27.55 23.55 28 23 28Z"/>', solid: '<path d="M12 34C11.45 34 11 33.55 11 33V31C11 30.45 11.45 30 12 30C12.55 30 13 30.45 13 31V33C13 33.55 12.55 34 12 34Z"/><path d="M24 34C23.45 34 23 33.55 23 33V31C23 30.45 23.45 30 24 30C24.55 30 25 30.45 25 31V33C25 33.55 24.55 34 24 34Z"/><path d="M22 6H20V4H16V6H14V3C14 2.45 14.45 2 15 2H21C21.55 2 22 2.45 22 3V6Z"/><path d="M26.13 8H9.87C8.29 8 7 9.29 7 10.87V29.13C7 30.71 8.29 32 9.87 32H26.13C27.71 32 29 30.71 29 29.13V10.87C29 9.29 27.71 8 26.13 8ZM14 27C14 27.55 13.55 28 13 28C12.45 28 12 27.55 12 27V13C12 12.45 12.45 12 13 12C13.55 12 14 12.45 14 13V27ZM19 27C19 27.55 18.55 28 18 28C17.45 28 17 27.55 17 27V13C17 12.45 17.45 12 18 12C18.55 12 19 12.45 19 13V27ZM24 27C24 27.55 23.55 28 23 28C22.45 28 22 27.55 22 27V13C22 12.45 22.45 12 23 12C23.55 12 24 12.45 24 13V27Z"/>' })];

// node_modules/@cds/core/icon/shapes/suitcase-2.js
var C7 = ["suitcase2", n23({ outline: '<path d="M30.72 32H5.28C3.47 32 2 30.53 2 28.72V11.28C2 9.47 3.47 8 5.28 8H30.72C32.53 8 34 9.47 34 11.28V28.72C34 30.53 32.53 32 30.72 32ZM5.28 10C4.57 10 4 10.58 4 11.28V28.72C4 29.43 4.58 30 5.28 30H30.72C31.43 30 32 29.42 32 28.72V11.28C32 10.57 31.42 10 30.72 10H5.28Z"/><path d="M23 9H21V6H15V9H13V5C13 4.45 13.45 4 14 4H22C22.55 4 23 4.45 23 5V9Z"/><path d="M10 9H8V30H10V9Z"/><path d="M28 9H26V30H28V9Z"/>', solid: '<path d="M23 9H21V6H15V9H13V5C13 4.45 13.45 4 14 4H22C22.55 4 23 4.45 23 5V9Z"/><path d="M26 8H10V32H26V8Z"/><path d="M30.72 8H28V32H30.72C32.53 32 34 30.53 34 28.72V11.28C34 9.47 32.53 8 30.72 8Z"/><path d="M8 8H5.28C3.47 8 2 9.47 2 11.28V28.72C2 30.53 3.47 32 5.28 32H8V8Z"/>' })];

// node_modules/@cds/core/icon/shapes/tent.js
var t122 = ["tent", n23({ outline: '<path d="M4.56004 32C4.39004 32 4.21004 31.96 4.05004 31.86C3.58004 31.58 3.42004 30.96 3.70004 30.49L19.14 4.48998C19.42 4.01998 20.04 3.85998 20.51 4.13998C20.98 4.41998 21.14 5.03998 20.86 5.50998L5.42004 31.51C5.23004 31.82 4.90004 32 4.56004 32Z"/><path d="M31.44 32C31.1 32 30.77 31.83 30.58 31.51L15.14 5.50998C14.86 5.02998 15.02 4.41998 15.49 4.13998C15.96 3.85998 16.58 4.00998 16.86 4.48998L32.3 30.49C32.58 30.97 32.42 31.58 31.95 31.86C31.79 31.95 31.61 32 31.44 32Z"/><path d="M33 32H3C2.45 32 2 31.55 2 31C2 30.45 2.45 30 3 30H33C33.55 30 34 30.45 34 31C34 31.55 33.55 32 33 32Z"/><path d="M14.54 28L18 22L21.46 28H23.77L18.86 19.5C18.5 18.88 17.48 18.88 17.13 19.5L12.22 28H14.53H14.54Z"/>', solid: '<path d="M33 30H32.01L19.16 8.36998L20.86 5.50998C21.14 5.02998 20.98 4.41998 20.51 4.13998C20.04 3.85998 19.42 4.01998 19.14 4.48998L18 6.40998L16.86 4.48998C16.58 4.01998 15.96 3.85998 15.49 4.13998C15.02 4.41998 14.86 5.03998 15.14 5.50998L16.84 8.36998L3.99 30H3C2.45 30 2 30.45 2 31C2 31.55 2.45 32 3 32H33C33.55 32 34 31.55 34 31C34 30.45 33.55 30 33 30ZM21.46 28L18 22L14.54 28H12.23L17.14 19.5C17.5 18.88 18.52 18.88 18.87 19.5L23.78 28H21.47H21.46Z"/>' })];

// node_modules/@cds/core/icon/shapes/train.js
var M4 = ["train", n23({ outline: '<path d="M29 28H7C6.45 28 6 27.55 6 27V5.09C6 3.38 7.39 2 9.09 2H26.91C28.62 2 30 3.39 30 5.09V27C30 27.55 29.55 28 29 28ZM8 26H28V5.09C28 4.49 27.51 4 26.91 4H9.09C8.49 4 8 4.49 8 5.09V26Z"/><path d="M25 16H11C10.45 16 10 15.55 10 15V7C10 6.45 10.45 6 11 6H25C25.55 6 26 6.45 26 7V15C26 15.55 25.55 16 25 16ZM12 14H24V8H12V14Z"/><path d="M13 24C11.35 24 10 22.65 10 21C10 19.35 11.35 18 13 18C14.65 18 16 19.35 16 21C16 22.65 14.65 24 13 24ZM13 20C12.45 20 12 20.45 12 21C12 21.55 12.45 22 13 22C13.55 22 14 21.55 14 21C14 20.45 13.55 20 13 20Z"/><path d="M23 24C21.35 24 20 22.65 20 21C20 19.35 21.35 18 23 18C24.65 18 26 19.35 26 21C26 22.65 24.65 24 23 24ZM23 20C22.45 20 22 20.45 22 21C22 21.55 22.45 22 23 22C23.55 22 24 21.55 24 21C24 20.45 23.55 20 23 20Z"/><path d="M9.67 30L6.74 32.2C6.3 32.53 6.21 33.16 6.54 33.6C6.74 33.86 7.04 34 7.34 34C7.55 34 7.76 33.93 7.94 33.8L13.01 30H9.68H9.67Z"/><path d="M29.6 32.2L26.67 30H23.34L28.41 33.8C28.59 33.93 28.8 34 29.01 34C29.31 34 29.61 33.86 29.81 33.6C30.14 33.16 30.05 32.53 29.61 32.2H29.6Z"/>', solid: '<path d="M9.67 30L6.74 32.2C6.3 32.53 6.21 33.16 6.54 33.6C6.74 33.86 7.04 34 7.34 34C7.55 34 7.76 33.93 7.94 33.8L13.01 30H9.68H9.67Z"/><path d="M29.6 32.2L26.67 30H23.34L28.41 33.8C28.59 33.93 28.8 34 29.01 34C29.31 34 29.61 33.86 29.81 33.6C30.14 33.16 30.05 32.53 29.61 32.2H29.6Z"/><path d="M24 8H12V14H24V8Z"/><path d="M13 22C13.5523 22 14 21.5523 14 21C14 20.4477 13.5523 20 13 20C12.4477 20 12 20.4477 12 21C12 21.5523 12.4477 22 13 22Z"/><path d="M26.91 2H9.09C7.38 2 6 3.39 6 5.09V27C6 27.55 6.45 28 7 28H29C29.55 28 30 27.55 30 27V5.09C30 3.38 28.61 2 26.91 2ZM13 24C11.35 24 10 22.65 10 21C10 19.35 11.35 18 13 18C14.65 18 16 19.35 16 21C16 22.65 14.65 24 13 24ZM23 24C21.35 24 20 22.65 20 21C20 19.35 21.35 18 23 18C24.65 18 26 19.35 26 21C26 22.65 24.65 24 23 24ZM26 15C26 15.55 25.55 16 25 16H11C10.45 16 10 15.55 10 15V7C10 6.45 10.45 6 11 6H25C25.55 6 26 6.45 26 7V15Z"/><path d="M23 22C23.5523 22 24 21.5523 24 21C24 20.4477 23.5523 20 23 20C22.4477 20 22 20.4477 22 21C22 21.5523 22.4477 22 23 22Z"/>' })];

// node_modules/@angular/forms/fesm2022/forms.mjs
var _BaseControlValueAccessor = class _BaseControlValueAccessor {
  constructor(_renderer, _elementRef) {
    this._renderer = _renderer;
    this._elementRef = _elementRef;
    this.onChange = (_4) => {
    };
    this.onTouched = () => {
    };
  }
  /**
   * Helper method that sets a property on a target element using the current Renderer
   * implementation.
   * @nodoc
   */
  setProperty(key, value) {
    this._renderer.setProperty(this._elementRef.nativeElement, key, value);
  }
  /**
   * Registers a function called when the control is touched.
   * @nodoc
   */
  registerOnTouched(fn) {
    this.onTouched = fn;
  }
  /**
   * Registers a function called when the control value changes.
   * @nodoc
   */
  registerOnChange(fn) {
    this.onChange = fn;
  }
  /**
   * Sets the "disabled" property on the range input element.
   * @nodoc
   */
  setDisabledState(isDisabled) {
    this.setProperty("disabled", isDisabled);
  }
};
_BaseControlValueAccessor.ɵfac = function BaseControlValueAccessor_Factory(t161) {
  return new (t161 || _BaseControlValueAccessor)(ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef));
};
_BaseControlValueAccessor.ɵdir = ɵɵdefineDirective({
  type: _BaseControlValueAccessor
});
var BaseControlValueAccessor = _BaseControlValueAccessor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BaseControlValueAccessor, [{
    type: Directive
  }], () => [{
    type: Renderer2
  }, {
    type: ElementRef
  }], null);
})();
var _BuiltInControlValueAccessor = class _BuiltInControlValueAccessor extends BaseControlValueAccessor {
};
_BuiltInControlValueAccessor.ɵfac = /* @__PURE__ */ (() => {
  let ɵBuiltInControlValueAccessor_BaseFactory;
  return function BuiltInControlValueAccessor_Factory(t161) {
    return (ɵBuiltInControlValueAccessor_BaseFactory || (ɵBuiltInControlValueAccessor_BaseFactory = ɵɵgetInheritedFactory(_BuiltInControlValueAccessor)))(t161 || _BuiltInControlValueAccessor);
  };
})();
_BuiltInControlValueAccessor.ɵdir = ɵɵdefineDirective({
  type: _BuiltInControlValueAccessor,
  features: [ɵɵInheritDefinitionFeature]
});
var BuiltInControlValueAccessor = _BuiltInControlValueAccessor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BuiltInControlValueAccessor, [{
    type: Directive
  }], null, null);
})();
var NG_VALUE_ACCESSOR = new InjectionToken(ngDevMode ? "NgValueAccessor" : "");
var CHECKBOX_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: forwardRef(() => CheckboxControlValueAccessor),
  multi: true
};
var _CheckboxControlValueAccessor = class _CheckboxControlValueAccessor extends BuiltInControlValueAccessor {
  /**
   * Sets the "checked" property on the input element.
   * @nodoc
   */
  writeValue(value) {
    this.setProperty("checked", value);
  }
};
_CheckboxControlValueAccessor.ɵfac = /* @__PURE__ */ (() => {
  let ɵCheckboxControlValueAccessor_BaseFactory;
  return function CheckboxControlValueAccessor_Factory(t161) {
    return (ɵCheckboxControlValueAccessor_BaseFactory || (ɵCheckboxControlValueAccessor_BaseFactory = ɵɵgetInheritedFactory(_CheckboxControlValueAccessor)))(t161 || _CheckboxControlValueAccessor);
  };
})();
_CheckboxControlValueAccessor.ɵdir = ɵɵdefineDirective({
  type: _CheckboxControlValueAccessor,
  selectors: [["input", "type", "checkbox", "formControlName", ""], ["input", "type", "checkbox", "formControl", ""], ["input", "type", "checkbox", "ngModel", ""]],
  hostBindings: function CheckboxControlValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("change", function CheckboxControlValueAccessor_change_HostBindingHandler($event) {
        return ctx.onChange($event.target.checked);
      })("blur", function CheckboxControlValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  features: [ɵɵProvidersFeature([CHECKBOX_VALUE_ACCESSOR]), ɵɵInheritDefinitionFeature]
});
var CheckboxControlValueAccessor = _CheckboxControlValueAccessor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CheckboxControlValueAccessor, [{
    type: Directive,
    args: [{
      selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]",
      host: {
        "(change)": "onChange($event.target.checked)",
        "(blur)": "onTouched()"
      },
      providers: [CHECKBOX_VALUE_ACCESSOR]
    }]
  }], null, null);
})();
var DEFAULT_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: forwardRef(() => DefaultValueAccessor),
  multi: true
};
function _isAndroid() {
  const userAgent = getDOM() ? getDOM().getUserAgent() : "";
  return /android (\d+)/.test(userAgent.toLowerCase());
}
var COMPOSITION_BUFFER_MODE = new InjectionToken(ngDevMode ? "CompositionEventMode" : "");
var _DefaultValueAccessor = class _DefaultValueAccessor extends BaseControlValueAccessor {
  constructor(renderer, elementRef, _compositionMode) {
    super(renderer, elementRef);
    this._compositionMode = _compositionMode;
    this._composing = false;
    if (this._compositionMode == null) {
      this._compositionMode = !_isAndroid();
    }
  }
  /**
   * Sets the "value" property on the input element.
   * @nodoc
   */
  writeValue(value) {
    const normalizedValue = value == null ? "" : value;
    this.setProperty("value", normalizedValue);
  }
  /** @internal */
  _handleInput(value) {
    if (!this._compositionMode || this._compositionMode && !this._composing) {
      this.onChange(value);
    }
  }
  /** @internal */
  _compositionStart() {
    this._composing = true;
  }
  /** @internal */
  _compositionEnd(value) {
    this._composing = false;
    this._compositionMode && this.onChange(value);
  }
};
_DefaultValueAccessor.ɵfac = function DefaultValueAccessor_Factory(t161) {
  return new (t161 || _DefaultValueAccessor)(ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(COMPOSITION_BUFFER_MODE, 8));
};
_DefaultValueAccessor.ɵdir = ɵɵdefineDirective({
  type: _DefaultValueAccessor,
  selectors: [["input", "formControlName", "", 3, "type", "checkbox"], ["textarea", "formControlName", ""], ["input", "formControl", "", 3, "type", "checkbox"], ["textarea", "formControl", ""], ["input", "ngModel", "", 3, "type", "checkbox"], ["textarea", "ngModel", ""], ["", "ngDefaultControl", ""]],
  hostBindings: function DefaultValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("input", function DefaultValueAccessor_input_HostBindingHandler($event) {
        return ctx._handleInput($event.target.value);
      })("blur", function DefaultValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      })("compositionstart", function DefaultValueAccessor_compositionstart_HostBindingHandler() {
        return ctx._compositionStart();
      })("compositionend", function DefaultValueAccessor_compositionend_HostBindingHandler($event) {
        return ctx._compositionEnd($event.target.value);
      });
    }
  },
  features: [ɵɵProvidersFeature([DEFAULT_VALUE_ACCESSOR]), ɵɵInheritDefinitionFeature]
});
var DefaultValueAccessor = _DefaultValueAccessor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DefaultValueAccessor, [{
    type: Directive,
    args: [{
      selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]",
      // TODO: vsavkin replace the above selector with the one below it once
      // https://github.com/angular/angular/issues/3011 is implemented
      // selector: '[ngModel],[formControl],[formControlName]',
      host: {
        "(input)": "$any(this)._handleInput($event.target.value)",
        "(blur)": "onTouched()",
        "(compositionstart)": "$any(this)._compositionStart()",
        "(compositionend)": "$any(this)._compositionEnd($event.target.value)"
      },
      providers: [DEFAULT_VALUE_ACCESSOR]
    }]
  }], () => [{
    type: Renderer2
  }, {
    type: ElementRef
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [COMPOSITION_BUFFER_MODE]
    }]
  }], null);
})();
function isEmptyInputValue(value) {
  return value == null || (typeof value === "string" || Array.isArray(value)) && value.length === 0;
}
function hasValidLength(value) {
  return value != null && typeof value.length === "number";
}
var NG_VALIDATORS = new InjectionToken(ngDevMode ? "NgValidators" : "");
var NG_ASYNC_VALIDATORS = new InjectionToken(ngDevMode ? "NgAsyncValidators" : "");
var EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
function minValidator(min) {
  return (control) => {
    if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {
      return null;
    }
    const value = parseFloat(control.value);
    return !isNaN(value) && value < min ? {
      "min": {
        "min": min,
        "actual": control.value
      }
    } : null;
  };
}
function maxValidator(max) {
  return (control) => {
    if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {
      return null;
    }
    const value = parseFloat(control.value);
    return !isNaN(value) && value > max ? {
      "max": {
        "max": max,
        "actual": control.value
      }
    } : null;
  };
}
function requiredValidator(control) {
  return isEmptyInputValue(control.value) ? {
    "required": true
  } : null;
}
function requiredTrueValidator(control) {
  return control.value === true ? null : {
    "required": true
  };
}
function emailValidator(control) {
  if (isEmptyInputValue(control.value)) {
    return null;
  }
  return EMAIL_REGEXP.test(control.value) ? null : {
    "email": true
  };
}
function minLengthValidator(minLength) {
  return (control) => {
    if (isEmptyInputValue(control.value) || !hasValidLength(control.value)) {
      return null;
    }
    return control.value.length < minLength ? {
      "minlength": {
        "requiredLength": minLength,
        "actualLength": control.value.length
      }
    } : null;
  };
}
function maxLengthValidator(maxLength) {
  return (control) => {
    return hasValidLength(control.value) && control.value.length > maxLength ? {
      "maxlength": {
        "requiredLength": maxLength,
        "actualLength": control.value.length
      }
    } : null;
  };
}
function patternValidator(pattern) {
  if (!pattern)
    return nullValidator;
  let regex;
  let regexStr;
  if (typeof pattern === "string") {
    regexStr = "";
    if (pattern.charAt(0) !== "^")
      regexStr += "^";
    regexStr += pattern;
    if (pattern.charAt(pattern.length - 1) !== "$")
      regexStr += "$";
    regex = new RegExp(regexStr);
  } else {
    regexStr = pattern.toString();
    regex = pattern;
  }
  return (control) => {
    if (isEmptyInputValue(control.value)) {
      return null;
    }
    const value = control.value;
    return regex.test(value) ? null : {
      "pattern": {
        "requiredPattern": regexStr,
        "actualValue": value
      }
    };
  };
}
function nullValidator(control) {
  return null;
}
function isPresent(o88) {
  return o88 != null;
}
function toObservable(value) {
  const obs = isPromise(value) ? from(value) : value;
  if ((typeof ngDevMode === "undefined" || ngDevMode) && !isSubscribable(obs)) {
    let errorMessage = `Expected async validator to return Promise or Observable.`;
    if (typeof value === "object") {
      errorMessage += " Are you using a synchronous validator where an async validator is expected?";
    }
    throw new RuntimeError(-1101, errorMessage);
  }
  return obs;
}
function mergeErrors(arrayOfErrors) {
  let res = {};
  arrayOfErrors.forEach((errors) => {
    res = errors != null ? __spreadValues(__spreadValues({}, res), errors) : res;
  });
  return Object.keys(res).length === 0 ? null : res;
}
function executeValidators(control, validators) {
  return validators.map((validator) => validator(control));
}
function isValidatorFn(validator) {
  return !validator.validate;
}
function normalizeValidators(validators) {
  return validators.map((validator) => {
    return isValidatorFn(validator) ? validator : (c45) => validator.validate(c45);
  });
}
function compose(validators) {
  if (!validators)
    return null;
  const presentValidators = validators.filter(isPresent);
  if (presentValidators.length == 0)
    return null;
  return function(control) {
    return mergeErrors(executeValidators(control, presentValidators));
  };
}
function composeValidators(validators) {
  return validators != null ? compose(normalizeValidators(validators)) : null;
}
function composeAsync(validators) {
  if (!validators)
    return null;
  const presentValidators = validators.filter(isPresent);
  if (presentValidators.length == 0)
    return null;
  return function(control) {
    const observables = executeValidators(control, presentValidators).map(toObservable);
    return forkJoin(observables).pipe(map(mergeErrors));
  };
}
function composeAsyncValidators(validators) {
  return validators != null ? composeAsync(normalizeValidators(validators)) : null;
}
function mergeValidators(controlValidators, dirValidator) {
  if (controlValidators === null)
    return [dirValidator];
  return Array.isArray(controlValidators) ? [...controlValidators, dirValidator] : [controlValidators, dirValidator];
}
function getControlValidators(control) {
  return control._rawValidators;
}
function getControlAsyncValidators(control) {
  return control._rawAsyncValidators;
}
function makeValidatorsArray(validators) {
  if (!validators)
    return [];
  return Array.isArray(validators) ? validators : [validators];
}
function hasValidator(validators, validator) {
  return Array.isArray(validators) ? validators.includes(validator) : validators === validator;
}
function addValidators(validators, currentValidators) {
  const current = makeValidatorsArray(currentValidators);
  const validatorsToAdd = makeValidatorsArray(validators);
  validatorsToAdd.forEach((v13) => {
    if (!hasValidator(current, v13)) {
      current.push(v13);
    }
  });
  return current;
}
function removeValidators(validators, currentValidators) {
  return makeValidatorsArray(currentValidators).filter((v13) => !hasValidator(validators, v13));
}
var AbstractControlDirective = class {
  constructor() {
    this._rawValidators = [];
    this._rawAsyncValidators = [];
    this._onDestroyCallbacks = [];
  }
  /**
   * @description
   * Reports the value of the control if it is present, otherwise null.
   */
  get value() {
    return this.control ? this.control.value : null;
  }
  /**
   * @description
   * Reports whether the control is valid. A control is considered valid if no
   * validation errors exist with the current value.
   * If the control is not present, null is returned.
   */
  get valid() {
    return this.control ? this.control.valid : null;
  }
  /**
   * @description
   * Reports whether the control is invalid, meaning that an error exists in the input value.
   * If the control is not present, null is returned.
   */
  get invalid() {
    return this.control ? this.control.invalid : null;
  }
  /**
   * @description
   * Reports whether a control is pending, meaning that async validation is occurring and
   * errors are not yet available for the input value. If the control is not present, null is
   * returned.
   */
  get pending() {
    return this.control ? this.control.pending : null;
  }
  /**
   * @description
   * Reports whether the control is disabled, meaning that the control is disabled
   * in the UI and is exempt from validation checks and excluded from aggregate
   * values of ancestor controls. If the control is not present, null is returned.
   */
  get disabled() {
    return this.control ? this.control.disabled : null;
  }
  /**
   * @description
   * Reports whether the control is enabled, meaning that the control is included in ancestor
   * calculations of validity or value. If the control is not present, null is returned.
   */
  get enabled() {
    return this.control ? this.control.enabled : null;
  }
  /**
   * @description
   * Reports the control's validation errors. If the control is not present, null is returned.
   */
  get errors() {
    return this.control ? this.control.errors : null;
  }
  /**
   * @description
   * Reports whether the control is pristine, meaning that the user has not yet changed
   * the value in the UI. If the control is not present, null is returned.
   */
  get pristine() {
    return this.control ? this.control.pristine : null;
  }
  /**
   * @description
   * Reports whether the control is dirty, meaning that the user has changed
   * the value in the UI. If the control is not present, null is returned.
   */
  get dirty() {
    return this.control ? this.control.dirty : null;
  }
  /**
   * @description
   * Reports whether the control is touched, meaning that the user has triggered
   * a `blur` event on it. If the control is not present, null is returned.
   */
  get touched() {
    return this.control ? this.control.touched : null;
  }
  /**
   * @description
   * Reports the validation status of the control. Possible values include:
   * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.
   * If the control is not present, null is returned.
   */
  get status() {
    return this.control ? this.control.status : null;
  }
  /**
   * @description
   * Reports whether the control is untouched, meaning that the user has not yet triggered
   * a `blur` event on it. If the control is not present, null is returned.
   */
  get untouched() {
    return this.control ? this.control.untouched : null;
  }
  /**
   * @description
   * Returns a multicasting observable that emits a validation status whenever it is
   * calculated for the control. If the control is not present, null is returned.
   */
  get statusChanges() {
    return this.control ? this.control.statusChanges : null;
  }
  /**
   * @description
   * Returns a multicasting observable of value changes for the control that emits every time the
   * value of the control changes in the UI or programmatically.
   * If the control is not present, null is returned.
   */
  get valueChanges() {
    return this.control ? this.control.valueChanges : null;
  }
  /**
   * @description
   * Returns an array that represents the path from the top-level form to this control.
   * Each index is the string name of the control on that level.
   */
  get path() {
    return null;
  }
  /**
   * Sets synchronous validators for this directive.
   * @internal
   */
  _setValidators(validators) {
    this._rawValidators = validators || [];
    this._composedValidatorFn = composeValidators(this._rawValidators);
  }
  /**
   * Sets asynchronous validators for this directive.
   * @internal
   */
  _setAsyncValidators(validators) {
    this._rawAsyncValidators = validators || [];
    this._composedAsyncValidatorFn = composeAsyncValidators(this._rawAsyncValidators);
  }
  /**
   * @description
   * Synchronous validator function composed of all the synchronous validators registered with this
   * directive.
   */
  get validator() {
    return this._composedValidatorFn || null;
  }
  /**
   * @description
   * Asynchronous validator function composed of all the asynchronous validators registered with
   * this directive.
   */
  get asyncValidator() {
    return this._composedAsyncValidatorFn || null;
  }
  /**
   * Internal function to register callbacks that should be invoked
   * when directive instance is being destroyed.
   * @internal
   */
  _registerOnDestroy(fn) {
    this._onDestroyCallbacks.push(fn);
  }
  /**
   * Internal function to invoke all registered "on destroy" callbacks.
   * Note: calling this function also clears the list of callbacks.
   * @internal
   */
  _invokeOnDestroyCallbacks() {
    this._onDestroyCallbacks.forEach((fn) => fn());
    this._onDestroyCallbacks = [];
  }
  /**
   * @description
   * Resets the control with the provided value if the control is present.
   */
  reset(value = void 0) {
    if (this.control)
      this.control.reset(value);
  }
  /**
   * @description
   * Reports whether the control with the given path has the error specified.
   *
   * @param errorCode The code of the error to check
   * @param path A list of control names that designates how to move from the current control
   * to the control that should be queried for errors.
   *
   * @usageNotes
   * For example, for the following `FormGroup`:
   *
   * ```
   * form = new FormGroup({
   *   address: new FormGroup({ street: new FormControl() })
   * });
   * ```
   *
   * The path to the 'street' control from the root form would be 'address' -> 'street'.
   *
   * It can be provided to this method in one of two formats:
   *
   * 1. An array of string control names, e.g. `['address', 'street']`
   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
   *
   * If no path is given, this method checks for the error on the current control.
   *
   * @returns whether the given error is present in the control at the given path.
   *
   * If the control is not present, false is returned.
   */
  hasError(errorCode, path3) {
    return this.control ? this.control.hasError(errorCode, path3) : false;
  }
  /**
   * @description
   * Reports error data for the control with the given path.
   *
   * @param errorCode The code of the error to check
   * @param path A list of control names that designates how to move from the current control
   * to the control that should be queried for errors.
   *
   * @usageNotes
   * For example, for the following `FormGroup`:
   *
   * ```
   * form = new FormGroup({
   *   address: new FormGroup({ street: new FormControl() })
   * });
   * ```
   *
   * The path to the 'street' control from the root form would be 'address' -> 'street'.
   *
   * It can be provided to this method in one of two formats:
   *
   * 1. An array of string control names, e.g. `['address', 'street']`
   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
   *
   * @returns error data for that particular error. If the control or error is not present,
   * null is returned.
   */
  getError(errorCode, path3) {
    return this.control ? this.control.getError(errorCode, path3) : null;
  }
};
var ControlContainer = class extends AbstractControlDirective {
  /**
   * @description
   * The top-level form directive for the control.
   */
  get formDirective() {
    return null;
  }
  /**
   * @description
   * The path to this group.
   */
  get path() {
    return null;
  }
};
var NgControl = class extends AbstractControlDirective {
  constructor() {
    super(...arguments);
    this._parent = null;
    this.name = null;
    this.valueAccessor = null;
  }
};
var AbstractControlStatus = class {
  constructor(cd) {
    this._cd = cd;
  }
  get isTouched() {
    return !!this._cd?.control?.touched;
  }
  get isUntouched() {
    return !!this._cd?.control?.untouched;
  }
  get isPristine() {
    return !!this._cd?.control?.pristine;
  }
  get isDirty() {
    return !!this._cd?.control?.dirty;
  }
  get isValid() {
    return !!this._cd?.control?.valid;
  }
  get isInvalid() {
    return !!this._cd?.control?.invalid;
  }
  get isPending() {
    return !!this._cd?.control?.pending;
  }
  get isSubmitted() {
    return !!this._cd?.submitted;
  }
};
var ngControlStatusHost = {
  "[class.ng-untouched]": "isUntouched",
  "[class.ng-touched]": "isTouched",
  "[class.ng-pristine]": "isPristine",
  "[class.ng-dirty]": "isDirty",
  "[class.ng-valid]": "isValid",
  "[class.ng-invalid]": "isInvalid",
  "[class.ng-pending]": "isPending"
};
var ngGroupStatusHost = __spreadProps(__spreadValues({}, ngControlStatusHost), {
  "[class.ng-submitted]": "isSubmitted"
});
var _NgControlStatus = class _NgControlStatus extends AbstractControlStatus {
  constructor(cd) {
    super(cd);
  }
};
_NgControlStatus.ɵfac = function NgControlStatus_Factory(t161) {
  return new (t161 || _NgControlStatus)(ɵɵdirectiveInject(NgControl, 2));
};
_NgControlStatus.ɵdir = ɵɵdefineDirective({
  type: _NgControlStatus,
  selectors: [["", "formControlName", ""], ["", "ngModel", ""], ["", "formControl", ""]],
  hostVars: 14,
  hostBindings: function NgControlStatus_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("ng-untouched", ctx.isUntouched)("ng-touched", ctx.isTouched)("ng-pristine", ctx.isPristine)("ng-dirty", ctx.isDirty)("ng-valid", ctx.isValid)("ng-invalid", ctx.isInvalid)("ng-pending", ctx.isPending);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
var NgControlStatus = _NgControlStatus;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgControlStatus, [{
    type: Directive,
    args: [{
      selector: "[formControlName],[ngModel],[formControl]",
      host: ngControlStatusHost
    }]
  }], () => [{
    type: NgControl,
    decorators: [{
      type: Self
    }]
  }], null);
})();
var _NgControlStatusGroup = class _NgControlStatusGroup extends AbstractControlStatus {
  constructor(cd) {
    super(cd);
  }
};
_NgControlStatusGroup.ɵfac = function NgControlStatusGroup_Factory(t161) {
  return new (t161 || _NgControlStatusGroup)(ɵɵdirectiveInject(ControlContainer, 10));
};
_NgControlStatusGroup.ɵdir = ɵɵdefineDirective({
  type: _NgControlStatusGroup,
  selectors: [["", "formGroupName", ""], ["", "formArrayName", ""], ["", "ngModelGroup", ""], ["", "formGroup", ""], ["form", 3, "ngNoForm", ""], ["", "ngForm", ""]],
  hostVars: 16,
  hostBindings: function NgControlStatusGroup_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("ng-untouched", ctx.isUntouched)("ng-touched", ctx.isTouched)("ng-pristine", ctx.isPristine)("ng-dirty", ctx.isDirty)("ng-valid", ctx.isValid)("ng-invalid", ctx.isInvalid)("ng-pending", ctx.isPending)("ng-submitted", ctx.isSubmitted);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
var NgControlStatusGroup = _NgControlStatusGroup;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgControlStatusGroup, [{
    type: Directive,
    args: [{
      selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]",
      host: ngGroupStatusHost
    }]
  }], () => [{
    type: ControlContainer,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }]
  }], null);
})();
var formControlNameExample = `
  <div [formGroup]="myGroup">
    <input formControlName="firstName">
  </div>

  In your class:

  this.myGroup = new FormGroup({
      firstName: new FormControl()
  });`;
var formGroupNameExample = `
  <div [formGroup]="myGroup">
      <div formGroupName="person">
        <input formControlName="firstName">
      </div>
  </div>

  In your class:

  this.myGroup = new FormGroup({
      person: new FormGroup({ firstName: new FormControl() })
  });`;
var formArrayNameExample = `
  <div [formGroup]="myGroup">
    <div formArrayName="cities">
      <div *ngFor="let city of cityArray.controls; index as i">
        <input [formControlName]="i">
      </div>
    </div>
  </div>

  In your class:

  this.cityArray = new FormArray([new FormControl('SF')]);
  this.myGroup = new FormGroup({
    cities: this.cityArray
  });`;
var ngModelGroupExample = `
  <form>
      <div ngModelGroup="person">
        <input [(ngModel)]="person.name" name="firstName">
      </div>
  </form>`;
var ngModelWithFormGroupExample = `
  <div [formGroup]="myGroup">
      <input formControlName="firstName">
      <input [(ngModel)]="showMoreControls" [ngModelOptions]="{standalone: true}">
  </div>
`;
function controlParentException() {
  return new RuntimeError(1050, `formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup
      directive and pass it an existing FormGroup instance (you can create one in your class).

    Example:

    ${formControlNameExample}`);
}
function ngModelGroupException() {
  return new RuntimeError(1051, `formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents
      that also have a "form" prefix: formGroupName, formArrayName, or formGroup.

      Option 1:  Update the parent to be formGroupName (reactive form strategy)

      ${formGroupNameExample}

      Option 2: Use ngModel instead of formControlName (template-driven strategy)

      ${ngModelGroupExample}`);
}
function missingFormException() {
  return new RuntimeError(1052, `formGroup expects a FormGroup instance. Please pass one in.

      Example:

      ${formControlNameExample}`);
}
function groupParentException() {
  return new RuntimeError(1053, `formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup
    directive and pass it an existing FormGroup instance (you can create one in your class).

    Example:

    ${formGroupNameExample}`);
}
function arrayParentException() {
  return new RuntimeError(1054, `formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup
      directive and pass it an existing FormGroup instance (you can create one in your class).

      Example:

      ${formArrayNameExample}`);
}
var disabledAttrWarning = `
  It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true
  when you set up this control in your component class, the disabled attribute will actually be set in the DOM for
  you. We recommend using this approach to avoid 'changed after checked' errors.

  Example:
  // Specify the \`disabled\` property at control creation time:
  form = new FormGroup({
    first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),
    last: new FormControl('Drew', Validators.required)
  });

  // Controls can also be enabled/disabled after creation:
  form.get('first')?.enable();
  form.get('last')?.disable();
`;
var asyncValidatorsDroppedWithOptsWarning = `
  It looks like you're constructing using a FormControl with both an options argument and an
  async validators argument. Mixing these arguments will cause your async validators to be dropped.
  You should either put all your validators in the options object, or in separate validators
  arguments. For example:

  // Using validators arguments
  fc = new FormControl(42, Validators.required, myAsyncValidator);

  // Using AbstractControlOptions
  fc = new FormControl(42, {validators: Validators.required, asyncValidators: myAV});

  // Do NOT mix them: async validators will be dropped!
  fc = new FormControl(42, {validators: Validators.required}, /* Oops! */ myAsyncValidator);
`;
function ngModelWarning(directiveName) {
  return `
  It looks like you're using ngModel on the same form field as ${directiveName}.
  Support for using the ngModel input property and ngModelChange event with
  reactive form directives has been deprecated in Angular v6 and will be removed
  in a future version of Angular.

  For more information on this, see our API docs here:
  https://angular.io/api/forms/${directiveName === "formControl" ? "FormControlDirective" : "FormControlName"}#use-with-ngmodel
  `;
}
function describeKey(isFormGroup, key) {
  return isFormGroup ? `with name: '${key}'` : `at index: ${key}`;
}
function noControlsError(isFormGroup) {
  return `
    There are no form controls registered with this ${isFormGroup ? "group" : "array"} yet. If you're using ngModel,
    you may want to check next tick (e.g. use setTimeout).
  `;
}
function missingControlError(isFormGroup, key) {
  return `Cannot find form control ${describeKey(isFormGroup, key)}`;
}
function missingControlValueError(isFormGroup, key) {
  return `Must supply a value for form control ${describeKey(isFormGroup, key)}`;
}
var VALID = "VALID";
var INVALID = "INVALID";
var PENDING = "PENDING";
var DISABLED = "DISABLED";
function pickValidators(validatorOrOpts) {
  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts) || null;
}
function coerceToValidator(validator) {
  return Array.isArray(validator) ? composeValidators(validator) : validator || null;
}
function pickAsyncValidators(asyncValidator, validatorOrOpts) {
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    if (isOptionsObj(validatorOrOpts) && asyncValidator) {
      console.warn(asyncValidatorsDroppedWithOptsWarning);
    }
  }
  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator) || null;
}
function coerceToAsyncValidator(asyncValidator) {
  return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator || null;
}
function isOptionsObj(validatorOrOpts) {
  return validatorOrOpts != null && !Array.isArray(validatorOrOpts) && typeof validatorOrOpts === "object";
}
function assertControlPresent(parent, isGroup, key) {
  const controls = parent.controls;
  const collection = isGroup ? Object.keys(controls) : controls;
  if (!collection.length) {
    throw new RuntimeError(1e3, typeof ngDevMode === "undefined" || ngDevMode ? noControlsError(isGroup) : "");
  }
  if (!controls[key]) {
    throw new RuntimeError(1001, typeof ngDevMode === "undefined" || ngDevMode ? missingControlError(isGroup, key) : "");
  }
}
function assertAllValuesPresent(control, isGroup, value) {
  control._forEachChild((_4, key) => {
    if (value[key] === void 0) {
      throw new RuntimeError(1002, typeof ngDevMode === "undefined" || ngDevMode ? missingControlValueError(isGroup, key) : "");
    }
  });
}
var AbstractControl = class {
  /**
   * Initialize the AbstractControl instance.
   *
   * @param validators The function or array of functions that is used to determine the validity of
   *     this control synchronously.
   * @param asyncValidators The function or array of functions that is used to determine validity of
   *     this control asynchronously.
   */
  constructor(validators, asyncValidators) {
    this._pendingDirty = false;
    this._hasOwnPendingAsyncValidator = false;
    this._pendingTouched = false;
    this._onCollectionChange = () => {
    };
    this._parent = null;
    this.pristine = true;
    this.touched = false;
    this._onDisabledChange = [];
    this._assignValidators(validators);
    this._assignAsyncValidators(asyncValidators);
  }
  /**
   * Returns the function that is used to determine the validity of this control synchronously.
   * If multiple validators have been added, this will be a single composed function.
   * See `Validators.compose()` for additional information.
   */
  get validator() {
    return this._composedValidatorFn;
  }
  set validator(validatorFn) {
    this._rawValidators = this._composedValidatorFn = validatorFn;
  }
  /**
   * Returns the function that is used to determine the validity of this control asynchronously.
   * If multiple validators have been added, this will be a single composed function.
   * See `Validators.compose()` for additional information.
   */
  get asyncValidator() {
    return this._composedAsyncValidatorFn;
  }
  set asyncValidator(asyncValidatorFn) {
    this._rawAsyncValidators = this._composedAsyncValidatorFn = asyncValidatorFn;
  }
  /**
   * The parent control.
   */
  get parent() {
    return this._parent;
  }
  /**
   * A control is `valid` when its `status` is `VALID`.
   *
   * @see {@link AbstractControl.status}
   *
   * @returns True if the control has passed all of its validation tests,
   * false otherwise.
   */
  get valid() {
    return this.status === VALID;
  }
  /**
   * A control is `invalid` when its `status` is `INVALID`.
   *
   * @see {@link AbstractControl.status}
   *
   * @returns True if this control has failed one or more of its validation checks,
   * false otherwise.
   */
  get invalid() {
    return this.status === INVALID;
  }
  /**
   * A control is `pending` when its `status` is `PENDING`.
   *
   * @see {@link AbstractControl.status}
   *
   * @returns True if this control is in the process of conducting a validation check,
   * false otherwise.
   */
  get pending() {
    return this.status == PENDING;
  }
  /**
   * A control is `disabled` when its `status` is `DISABLED`.
   *
   * Disabled controls are exempt from validation checks and
   * are not included in the aggregate value of their ancestor
   * controls.
   *
   * @see {@link AbstractControl.status}
   *
   * @returns True if the control is disabled, false otherwise.
   */
  get disabled() {
    return this.status === DISABLED;
  }
  /**
   * A control is `enabled` as long as its `status` is not `DISABLED`.
   *
   * @returns True if the control has any status other than 'DISABLED',
   * false if the status is 'DISABLED'.
   *
   * @see {@link AbstractControl.status}
   *
   */
  get enabled() {
    return this.status !== DISABLED;
  }
  /**
   * A control is `dirty` if the user has changed the value
   * in the UI.
   *
   * @returns True if the user has changed the value of this control in the UI; compare `pristine`.
   * Programmatic changes to a control's value do not mark it dirty.
   */
  get dirty() {
    return !this.pristine;
  }
  /**
   * True if the control has not been marked as touched
   *
   * A control is `untouched` if the user has not yet triggered
   * a `blur` event on it.
   */
  get untouched() {
    return !this.touched;
  }
  /**
   * Reports the update strategy of the `AbstractControl` (meaning
   * the event on which the control updates itself).
   * Possible values: `'change'` | `'blur'` | `'submit'`
   * Default value: `'change'`
   */
  get updateOn() {
    return this._updateOn ? this._updateOn : this.parent ? this.parent.updateOn : "change";
  }
  /**
   * Sets the synchronous validators that are active on this control.  Calling
   * this overwrites any existing synchronous validators.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * If you want to add a new validator without affecting existing ones, consider
   * using `addValidators()` method instead.
   */
  setValidators(validators) {
    this._assignValidators(validators);
  }
  /**
   * Sets the asynchronous validators that are active on this control. Calling this
   * overwrites any existing asynchronous validators.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * If you want to add a new validator without affecting existing ones, consider
   * using `addAsyncValidators()` method instead.
   */
  setAsyncValidators(validators) {
    this._assignAsyncValidators(validators);
  }
  /**
   * Add a synchronous validator or validators to this control, without affecting other validators.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * Adding a validator that already exists will have no effect. If duplicate validator functions
   * are present in the `validators` array, only the first instance would be added to a form
   * control.
   *
   * @param validators The new validator function or functions to add to this control.
   */
  addValidators(validators) {
    this.setValidators(addValidators(validators, this._rawValidators));
  }
  /**
   * Add an asynchronous validator or validators to this control, without affecting other
   * validators.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * Adding a validator that already exists will have no effect.
   *
   * @param validators The new asynchronous validator function or functions to add to this control.
   */
  addAsyncValidators(validators) {
    this.setAsyncValidators(addValidators(validators, this._rawAsyncValidators));
  }
  /**
   * Remove a synchronous validator from this control, without affecting other validators.
   * Validators are compared by function reference; you must pass a reference to the exact same
   * validator function as the one that was originally set. If a provided validator is not found,
   * it is ignored.
   *
   * @usageNotes
   *
   * ### Reference to a ValidatorFn
   *
   * ```
   * // Reference to the RequiredValidator
   * const ctrl = new FormControl<string | null>('', Validators.required);
   * ctrl.removeValidators(Validators.required);
   *
   * // Reference to anonymous function inside MinValidator
   * const minValidator = Validators.min(3);
   * const ctrl = new FormControl<string | null>('', minValidator);
   * expect(ctrl.hasValidator(minValidator)).toEqual(true)
   * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)
   *
   * ctrl.removeValidators(minValidator);
   * ```
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * @param validators The validator or validators to remove.
   */
  removeValidators(validators) {
    this.setValidators(removeValidators(validators, this._rawValidators));
  }
  /**
   * Remove an asynchronous validator from this control, without affecting other validators.
   * Validators are compared by function reference; you must pass a reference to the exact same
   * validator function as the one that was originally set. If a provided validator is not found, it
   * is ignored.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * @param validators The asynchronous validator or validators to remove.
   */
  removeAsyncValidators(validators) {
    this.setAsyncValidators(removeValidators(validators, this._rawAsyncValidators));
  }
  /**
   * Check whether a synchronous validator function is present on this control. The provided
   * validator must be a reference to the exact same function that was provided.
   *
   * @usageNotes
   *
   * ### Reference to a ValidatorFn
   *
   * ```
   * // Reference to the RequiredValidator
   * const ctrl = new FormControl<number | null>(0, Validators.required);
   * expect(ctrl.hasValidator(Validators.required)).toEqual(true)
   *
   * // Reference to anonymous function inside MinValidator
   * const minValidator = Validators.min(3);
   * const ctrl = new FormControl<number | null>(0, minValidator);
   * expect(ctrl.hasValidator(minValidator)).toEqual(true)
   * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)
   * ```
   *
   * @param validator The validator to check for presence. Compared by function reference.
   * @returns Whether the provided validator was found on this control.
   */
  hasValidator(validator) {
    return hasValidator(this._rawValidators, validator);
  }
  /**
   * Check whether an asynchronous validator function is present on this control. The provided
   * validator must be a reference to the exact same function that was provided.
   *
   * @param validator The asynchronous validator to check for presence. Compared by function
   *     reference.
   * @returns Whether the provided asynchronous validator was found on this control.
   */
  hasAsyncValidator(validator) {
    return hasValidator(this._rawAsyncValidators, validator);
  }
  /**
   * Empties out the synchronous validator list.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   */
  clearValidators() {
    this.validator = null;
  }
  /**
   * Empties out the async validator list.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   */
  clearAsyncValidators() {
    this.asyncValidator = null;
  }
  /**
   * Marks the control as `touched`. A control is touched by focus and
   * blur events that do not change the value.
   *
   * @see {@link markAsUntouched()}
   * @see {@link markAsDirty()}
   * @see {@link markAsPristine()}
   *
   * @param opts Configuration options that determine how the control propagates changes
   * and emits events after marking is applied.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   */
  markAsTouched(opts = {}) {
    this.touched = true;
    if (this._parent && !opts.onlySelf) {
      this._parent.markAsTouched(opts);
    }
  }
  /**
   * Marks the control and all its descendant controls as `touched`.
   * @see {@link markAsTouched()}
   */
  markAllAsTouched() {
    this.markAsTouched({
      onlySelf: true
    });
    this._forEachChild((control) => control.markAllAsTouched());
  }
  /**
   * Marks the control as `untouched`.
   *
   * If the control has any children, also marks all children as `untouched`
   * and recalculates the `touched` status of all parent controls.
   *
   * @see {@link markAsTouched()}
   * @see {@link markAsDirty()}
   * @see {@link markAsPristine()}
   *
   * @param opts Configuration options that determine how the control propagates changes
   * and emits events after the marking is applied.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   */
  markAsUntouched(opts = {}) {
    this.touched = false;
    this._pendingTouched = false;
    this._forEachChild((control) => {
      control.markAsUntouched({
        onlySelf: true
      });
    });
    if (this._parent && !opts.onlySelf) {
      this._parent._updateTouched(opts);
    }
  }
  /**
   * Marks the control as `dirty`. A control becomes dirty when
   * the control's value is changed through the UI; compare `markAsTouched`.
   *
   * @see {@link markAsTouched()}
   * @see {@link markAsUntouched()}
   * @see {@link markAsPristine()}
   *
   * @param opts Configuration options that determine how the control propagates changes
   * and emits events after marking is applied.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   */
  markAsDirty(opts = {}) {
    this.pristine = false;
    if (this._parent && !opts.onlySelf) {
      this._parent.markAsDirty(opts);
    }
  }
  /**
   * Marks the control as `pristine`.
   *
   * If the control has any children, marks all children as `pristine`,
   * and recalculates the `pristine` status of all parent
   * controls.
   *
   * @see {@link markAsTouched()}
   * @see {@link markAsUntouched()}
   * @see {@link markAsDirty()}
   *
   * @param opts Configuration options that determine how the control emits events after
   * marking is applied.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   */
  markAsPristine(opts = {}) {
    this.pristine = true;
    this._pendingDirty = false;
    this._forEachChild((control) => {
      control.markAsPristine({
        onlySelf: true
      });
    });
    if (this._parent && !opts.onlySelf) {
      this._parent._updatePristine(opts);
    }
  }
  /**
   * Marks the control as `pending`.
   *
   * A control is pending while the control performs async validation.
   *
   * @see {@link AbstractControl.status}
   *
   * @param opts Configuration options that determine how the control propagates changes and
   * emits events after marking is applied.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   * * `emitEvent`: When true or not supplied (the default), the `statusChanges`
   * observable emits an event with the latest status the control is marked pending.
   * When false, no events are emitted.
   *
   */
  markAsPending(opts = {}) {
    this.status = PENDING;
    if (opts.emitEvent !== false) {
      this.statusChanges.emit(this.status);
    }
    if (this._parent && !opts.onlySelf) {
      this._parent.markAsPending(opts);
    }
  }
  /**
   * Disables the control. This means the control is exempt from validation checks and
   * excluded from the aggregate value of any parent. Its status is `DISABLED`.
   *
   * If the control has children, all children are also disabled.
   *
   * @see {@link AbstractControl.status}
   *
   * @param opts Configuration options that determine how the control propagates
   * changes and emits events after the control is disabled.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control is disabled.
   * When false, no events are emitted.
   */
  disable(opts = {}) {
    const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);
    this.status = DISABLED;
    this.errors = null;
    this._forEachChild((control) => {
      control.disable(__spreadProps(__spreadValues({}, opts), {
        onlySelf: true
      }));
    });
    this._updateValue();
    if (opts.emitEvent !== false) {
      this.valueChanges.emit(this.value);
      this.statusChanges.emit(this.status);
    }
    this._updateAncestors(__spreadProps(__spreadValues({}, opts), {
      skipPristineCheck
    }));
    this._onDisabledChange.forEach((changeFn) => changeFn(true));
  }
  /**
   * Enables the control. This means the control is included in validation checks and
   * the aggregate value of its parent. Its status recalculates based on its value and
   * its validators.
   *
   * By default, if the control has children, all children are enabled.
   *
   * @see {@link AbstractControl.status}
   *
   * @param opts Configure options that control how the control propagates changes and
   * emits events when marked as untouched
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control is enabled.
   * When false, no events are emitted.
   */
  enable(opts = {}) {
    const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);
    this.status = VALID;
    this._forEachChild((control) => {
      control.enable(__spreadProps(__spreadValues({}, opts), {
        onlySelf: true
      }));
    });
    this.updateValueAndValidity({
      onlySelf: true,
      emitEvent: opts.emitEvent
    });
    this._updateAncestors(__spreadProps(__spreadValues({}, opts), {
      skipPristineCheck
    }));
    this._onDisabledChange.forEach((changeFn) => changeFn(false));
  }
  _updateAncestors(opts) {
    if (this._parent && !opts.onlySelf) {
      this._parent.updateValueAndValidity(opts);
      if (!opts.skipPristineCheck) {
        this._parent._updatePristine();
      }
      this._parent._updateTouched();
    }
  }
  /**
   * Sets the parent of the control
   *
   * @param parent The new parent.
   */
  setParent(parent) {
    this._parent = parent;
  }
  /**
   * The raw value of this control. For most control implementations, the raw value will include
   * disabled children.
   */
  getRawValue() {
    return this.value;
  }
  /**
   * Recalculates the value and validation status of the control.
   *
   * By default, it also updates the value and validity of its ancestors.
   *
   * @param opts Configuration options determine how the control propagates changes and emits events
   * after updates and validity checks are applied.
   * * `onlySelf`: When true, only update this control. When false or not supplied,
   * update all direct ancestors. Default is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control is updated.
   * When false, no events are emitted.
   */
  updateValueAndValidity(opts = {}) {
    this._setInitialStatus();
    this._updateValue();
    if (this.enabled) {
      this._cancelExistingSubscription();
      this.errors = this._runValidator();
      this.status = this._calculateStatus();
      if (this.status === VALID || this.status === PENDING) {
        this._runAsyncValidator(opts.emitEvent);
      }
    }
    if (opts.emitEvent !== false) {
      this.valueChanges.emit(this.value);
      this.statusChanges.emit(this.status);
    }
    if (this._parent && !opts.onlySelf) {
      this._parent.updateValueAndValidity(opts);
    }
  }
  /** @internal */
  _updateTreeValidity(opts = {
    emitEvent: true
  }) {
    this._forEachChild((ctrl) => ctrl._updateTreeValidity(opts));
    this.updateValueAndValidity({
      onlySelf: true,
      emitEvent: opts.emitEvent
    });
  }
  _setInitialStatus() {
    this.status = this._allControlsDisabled() ? DISABLED : VALID;
  }
  _runValidator() {
    return this.validator ? this.validator(this) : null;
  }
  _runAsyncValidator(emitEvent) {
    if (this.asyncValidator) {
      this.status = PENDING;
      this._hasOwnPendingAsyncValidator = true;
      const obs = toObservable(this.asyncValidator(this));
      this._asyncValidationSubscription = obs.subscribe((errors) => {
        this._hasOwnPendingAsyncValidator = false;
        this.setErrors(errors, {
          emitEvent
        });
      });
    }
  }
  _cancelExistingSubscription() {
    if (this._asyncValidationSubscription) {
      this._asyncValidationSubscription.unsubscribe();
      this._hasOwnPendingAsyncValidator = false;
    }
  }
  /**
   * Sets errors on a form control when running validations manually, rather than automatically.
   *
   * Calling `setErrors` also updates the validity of the parent control.
   *
   * @param opts Configuration options that determine how the control propagates
   * changes and emits events after the control errors are set.
   * * `emitEvent`: When true or not supplied (the default), the `statusChanges`
   * observable emits an event after the errors are set.
   *
   * @usageNotes
   *
   * ### Manually set the errors for a control
   *
   * ```
   * const login = new FormControl('someLogin');
   * login.setErrors({
   *   notUnique: true
   * });
   *
   * expect(login.valid).toEqual(false);
   * expect(login.errors).toEqual({ notUnique: true });
   *
   * login.setValue('someOtherLogin');
   *
   * expect(login.valid).toEqual(true);
   * ```
   */
  setErrors(errors, opts = {}) {
    this.errors = errors;
    this._updateControlsErrors(opts.emitEvent !== false);
  }
  /**
   * Retrieves a child control given the control's name or path.
   *
   * @param path A dot-delimited string or array of string/number values that define the path to the
   * control. If a string is provided, passing it as a string literal will result in improved type
   * information. Likewise, if an array is provided, passing it `as const` will cause improved type
   * information to be available.
   *
   * @usageNotes
   * ### Retrieve a nested control
   *
   * For example, to get a `name` control nested within a `person` sub-group:
   *
   * * `this.form.get('person.name');`
   *
   * -OR-
   *
   * * `this.form.get(['person', 'name'] as const);` // `as const` gives improved typings
   *
   * ### Retrieve a control in a FormArray
   *
   * When accessing an element inside a FormArray, you can use an element index.
   * For example, to get a `price` control from the first element in an `items` array you can use:
   *
   * * `this.form.get('items.0.price');`
   *
   * -OR-
   *
   * * `this.form.get(['items', 0, 'price']);`
   */
  get(path3) {
    let currPath = path3;
    if (currPath == null)
      return null;
    if (!Array.isArray(currPath))
      currPath = currPath.split(".");
    if (currPath.length === 0)
      return null;
    return currPath.reduce((control, name) => control && control._find(name), this);
  }
  /**
   * @description
   * Reports error data for the control with the given path.
   *
   * @param errorCode The code of the error to check
   * @param path A list of control names that designates how to move from the current control
   * to the control that should be queried for errors.
   *
   * @usageNotes
   * For example, for the following `FormGroup`:
   *
   * ```
   * form = new FormGroup({
   *   address: new FormGroup({ street: new FormControl() })
   * });
   * ```
   *
   * The path to the 'street' control from the root form would be 'address' -> 'street'.
   *
   * It can be provided to this method in one of two formats:
   *
   * 1. An array of string control names, e.g. `['address', 'street']`
   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
   *
   * @returns error data for that particular error. If the control or error is not present,
   * null is returned.
   */
  getError(errorCode, path3) {
    const control = path3 ? this.get(path3) : this;
    return control && control.errors ? control.errors[errorCode] : null;
  }
  /**
   * @description
   * Reports whether the control with the given path has the error specified.
   *
   * @param errorCode The code of the error to check
   * @param path A list of control names that designates how to move from the current control
   * to the control that should be queried for errors.
   *
   * @usageNotes
   * For example, for the following `FormGroup`:
   *
   * ```
   * form = new FormGroup({
   *   address: new FormGroup({ street: new FormControl() })
   * });
   * ```
   *
   * The path to the 'street' control from the root form would be 'address' -> 'street'.
   *
   * It can be provided to this method in one of two formats:
   *
   * 1. An array of string control names, e.g. `['address', 'street']`
   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
   *
   * If no path is given, this method checks for the error on the current control.
   *
   * @returns whether the given error is present in the control at the given path.
   *
   * If the control is not present, false is returned.
   */
  hasError(errorCode, path3) {
    return !!this.getError(errorCode, path3);
  }
  /**
   * Retrieves the top-level ancestor of this control.
   */
  get root() {
    let x6 = this;
    while (x6._parent) {
      x6 = x6._parent;
    }
    return x6;
  }
  /** @internal */
  _updateControlsErrors(emitEvent) {
    this.status = this._calculateStatus();
    if (emitEvent) {
      this.statusChanges.emit(this.status);
    }
    if (this._parent) {
      this._parent._updateControlsErrors(emitEvent);
    }
  }
  /** @internal */
  _initObservables() {
    this.valueChanges = new EventEmitter();
    this.statusChanges = new EventEmitter();
  }
  _calculateStatus() {
    if (this._allControlsDisabled())
      return DISABLED;
    if (this.errors)
      return INVALID;
    if (this._hasOwnPendingAsyncValidator || this._anyControlsHaveStatus(PENDING))
      return PENDING;
    if (this._anyControlsHaveStatus(INVALID))
      return INVALID;
    return VALID;
  }
  /** @internal */
  _anyControlsHaveStatus(status) {
    return this._anyControls((control) => control.status === status);
  }
  /** @internal */
  _anyControlsDirty() {
    return this._anyControls((control) => control.dirty);
  }
  /** @internal */
  _anyControlsTouched() {
    return this._anyControls((control) => control.touched);
  }
  /** @internal */
  _updatePristine(opts = {}) {
    this.pristine = !this._anyControlsDirty();
    if (this._parent && !opts.onlySelf) {
      this._parent._updatePristine(opts);
    }
  }
  /** @internal */
  _updateTouched(opts = {}) {
    this.touched = this._anyControlsTouched();
    if (this._parent && !opts.onlySelf) {
      this._parent._updateTouched(opts);
    }
  }
  /** @internal */
  _registerOnCollectionChange(fn) {
    this._onCollectionChange = fn;
  }
  /** @internal */
  _setUpdateStrategy(opts) {
    if (isOptionsObj(opts) && opts.updateOn != null) {
      this._updateOn = opts.updateOn;
    }
  }
  /**
   * Check to see if parent has been marked artificially dirty.
   *
   * @internal
   */
  _parentMarkedDirty(onlySelf) {
    const parentDirty = this._parent && this._parent.dirty;
    return !onlySelf && !!parentDirty && !this._parent._anyControlsDirty();
  }
  /** @internal */
  _find(name) {
    return null;
  }
  /**
   * Internal implementation of the `setValidators` method. Needs to be separated out into a
   * different method, because it is called in the constructor and it can break cases where
   * a control is extended.
   */
  _assignValidators(validators) {
    this._rawValidators = Array.isArray(validators) ? validators.slice() : validators;
    this._composedValidatorFn = coerceToValidator(this._rawValidators);
  }
  /**
   * Internal implementation of the `setAsyncValidators` method. Needs to be separated out into a
   * different method, because it is called in the constructor and it can break cases where
   * a control is extended.
   */
  _assignAsyncValidators(validators) {
    this._rawAsyncValidators = Array.isArray(validators) ? validators.slice() : validators;
    this._composedAsyncValidatorFn = coerceToAsyncValidator(this._rawAsyncValidators);
  }
};
var FormGroup = class extends AbstractControl {
  /**
   * Creates a new `FormGroup` instance.
   *
   * @param controls A collection of child controls. The key for each child is the name
   * under which it is registered.
   *
   * @param validatorOrOpts A synchronous validator function, or an array of
   * such functions, or an `AbstractControlOptions` object that contains validation functions
   * and a validation trigger.
   *
   * @param asyncValidator A single async validator or array of async validator functions
   *
   */
  constructor(controls, validatorOrOpts, asyncValidator) {
    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
    (typeof ngDevMode === "undefined" || ngDevMode) && validateFormGroupControls(controls);
    this.controls = controls;
    this._initObservables();
    this._setUpdateStrategy(validatorOrOpts);
    this._setUpControls();
    this.updateValueAndValidity({
      onlySelf: true,
      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
      // `VALID` or `INVALID`. The status should be broadcasted via the `statusChanges` observable,
      // so we set `emitEvent` to `true` to allow that during the control creation process.
      emitEvent: !!this.asyncValidator
    });
  }
  registerControl(name, control) {
    if (this.controls[name])
      return this.controls[name];
    this.controls[name] = control;
    control.setParent(this);
    control._registerOnCollectionChange(this._onCollectionChange);
    return control;
  }
  addControl(name, control, options = {}) {
    this.registerControl(name, control);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
    this._onCollectionChange();
  }
  /**
   * Remove a control from this group. In a strongly-typed group, required controls cannot be
   * removed.
   *
   * This method also updates the value and validity of the control.
   *
   * @param name The control name to remove from the collection
   * @param options Specifies whether this FormGroup instance should emit events after a
   *     control is removed.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control is
   * removed. When false, no events are emitted.
   */
  removeControl(name, options = {}) {
    if (this.controls[name])
      this.controls[name]._registerOnCollectionChange(() => {
      });
    delete this.controls[name];
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
    this._onCollectionChange();
  }
  setControl(name, control, options = {}) {
    if (this.controls[name])
      this.controls[name]._registerOnCollectionChange(() => {
      });
    delete this.controls[name];
    if (control)
      this.registerControl(name, control);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
    this._onCollectionChange();
  }
  contains(controlName) {
    return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
  }
  /**
   * Sets the value of the `FormGroup`. It accepts an object that matches
   * the structure of the group, with control names as keys.
   *
   * @usageNotes
   * ### Set the complete value for the form group
   *
   * ```
   * const form = new FormGroup({
   *   first: new FormControl(),
   *   last: new FormControl()
   * });
   *
   * console.log(form.value);   // {first: null, last: null}
   *
   * form.setValue({first: 'Nancy', last: 'Drew'});
   * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
   * ```
   *
   * @throws When strict checks fail, such as setting the value of a control
   * that doesn't exist or if you exclude a value of a control that does exist.
   *
   * @param value The new value for the control that matches the structure of the group.
   * @param options Configuration options that determine how the control propagates changes
   * and emits events after the value changes.
   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
   * updateValueAndValidity} method.
   *
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
   * false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control value is updated.
   * When false, no events are emitted.
   */
  setValue(value, options = {}) {
    assertAllValuesPresent(this, true, value);
    Object.keys(value).forEach((name) => {
      assertControlPresent(this, true, name);
      this.controls[name].setValue(value[name], {
        onlySelf: true,
        emitEvent: options.emitEvent
      });
    });
    this.updateValueAndValidity(options);
  }
  /**
   * Patches the value of the `FormGroup`. It accepts an object with control
   * names as keys, and does its best to match the values to the correct controls
   * in the group.
   *
   * It accepts both super-sets and sub-sets of the group without throwing an error.
   *
   * @usageNotes
   * ### Patch the value for a form group
   *
   * ```
   * const form = new FormGroup({
   *    first: new FormControl(),
   *    last: new FormControl()
   * });
   * console.log(form.value);   // {first: null, last: null}
   *
   * form.patchValue({first: 'Nancy'});
   * console.log(form.value);   // {first: 'Nancy', last: null}
   * ```
   *
   * @param value The object that matches the structure of the group.
   * @param options Configuration options that determine how the control propagates changes and
   * emits events after the value is patched.
   * * `onlySelf`: When true, each change only affects this control and not its parent. Default is
   * true.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control value
   * is updated. When false, no events are emitted. The configuration options are passed to
   * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.
   */
  patchValue(value, options = {}) {
    if (value == null)
      return;
    Object.keys(value).forEach((name) => {
      const control = this.controls[name];
      if (control) {
        control.patchValue(
          /* Guaranteed to be present, due to the outer forEach. */
          value[name],
          {
            onlySelf: true,
            emitEvent: options.emitEvent
          }
        );
      }
    });
    this.updateValueAndValidity(options);
  }
  /**
   * Resets the `FormGroup`, marks all descendants `pristine` and `untouched` and sets
   * the value of all descendants to their default values, or null if no defaults were provided.
   *
   * You reset to a specific form state by passing in a map of states
   * that matches the structure of your form, with control names as keys. The state
   * is a standalone value or a form state object with both a value and a disabled
   * status.
   *
   * @param value Resets the control with an initial value,
   * or an object that defines the initial value and disabled state.
   *
   * @param options Configuration options that determine how the control propagates changes
   * and emits events when the group is reset.
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
   * false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control is reset.
   * When false, no events are emitted.
   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
   * updateValueAndValidity} method.
   *
   * @usageNotes
   *
   * ### Reset the form group values
   *
   * ```ts
   * const form = new FormGroup({
   *   first: new FormControl('first name'),
   *   last: new FormControl('last name')
   * });
   *
   * console.log(form.value);  // {first: 'first name', last: 'last name'}
   *
   * form.reset({ first: 'name', last: 'last name' });
   *
   * console.log(form.value);  // {first: 'name', last: 'last name'}
   * ```
   *
   * ### Reset the form group values and disabled status
   *
   * ```
   * const form = new FormGroup({
   *   first: new FormControl('first name'),
   *   last: new FormControl('last name')
   * });
   *
   * form.reset({
   *   first: {value: 'name', disabled: true},
   *   last: 'last'
   * });
   *
   * console.log(form.value);  // {last: 'last'}
   * console.log(form.get('first').status);  // 'DISABLED'
   * ```
   */
  reset(value = {}, options = {}) {
    this._forEachChild((control, name) => {
      control.reset(value ? value[name] : null, {
        onlySelf: true,
        emitEvent: options.emitEvent
      });
    });
    this._updatePristine(options);
    this._updateTouched(options);
    this.updateValueAndValidity(options);
  }
  /**
   * The aggregate value of the `FormGroup`, including any disabled controls.
   *
   * Retrieves all values regardless of disabled status.
   */
  getRawValue() {
    return this._reduceChildren({}, (acc, control, name) => {
      acc[name] = control.getRawValue();
      return acc;
    });
  }
  /** @internal */
  _syncPendingControls() {
    let subtreeUpdated = this._reduceChildren(false, (updated, child) => {
      return child._syncPendingControls() ? true : updated;
    });
    if (subtreeUpdated)
      this.updateValueAndValidity({
        onlySelf: true
      });
    return subtreeUpdated;
  }
  /** @internal */
  _forEachChild(cb) {
    Object.keys(this.controls).forEach((key) => {
      const control = this.controls[key];
      control && cb(control, key);
    });
  }
  /** @internal */
  _setUpControls() {
    this._forEachChild((control) => {
      control.setParent(this);
      control._registerOnCollectionChange(this._onCollectionChange);
    });
  }
  /** @internal */
  _updateValue() {
    this.value = this._reduceValue();
  }
  /** @internal */
  _anyControls(condition) {
    for (const [controlName, control] of Object.entries(this.controls)) {
      if (this.contains(controlName) && condition(control)) {
        return true;
      }
    }
    return false;
  }
  /** @internal */
  _reduceValue() {
    let acc = {};
    return this._reduceChildren(acc, (acc2, control, name) => {
      if (control.enabled || this.disabled) {
        acc2[name] = control.value;
      }
      return acc2;
    });
  }
  /** @internal */
  _reduceChildren(initValue, fn) {
    let res = initValue;
    this._forEachChild((control, name) => {
      res = fn(res, control, name);
    });
    return res;
  }
  /** @internal */
  _allControlsDisabled() {
    for (const controlName of Object.keys(this.controls)) {
      if (this.controls[controlName].enabled) {
        return false;
      }
    }
    return Object.keys(this.controls).length > 0 || this.disabled;
  }
  /** @internal */
  _find(name) {
    return this.controls.hasOwnProperty(name) ? this.controls[name] : null;
  }
};
function validateFormGroupControls(controls) {
  const invalidKeys = Object.keys(controls).filter((key) => key.includes("."));
  if (invalidKeys.length > 0) {
    console.warn(`FormGroup keys cannot include \`.\`, please replace the keys for: ${invalidKeys.join(",")}.`);
  }
}
var FormRecord = class extends FormGroup {
};
var CALL_SET_DISABLED_STATE = new InjectionToken("CallSetDisabledState", {
  providedIn: "root",
  factory: () => setDisabledStateDefault
});
var setDisabledStateDefault = "always";
function controlPath(name, parent) {
  return [...parent.path, name];
}
function setUpControl(control, dir, callSetDisabledState = setDisabledStateDefault) {
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    if (!control)
      _throwError(dir, "Cannot find control with");
    if (!dir.valueAccessor)
      _throwMissingValueAccessorError(dir);
  }
  setUpValidators(control, dir);
  dir.valueAccessor.writeValue(control.value);
  if (control.disabled || callSetDisabledState === "always") {
    dir.valueAccessor.setDisabledState?.(control.disabled);
  }
  setUpViewChangePipeline(control, dir);
  setUpModelChangePipeline(control, dir);
  setUpBlurPipeline(control, dir);
  setUpDisabledChangeHandler(control, dir);
}
function cleanUpControl(control, dir, validateControlPresenceOnChange = true) {
  const noop = () => {
    if (validateControlPresenceOnChange && (typeof ngDevMode === "undefined" || ngDevMode)) {
      _noControlError(dir);
    }
  };
  if (dir.valueAccessor) {
    dir.valueAccessor.registerOnChange(noop);
    dir.valueAccessor.registerOnTouched(noop);
  }
  cleanUpValidators(control, dir);
  if (control) {
    dir._invokeOnDestroyCallbacks();
    control._registerOnCollectionChange(() => {
    });
  }
}
function registerOnValidatorChange(validators, onChange) {
  validators.forEach((validator) => {
    if (validator.registerOnValidatorChange)
      validator.registerOnValidatorChange(onChange);
  });
}
function setUpDisabledChangeHandler(control, dir) {
  if (dir.valueAccessor.setDisabledState) {
    const onDisabledChange = (isDisabled) => {
      dir.valueAccessor.setDisabledState(isDisabled);
    };
    control.registerOnDisabledChange(onDisabledChange);
    dir._registerOnDestroy(() => {
      control._unregisterOnDisabledChange(onDisabledChange);
    });
  }
}
function setUpValidators(control, dir) {
  const validators = getControlValidators(control);
  if (dir.validator !== null) {
    control.setValidators(mergeValidators(validators, dir.validator));
  } else if (typeof validators === "function") {
    control.setValidators([validators]);
  }
  const asyncValidators = getControlAsyncValidators(control);
  if (dir.asyncValidator !== null) {
    control.setAsyncValidators(mergeValidators(asyncValidators, dir.asyncValidator));
  } else if (typeof asyncValidators === "function") {
    control.setAsyncValidators([asyncValidators]);
  }
  const onValidatorChange = () => control.updateValueAndValidity();
  registerOnValidatorChange(dir._rawValidators, onValidatorChange);
  registerOnValidatorChange(dir._rawAsyncValidators, onValidatorChange);
}
function cleanUpValidators(control, dir) {
  let isControlUpdated = false;
  if (control !== null) {
    if (dir.validator !== null) {
      const validators = getControlValidators(control);
      if (Array.isArray(validators) && validators.length > 0) {
        const updatedValidators = validators.filter((validator) => validator !== dir.validator);
        if (updatedValidators.length !== validators.length) {
          isControlUpdated = true;
          control.setValidators(updatedValidators);
        }
      }
    }
    if (dir.asyncValidator !== null) {
      const asyncValidators = getControlAsyncValidators(control);
      if (Array.isArray(asyncValidators) && asyncValidators.length > 0) {
        const updatedAsyncValidators = asyncValidators.filter((asyncValidator) => asyncValidator !== dir.asyncValidator);
        if (updatedAsyncValidators.length !== asyncValidators.length) {
          isControlUpdated = true;
          control.setAsyncValidators(updatedAsyncValidators);
        }
      }
    }
  }
  const noop = () => {
  };
  registerOnValidatorChange(dir._rawValidators, noop);
  registerOnValidatorChange(dir._rawAsyncValidators, noop);
  return isControlUpdated;
}
function setUpViewChangePipeline(control, dir) {
  dir.valueAccessor.registerOnChange((newValue) => {
    control._pendingValue = newValue;
    control._pendingChange = true;
    control._pendingDirty = true;
    if (control.updateOn === "change")
      updateControl(control, dir);
  });
}
function setUpBlurPipeline(control, dir) {
  dir.valueAccessor.registerOnTouched(() => {
    control._pendingTouched = true;
    if (control.updateOn === "blur" && control._pendingChange)
      updateControl(control, dir);
    if (control.updateOn !== "submit")
      control.markAsTouched();
  });
}
function updateControl(control, dir) {
  if (control._pendingDirty)
    control.markAsDirty();
  control.setValue(control._pendingValue, {
    emitModelToViewChange: false
  });
  dir.viewToModelUpdate(control._pendingValue);
  control._pendingChange = false;
}
function setUpModelChangePipeline(control, dir) {
  const onChange = (newValue, emitModelEvent) => {
    dir.valueAccessor.writeValue(newValue);
    if (emitModelEvent)
      dir.viewToModelUpdate(newValue);
  };
  control.registerOnChange(onChange);
  dir._registerOnDestroy(() => {
    control._unregisterOnChange(onChange);
  });
}
function setUpFormContainer(control, dir) {
  if (control == null && (typeof ngDevMode === "undefined" || ngDevMode))
    _throwError(dir, "Cannot find control with");
  setUpValidators(control, dir);
}
function cleanUpFormContainer(control, dir) {
  return cleanUpValidators(control, dir);
}
function _noControlError(dir) {
  return _throwError(dir, "There is no FormControl instance attached to form control element with");
}
function _throwError(dir, message) {
  const messageEnd = _describeControlLocation(dir);
  throw new Error(`${message} ${messageEnd}`);
}
function _describeControlLocation(dir) {
  const path3 = dir.path;
  if (path3 && path3.length > 1)
    return `path: '${path3.join(" -> ")}'`;
  if (path3?.[0])
    return `name: '${path3}'`;
  return "unspecified name attribute";
}
function _throwMissingValueAccessorError(dir) {
  const loc = _describeControlLocation(dir);
  throw new RuntimeError(-1203, `No value accessor for form control ${loc}.`);
}
function _throwInvalidValueAccessorError(dir) {
  const loc = _describeControlLocation(dir);
  throw new RuntimeError(1200, `Value accessor was not provided as an array for form control with ${loc}. Check that the \`NG_VALUE_ACCESSOR\` token is configured as a \`multi: true\` provider.`);
}
function isPropertyUpdated(changes, viewModel) {
  if (!changes.hasOwnProperty("model"))
    return false;
  const change = changes["model"];
  if (change.isFirstChange())
    return true;
  return !Object.is(viewModel, change.currentValue);
}
function isBuiltInAccessor(valueAccessor) {
  return Object.getPrototypeOf(valueAccessor.constructor) === BuiltInControlValueAccessor;
}
function syncPendingControls(form, directives) {
  form._syncPendingControls();
  directives.forEach((dir) => {
    const control = dir.control;
    if (control.updateOn === "submit" && control._pendingChange) {
      dir.viewToModelUpdate(control._pendingValue);
      control._pendingChange = false;
    }
  });
}
function selectValueAccessor(dir, valueAccessors) {
  if (!valueAccessors)
    return null;
  if (!Array.isArray(valueAccessors) && (typeof ngDevMode === "undefined" || ngDevMode))
    _throwInvalidValueAccessorError(dir);
  let defaultAccessor = void 0;
  let builtinAccessor = void 0;
  let customAccessor = void 0;
  valueAccessors.forEach((v13) => {
    if (v13.constructor === DefaultValueAccessor) {
      defaultAccessor = v13;
    } else if (isBuiltInAccessor(v13)) {
      if (builtinAccessor && (typeof ngDevMode === "undefined" || ngDevMode))
        _throwError(dir, "More than one built-in value accessor matches form control with");
      builtinAccessor = v13;
    } else {
      if (customAccessor && (typeof ngDevMode === "undefined" || ngDevMode))
        _throwError(dir, "More than one custom value accessor matches form control with");
      customAccessor = v13;
    }
  });
  if (customAccessor)
    return customAccessor;
  if (builtinAccessor)
    return builtinAccessor;
  if (defaultAccessor)
    return defaultAccessor;
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    _throwError(dir, "No valid value accessor for form control with");
  }
  return null;
}
function removeListItem$1(list, el) {
  const index = list.indexOf(el);
  if (index > -1)
    list.splice(index, 1);
}
function _ngModelWarning(name, type3, instance, warningConfig) {
  if (warningConfig === "never")
    return;
  if ((warningConfig === null || warningConfig === "once") && !type3._ngModelWarningSentOnce || warningConfig === "always" && !instance._ngModelWarningSent) {
    console.warn(ngModelWarning(name));
    type3._ngModelWarningSentOnce = true;
    instance._ngModelWarningSent = true;
  }
}
var formDirectiveProvider$1 = {
  provide: ControlContainer,
  useExisting: forwardRef(() => NgForm)
};
var resolvedPromise$1 = (() => Promise.resolve())();
var _NgForm = class _NgForm extends ControlContainer {
  constructor(validators, asyncValidators, callSetDisabledState) {
    super();
    this.callSetDisabledState = callSetDisabledState;
    this.submitted = false;
    this._directives = /* @__PURE__ */ new Set();
    this.ngSubmit = new EventEmitter();
    this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
  }
  /** @nodoc */
  ngAfterViewInit() {
    this._setUpdateStrategy();
  }
  /**
   * @description
   * The directive instance.
   */
  get formDirective() {
    return this;
  }
  /**
   * @description
   * The internal `FormGroup` instance.
   */
  get control() {
    return this.form;
  }
  /**
   * @description
   * Returns an array representing the path to this group. Because this directive
   * always lives at the top level of a form, it is always an empty array.
   */
  get path() {
    return [];
  }
  /**
   * @description
   * Returns a map of the controls in this group.
   */
  get controls() {
    return this.form.controls;
  }
  /**
   * @description
   * Method that sets up the control directive in this group, re-calculates its value
   * and validity, and adds the instance to the internal list of directives.
   *
   * @param dir The `NgModel` directive instance.
   */
  addControl(dir) {
    resolvedPromise$1.then(() => {
      const container = this._findContainer(dir.path);
      dir.control = container.registerControl(dir.name, dir.control);
      setUpControl(dir.control, dir, this.callSetDisabledState);
      dir.control.updateValueAndValidity({
        emitEvent: false
      });
      this._directives.add(dir);
    });
  }
  /**
   * @description
   * Retrieves the `FormControl` instance from the provided `NgModel` directive.
   *
   * @param dir The `NgModel` directive instance.
   */
  getControl(dir) {
    return this.form.get(dir.path);
  }
  /**
   * @description
   * Removes the `NgModel` instance from the internal list of directives
   *
   * @param dir The `NgModel` directive instance.
   */
  removeControl(dir) {
    resolvedPromise$1.then(() => {
      const container = this._findContainer(dir.path);
      if (container) {
        container.removeControl(dir.name);
      }
      this._directives.delete(dir);
    });
  }
  /**
   * @description
   * Adds a new `NgModelGroup` directive instance to the form.
   *
   * @param dir The `NgModelGroup` directive instance.
   */
  addFormGroup(dir) {
    resolvedPromise$1.then(() => {
      const container = this._findContainer(dir.path);
      const group = new FormGroup({});
      setUpFormContainer(group, dir);
      container.registerControl(dir.name, group);
      group.updateValueAndValidity({
        emitEvent: false
      });
    });
  }
  /**
   * @description
   * Removes the `NgModelGroup` directive instance from the form.
   *
   * @param dir The `NgModelGroup` directive instance.
   */
  removeFormGroup(dir) {
    resolvedPromise$1.then(() => {
      const container = this._findContainer(dir.path);
      if (container) {
        container.removeControl(dir.name);
      }
    });
  }
  /**
   * @description
   * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance
   *
   * @param dir The `NgModelGroup` directive instance.
   */
  getFormGroup(dir) {
    return this.form.get(dir.path);
  }
  /**
   * Sets the new value for the provided `NgControl` directive.
   *
   * @param dir The `NgControl` directive instance.
   * @param value The new value for the directive's control.
   */
  updateModel(dir, value) {
    resolvedPromise$1.then(() => {
      const ctrl = this.form.get(dir.path);
      ctrl.setValue(value);
    });
  }
  /**
   * @description
   * Sets the value for this `FormGroup`.
   *
   * @param value The new value
   */
  setValue(value) {
    this.control.setValue(value);
  }
  /**
   * @description
   * Method called when the "submit" event is triggered on the form.
   * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
   *
   * @param $event The "submit" event object
   */
  onSubmit($event) {
    this.submitted = true;
    syncPendingControls(this.form, this._directives);
    this.ngSubmit.emit($event);
    return $event?.target?.method === "dialog";
  }
  /**
   * @description
   * Method called when the "reset" event is triggered on the form.
   */
  onReset() {
    this.resetForm();
  }
  /**
   * @description
   * Resets the form to an initial value and resets its submitted status.
   *
   * @param value The new value for the form.
   */
  resetForm(value = void 0) {
    this.form.reset(value);
    this.submitted = false;
  }
  _setUpdateStrategy() {
    if (this.options && this.options.updateOn != null) {
      this.form._updateOn = this.options.updateOn;
    }
  }
  _findContainer(path3) {
    path3.pop();
    return path3.length ? this.form.get(path3) : this.form;
  }
};
_NgForm.ɵfac = function NgForm_Factory(t161) {
  return new (t161 || _NgForm)(ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), ɵɵdirectiveInject(CALL_SET_DISABLED_STATE, 8));
};
_NgForm.ɵdir = ɵɵdefineDirective({
  type: _NgForm,
  selectors: [["form", 3, "ngNoForm", "", 3, "formGroup", ""], ["ng-form"], ["", "ngForm", ""]],
  hostBindings: function NgForm_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("submit", function NgForm_submit_HostBindingHandler($event) {
        return ctx.onSubmit($event);
      })("reset", function NgForm_reset_HostBindingHandler() {
        return ctx.onReset();
      });
    }
  },
  inputs: {
    options: [InputFlags.None, "ngFormOptions", "options"]
  },
  outputs: {
    ngSubmit: "ngSubmit"
  },
  exportAs: ["ngForm"],
  features: [ɵɵProvidersFeature([formDirectiveProvider$1]), ɵɵInheritDefinitionFeature]
});
var NgForm = _NgForm;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgForm, [{
    type: Directive,
    args: [{
      selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]",
      providers: [formDirectiveProvider$1],
      host: {
        "(submit)": "onSubmit($event)",
        "(reset)": "onReset()"
      },
      outputs: ["ngSubmit"],
      exportAs: "ngForm"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [CALL_SET_DISABLED_STATE]
    }]
  }], {
    options: [{
      type: Input,
      args: ["ngFormOptions"]
    }]
  });
})();
function removeListItem(list, el) {
  const index = list.indexOf(el);
  if (index > -1)
    list.splice(index, 1);
}
function isFormControlState(formState) {
  return typeof formState === "object" && formState !== null && Object.keys(formState).length === 2 && "value" in formState && "disabled" in formState;
}
var FormControl = class FormControl2 extends AbstractControl {
  constructor(formState = null, validatorOrOpts, asyncValidator) {
    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
    this.defaultValue = null;
    this._onChange = [];
    this._pendingChange = false;
    this._applyFormState(formState);
    this._setUpdateStrategy(validatorOrOpts);
    this._initObservables();
    this.updateValueAndValidity({
      onlySelf: true,
      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
      // `VALID` or `INVALID`.
      // The status should be broadcasted via the `statusChanges` observable, so we set
      // `emitEvent` to `true` to allow that during the control creation process.
      emitEvent: !!this.asyncValidator
    });
    if (isOptionsObj(validatorOrOpts) && (validatorOrOpts.nonNullable || validatorOrOpts.initialValueIsDefault)) {
      if (isFormControlState(formState)) {
        this.defaultValue = formState.value;
      } else {
        this.defaultValue = formState;
      }
    }
  }
  setValue(value, options = {}) {
    this.value = this._pendingValue = value;
    if (this._onChange.length && options.emitModelToViewChange !== false) {
      this._onChange.forEach((changeFn) => changeFn(this.value, options.emitViewToModelChange !== false));
    }
    this.updateValueAndValidity(options);
  }
  patchValue(value, options = {}) {
    this.setValue(value, options);
  }
  reset(formState = this.defaultValue, options = {}) {
    this._applyFormState(formState);
    this.markAsPristine(options);
    this.markAsUntouched(options);
    this.setValue(this.value, options);
    this._pendingChange = false;
  }
  /**  @internal */
  _updateValue() {
  }
  /**  @internal */
  _anyControls(condition) {
    return false;
  }
  /**  @internal */
  _allControlsDisabled() {
    return this.disabled;
  }
  registerOnChange(fn) {
    this._onChange.push(fn);
  }
  /** @internal */
  _unregisterOnChange(fn) {
    removeListItem(this._onChange, fn);
  }
  registerOnDisabledChange(fn) {
    this._onDisabledChange.push(fn);
  }
  /** @internal */
  _unregisterOnDisabledChange(fn) {
    removeListItem(this._onDisabledChange, fn);
  }
  /** @internal */
  _forEachChild(cb) {
  }
  /** @internal */
  _syncPendingControls() {
    if (this.updateOn === "submit") {
      if (this._pendingDirty)
        this.markAsDirty();
      if (this._pendingTouched)
        this.markAsTouched();
      if (this._pendingChange) {
        this.setValue(this._pendingValue, {
          onlySelf: true,
          emitModelToViewChange: false
        });
        return true;
      }
    }
    return false;
  }
  _applyFormState(formState) {
    if (isFormControlState(formState)) {
      this.value = this._pendingValue = formState.value;
      formState.disabled ? this.disable({
        onlySelf: true,
        emitEvent: false
      }) : this.enable({
        onlySelf: true,
        emitEvent: false
      });
    } else {
      this.value = this._pendingValue = formState;
    }
  }
};
var isFormControl = (control) => control instanceof FormControl;
var _AbstractFormGroupDirective = class _AbstractFormGroupDirective extends ControlContainer {
  /** @nodoc */
  ngOnInit() {
    this._checkParentType();
    this.formDirective.addFormGroup(this);
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this.formDirective) {
      this.formDirective.removeFormGroup(this);
    }
  }
  /**
   * @description
   * The `FormGroup` bound to this directive.
   */
  get control() {
    return this.formDirective.getFormGroup(this);
  }
  /**
   * @description
   * The path to this group from the top-level directive.
   */
  get path() {
    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
  }
  /**
   * @description
   * The top-level directive for this group if present, otherwise null.
   */
  get formDirective() {
    return this._parent ? this._parent.formDirective : null;
  }
  /** @internal */
  _checkParentType() {
  }
};
_AbstractFormGroupDirective.ɵfac = /* @__PURE__ */ (() => {
  let ɵAbstractFormGroupDirective_BaseFactory;
  return function AbstractFormGroupDirective_Factory(t161) {
    return (ɵAbstractFormGroupDirective_BaseFactory || (ɵAbstractFormGroupDirective_BaseFactory = ɵɵgetInheritedFactory(_AbstractFormGroupDirective)))(t161 || _AbstractFormGroupDirective);
  };
})();
_AbstractFormGroupDirective.ɵdir = ɵɵdefineDirective({
  type: _AbstractFormGroupDirective,
  features: [ɵɵInheritDefinitionFeature]
});
var AbstractFormGroupDirective = _AbstractFormGroupDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AbstractFormGroupDirective, [{
    type: Directive
  }], null, null);
})();
function modelParentException() {
  return new RuntimeError(1350, `
    ngModel cannot be used to register form controls with a parent formGroup directive.  Try using
    formGroup's partner directive "formControlName" instead.  Example:

    ${formControlNameExample}

    Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:

    Example:

    ${ngModelWithFormGroupExample}`);
}
function formGroupNameException() {
  return new RuntimeError(1351, `
    ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.

    Option 1: Use formControlName instead of ngModel (reactive strategy):

    ${formGroupNameExample}

    Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):

    ${ngModelGroupExample}`);
}
function missingNameException() {
  return new RuntimeError(1352, `If ngModel is used within a form tag, either the name attribute must be set or the form
    control must be defined as 'standalone' in ngModelOptions.

    Example 1: <input [(ngModel)]="person.firstName" name="first">
    Example 2: <input [(ngModel)]="person.firstName" [ngModelOptions]="{standalone: true}">`);
}
function modelGroupParentException() {
  return new RuntimeError(1353, `
    ngModelGroup cannot be used with a parent formGroup directive.

    Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):

    ${formGroupNameExample}

    Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):

    ${ngModelGroupExample}`);
}
var modelGroupProvider = {
  provide: ControlContainer,
  useExisting: forwardRef(() => NgModelGroup)
};
var _NgModelGroup = class _NgModelGroup extends AbstractFormGroupDirective {
  constructor(parent, validators, asyncValidators) {
    super();
    this.name = "";
    this._parent = parent;
    this._setValidators(validators);
    this._setAsyncValidators(asyncValidators);
  }
  /** @internal */
  _checkParentType() {
    if (!(this._parent instanceof _NgModelGroup) && !(this._parent instanceof NgForm) && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw modelGroupParentException();
    }
  }
};
_NgModelGroup.ɵfac = function NgModelGroup_Factory(t161) {
  return new (t161 || _NgModelGroup)(ɵɵdirectiveInject(ControlContainer, 5), ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));
};
_NgModelGroup.ɵdir = ɵɵdefineDirective({
  type: _NgModelGroup,
  selectors: [["", "ngModelGroup", ""]],
  inputs: {
    name: [InputFlags.None, "ngModelGroup", "name"]
  },
  exportAs: ["ngModelGroup"],
  features: [ɵɵProvidersFeature([modelGroupProvider]), ɵɵInheritDefinitionFeature]
});
var NgModelGroup = _NgModelGroup;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgModelGroup, [{
    type: Directive,
    args: [{
      selector: "[ngModelGroup]",
      providers: [modelGroupProvider],
      exportAs: "ngModelGroup"
    }]
  }], () => [{
    type: ControlContainer,
    decorators: [{
      type: Host
    }, {
      type: SkipSelf
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }], {
    name: [{
      type: Input,
      args: ["ngModelGroup"]
    }]
  });
})();
var formControlBinding$1 = {
  provide: NgControl,
  useExisting: forwardRef(() => NgModel)
};
var resolvedPromise = (() => Promise.resolve())();
var _NgModel = class _NgModel extends NgControl {
  constructor(parent, validators, asyncValidators, valueAccessors, _changeDetectorRef, callSetDisabledState) {
    super();
    this._changeDetectorRef = _changeDetectorRef;
    this.callSetDisabledState = callSetDisabledState;
    this.control = new FormControl();
    this._registered = false;
    this.name = "";
    this.update = new EventEmitter();
    this._parent = parent;
    this._setValidators(validators);
    this._setAsyncValidators(asyncValidators);
    this.valueAccessor = selectValueAccessor(this, valueAccessors);
  }
  /** @nodoc */
  ngOnChanges(changes) {
    this._checkForErrors();
    if (!this._registered || "name" in changes) {
      if (this._registered) {
        this._checkName();
        if (this.formDirective) {
          const oldName = changes["name"].previousValue;
          this.formDirective.removeControl({
            name: oldName,
            path: this._getPath(oldName)
          });
        }
      }
      this._setUpControl();
    }
    if ("isDisabled" in changes) {
      this._updateDisabled(changes);
    }
    if (isPropertyUpdated(changes, this.viewModel)) {
      this._updateValue(this.model);
      this.viewModel = this.model;
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    this.formDirective && this.formDirective.removeControl(this);
  }
  /**
   * @description
   * Returns an array that represents the path from the top-level form to this control.
   * Each index is the string name of the control on that level.
   */
  get path() {
    return this._getPath(this.name);
  }
  /**
   * @description
   * The top-level directive for this control if present, otherwise null.
   */
  get formDirective() {
    return this._parent ? this._parent.formDirective : null;
  }
  /**
   * @description
   * Sets the new value for the view model and emits an `ngModelChange` event.
   *
   * @param newValue The new value emitted by `ngModelChange`.
   */
  viewToModelUpdate(newValue) {
    this.viewModel = newValue;
    this.update.emit(newValue);
  }
  _setUpControl() {
    this._setUpdateStrategy();
    this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
    this._registered = true;
  }
  _setUpdateStrategy() {
    if (this.options && this.options.updateOn != null) {
      this.control._updateOn = this.options.updateOn;
    }
  }
  _isStandalone() {
    return !this._parent || !!(this.options && this.options.standalone);
  }
  _setUpStandalone() {
    setUpControl(this.control, this, this.callSetDisabledState);
    this.control.updateValueAndValidity({
      emitEvent: false
    });
  }
  _checkForErrors() {
    if (!this._isStandalone()) {
      this._checkParentType();
    }
    this._checkName();
  }
  _checkParentType() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {
        throw formGroupNameException();
      } else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
        throw modelParentException();
      }
    }
  }
  _checkName() {
    if (this.options && this.options.name)
      this.name = this.options.name;
    if (!this._isStandalone() && !this.name && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw missingNameException();
    }
  }
  _updateValue(value) {
    resolvedPromise.then(() => {
      this.control.setValue(value, {
        emitViewToModelChange: false
      });
      this._changeDetectorRef?.markForCheck();
    });
  }
  _updateDisabled(changes) {
    const disabledValue = changes["isDisabled"].currentValue;
    const isDisabled = disabledValue !== 0 && booleanAttribute(disabledValue);
    resolvedPromise.then(() => {
      if (isDisabled && !this.control.disabled) {
        this.control.disable();
      } else if (!isDisabled && this.control.disabled) {
        this.control.enable();
      }
      this._changeDetectorRef?.markForCheck();
    });
  }
  _getPath(controlName) {
    return this._parent ? controlPath(controlName, this._parent) : [controlName];
  }
};
_NgModel.ɵfac = function NgModel_Factory(t161) {
  return new (t161 || _NgModel)(ɵɵdirectiveInject(ControlContainer, 9), ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), ɵɵdirectiveInject(ChangeDetectorRef, 8), ɵɵdirectiveInject(CALL_SET_DISABLED_STATE, 8));
};
_NgModel.ɵdir = ɵɵdefineDirective({
  type: _NgModel,
  selectors: [["", "ngModel", "", 3, "formControlName", "", 3, "formControl", ""]],
  inputs: {
    name: "name",
    isDisabled: [InputFlags.None, "disabled", "isDisabled"],
    model: [InputFlags.None, "ngModel", "model"],
    options: [InputFlags.None, "ngModelOptions", "options"]
  },
  outputs: {
    update: "ngModelChange"
  },
  exportAs: ["ngModel"],
  features: [ɵɵProvidersFeature([formControlBinding$1]), ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature]
});
var NgModel = _NgModel;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgModel, [{
    type: Directive,
    args: [{
      selector: "[ngModel]:not([formControlName]):not([formControl])",
      providers: [formControlBinding$1],
      exportAs: "ngModel"
    }]
  }], () => [{
    type: ControlContainer,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_VALUE_ACCESSOR]
    }]
  }, {
    type: ChangeDetectorRef,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [ChangeDetectorRef]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [CALL_SET_DISABLED_STATE]
    }]
  }], {
    name: [{
      type: Input
    }],
    isDisabled: [{
      type: Input,
      args: ["disabled"]
    }],
    model: [{
      type: Input,
      args: ["ngModel"]
    }],
    options: [{
      type: Input,
      args: ["ngModelOptions"]
    }],
    update: [{
      type: Output,
      args: ["ngModelChange"]
    }]
  });
})();
var _ɵNgNoValidate = class _ɵNgNoValidate {
};
_ɵNgNoValidate.ɵfac = function ɵNgNoValidate_Factory(t161) {
  return new (t161 || _ɵNgNoValidate)();
};
_ɵNgNoValidate.ɵdir = ɵɵdefineDirective({
  type: _ɵNgNoValidate,
  selectors: [["form", 3, "ngNoForm", "", 3, "ngNativeValidate", ""]],
  hostAttrs: ["novalidate", ""]
});
var ɵNgNoValidate = _ɵNgNoValidate;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ɵNgNoValidate, [{
    type: Directive,
    args: [{
      selector: "form:not([ngNoForm]):not([ngNativeValidate])",
      host: {
        "novalidate": ""
      }
    }]
  }], null, null);
})();
var NUMBER_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: forwardRef(() => NumberValueAccessor),
  multi: true
};
var _NumberValueAccessor = class _NumberValueAccessor extends BuiltInControlValueAccessor {
  /**
   * Sets the "value" property on the input element.
   * @nodoc
   */
  writeValue(value) {
    const normalizedValue = value == null ? "" : value;
    this.setProperty("value", normalizedValue);
  }
  /**
   * Registers a function called when the control value changes.
   * @nodoc
   */
  registerOnChange(fn) {
    this.onChange = (value) => {
      fn(value == "" ? null : parseFloat(value));
    };
  }
};
_NumberValueAccessor.ɵfac = /* @__PURE__ */ (() => {
  let ɵNumberValueAccessor_BaseFactory;
  return function NumberValueAccessor_Factory(t161) {
    return (ɵNumberValueAccessor_BaseFactory || (ɵNumberValueAccessor_BaseFactory = ɵɵgetInheritedFactory(_NumberValueAccessor)))(t161 || _NumberValueAccessor);
  };
})();
_NumberValueAccessor.ɵdir = ɵɵdefineDirective({
  type: _NumberValueAccessor,
  selectors: [["input", "type", "number", "formControlName", ""], ["input", "type", "number", "formControl", ""], ["input", "type", "number", "ngModel", ""]],
  hostBindings: function NumberValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("input", function NumberValueAccessor_input_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("blur", function NumberValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  features: [ɵɵProvidersFeature([NUMBER_VALUE_ACCESSOR]), ɵɵInheritDefinitionFeature]
});
var NumberValueAccessor = _NumberValueAccessor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NumberValueAccessor, [{
    type: Directive,
    args: [{
      selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]",
      host: {
        "(input)": "onChange($event.target.value)",
        "(blur)": "onTouched()"
      },
      providers: [NUMBER_VALUE_ACCESSOR]
    }]
  }], null, null);
})();
var RADIO_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: forwardRef(() => RadioControlValueAccessor),
  multi: true
};
function throwNameError() {
  throw new RuntimeError(1202, `
      If you define both a name and a formControlName attribute on your radio button, their values
      must match. Ex: <input type="radio" formControlName="food" name="food">
    `);
}
var _RadioControlRegistry = class _RadioControlRegistry {
  constructor() {
    this._accessors = [];
  }
  /**
   * @description
   * Adds a control to the internal registry. For internal use only.
   */
  add(control, accessor) {
    this._accessors.push([control, accessor]);
  }
  /**
   * @description
   * Removes a control from the internal registry. For internal use only.
   */
  remove(accessor) {
    for (let i35 = this._accessors.length - 1; i35 >= 0; --i35) {
      if (this._accessors[i35][1] === accessor) {
        this._accessors.splice(i35, 1);
        return;
      }
    }
  }
  /**
   * @description
   * Selects a radio button. For internal use only.
   */
  select(accessor) {
    this._accessors.forEach((c45) => {
      if (this._isSameGroup(c45, accessor) && c45[1] !== accessor) {
        c45[1].fireUncheck(accessor.value);
      }
    });
  }
  _isSameGroup(controlPair, accessor) {
    if (!controlPair[0].control)
      return false;
    return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
  }
};
_RadioControlRegistry.ɵfac = function RadioControlRegistry_Factory(t161) {
  return new (t161 || _RadioControlRegistry)();
};
_RadioControlRegistry.ɵprov = ɵɵdefineInjectable({
  token: _RadioControlRegistry,
  factory: _RadioControlRegistry.ɵfac,
  providedIn: "root"
});
var RadioControlRegistry = _RadioControlRegistry;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RadioControlRegistry, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var _RadioControlValueAccessor = class _RadioControlValueAccessor extends BuiltInControlValueAccessor {
  constructor(renderer, elementRef, _registry, _injector) {
    super(renderer, elementRef);
    this._registry = _registry;
    this._injector = _injector;
    this.setDisabledStateFired = false;
    this.onChange = () => {
    };
    this.callSetDisabledState = inject(CALL_SET_DISABLED_STATE, {
      optional: true
    }) ?? setDisabledStateDefault;
  }
  /** @nodoc */
  ngOnInit() {
    this._control = this._injector.get(NgControl);
    this._checkName();
    this._registry.add(this._control, this);
  }
  /** @nodoc */
  ngOnDestroy() {
    this._registry.remove(this);
  }
  /**
   * Sets the "checked" property value on the radio input element.
   * @nodoc
   */
  writeValue(value) {
    this._state = value === this.value;
    this.setProperty("checked", this._state);
  }
  /**
   * Registers a function called when the control value changes.
   * @nodoc
   */
  registerOnChange(fn) {
    this._fn = fn;
    this.onChange = () => {
      fn(this.value);
      this._registry.select(this);
    };
  }
  /** @nodoc */
  setDisabledState(isDisabled) {
    if (this.setDisabledStateFired || isDisabled || this.callSetDisabledState === "whenDisabledForLegacyCode") {
      this.setProperty("disabled", isDisabled);
    }
    this.setDisabledStateFired = true;
  }
  /**
   * Sets the "value" on the radio input element and unchecks it.
   *
   * @param value
   */
  fireUncheck(value) {
    this.writeValue(value);
  }
  _checkName() {
    if (this.name && this.formControlName && this.name !== this.formControlName && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throwNameError();
    }
    if (!this.name && this.formControlName)
      this.name = this.formControlName;
  }
};
_RadioControlValueAccessor.ɵfac = function RadioControlValueAccessor_Factory(t161) {
  return new (t161 || _RadioControlValueAccessor)(ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(RadioControlRegistry), ɵɵdirectiveInject(Injector));
};
_RadioControlValueAccessor.ɵdir = ɵɵdefineDirective({
  type: _RadioControlValueAccessor,
  selectors: [["input", "type", "radio", "formControlName", ""], ["input", "type", "radio", "formControl", ""], ["input", "type", "radio", "ngModel", ""]],
  hostBindings: function RadioControlValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("change", function RadioControlValueAccessor_change_HostBindingHandler() {
        return ctx.onChange();
      })("blur", function RadioControlValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  inputs: {
    name: "name",
    formControlName: "formControlName",
    value: "value"
  },
  features: [ɵɵProvidersFeature([RADIO_VALUE_ACCESSOR]), ɵɵInheritDefinitionFeature]
});
var RadioControlValueAccessor = _RadioControlValueAccessor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RadioControlValueAccessor, [{
    type: Directive,
    args: [{
      selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]",
      host: {
        "(change)": "onChange()",
        "(blur)": "onTouched()"
      },
      providers: [RADIO_VALUE_ACCESSOR]
    }]
  }], () => [{
    type: Renderer2
  }, {
    type: ElementRef
  }, {
    type: RadioControlRegistry
  }, {
    type: Injector
  }], {
    name: [{
      type: Input
    }],
    formControlName: [{
      type: Input
    }],
    value: [{
      type: Input
    }]
  });
})();
var RANGE_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: forwardRef(() => RangeValueAccessor),
  multi: true
};
var _RangeValueAccessor = class _RangeValueAccessor extends BuiltInControlValueAccessor {
  /**
   * Sets the "value" property on the input element.
   * @nodoc
   */
  writeValue(value) {
    this.setProperty("value", parseFloat(value));
  }
  /**
   * Registers a function called when the control value changes.
   * @nodoc
   */
  registerOnChange(fn) {
    this.onChange = (value) => {
      fn(value == "" ? null : parseFloat(value));
    };
  }
};
_RangeValueAccessor.ɵfac = /* @__PURE__ */ (() => {
  let ɵRangeValueAccessor_BaseFactory;
  return function RangeValueAccessor_Factory(t161) {
    return (ɵRangeValueAccessor_BaseFactory || (ɵRangeValueAccessor_BaseFactory = ɵɵgetInheritedFactory(_RangeValueAccessor)))(t161 || _RangeValueAccessor);
  };
})();
_RangeValueAccessor.ɵdir = ɵɵdefineDirective({
  type: _RangeValueAccessor,
  selectors: [["input", "type", "range", "formControlName", ""], ["input", "type", "range", "formControl", ""], ["input", "type", "range", "ngModel", ""]],
  hostBindings: function RangeValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("change", function RangeValueAccessor_change_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("input", function RangeValueAccessor_input_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("blur", function RangeValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  features: [ɵɵProvidersFeature([RANGE_VALUE_ACCESSOR]), ɵɵInheritDefinitionFeature]
});
var RangeValueAccessor = _RangeValueAccessor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RangeValueAccessor, [{
    type: Directive,
    args: [{
      selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]",
      host: {
        "(change)": "onChange($event.target.value)",
        "(input)": "onChange($event.target.value)",
        "(blur)": "onTouched()"
      },
      providers: [RANGE_VALUE_ACCESSOR]
    }]
  }], null, null);
})();
var NG_MODEL_WITH_FORM_CONTROL_WARNING = new InjectionToken(ngDevMode ? "NgModelWithFormControlWarning" : "");
var formControlBinding = {
  provide: NgControl,
  useExisting: forwardRef(() => FormControlDirective)
};
var _FormControlDirective = class _FormControlDirective extends NgControl {
  /**
   * @description
   * Triggers a warning in dev mode that this input should not be used with reactive forms.
   */
  set isDisabled(isDisabled) {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      console.warn(disabledAttrWarning);
    }
  }
  constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig, callSetDisabledState) {
    super();
    this._ngModelWarningConfig = _ngModelWarningConfig;
    this.callSetDisabledState = callSetDisabledState;
    this.update = new EventEmitter();
    this._ngModelWarningSent = false;
    this._setValidators(validators);
    this._setAsyncValidators(asyncValidators);
    this.valueAccessor = selectValueAccessor(this, valueAccessors);
  }
  /** @nodoc */
  ngOnChanges(changes) {
    if (this._isControlChanged(changes)) {
      const previousForm = changes["form"].previousValue;
      if (previousForm) {
        cleanUpControl(
          previousForm,
          this,
          /* validateControlPresenceOnChange */
          false
        );
      }
      setUpControl(this.form, this, this.callSetDisabledState);
      this.form.updateValueAndValidity({
        emitEvent: false
      });
    }
    if (isPropertyUpdated(changes, this.viewModel)) {
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        _ngModelWarning("formControl", _FormControlDirective, this, this._ngModelWarningConfig);
      }
      this.form.setValue(this.model);
      this.viewModel = this.model;
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this.form) {
      cleanUpControl(
        this.form,
        this,
        /* validateControlPresenceOnChange */
        false
      );
    }
  }
  /**
   * @description
   * Returns an array that represents the path from the top-level form to this control.
   * Each index is the string name of the control on that level.
   */
  get path() {
    return [];
  }
  /**
   * @description
   * The `FormControl` bound to this directive.
   */
  get control() {
    return this.form;
  }
  /**
   * @description
   * Sets the new value for the view model and emits an `ngModelChange` event.
   *
   * @param newValue The new value for the view model.
   */
  viewToModelUpdate(newValue) {
    this.viewModel = newValue;
    this.update.emit(newValue);
  }
  _isControlChanged(changes) {
    return changes.hasOwnProperty("form");
  }
};
_FormControlDirective._ngModelWarningSentOnce = false;
_FormControlDirective.ɵfac = function FormControlDirective_Factory(t161) {
  return new (t161 || _FormControlDirective)(ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), ɵɵdirectiveInject(NG_MODEL_WITH_FORM_CONTROL_WARNING, 8), ɵɵdirectiveInject(CALL_SET_DISABLED_STATE, 8));
};
_FormControlDirective.ɵdir = ɵɵdefineDirective({
  type: _FormControlDirective,
  selectors: [["", "formControl", ""]],
  inputs: {
    form: [InputFlags.None, "formControl", "form"],
    isDisabled: [InputFlags.None, "disabled", "isDisabled"],
    model: [InputFlags.None, "ngModel", "model"]
  },
  outputs: {
    update: "ngModelChange"
  },
  exportAs: ["ngForm"],
  features: [ɵɵProvidersFeature([formControlBinding]), ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature]
});
var FormControlDirective = _FormControlDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FormControlDirective, [{
    type: Directive,
    args: [{
      selector: "[formControl]",
      providers: [formControlBinding],
      exportAs: "ngForm"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_VALUE_ACCESSOR]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [CALL_SET_DISABLED_STATE]
    }]
  }], {
    form: [{
      type: Input,
      args: ["formControl"]
    }],
    isDisabled: [{
      type: Input,
      args: ["disabled"]
    }],
    model: [{
      type: Input,
      args: ["ngModel"]
    }],
    update: [{
      type: Output,
      args: ["ngModelChange"]
    }]
  });
})();
var formDirectiveProvider = {
  provide: ControlContainer,
  useExisting: forwardRef(() => FormGroupDirective)
};
var _FormGroupDirective = class _FormGroupDirective extends ControlContainer {
  constructor(validators, asyncValidators, callSetDisabledState) {
    super();
    this.callSetDisabledState = callSetDisabledState;
    this.submitted = false;
    this._onCollectionChange = () => this._updateDomValue();
    this.directives = [];
    this.form = null;
    this.ngSubmit = new EventEmitter();
    this._setValidators(validators);
    this._setAsyncValidators(asyncValidators);
  }
  /** @nodoc */
  ngOnChanges(changes) {
    this._checkFormPresent();
    if (changes.hasOwnProperty("form")) {
      this._updateValidators();
      this._updateDomValue();
      this._updateRegistrations();
      this._oldForm = this.form;
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this.form) {
      cleanUpValidators(this.form, this);
      if (this.form._onCollectionChange === this._onCollectionChange) {
        this.form._registerOnCollectionChange(() => {
        });
      }
    }
  }
  /**
   * @description
   * Returns this directive's instance.
   */
  get formDirective() {
    return this;
  }
  /**
   * @description
   * Returns the `FormGroup` bound to this directive.
   */
  get control() {
    return this.form;
  }
  /**
   * @description
   * Returns an array representing the path to this group. Because this directive
   * always lives at the top level of a form, it always an empty array.
   */
  get path() {
    return [];
  }
  /**
   * @description
   * Method that sets up the control directive in this group, re-calculates its value
   * and validity, and adds the instance to the internal list of directives.
   *
   * @param dir The `FormControlName` directive instance.
   */
  addControl(dir) {
    const ctrl = this.form.get(dir.path);
    setUpControl(ctrl, dir, this.callSetDisabledState);
    ctrl.updateValueAndValidity({
      emitEvent: false
    });
    this.directives.push(dir);
    return ctrl;
  }
  /**
   * @description
   * Retrieves the `FormControl` instance from the provided `FormControlName` directive
   *
   * @param dir The `FormControlName` directive instance.
   */
  getControl(dir) {
    return this.form.get(dir.path);
  }
  /**
   * @description
   * Removes the `FormControlName` instance from the internal list of directives
   *
   * @param dir The `FormControlName` directive instance.
   */
  removeControl(dir) {
    cleanUpControl(
      dir.control || null,
      dir,
      /* validateControlPresenceOnChange */
      false
    );
    removeListItem$1(this.directives, dir);
  }
  /**
   * Adds a new `FormGroupName` directive instance to the form.
   *
   * @param dir The `FormGroupName` directive instance.
   */
  addFormGroup(dir) {
    this._setUpFormContainer(dir);
  }
  /**
   * Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the
   * view.
   *
   * @param dir The `FormGroupName` directive instance.
   */
  removeFormGroup(dir) {
    this._cleanUpFormContainer(dir);
  }
  /**
   * @description
   * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance
   *
   * @param dir The `FormGroupName` directive instance.
   */
  getFormGroup(dir) {
    return this.form.get(dir.path);
  }
  /**
   * Performs the necessary setup when a `FormArrayName` directive instance is added to the view.
   *
   * @param dir The `FormArrayName` directive instance.
   */
  addFormArray(dir) {
    this._setUpFormContainer(dir);
  }
  /**
   * Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the
   * view.
   *
   * @param dir The `FormArrayName` directive instance.
   */
  removeFormArray(dir) {
    this._cleanUpFormContainer(dir);
  }
  /**
   * @description
   * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.
   *
   * @param dir The `FormArrayName` directive instance.
   */
  getFormArray(dir) {
    return this.form.get(dir.path);
  }
  /**
   * Sets the new value for the provided `FormControlName` directive.
   *
   * @param dir The `FormControlName` directive instance.
   * @param value The new value for the directive's control.
   */
  updateModel(dir, value) {
    const ctrl = this.form.get(dir.path);
    ctrl.setValue(value);
  }
  /**
   * @description
   * Method called with the "submit" event is triggered on the form.
   * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
   *
   * @param $event The "submit" event object
   */
  onSubmit($event) {
    this.submitted = true;
    syncPendingControls(this.form, this.directives);
    this.ngSubmit.emit($event);
    return $event?.target?.method === "dialog";
  }
  /**
   * @description
   * Method called when the "reset" event is triggered on the form.
   */
  onReset() {
    this.resetForm();
  }
  /**
   * @description
   * Resets the form to an initial value and resets its submitted status.
   *
   * @param value The new value for the form.
   */
  resetForm(value = void 0) {
    this.form.reset(value);
    this.submitted = false;
  }
  /** @internal */
  _updateDomValue() {
    this.directives.forEach((dir) => {
      const oldCtrl = dir.control;
      const newCtrl = this.form.get(dir.path);
      if (oldCtrl !== newCtrl) {
        cleanUpControl(oldCtrl || null, dir);
        if (isFormControl(newCtrl)) {
          setUpControl(newCtrl, dir, this.callSetDisabledState);
          dir.control = newCtrl;
        }
      }
    });
    this.form._updateTreeValidity({
      emitEvent: false
    });
  }
  _setUpFormContainer(dir) {
    const ctrl = this.form.get(dir.path);
    setUpFormContainer(ctrl, dir);
    ctrl.updateValueAndValidity({
      emitEvent: false
    });
  }
  _cleanUpFormContainer(dir) {
    if (this.form) {
      const ctrl = this.form.get(dir.path);
      if (ctrl) {
        const isControlUpdated = cleanUpFormContainer(ctrl, dir);
        if (isControlUpdated) {
          ctrl.updateValueAndValidity({
            emitEvent: false
          });
        }
      }
    }
  }
  _updateRegistrations() {
    this.form._registerOnCollectionChange(this._onCollectionChange);
    if (this._oldForm) {
      this._oldForm._registerOnCollectionChange(() => {
      });
    }
  }
  _updateValidators() {
    setUpValidators(this.form, this);
    if (this._oldForm) {
      cleanUpValidators(this._oldForm, this);
    }
  }
  _checkFormPresent() {
    if (!this.form && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw missingFormException();
    }
  }
};
_FormGroupDirective.ɵfac = function FormGroupDirective_Factory(t161) {
  return new (t161 || _FormGroupDirective)(ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), ɵɵdirectiveInject(CALL_SET_DISABLED_STATE, 8));
};
_FormGroupDirective.ɵdir = ɵɵdefineDirective({
  type: _FormGroupDirective,
  selectors: [["", "formGroup", ""]],
  hostBindings: function FormGroupDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("submit", function FormGroupDirective_submit_HostBindingHandler($event) {
        return ctx.onSubmit($event);
      })("reset", function FormGroupDirective_reset_HostBindingHandler() {
        return ctx.onReset();
      });
    }
  },
  inputs: {
    form: [InputFlags.None, "formGroup", "form"]
  },
  outputs: {
    ngSubmit: "ngSubmit"
  },
  exportAs: ["ngForm"],
  features: [ɵɵProvidersFeature([formDirectiveProvider]), ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature]
});
var FormGroupDirective = _FormGroupDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FormGroupDirective, [{
    type: Directive,
    args: [{
      selector: "[formGroup]",
      providers: [formDirectiveProvider],
      host: {
        "(submit)": "onSubmit($event)",
        "(reset)": "onReset()"
      },
      exportAs: "ngForm"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [CALL_SET_DISABLED_STATE]
    }]
  }], {
    form: [{
      type: Input,
      args: ["formGroup"]
    }],
    ngSubmit: [{
      type: Output
    }]
  });
})();
var formGroupNameProvider = {
  provide: ControlContainer,
  useExisting: forwardRef(() => FormGroupName)
};
var _FormGroupName = class _FormGroupName extends AbstractFormGroupDirective {
  constructor(parent, validators, asyncValidators) {
    super();
    this.name = null;
    this._parent = parent;
    this._setValidators(validators);
    this._setAsyncValidators(asyncValidators);
  }
  /** @internal */
  _checkParentType() {
    if (_hasInvalidParent(this._parent) && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw groupParentException();
    }
  }
};
_FormGroupName.ɵfac = function FormGroupName_Factory(t161) {
  return new (t161 || _FormGroupName)(ɵɵdirectiveInject(ControlContainer, 13), ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));
};
_FormGroupName.ɵdir = ɵɵdefineDirective({
  type: _FormGroupName,
  selectors: [["", "formGroupName", ""]],
  inputs: {
    name: [InputFlags.None, "formGroupName", "name"]
  },
  features: [ɵɵProvidersFeature([formGroupNameProvider]), ɵɵInheritDefinitionFeature]
});
var FormGroupName = _FormGroupName;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FormGroupName, [{
    type: Directive,
    args: [{
      selector: "[formGroupName]",
      providers: [formGroupNameProvider]
    }]
  }], () => [{
    type: ControlContainer,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }, {
      type: SkipSelf
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }], {
    name: [{
      type: Input,
      args: ["formGroupName"]
    }]
  });
})();
var formArrayNameProvider = {
  provide: ControlContainer,
  useExisting: forwardRef(() => FormArrayName)
};
var _FormArrayName = class _FormArrayName extends ControlContainer {
  constructor(parent, validators, asyncValidators) {
    super();
    this.name = null;
    this._parent = parent;
    this._setValidators(validators);
    this._setAsyncValidators(asyncValidators);
  }
  /**
   * A lifecycle method called when the directive's inputs are initialized. For internal use only.
   * @throws If the directive does not have a valid parent.
   * @nodoc
   */
  ngOnInit() {
    this._checkParentType();
    this.formDirective.addFormArray(this);
  }
  /**
   * A lifecycle method called before the directive's instance is destroyed. For internal use only.
   * @nodoc
   */
  ngOnDestroy() {
    if (this.formDirective) {
      this.formDirective.removeFormArray(this);
    }
  }
  /**
   * @description
   * The `FormArray` bound to this directive.
   */
  get control() {
    return this.formDirective.getFormArray(this);
  }
  /**
   * @description
   * The top-level directive for this group if present, otherwise null.
   */
  get formDirective() {
    return this._parent ? this._parent.formDirective : null;
  }
  /**
   * @description
   * Returns an array that represents the path from the top-level form to this control.
   * Each index is the string name of the control on that level.
   */
  get path() {
    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
  }
  _checkParentType() {
    if (_hasInvalidParent(this._parent) && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw arrayParentException();
    }
  }
};
_FormArrayName.ɵfac = function FormArrayName_Factory(t161) {
  return new (t161 || _FormArrayName)(ɵɵdirectiveInject(ControlContainer, 13), ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10));
};
_FormArrayName.ɵdir = ɵɵdefineDirective({
  type: _FormArrayName,
  selectors: [["", "formArrayName", ""]],
  inputs: {
    name: [InputFlags.None, "formArrayName", "name"]
  },
  features: [ɵɵProvidersFeature([formArrayNameProvider]), ɵɵInheritDefinitionFeature]
});
var FormArrayName = _FormArrayName;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FormArrayName, [{
    type: Directive,
    args: [{
      selector: "[formArrayName]",
      providers: [formArrayNameProvider]
    }]
  }], () => [{
    type: ControlContainer,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }, {
      type: SkipSelf
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }], {
    name: [{
      type: Input,
      args: ["formArrayName"]
    }]
  });
})();
function _hasInvalidParent(parent) {
  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
}
var controlNameBinding = {
  provide: NgControl,
  useExisting: forwardRef(() => FormControlName)
};
var _FormControlName = class _FormControlName extends NgControl {
  /**
   * @description
   * Triggers a warning in dev mode that this input should not be used with reactive forms.
   */
  set isDisabled(isDisabled) {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      console.warn(disabledAttrWarning);
    }
  }
  constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {
    super();
    this._ngModelWarningConfig = _ngModelWarningConfig;
    this._added = false;
    this.name = null;
    this.update = new EventEmitter();
    this._ngModelWarningSent = false;
    this._parent = parent;
    this._setValidators(validators);
    this._setAsyncValidators(asyncValidators);
    this.valueAccessor = selectValueAccessor(this, valueAccessors);
  }
  /** @nodoc */
  ngOnChanges(changes) {
    if (!this._added)
      this._setUpControl();
    if (isPropertyUpdated(changes, this.viewModel)) {
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        _ngModelWarning("formControlName", _FormControlName, this, this._ngModelWarningConfig);
      }
      this.viewModel = this.model;
      this.formDirective.updateModel(this, this.model);
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this.formDirective) {
      this.formDirective.removeControl(this);
    }
  }
  /**
   * @description
   * Sets the new value for the view model and emits an `ngModelChange` event.
   *
   * @param newValue The new value for the view model.
   */
  viewToModelUpdate(newValue) {
    this.viewModel = newValue;
    this.update.emit(newValue);
  }
  /**
   * @description
   * Returns an array that represents the path from the top-level form to this control.
   * Each index is the string name of the control on that level.
   */
  get path() {
    return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
  }
  /**
   * @description
   * The top-level directive for this group if present, otherwise null.
   */
  get formDirective() {
    return this._parent ? this._parent.formDirective : null;
  }
  _checkParentType() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {
        throw ngModelGroupException();
      } else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {
        throw controlParentException();
      }
    }
  }
  _setUpControl() {
    this._checkParentType();
    this.control = this.formDirective.addControl(this);
    this._added = true;
  }
};
_FormControlName._ngModelWarningSentOnce = false;
_FormControlName.ɵfac = function FormControlName_Factory(t161) {
  return new (t161 || _FormControlName)(ɵɵdirectiveInject(ControlContainer, 13), ɵɵdirectiveInject(NG_VALIDATORS, 10), ɵɵdirectiveInject(NG_ASYNC_VALIDATORS, 10), ɵɵdirectiveInject(NG_VALUE_ACCESSOR, 10), ɵɵdirectiveInject(NG_MODEL_WITH_FORM_CONTROL_WARNING, 8));
};
_FormControlName.ɵdir = ɵɵdefineDirective({
  type: _FormControlName,
  selectors: [["", "formControlName", ""]],
  inputs: {
    name: [InputFlags.None, "formControlName", "name"],
    isDisabled: [InputFlags.None, "disabled", "isDisabled"],
    model: [InputFlags.None, "ngModel", "model"]
  },
  outputs: {
    update: "ngModelChange"
  },
  features: [ɵɵProvidersFeature([controlNameBinding]), ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature]
});
var FormControlName = _FormControlName;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FormControlName, [{
    type: Directive,
    args: [{
      selector: "[formControlName]",
      providers: [controlNameBinding]
    }]
  }], () => [{
    type: ControlContainer,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }, {
      type: SkipSelf
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_VALIDATORS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_ASYNC_VALIDATORS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [NG_VALUE_ACCESSOR]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [NG_MODEL_WITH_FORM_CONTROL_WARNING]
    }]
  }], {
    name: [{
      type: Input,
      args: ["formControlName"]
    }],
    isDisabled: [{
      type: Input,
      args: ["disabled"]
    }],
    model: [{
      type: Input,
      args: ["ngModel"]
    }],
    update: [{
      type: Output,
      args: ["ngModelChange"]
    }]
  });
})();
var SELECT_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: forwardRef(() => SelectControlValueAccessor),
  multi: true
};
function _buildValueString$1(id, value) {
  if (id == null)
    return `${value}`;
  if (value && typeof value === "object")
    value = "Object";
  return `${id}: ${value}`.slice(0, 50);
}
function _extractId$1(valueString) {
  return valueString.split(":")[0];
}
var _SelectControlValueAccessor = class _SelectControlValueAccessor extends BuiltInControlValueAccessor {
  constructor() {
    super(...arguments);
    this._optionMap = /* @__PURE__ */ new Map();
    this._idCounter = 0;
    this._compareWith = Object.is;
  }
  /**
   * @description
   * Tracks the option comparison algorithm for tracking identities when
   * checking for changes.
   */
  set compareWith(fn) {
    if (typeof fn !== "function" && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw new RuntimeError(1201, `compareWith must be a function, but received ${JSON.stringify(fn)}`);
    }
    this._compareWith = fn;
  }
  /**
   * Sets the "value" property on the select element.
   * @nodoc
   */
  writeValue(value) {
    this.value = value;
    const id = this._getOptionId(value);
    const valueString = _buildValueString$1(id, value);
    this.setProperty("value", valueString);
  }
  /**
   * Registers a function called when the control value changes.
   * @nodoc
   */
  registerOnChange(fn) {
    this.onChange = (valueString) => {
      this.value = this._getOptionValue(valueString);
      fn(this.value);
    };
  }
  /** @internal */
  _registerOption() {
    return (this._idCounter++).toString();
  }
  /** @internal */
  _getOptionId(value) {
    for (const id of this._optionMap.keys()) {
      if (this._compareWith(this._optionMap.get(id), value))
        return id;
    }
    return null;
  }
  /** @internal */
  _getOptionValue(valueString) {
    const id = _extractId$1(valueString);
    return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
  }
};
_SelectControlValueAccessor.ɵfac = /* @__PURE__ */ (() => {
  let ɵSelectControlValueAccessor_BaseFactory;
  return function SelectControlValueAccessor_Factory(t161) {
    return (ɵSelectControlValueAccessor_BaseFactory || (ɵSelectControlValueAccessor_BaseFactory = ɵɵgetInheritedFactory(_SelectControlValueAccessor)))(t161 || _SelectControlValueAccessor);
  };
})();
_SelectControlValueAccessor.ɵdir = ɵɵdefineDirective({
  type: _SelectControlValueAccessor,
  selectors: [["select", "formControlName", "", 3, "multiple", ""], ["select", "formControl", "", 3, "multiple", ""], ["select", "ngModel", "", 3, "multiple", ""]],
  hostBindings: function SelectControlValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("change", function SelectControlValueAccessor_change_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("blur", function SelectControlValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  inputs: {
    compareWith: "compareWith"
  },
  features: [ɵɵProvidersFeature([SELECT_VALUE_ACCESSOR]), ɵɵInheritDefinitionFeature]
});
var SelectControlValueAccessor = _SelectControlValueAccessor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SelectControlValueAccessor, [{
    type: Directive,
    args: [{
      selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]",
      host: {
        "(change)": "onChange($event.target.value)",
        "(blur)": "onTouched()"
      },
      providers: [SELECT_VALUE_ACCESSOR]
    }]
  }], null, {
    compareWith: [{
      type: Input
    }]
  });
})();
var _NgSelectOption = class _NgSelectOption {
  constructor(_element, _renderer, _select) {
    this._element = _element;
    this._renderer = _renderer;
    this._select = _select;
    if (this._select)
      this.id = this._select._registerOption();
  }
  /**
   * @description
   * Tracks the value bound to the option element. Unlike the value binding,
   * ngValue supports binding to objects.
   */
  set ngValue(value) {
    if (this._select == null)
      return;
    this._select._optionMap.set(this.id, value);
    this._setElementValue(_buildValueString$1(this.id, value));
    this._select.writeValue(this._select.value);
  }
  /**
   * @description
   * Tracks simple string values bound to the option element.
   * For objects, use the `ngValue` input binding.
   */
  set value(value) {
    this._setElementValue(value);
    if (this._select)
      this._select.writeValue(this._select.value);
  }
  /** @internal */
  _setElementValue(value) {
    this._renderer.setProperty(this._element.nativeElement, "value", value);
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this._select) {
      this._select._optionMap.delete(this.id);
      this._select.writeValue(this._select.value);
    }
  }
};
_NgSelectOption.ɵfac = function NgSelectOption_Factory(t161) {
  return new (t161 || _NgSelectOption)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(SelectControlValueAccessor, 9));
};
_NgSelectOption.ɵdir = ɵɵdefineDirective({
  type: _NgSelectOption,
  selectors: [["option"]],
  inputs: {
    ngValue: "ngValue",
    value: "value"
  }
});
var NgSelectOption = _NgSelectOption;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgSelectOption, [{
    type: Directive,
    args: [{
      selector: "option"
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: SelectControlValueAccessor,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }]
  }], {
    ngValue: [{
      type: Input,
      args: ["ngValue"]
    }],
    value: [{
      type: Input,
      args: ["value"]
    }]
  });
})();
var SELECT_MULTIPLE_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: forwardRef(() => SelectMultipleControlValueAccessor),
  multi: true
};
function _buildValueString(id, value) {
  if (id == null)
    return `${value}`;
  if (typeof value === "string")
    value = `'${value}'`;
  if (value && typeof value === "object")
    value = "Object";
  return `${id}: ${value}`.slice(0, 50);
}
function _extractId(valueString) {
  return valueString.split(":")[0];
}
var _SelectMultipleControlValueAccessor = class _SelectMultipleControlValueAccessor extends BuiltInControlValueAccessor {
  constructor() {
    super(...arguments);
    this._optionMap = /* @__PURE__ */ new Map();
    this._idCounter = 0;
    this._compareWith = Object.is;
  }
  /**
   * @description
   * Tracks the option comparison algorithm for tracking identities when
   * checking for changes.
   */
  set compareWith(fn) {
    if (typeof fn !== "function" && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw new RuntimeError(1201, `compareWith must be a function, but received ${JSON.stringify(fn)}`);
    }
    this._compareWith = fn;
  }
  /**
   * Sets the "value" property on one or of more of the select's options.
   * @nodoc
   */
  writeValue(value) {
    this.value = value;
    let optionSelectedStateSetter;
    if (Array.isArray(value)) {
      const ids = value.map((v13) => this._getOptionId(v13));
      optionSelectedStateSetter = (opt, o88) => {
        opt._setSelected(ids.indexOf(o88.toString()) > -1);
      };
    } else {
      optionSelectedStateSetter = (opt, o88) => {
        opt._setSelected(false);
      };
    }
    this._optionMap.forEach(optionSelectedStateSetter);
  }
  /**
   * Registers a function called when the control value changes
   * and writes an array of the selected options.
   * @nodoc
   */
  registerOnChange(fn) {
    this.onChange = (element) => {
      const selected = [];
      const selectedOptions = element.selectedOptions;
      if (selectedOptions !== void 0) {
        const options = selectedOptions;
        for (let i35 = 0; i35 < options.length; i35++) {
          const opt = options[i35];
          const val = this._getOptionValue(opt.value);
          selected.push(val);
        }
      } else {
        const options = element.options;
        for (let i35 = 0; i35 < options.length; i35++) {
          const opt = options[i35];
          if (opt.selected) {
            const val = this._getOptionValue(opt.value);
            selected.push(val);
          }
        }
      }
      this.value = selected;
      fn(selected);
    };
  }
  /** @internal */
  _registerOption(value) {
    const id = (this._idCounter++).toString();
    this._optionMap.set(id, value);
    return id;
  }
  /** @internal */
  _getOptionId(value) {
    for (const id of this._optionMap.keys()) {
      if (this._compareWith(this._optionMap.get(id)._value, value))
        return id;
    }
    return null;
  }
  /** @internal */
  _getOptionValue(valueString) {
    const id = _extractId(valueString);
    return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
  }
};
_SelectMultipleControlValueAccessor.ɵfac = /* @__PURE__ */ (() => {
  let ɵSelectMultipleControlValueAccessor_BaseFactory;
  return function SelectMultipleControlValueAccessor_Factory(t161) {
    return (ɵSelectMultipleControlValueAccessor_BaseFactory || (ɵSelectMultipleControlValueAccessor_BaseFactory = ɵɵgetInheritedFactory(_SelectMultipleControlValueAccessor)))(t161 || _SelectMultipleControlValueAccessor);
  };
})();
_SelectMultipleControlValueAccessor.ɵdir = ɵɵdefineDirective({
  type: _SelectMultipleControlValueAccessor,
  selectors: [["select", "multiple", "", "formControlName", ""], ["select", "multiple", "", "formControl", ""], ["select", "multiple", "", "ngModel", ""]],
  hostBindings: function SelectMultipleControlValueAccessor_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("change", function SelectMultipleControlValueAccessor_change_HostBindingHandler($event) {
        return ctx.onChange($event.target);
      })("blur", function SelectMultipleControlValueAccessor_blur_HostBindingHandler() {
        return ctx.onTouched();
      });
    }
  },
  inputs: {
    compareWith: "compareWith"
  },
  features: [ɵɵProvidersFeature([SELECT_MULTIPLE_VALUE_ACCESSOR]), ɵɵInheritDefinitionFeature]
});
var SelectMultipleControlValueAccessor = _SelectMultipleControlValueAccessor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SelectMultipleControlValueAccessor, [{
    type: Directive,
    args: [{
      selector: "select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]",
      host: {
        "(change)": "onChange($event.target)",
        "(blur)": "onTouched()"
      },
      providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
    }]
  }], null, {
    compareWith: [{
      type: Input
    }]
  });
})();
var _ɵNgSelectMultipleOption = class _ɵNgSelectMultipleOption {
  constructor(_element, _renderer, _select) {
    this._element = _element;
    this._renderer = _renderer;
    this._select = _select;
    if (this._select) {
      this.id = this._select._registerOption(this);
    }
  }
  /**
   * @description
   * Tracks the value bound to the option element. Unlike the value binding,
   * ngValue supports binding to objects.
   */
  set ngValue(value) {
    if (this._select == null)
      return;
    this._value = value;
    this._setElementValue(_buildValueString(this.id, value));
    this._select.writeValue(this._select.value);
  }
  /**
   * @description
   * Tracks simple string values bound to the option element.
   * For objects, use the `ngValue` input binding.
   */
  set value(value) {
    if (this._select) {
      this._value = value;
      this._setElementValue(_buildValueString(this.id, value));
      this._select.writeValue(this._select.value);
    } else {
      this._setElementValue(value);
    }
  }
  /** @internal */
  _setElementValue(value) {
    this._renderer.setProperty(this._element.nativeElement, "value", value);
  }
  /** @internal */
  _setSelected(selected) {
    this._renderer.setProperty(this._element.nativeElement, "selected", selected);
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this._select) {
      this._select._optionMap.delete(this.id);
      this._select.writeValue(this._select.value);
    }
  }
};
_ɵNgSelectMultipleOption.ɵfac = function ɵNgSelectMultipleOption_Factory(t161) {
  return new (t161 || _ɵNgSelectMultipleOption)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(SelectMultipleControlValueAccessor, 9));
};
_ɵNgSelectMultipleOption.ɵdir = ɵɵdefineDirective({
  type: _ɵNgSelectMultipleOption,
  selectors: [["option"]],
  inputs: {
    ngValue: "ngValue",
    value: "value"
  }
});
var ɵNgSelectMultipleOption = _ɵNgSelectMultipleOption;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ɵNgSelectMultipleOption, [{
    type: Directive,
    args: [{
      selector: "option"
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: SelectMultipleControlValueAccessor,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }]
  }], {
    ngValue: [{
      type: Input,
      args: ["ngValue"]
    }],
    value: [{
      type: Input,
      args: ["value"]
    }]
  });
})();
function toInteger(value) {
  return typeof value === "number" ? value : parseInt(value, 10);
}
function toFloat(value) {
  return typeof value === "number" ? value : parseFloat(value);
}
var _AbstractValidatorDirective = class _AbstractValidatorDirective {
  constructor() {
    this._validator = nullValidator;
  }
  /** @nodoc */
  ngOnChanges(changes) {
    if (this.inputName in changes) {
      const input = this.normalizeInput(changes[this.inputName].currentValue);
      this._enabled = this.enabled(input);
      this._validator = this._enabled ? this.createValidator(input) : nullValidator;
      if (this._onChange) {
        this._onChange();
      }
    }
  }
  /** @nodoc */
  validate(control) {
    return this._validator(control);
  }
  /** @nodoc */
  registerOnValidatorChange(fn) {
    this._onChange = fn;
  }
  /**
   * @description
   * Determines whether this validator should be active or not based on an input.
   * Base class implementation checks whether an input is defined (if the value is different from
   * `null` and `undefined`). Validator classes that extend this base class can override this
   * function with the logic specific to a particular validator directive.
   */
  enabled(input) {
    return input != null;
  }
};
_AbstractValidatorDirective.ɵfac = function AbstractValidatorDirective_Factory(t161) {
  return new (t161 || _AbstractValidatorDirective)();
};
_AbstractValidatorDirective.ɵdir = ɵɵdefineDirective({
  type: _AbstractValidatorDirective,
  features: [ɵɵNgOnChangesFeature]
});
var AbstractValidatorDirective = _AbstractValidatorDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AbstractValidatorDirective, [{
    type: Directive
  }], null, null);
})();
var MAX_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: forwardRef(() => MaxValidator),
  multi: true
};
var _MaxValidator = class _MaxValidator extends AbstractValidatorDirective {
  constructor() {
    super(...arguments);
    this.inputName = "max";
    this.normalizeInput = (input) => toFloat(input);
    this.createValidator = (max) => maxValidator(max);
  }
};
_MaxValidator.ɵfac = /* @__PURE__ */ (() => {
  let ɵMaxValidator_BaseFactory;
  return function MaxValidator_Factory(t161) {
    return (ɵMaxValidator_BaseFactory || (ɵMaxValidator_BaseFactory = ɵɵgetInheritedFactory(_MaxValidator)))(t161 || _MaxValidator);
  };
})();
_MaxValidator.ɵdir = ɵɵdefineDirective({
  type: _MaxValidator,
  selectors: [["input", "type", "number", "max", "", "formControlName", ""], ["input", "type", "number", "max", "", "formControl", ""], ["input", "type", "number", "max", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function MaxValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("max", ctx._enabled ? ctx.max : null);
    }
  },
  inputs: {
    max: "max"
  },
  features: [ɵɵProvidersFeature([MAX_VALIDATOR]), ɵɵInheritDefinitionFeature]
});
var MaxValidator = _MaxValidator;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MaxValidator, [{
    type: Directive,
    args: [{
      selector: "input[type=number][max][formControlName],input[type=number][max][formControl],input[type=number][max][ngModel]",
      providers: [MAX_VALIDATOR],
      host: {
        "[attr.max]": "_enabled ? max : null"
      }
    }]
  }], null, {
    max: [{
      type: Input
    }]
  });
})();
var MIN_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: forwardRef(() => MinValidator),
  multi: true
};
var _MinValidator = class _MinValidator extends AbstractValidatorDirective {
  constructor() {
    super(...arguments);
    this.inputName = "min";
    this.normalizeInput = (input) => toFloat(input);
    this.createValidator = (min) => minValidator(min);
  }
};
_MinValidator.ɵfac = /* @__PURE__ */ (() => {
  let ɵMinValidator_BaseFactory;
  return function MinValidator_Factory(t161) {
    return (ɵMinValidator_BaseFactory || (ɵMinValidator_BaseFactory = ɵɵgetInheritedFactory(_MinValidator)))(t161 || _MinValidator);
  };
})();
_MinValidator.ɵdir = ɵɵdefineDirective({
  type: _MinValidator,
  selectors: [["input", "type", "number", "min", "", "formControlName", ""], ["input", "type", "number", "min", "", "formControl", ""], ["input", "type", "number", "min", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function MinValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("min", ctx._enabled ? ctx.min : null);
    }
  },
  inputs: {
    min: "min"
  },
  features: [ɵɵProvidersFeature([MIN_VALIDATOR]), ɵɵInheritDefinitionFeature]
});
var MinValidator = _MinValidator;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MinValidator, [{
    type: Directive,
    args: [{
      selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]",
      providers: [MIN_VALIDATOR],
      host: {
        "[attr.min]": "_enabled ? min : null"
      }
    }]
  }], null, {
    min: [{
      type: Input
    }]
  });
})();
var REQUIRED_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: forwardRef(() => RequiredValidator),
  multi: true
};
var CHECKBOX_REQUIRED_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: forwardRef(() => CheckboxRequiredValidator),
  multi: true
};
var _RequiredValidator = class _RequiredValidator extends AbstractValidatorDirective {
  constructor() {
    super(...arguments);
    this.inputName = "required";
    this.normalizeInput = booleanAttribute;
    this.createValidator = (input) => requiredValidator;
  }
  /** @nodoc */
  enabled(input) {
    return input;
  }
};
_RequiredValidator.ɵfac = /* @__PURE__ */ (() => {
  let ɵRequiredValidator_BaseFactory;
  return function RequiredValidator_Factory(t161) {
    return (ɵRequiredValidator_BaseFactory || (ɵRequiredValidator_BaseFactory = ɵɵgetInheritedFactory(_RequiredValidator)))(t161 || _RequiredValidator);
  };
})();
_RequiredValidator.ɵdir = ɵɵdefineDirective({
  type: _RequiredValidator,
  selectors: [["", "required", "", "formControlName", "", 3, "type", "checkbox"], ["", "required", "", "formControl", "", 3, "type", "checkbox"], ["", "required", "", "ngModel", "", 3, "type", "checkbox"]],
  hostVars: 1,
  hostBindings: function RequiredValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("required", ctx._enabled ? "" : null);
    }
  },
  inputs: {
    required: "required"
  },
  features: [ɵɵProvidersFeature([REQUIRED_VALIDATOR]), ɵɵInheritDefinitionFeature]
});
var RequiredValidator = _RequiredValidator;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RequiredValidator, [{
    type: Directive,
    args: [{
      selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]",
      providers: [REQUIRED_VALIDATOR],
      host: {
        "[attr.required]": '_enabled ? "" : null'
      }
    }]
  }], null, {
    required: [{
      type: Input
    }]
  });
})();
var _CheckboxRequiredValidator = class _CheckboxRequiredValidator extends RequiredValidator {
  constructor() {
    super(...arguments);
    this.createValidator = (input) => requiredTrueValidator;
  }
};
_CheckboxRequiredValidator.ɵfac = /* @__PURE__ */ (() => {
  let ɵCheckboxRequiredValidator_BaseFactory;
  return function CheckboxRequiredValidator_Factory(t161) {
    return (ɵCheckboxRequiredValidator_BaseFactory || (ɵCheckboxRequiredValidator_BaseFactory = ɵɵgetInheritedFactory(_CheckboxRequiredValidator)))(t161 || _CheckboxRequiredValidator);
  };
})();
_CheckboxRequiredValidator.ɵdir = ɵɵdefineDirective({
  type: _CheckboxRequiredValidator,
  selectors: [["input", "type", "checkbox", "required", "", "formControlName", ""], ["input", "type", "checkbox", "required", "", "formControl", ""], ["input", "type", "checkbox", "required", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function CheckboxRequiredValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("required", ctx._enabled ? "" : null);
    }
  },
  features: [ɵɵProvidersFeature([CHECKBOX_REQUIRED_VALIDATOR]), ɵɵInheritDefinitionFeature]
});
var CheckboxRequiredValidator = _CheckboxRequiredValidator;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CheckboxRequiredValidator, [{
    type: Directive,
    args: [{
      selector: "input[type=checkbox][required][formControlName],input[type=checkbox][required][formControl],input[type=checkbox][required][ngModel]",
      providers: [CHECKBOX_REQUIRED_VALIDATOR],
      host: {
        "[attr.required]": '_enabled ? "" : null'
      }
    }]
  }], null, null);
})();
var EMAIL_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: forwardRef(() => EmailValidator),
  multi: true
};
var _EmailValidator = class _EmailValidator extends AbstractValidatorDirective {
  constructor() {
    super(...arguments);
    this.inputName = "email";
    this.normalizeInput = booleanAttribute;
    this.createValidator = (input) => emailValidator;
  }
  /** @nodoc */
  enabled(input) {
    return input;
  }
};
_EmailValidator.ɵfac = /* @__PURE__ */ (() => {
  let ɵEmailValidator_BaseFactory;
  return function EmailValidator_Factory(t161) {
    return (ɵEmailValidator_BaseFactory || (ɵEmailValidator_BaseFactory = ɵɵgetInheritedFactory(_EmailValidator)))(t161 || _EmailValidator);
  };
})();
_EmailValidator.ɵdir = ɵɵdefineDirective({
  type: _EmailValidator,
  selectors: [["", "email", "", "formControlName", ""], ["", "email", "", "formControl", ""], ["", "email", "", "ngModel", ""]],
  inputs: {
    email: "email"
  },
  features: [ɵɵProvidersFeature([EMAIL_VALIDATOR]), ɵɵInheritDefinitionFeature]
});
var EmailValidator = _EmailValidator;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EmailValidator, [{
    type: Directive,
    args: [{
      selector: "[email][formControlName],[email][formControl],[email][ngModel]",
      providers: [EMAIL_VALIDATOR]
    }]
  }], null, {
    email: [{
      type: Input
    }]
  });
})();
var MIN_LENGTH_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: forwardRef(() => MinLengthValidator),
  multi: true
};
var _MinLengthValidator = class _MinLengthValidator extends AbstractValidatorDirective {
  constructor() {
    super(...arguments);
    this.inputName = "minlength";
    this.normalizeInput = (input) => toInteger(input);
    this.createValidator = (minlength) => minLengthValidator(minlength);
  }
};
_MinLengthValidator.ɵfac = /* @__PURE__ */ (() => {
  let ɵMinLengthValidator_BaseFactory;
  return function MinLengthValidator_Factory(t161) {
    return (ɵMinLengthValidator_BaseFactory || (ɵMinLengthValidator_BaseFactory = ɵɵgetInheritedFactory(_MinLengthValidator)))(t161 || _MinLengthValidator);
  };
})();
_MinLengthValidator.ɵdir = ɵɵdefineDirective({
  type: _MinLengthValidator,
  selectors: [["", "minlength", "", "formControlName", ""], ["", "minlength", "", "formControl", ""], ["", "minlength", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function MinLengthValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("minlength", ctx._enabled ? ctx.minlength : null);
    }
  },
  inputs: {
    minlength: "minlength"
  },
  features: [ɵɵProvidersFeature([MIN_LENGTH_VALIDATOR]), ɵɵInheritDefinitionFeature]
});
var MinLengthValidator = _MinLengthValidator;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MinLengthValidator, [{
    type: Directive,
    args: [{
      selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]",
      providers: [MIN_LENGTH_VALIDATOR],
      host: {
        "[attr.minlength]": "_enabled ? minlength : null"
      }
    }]
  }], null, {
    minlength: [{
      type: Input
    }]
  });
})();
var MAX_LENGTH_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: forwardRef(() => MaxLengthValidator),
  multi: true
};
var _MaxLengthValidator = class _MaxLengthValidator extends AbstractValidatorDirective {
  constructor() {
    super(...arguments);
    this.inputName = "maxlength";
    this.normalizeInput = (input) => toInteger(input);
    this.createValidator = (maxlength) => maxLengthValidator(maxlength);
  }
};
_MaxLengthValidator.ɵfac = /* @__PURE__ */ (() => {
  let ɵMaxLengthValidator_BaseFactory;
  return function MaxLengthValidator_Factory(t161) {
    return (ɵMaxLengthValidator_BaseFactory || (ɵMaxLengthValidator_BaseFactory = ɵɵgetInheritedFactory(_MaxLengthValidator)))(t161 || _MaxLengthValidator);
  };
})();
_MaxLengthValidator.ɵdir = ɵɵdefineDirective({
  type: _MaxLengthValidator,
  selectors: [["", "maxlength", "", "formControlName", ""], ["", "maxlength", "", "formControl", ""], ["", "maxlength", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function MaxLengthValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("maxlength", ctx._enabled ? ctx.maxlength : null);
    }
  },
  inputs: {
    maxlength: "maxlength"
  },
  features: [ɵɵProvidersFeature([MAX_LENGTH_VALIDATOR]), ɵɵInheritDefinitionFeature]
});
var MaxLengthValidator = _MaxLengthValidator;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MaxLengthValidator, [{
    type: Directive,
    args: [{
      selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]",
      providers: [MAX_LENGTH_VALIDATOR],
      host: {
        "[attr.maxlength]": "_enabled ? maxlength : null"
      }
    }]
  }], null, {
    maxlength: [{
      type: Input
    }]
  });
})();
var PATTERN_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: forwardRef(() => PatternValidator),
  multi: true
};
var _PatternValidator = class _PatternValidator extends AbstractValidatorDirective {
  constructor() {
    super(...arguments);
    this.inputName = "pattern";
    this.normalizeInput = (input) => input;
    this.createValidator = (input) => patternValidator(input);
  }
};
_PatternValidator.ɵfac = /* @__PURE__ */ (() => {
  let ɵPatternValidator_BaseFactory;
  return function PatternValidator_Factory(t161) {
    return (ɵPatternValidator_BaseFactory || (ɵPatternValidator_BaseFactory = ɵɵgetInheritedFactory(_PatternValidator)))(t161 || _PatternValidator);
  };
})();
_PatternValidator.ɵdir = ɵɵdefineDirective({
  type: _PatternValidator,
  selectors: [["", "pattern", "", "formControlName", ""], ["", "pattern", "", "formControl", ""], ["", "pattern", "", "ngModel", ""]],
  hostVars: 1,
  hostBindings: function PatternValidator_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("pattern", ctx._enabled ? ctx.pattern : null);
    }
  },
  inputs: {
    pattern: "pattern"
  },
  features: [ɵɵProvidersFeature([PATTERN_VALIDATOR]), ɵɵInheritDefinitionFeature]
});
var PatternValidator = _PatternValidator;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PatternValidator, [{
    type: Directive,
    args: [{
      selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]",
      providers: [PATTERN_VALIDATOR],
      host: {
        "[attr.pattern]": "_enabled ? pattern : null"
      }
    }]
  }], null, {
    pattern: [{
      type: Input
    }]
  });
})();
var SHARED_FORM_DIRECTIVES = [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, MinValidator, MaxValidator];
var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
var _ɵInternalFormsSharedModule = class _ɵInternalFormsSharedModule {
};
_ɵInternalFormsSharedModule.ɵfac = function ɵInternalFormsSharedModule_Factory(t161) {
  return new (t161 || _ɵInternalFormsSharedModule)();
};
_ɵInternalFormsSharedModule.ɵmod = ɵɵdefineNgModule({
  type: _ɵInternalFormsSharedModule,
  declarations: [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, MinValidator, MaxValidator],
  exports: [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, MinValidator, MaxValidator]
});
_ɵInternalFormsSharedModule.ɵinj = ɵɵdefineInjector({});
var ɵInternalFormsSharedModule = _ɵInternalFormsSharedModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ɵInternalFormsSharedModule, [{
    type: NgModule,
    args: [{
      declarations: SHARED_FORM_DIRECTIVES,
      exports: SHARED_FORM_DIRECTIVES
    }]
  }], null, null);
})();
var FormArray = class extends AbstractControl {
  /**
   * Creates a new `FormArray` instance.
   *
   * @param controls An array of child controls. Each child control is given an index
   * where it is registered.
   *
   * @param validatorOrOpts A synchronous validator function, or an array of
   * such functions, or an `AbstractControlOptions` object that contains validation functions
   * and a validation trigger.
   *
   * @param asyncValidator A single async validator or array of async validator functions
   *
   */
  constructor(controls, validatorOrOpts, asyncValidator) {
    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
    this.controls = controls;
    this._initObservables();
    this._setUpdateStrategy(validatorOrOpts);
    this._setUpControls();
    this.updateValueAndValidity({
      onlySelf: true,
      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
      // `VALID` or `INVALID`.
      // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`
      // to `true` to allow that during the control creation process.
      emitEvent: !!this.asyncValidator
    });
  }
  /**
   * Get the `AbstractControl` at the given `index` in the array.
   *
   * @param index Index in the array to retrieve the control. If `index` is negative, it will wrap
   *     around from the back, and if index is greatly negative (less than `-length`), the result is
   * undefined. This behavior is the same as `Array.at(index)`.
   */
  at(index) {
    return this.controls[this._adjustIndex(index)];
  }
  /**
   * Insert a new `AbstractControl` at the end of the array.
   *
   * @param control Form control to be inserted
   * @param options Specifies whether this FormArray instance should emit events after a new
   *     control is added.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control is
   * inserted. When false, no events are emitted.
   */
  push(control, options = {}) {
    this.controls.push(control);
    this._registerControl(control);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
    this._onCollectionChange();
  }
  /**
   * Insert a new `AbstractControl` at the given `index` in the array.
   *
   * @param index Index in the array to insert the control. If `index` is negative, wraps around
   *     from the back. If `index` is greatly negative (less than `-length`), prepends to the array.
   * This behavior is the same as `Array.splice(index, 0, control)`.
   * @param control Form control to be inserted
   * @param options Specifies whether this FormArray instance should emit events after a new
   *     control is inserted.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control is
   * inserted. When false, no events are emitted.
   */
  insert(index, control, options = {}) {
    this.controls.splice(index, 0, control);
    this._registerControl(control);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
  }
  /**
   * Remove the control at the given `index` in the array.
   *
   * @param index Index in the array to remove the control.  If `index` is negative, wraps around
   *     from the back. If `index` is greatly negative (less than `-length`), removes the first
   *     element. This behavior is the same as `Array.splice(index, 1)`.
   * @param options Specifies whether this FormArray instance should emit events after a
   *     control is removed.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control is
   * removed. When false, no events are emitted.
   */
  removeAt(index, options = {}) {
    let adjustedIndex = this._adjustIndex(index);
    if (adjustedIndex < 0)
      adjustedIndex = 0;
    if (this.controls[adjustedIndex])
      this.controls[adjustedIndex]._registerOnCollectionChange(() => {
      });
    this.controls.splice(adjustedIndex, 1);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
  }
  /**
   * Replace an existing control.
   *
   * @param index Index in the array to replace the control. If `index` is negative, wraps around
   *     from the back. If `index` is greatly negative (less than `-length`), replaces the first
   *     element. This behavior is the same as `Array.splice(index, 1, control)`.
   * @param control The `AbstractControl` control to replace the existing control
   * @param options Specifies whether this FormArray instance should emit events after an
   *     existing control is replaced with a new one.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control is
   * replaced with a new one. When false, no events are emitted.
   */
  setControl(index, control, options = {}) {
    let adjustedIndex = this._adjustIndex(index);
    if (adjustedIndex < 0)
      adjustedIndex = 0;
    if (this.controls[adjustedIndex])
      this.controls[adjustedIndex]._registerOnCollectionChange(() => {
      });
    this.controls.splice(adjustedIndex, 1);
    if (control) {
      this.controls.splice(adjustedIndex, 0, control);
      this._registerControl(control);
    }
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
    this._onCollectionChange();
  }
  /**
   * Length of the control array.
   */
  get length() {
    return this.controls.length;
  }
  /**
   * Sets the value of the `FormArray`. It accepts an array that matches
   * the structure of the control.
   *
   * This method performs strict checks, and throws an error if you try
   * to set the value of a control that doesn't exist or if you exclude the
   * value of a control.
   *
   * @usageNotes
   * ### Set the values for the controls in the form array
   *
   * ```
   * const arr = new FormArray([
   *   new FormControl(),
   *   new FormControl()
   * ]);
   * console.log(arr.value);   // [null, null]
   *
   * arr.setValue(['Nancy', 'Drew']);
   * console.log(arr.value);   // ['Nancy', 'Drew']
   * ```
   *
   * @param value Array of values for the controls
   * @param options Configure options that determine how the control propagates changes and
   * emits events after the value changes
   *
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
   * is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control value is updated.
   * When false, no events are emitted.
   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
   * updateValueAndValidity} method.
   */
  setValue(value, options = {}) {
    assertAllValuesPresent(this, false, value);
    value.forEach((newValue, index) => {
      assertControlPresent(this, false, index);
      this.at(index).setValue(newValue, {
        onlySelf: true,
        emitEvent: options.emitEvent
      });
    });
    this.updateValueAndValidity(options);
  }
  /**
   * Patches the value of the `FormArray`. It accepts an array that matches the
   * structure of the control, and does its best to match the values to the correct
   * controls in the group.
   *
   * It accepts both super-sets and sub-sets of the array without throwing an error.
   *
   * @usageNotes
   * ### Patch the values for controls in a form array
   *
   * ```
   * const arr = new FormArray([
   *    new FormControl(),
   *    new FormControl()
   * ]);
   * console.log(arr.value);   // [null, null]
   *
   * arr.patchValue(['Nancy']);
   * console.log(arr.value);   // ['Nancy', null]
   * ```
   *
   * @param value Array of latest values for the controls
   * @param options Configure options that determine how the control propagates changes and
   * emits events after the value changes
   *
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
   * is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control
   * value is updated. When false, no events are emitted. The configuration options are passed to
   * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.
   */
  patchValue(value, options = {}) {
    if (value == null)
      return;
    value.forEach((newValue, index) => {
      if (this.at(index)) {
        this.at(index).patchValue(newValue, {
          onlySelf: true,
          emitEvent: options.emitEvent
        });
      }
    });
    this.updateValueAndValidity(options);
  }
  /**
   * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the
   * value of all descendants to null or null maps.
   *
   * You reset to a specific form state by passing in an array of states
   * that matches the structure of the control. The state is a standalone value
   * or a form state object with both a value and a disabled status.
   *
   * @usageNotes
   * ### Reset the values in a form array
   *
   * ```ts
   * const arr = new FormArray([
   *    new FormControl(),
   *    new FormControl()
   * ]);
   * arr.reset(['name', 'last name']);
   *
   * console.log(arr.value);  // ['name', 'last name']
   * ```
   *
   * ### Reset the values in a form array and the disabled status for the first control
   *
   * ```
   * arr.reset([
   *   {value: 'name', disabled: true},
   *   'last'
   * ]);
   *
   * console.log(arr.value);  // ['last']
   * console.log(arr.at(0).status);  // 'DISABLED'
   * ```
   *
   * @param value Array of values for the controls
   * @param options Configure options that determine how the control propagates changes and
   * emits events after the value changes
   *
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
   * is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control is reset.
   * When false, no events are emitted.
   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
   * updateValueAndValidity} method.
   */
  reset(value = [], options = {}) {
    this._forEachChild((control, index) => {
      control.reset(value[index], {
        onlySelf: true,
        emitEvent: options.emitEvent
      });
    });
    this._updatePristine(options);
    this._updateTouched(options);
    this.updateValueAndValidity(options);
  }
  /**
   * The aggregate value of the array, including any disabled controls.
   *
   * Reports all values regardless of disabled status.
   */
  getRawValue() {
    return this.controls.map((control) => control.getRawValue());
  }
  /**
   * Remove all controls in the `FormArray`.
   *
   * @param options Specifies whether this FormArray instance should emit events after all
   *     controls are removed.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when all controls
   * in this FormArray instance are removed. When false, no events are emitted.
   *
   * @usageNotes
   * ### Remove all elements from a FormArray
   *
   * ```ts
   * const arr = new FormArray([
   *    new FormControl(),
   *    new FormControl()
   * ]);
   * console.log(arr.length);  // 2
   *
   * arr.clear();
   * console.log(arr.length);  // 0
   * ```
   *
   * It's a simpler and more efficient alternative to removing all elements one by one:
   *
   * ```ts
   * const arr = new FormArray([
   *    new FormControl(),
   *    new FormControl()
   * ]);
   *
   * while (arr.length) {
   *    arr.removeAt(0);
   * }
   * ```
   */
  clear(options = {}) {
    if (this.controls.length < 1)
      return;
    this._forEachChild((control) => control._registerOnCollectionChange(() => {
    }));
    this.controls.splice(0);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
  }
  /**
   * Adjusts a negative index by summing it with the length of the array. For very negative
   * indices, the result may remain negative.
   * @internal
   */
  _adjustIndex(index) {
    return index < 0 ? index + this.length : index;
  }
  /** @internal */
  _syncPendingControls() {
    let subtreeUpdated = this.controls.reduce((updated, child) => {
      return child._syncPendingControls() ? true : updated;
    }, false);
    if (subtreeUpdated)
      this.updateValueAndValidity({
        onlySelf: true
      });
    return subtreeUpdated;
  }
  /** @internal */
  _forEachChild(cb) {
    this.controls.forEach((control, index) => {
      cb(control, index);
    });
  }
  /** @internal */
  _updateValue() {
    this.value = this.controls.filter((control) => control.enabled || this.disabled).map((control) => control.value);
  }
  /** @internal */
  _anyControls(condition) {
    return this.controls.some((control) => control.enabled && condition(control));
  }
  /** @internal */
  _setUpControls() {
    this._forEachChild((control) => this._registerControl(control));
  }
  /** @internal */
  _allControlsDisabled() {
    for (const control of this.controls) {
      if (control.enabled)
        return false;
    }
    return this.controls.length > 0 || this.disabled;
  }
  _registerControl(control) {
    control.setParent(this);
    control._registerOnCollectionChange(this._onCollectionChange);
  }
  /** @internal */
  _find(name) {
    return this.at(name) ?? null;
  }
};
function isAbstractControlOptions(options) {
  return !!options && (options.asyncValidators !== void 0 || options.validators !== void 0 || options.updateOn !== void 0);
}
var _FormBuilder = class _FormBuilder {
  constructor() {
    this.useNonNullable = false;
  }
  /**
   * @description
   * Returns a FormBuilder in which automatically constructed `FormControl` elements
   * have `{nonNullable: true}` and are non-nullable.
   *
   * **Constructing non-nullable controls**
   *
   * When constructing a control, it will be non-nullable, and will reset to its initial value.
   *
   * ```ts
   * let nnfb = new FormBuilder().nonNullable;
   * let name = nnfb.control('Alex'); // FormControl<string>
   * name.reset();
   * console.log(name); // 'Alex'
   * ```
   *
   * **Constructing non-nullable groups or arrays**
   *
   * When constructing a group or array, all automatically created inner controls will be
   * non-nullable, and will reset to their initial values.
   *
   * ```ts
   * let nnfb = new FormBuilder().nonNullable;
   * let name = nnfb.group({who: 'Alex'}); // FormGroup<{who: FormControl<string>}>
   * name.reset();
   * console.log(name); // {who: 'Alex'}
   * ```
   * **Constructing *nullable* fields on groups or arrays**
   *
   * It is still possible to have a nullable field. In particular, any `FormControl` which is
   * *already* constructed will not be altered. For example:
   *
   * ```ts
   * let nnfb = new FormBuilder().nonNullable;
   * // FormGroup<{who: FormControl<string|null>}>
   * let name = nnfb.group({who: new FormControl('Alex')});
   * name.reset(); console.log(name); // {who: null}
   * ```
   *
   * Because the inner control is constructed explicitly by the caller, the builder has
   * no control over how it is created, and cannot exclude the `null`.
   */
  get nonNullable() {
    const nnfb = new _FormBuilder();
    nnfb.useNonNullable = true;
    return nnfb;
  }
  group(controls, options = null) {
    const reducedControls = this._reduceControls(controls);
    let newOptions = {};
    if (isAbstractControlOptions(options)) {
      newOptions = options;
    } else if (options !== null) {
      newOptions.validators = options.validator;
      newOptions.asyncValidators = options.asyncValidator;
    }
    return new FormGroup(reducedControls, newOptions);
  }
  /**
   * @description
   * Constructs a new `FormRecord` instance. Accepts a single generic argument, which is an object
   * containing all the keys and corresponding inner control types.
   *
   * @param controls A collection of child controls. The key for each child is the name
   * under which it is registered.
   *
   * @param options Configuration options object for the `FormRecord`. The object should have the
   * `AbstractControlOptions` type and might contain the following fields:
   * * `validators`: A synchronous validator function, or an array of validator functions.
   * * `asyncValidators`: A single async validator or array of async validator functions.
   * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur'
   * | submit').
   */
  record(controls, options = null) {
    const reducedControls = this._reduceControls(controls);
    return new FormRecord(reducedControls, options);
  }
  /**
   * @description
   * Constructs a new `FormControl` with the given state, validators and options. Sets
   * `{nonNullable: true}` in the options to get a non-nullable control. Otherwise, the
   * control will be nullable. Accepts a single generic argument, which is the type  of the
   * control's value.
   *
   * @param formState Initializes the control with an initial state value, or
   * with an object that contains both a value and a disabled status.
   *
   * @param validatorOrOpts A synchronous validator function, or an array of
   * such functions, or a `FormControlOptions` object that contains
   * validation functions and a validation trigger.
   *
   * @param asyncValidator A single async validator or array of async validator
   * functions.
   *
   * @usageNotes
   *
   * ### Initialize a control as disabled
   *
   * The following example returns a control with an initial value in a disabled state.
   *
   * <code-example path="forms/ts/formBuilder/form_builder_example.ts" region="disabled-control">
   * </code-example>
   */
  control(formState, validatorOrOpts, asyncValidator) {
    let newOptions = {};
    if (!this.useNonNullable) {
      return new FormControl(formState, validatorOrOpts, asyncValidator);
    }
    if (isAbstractControlOptions(validatorOrOpts)) {
      newOptions = validatorOrOpts;
    } else {
      newOptions.validators = validatorOrOpts;
      newOptions.asyncValidators = asyncValidator;
    }
    return new FormControl(formState, __spreadProps(__spreadValues({}, newOptions), {
      nonNullable: true
    }));
  }
  /**
   * Constructs a new `FormArray` from the given array of configurations,
   * validators and options. Accepts a single generic argument, which is the type of each control
   * inside the array.
   *
   * @param controls An array of child controls or control configs. Each child control is given an
   *     index when it is registered.
   *
   * @param validatorOrOpts A synchronous validator function, or an array of such functions, or an
   *     `AbstractControlOptions` object that contains
   * validation functions and a validation trigger.
   *
   * @param asyncValidator A single async validator or array of async validator functions.
   */
  array(controls, validatorOrOpts, asyncValidator) {
    const createdControls = controls.map((c45) => this._createControl(c45));
    return new FormArray(createdControls, validatorOrOpts, asyncValidator);
  }
  /** @internal */
  _reduceControls(controls) {
    const createdControls = {};
    Object.keys(controls).forEach((controlName) => {
      createdControls[controlName] = this._createControl(controls[controlName]);
    });
    return createdControls;
  }
  /** @internal */
  _createControl(controls) {
    if (controls instanceof FormControl) {
      return controls;
    } else if (controls instanceof AbstractControl) {
      return controls;
    } else if (Array.isArray(controls)) {
      const value = controls[0];
      const validator = controls.length > 1 ? controls[1] : null;
      const asyncValidator = controls.length > 2 ? controls[2] : null;
      return this.control(value, validator, asyncValidator);
    } else {
      return this.control(controls);
    }
  }
};
_FormBuilder.ɵfac = function FormBuilder_Factory(t161) {
  return new (t161 || _FormBuilder)();
};
_FormBuilder.ɵprov = ɵɵdefineInjectable({
  token: _FormBuilder,
  factory: _FormBuilder.ɵfac,
  providedIn: "root"
});
var FormBuilder = _FormBuilder;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FormBuilder, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var _NonNullableFormBuilder = class _NonNullableFormBuilder {
};
_NonNullableFormBuilder.ɵfac = function NonNullableFormBuilder_Factory(t161) {
  return new (t161 || _NonNullableFormBuilder)();
};
_NonNullableFormBuilder.ɵprov = ɵɵdefineInjectable({
  token: _NonNullableFormBuilder,
  factory: () => (() => inject(FormBuilder).nonNullable)(),
  providedIn: "root"
});
var NonNullableFormBuilder = _NonNullableFormBuilder;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NonNullableFormBuilder, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(FormBuilder).nonNullable
    }]
  }], null, null);
})();
var _UntypedFormBuilder = class _UntypedFormBuilder extends FormBuilder {
  group(controlsConfig, options = null) {
    return super.group(controlsConfig, options);
  }
  /**
   * Like `FormBuilder#control`, except the resulting control is untyped.
   */
  control(formState, validatorOrOpts, asyncValidator) {
    return super.control(formState, validatorOrOpts, asyncValidator);
  }
  /**
   * Like `FormBuilder#array`, except the resulting array is untyped.
   */
  array(controlsConfig, validatorOrOpts, asyncValidator) {
    return super.array(controlsConfig, validatorOrOpts, asyncValidator);
  }
};
_UntypedFormBuilder.ɵfac = /* @__PURE__ */ (() => {
  let ɵUntypedFormBuilder_BaseFactory;
  return function UntypedFormBuilder_Factory(t161) {
    return (ɵUntypedFormBuilder_BaseFactory || (ɵUntypedFormBuilder_BaseFactory = ɵɵgetInheritedFactory(_UntypedFormBuilder)))(t161 || _UntypedFormBuilder);
  };
})();
_UntypedFormBuilder.ɵprov = ɵɵdefineInjectable({
  token: _UntypedFormBuilder,
  factory: _UntypedFormBuilder.ɵfac,
  providedIn: "root"
});
var UntypedFormBuilder = _UntypedFormBuilder;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UntypedFormBuilder, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var VERSION = new Version("17.3.2");
var _FormsModule = class _FormsModule {
  /**
   * @description
   * Provides options for configuring the forms module.
   *
   * @param opts An object of configuration options
   * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more
   * correct, or to only call it `whenDisabled`, which is the legacy behavior.
   */
  static withConfig(opts) {
    return {
      ngModule: _FormsModule,
      providers: [{
        provide: CALL_SET_DISABLED_STATE,
        useValue: opts.callSetDisabledState ?? setDisabledStateDefault
      }]
    };
  }
};
_FormsModule.ɵfac = function FormsModule_Factory(t161) {
  return new (t161 || _FormsModule)();
};
_FormsModule.ɵmod = ɵɵdefineNgModule({
  type: _FormsModule,
  declarations: [NgModel, NgModelGroup, NgForm],
  exports: [ɵInternalFormsSharedModule, NgModel, NgModelGroup, NgForm]
});
_FormsModule.ɵinj = ɵɵdefineInjector({
  imports: [ɵInternalFormsSharedModule]
});
var FormsModule = _FormsModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FormsModule, [{
    type: NgModule,
    args: [{
      declarations: TEMPLATE_DRIVEN_DIRECTIVES,
      exports: [ɵInternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
    }]
  }], null, null);
})();
var _ReactiveFormsModule = class _ReactiveFormsModule {
  /**
   * @description
   * Provides options for configuring the reactive forms module.
   *
   * @param opts An object of configuration options
   * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`
   * binding is used with reactive form directives.
   * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more
   * correct, or to only call it `whenDisabled`, which is the legacy behavior.
   */
  static withConfig(opts) {
    return {
      ngModule: _ReactiveFormsModule,
      providers: [{
        provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,
        useValue: opts.warnOnNgModelWithFormControl ?? "always"
      }, {
        provide: CALL_SET_DISABLED_STATE,
        useValue: opts.callSetDisabledState ?? setDisabledStateDefault
      }]
    };
  }
};
_ReactiveFormsModule.ɵfac = function ReactiveFormsModule_Factory(t161) {
  return new (t161 || _ReactiveFormsModule)();
};
_ReactiveFormsModule.ɵmod = ɵɵdefineNgModule({
  type: _ReactiveFormsModule,
  declarations: [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName],
  exports: [ɵInternalFormsSharedModule, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName]
});
_ReactiveFormsModule.ɵinj = ɵɵdefineInjector({
  imports: [ɵInternalFormsSharedModule]
});
var ReactiveFormsModule = _ReactiveFormsModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ReactiveFormsModule, [{
    type: NgModule,
    args: [{
      declarations: [REACTIVE_DRIVEN_DIRECTIVES],
      exports: [ɵInternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
    }]
  }], null, null);
})();

// node_modules/@angular/cdk/fesm2022/platform.mjs
var hasV8BreakIterator;
try {
  hasV8BreakIterator = typeof Intl !== "undefined" && Intl.v8BreakIterator;
} catch {
  hasV8BreakIterator = false;
}
var _Platform = class _Platform {
  constructor(_platformId) {
    this._platformId = _platformId;
    this.isBrowser = this._platformId ? isPlatformBrowser(this._platformId) : typeof document === "object" && !!document;
    this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);
    this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);
    this.BLINK = this.isBrowser && !!(window.chrome || hasV8BreakIterator) && typeof CSS !== "undefined" && !this.EDGE && !this.TRIDENT;
    this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;
    this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !("MSStream" in window);
    this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);
    this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;
    this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;
  }
};
_Platform.ɵfac = function Platform_Factory(t161) {
  return new (t161 || _Platform)(ɵɵinject(PLATFORM_ID));
};
_Platform.ɵprov = ɵɵdefineInjectable({
  token: _Platform,
  factory: _Platform.ɵfac,
  providedIn: "root"
});
var Platform = _Platform;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Platform, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Object,
    decorators: [{
      type: Inject,
      args: [PLATFORM_ID]
    }]
  }], null);
})();
var _PlatformModule = class _PlatformModule {
};
_PlatformModule.ɵfac = function PlatformModule_Factory(t161) {
  return new (t161 || _PlatformModule)();
};
_PlatformModule.ɵmod = ɵɵdefineNgModule({
  type: _PlatformModule
});
_PlatformModule.ɵinj = ɵɵdefineInjector({});
var PlatformModule = _PlatformModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PlatformModule, [{
    type: NgModule,
    args: [{}]
  }], null, null);
})();
var supportsPassiveEvents;
function supportsPassiveEventListeners() {
  if (supportsPassiveEvents == null && typeof window !== "undefined") {
    try {
      window.addEventListener("test", null, Object.defineProperty({}, "passive", {
        get: () => supportsPassiveEvents = true
      }));
    } finally {
      supportsPassiveEvents = supportsPassiveEvents || false;
    }
  }
  return supportsPassiveEvents;
}
function normalizePassiveListenerOptions(options) {
  return supportsPassiveEventListeners() ? options : !!options.capture;
}
var RtlScrollAxisType;
(function(RtlScrollAxisType2) {
  RtlScrollAxisType2[RtlScrollAxisType2["NORMAL"] = 0] = "NORMAL";
  RtlScrollAxisType2[RtlScrollAxisType2["NEGATED"] = 1] = "NEGATED";
  RtlScrollAxisType2[RtlScrollAxisType2["INVERTED"] = 2] = "INVERTED";
})(RtlScrollAxisType || (RtlScrollAxisType = {}));
var rtlScrollAxisType;
var scrollBehaviorSupported;
function supportsScrollBehavior() {
  if (scrollBehaviorSupported == null) {
    if (typeof document !== "object" || !document || typeof Element !== "function" || !Element) {
      scrollBehaviorSupported = false;
      return scrollBehaviorSupported;
    }
    if ("scrollBehavior" in document.documentElement.style) {
      scrollBehaviorSupported = true;
    } else {
      const scrollToFunction = Element.prototype.scrollTo;
      if (scrollToFunction) {
        scrollBehaviorSupported = !/\{\s*\[native code\]\s*\}/.test(scrollToFunction.toString());
      } else {
        scrollBehaviorSupported = false;
      }
    }
  }
  return scrollBehaviorSupported;
}
function getRtlScrollAxisType() {
  if (typeof document !== "object" || !document) {
    return RtlScrollAxisType.NORMAL;
  }
  if (rtlScrollAxisType == null) {
    const scrollContainer = document.createElement("div");
    const containerStyle = scrollContainer.style;
    scrollContainer.dir = "rtl";
    containerStyle.width = "1px";
    containerStyle.overflow = "auto";
    containerStyle.visibility = "hidden";
    containerStyle.pointerEvents = "none";
    containerStyle.position = "absolute";
    const content = document.createElement("div");
    const contentStyle = content.style;
    contentStyle.width = "2px";
    contentStyle.height = "1px";
    scrollContainer.appendChild(content);
    document.body.appendChild(scrollContainer);
    rtlScrollAxisType = RtlScrollAxisType.NORMAL;
    if (scrollContainer.scrollLeft === 0) {
      scrollContainer.scrollLeft = 1;
      rtlScrollAxisType = scrollContainer.scrollLeft === 0 ? RtlScrollAxisType.NEGATED : RtlScrollAxisType.INVERTED;
    }
    scrollContainer.remove();
  }
  return rtlScrollAxisType;
}
var shadowDomIsSupported;
function _supportsShadowDom() {
  if (shadowDomIsSupported == null) {
    const head = typeof document !== "undefined" ? document.head : null;
    shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));
  }
  return shadowDomIsSupported;
}
function _getShadowRoot(element) {
  if (_supportsShadowDom()) {
    const rootNode = element.getRootNode ? element.getRootNode() : null;
    if (typeof ShadowRoot !== "undefined" && ShadowRoot && rootNode instanceof ShadowRoot) {
      return rootNode;
    }
  }
  return null;
}
function _getFocusedElementPierceShadowDom() {
  let activeElement = typeof document !== "undefined" && document ? document.activeElement : null;
  while (activeElement && activeElement.shadowRoot) {
    const newActiveElement = activeElement.shadowRoot.activeElement;
    if (newActiveElement === activeElement) {
      break;
    } else {
      activeElement = newActiveElement;
    }
  }
  return activeElement;
}
function _getEventTarget(event) {
  return event.composedPath ? event.composedPath()[0] : event.target;
}

// node_modules/@angular/cdk/fesm2022/keycodes.mjs
var SHIFT = 16;
var CONTROL = 17;
var ALT = 18;
var META = 91;
var MAC_META = 224;

// node_modules/@angular/cdk/fesm2022/coercion.mjs
function coerceNumberProperty(value, fallbackValue = 0) {
  return _isNumberValue(value) ? Number(value) : fallbackValue;
}
function _isNumberValue(value) {
  return !isNaN(parseFloat(value)) && !isNaN(Number(value));
}
function coerceArray(value) {
  return Array.isArray(value) ? value : [value];
}
function coerceElement(elementOrRef) {
  return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;
}

// node_modules/@angular/cdk/fesm2022/observers.mjs
var _MutationObserverFactory = class _MutationObserverFactory {
  create(callback) {
    return typeof MutationObserver === "undefined" ? null : new MutationObserver(callback);
  }
};
_MutationObserverFactory.ɵfac = function MutationObserverFactory_Factory(t161) {
  return new (t161 || _MutationObserverFactory)();
};
_MutationObserverFactory.ɵprov = ɵɵdefineInjectable({
  token: _MutationObserverFactory,
  factory: _MutationObserverFactory.ɵfac,
  providedIn: "root"
});
var MutationObserverFactory = _MutationObserverFactory;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MutationObserverFactory, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var _ContentObserver = class _ContentObserver {
  constructor(_mutationObserverFactory) {
    this._mutationObserverFactory = _mutationObserverFactory;
    this._observedElements = /* @__PURE__ */ new Map();
  }
  ngOnDestroy() {
    this._observedElements.forEach((_4, element) => this._cleanupObserver(element));
  }
  observe(elementOrRef) {
    const element = coerceElement(elementOrRef);
    return new Observable((observer) => {
      const stream = this._observeElement(element);
      const subscription = stream.subscribe(observer);
      return () => {
        subscription.unsubscribe();
        this._unobserveElement(element);
      };
    });
  }
  /**
   * Observes the given element by using the existing MutationObserver if available, or creating a
   * new one if not.
   */
  _observeElement(element) {
    if (!this._observedElements.has(element)) {
      const stream = new Subject();
      const observer = this._mutationObserverFactory.create((mutations) => stream.next(mutations));
      if (observer) {
        observer.observe(element, {
          characterData: true,
          childList: true,
          subtree: true
        });
      }
      this._observedElements.set(element, {
        observer,
        stream,
        count: 1
      });
    } else {
      this._observedElements.get(element).count++;
    }
    return this._observedElements.get(element).stream;
  }
  /**
   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is
   * observing this element.
   */
  _unobserveElement(element) {
    if (this._observedElements.has(element)) {
      this._observedElements.get(element).count--;
      if (!this._observedElements.get(element).count) {
        this._cleanupObserver(element);
      }
    }
  }
  /** Clean up the underlying MutationObserver for the specified element. */
  _cleanupObserver(element) {
    if (this._observedElements.has(element)) {
      const {
        observer,
        stream
      } = this._observedElements.get(element);
      if (observer) {
        observer.disconnect();
      }
      stream.complete();
      this._observedElements.delete(element);
    }
  }
};
_ContentObserver.ɵfac = function ContentObserver_Factory(t161) {
  return new (t161 || _ContentObserver)(ɵɵinject(MutationObserverFactory));
};
_ContentObserver.ɵprov = ɵɵdefineInjectable({
  token: _ContentObserver,
  factory: _ContentObserver.ɵfac,
  providedIn: "root"
});
var ContentObserver = _ContentObserver;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ContentObserver, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: MutationObserverFactory
  }], null);
})();
var _CdkObserveContent = class _CdkObserveContent {
  /**
   * Whether observing content is disabled. This option can be used
   * to disconnect the underlying MutationObserver until it is needed.
   */
  get disabled() {
    return this._disabled;
  }
  set disabled(value) {
    this._disabled = value;
    this._disabled ? this._unsubscribe() : this._subscribe();
  }
  /** Debounce interval for emitting the changes. */
  get debounce() {
    return this._debounce;
  }
  set debounce(value) {
    this._debounce = coerceNumberProperty(value);
    this._subscribe();
  }
  constructor(_contentObserver, _elementRef, _ngZone) {
    this._contentObserver = _contentObserver;
    this._elementRef = _elementRef;
    this._ngZone = _ngZone;
    this.event = new EventEmitter();
    this._disabled = false;
    this._currentSubscription = null;
  }
  ngAfterContentInit() {
    if (!this._currentSubscription && !this.disabled) {
      this._subscribe();
    }
  }
  ngOnDestroy() {
    this._unsubscribe();
  }
  _subscribe() {
    this._unsubscribe();
    const stream = this._contentObserver.observe(this._elementRef);
    this._ngZone.runOutsideAngular(() => {
      this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);
    });
  }
  _unsubscribe() {
    this._currentSubscription?.unsubscribe();
  }
};
_CdkObserveContent.ɵfac = function CdkObserveContent_Factory(t161) {
  return new (t161 || _CdkObserveContent)(ɵɵdirectiveInject(ContentObserver), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NgZone));
};
_CdkObserveContent.ɵdir = ɵɵdefineDirective({
  type: _CdkObserveContent,
  selectors: [["", "cdkObserveContent", ""]],
  inputs: {
    disabled: [InputFlags.HasDecoratorInputTransform, "cdkObserveContentDisabled", "disabled", booleanAttribute],
    debounce: "debounce"
  },
  outputs: {
    event: "cdkObserveContent"
  },
  exportAs: ["cdkObserveContent"],
  standalone: true,
  features: [ɵɵInputTransformsFeature]
});
var CdkObserveContent = _CdkObserveContent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkObserveContent, [{
    type: Directive,
    args: [{
      selector: "[cdkObserveContent]",
      exportAs: "cdkObserveContent",
      standalone: true
    }]
  }], () => [{
    type: ContentObserver
  }, {
    type: ElementRef
  }, {
    type: NgZone
  }], {
    event: [{
      type: Output,
      args: ["cdkObserveContent"]
    }],
    disabled: [{
      type: Input,
      args: [{
        alias: "cdkObserveContentDisabled",
        transform: booleanAttribute
      }]
    }],
    debounce: [{
      type: Input
    }]
  });
})();
var _ObserversModule = class _ObserversModule {
};
_ObserversModule.ɵfac = function ObserversModule_Factory(t161) {
  return new (t161 || _ObserversModule)();
};
_ObserversModule.ɵmod = ɵɵdefineNgModule({
  type: _ObserversModule,
  imports: [CdkObserveContent],
  exports: [CdkObserveContent]
});
_ObserversModule.ɵinj = ɵɵdefineInjector({
  providers: [MutationObserverFactory]
});
var ObserversModule = _ObserversModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ObserversModule, [{
    type: NgModule,
    args: [{
      imports: [CdkObserveContent],
      exports: [CdkObserveContent],
      providers: [MutationObserverFactory]
    }]
  }], null, null);
})();

// node_modules/@angular/cdk/fesm2022/layout.mjs
var _LayoutModule = class _LayoutModule {
};
_LayoutModule.ɵfac = function LayoutModule_Factory(t161) {
  return new (t161 || _LayoutModule)();
};
_LayoutModule.ɵmod = ɵɵdefineNgModule({
  type: _LayoutModule
});
_LayoutModule.ɵinj = ɵɵdefineInjector({});
var LayoutModule = _LayoutModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LayoutModule, [{
    type: NgModule,
    args: [{}]
  }], null, null);
})();
var mediaQueriesForWebkitCompatibility = /* @__PURE__ */ new Set();
var mediaQueryStyleNode;
var _MediaMatcher = class _MediaMatcher {
  constructor(_platform, _nonce) {
    this._platform = _platform;
    this._nonce = _nonce;
    this._matchMedia = this._platform.isBrowser && window.matchMedia ? (
      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to
      // call it from a different scope.
      window.matchMedia.bind(window)
    ) : noopMatchMedia;
  }
  /**
   * Evaluates the given media query and returns the native MediaQueryList from which results
   * can be retrieved.
   * Confirms the layout engine will trigger for the selector query provided and returns the
   * MediaQueryList for the query provided.
   */
  matchMedia(query2) {
    if (this._platform.WEBKIT || this._platform.BLINK) {
      createEmptyStyleRule(query2, this._nonce);
    }
    return this._matchMedia(query2);
  }
};
_MediaMatcher.ɵfac = function MediaMatcher_Factory(t161) {
  return new (t161 || _MediaMatcher)(ɵɵinject(Platform), ɵɵinject(CSP_NONCE, 8));
};
_MediaMatcher.ɵprov = ɵɵdefineInjectable({
  token: _MediaMatcher,
  factory: _MediaMatcher.ɵfac,
  providedIn: "root"
});
var MediaMatcher = _MediaMatcher;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MediaMatcher, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Platform
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [CSP_NONCE]
    }]
  }], null);
})();
function createEmptyStyleRule(query2, nonce) {
  if (mediaQueriesForWebkitCompatibility.has(query2)) {
    return;
  }
  try {
    if (!mediaQueryStyleNode) {
      mediaQueryStyleNode = document.createElement("style");
      if (nonce) {
        mediaQueryStyleNode.nonce = nonce;
      }
      mediaQueryStyleNode.setAttribute("type", "text/css");
      document.head.appendChild(mediaQueryStyleNode);
    }
    if (mediaQueryStyleNode.sheet) {
      mediaQueryStyleNode.sheet.insertRule(`@media ${query2} {body{ }}`, 0);
      mediaQueriesForWebkitCompatibility.add(query2);
    }
  } catch (e83) {
    console.error(e83);
  }
}
function noopMatchMedia(query2) {
  return {
    matches: query2 === "all" || query2 === "",
    media: query2,
    addListener: () => {
    },
    removeListener: () => {
    }
  };
}
var _BreakpointObserver = class _BreakpointObserver {
  constructor(_mediaMatcher, _zone) {
    this._mediaMatcher = _mediaMatcher;
    this._zone = _zone;
    this._queries = /* @__PURE__ */ new Map();
    this._destroySubject = new Subject();
  }
  /** Completes the active subject, signalling to all other observables to complete. */
  ngOnDestroy() {
    this._destroySubject.next();
    this._destroySubject.complete();
  }
  /**
   * Whether one or more media queries match the current viewport size.
   * @param value One or more media queries to check.
   * @returns Whether any of the media queries match.
   */
  isMatched(value) {
    const queries = splitQueries(coerceArray(value));
    return queries.some((mediaQuery) => this._registerQuery(mediaQuery).mql.matches);
  }
  /**
   * Gets an observable of results for the given queries that will emit new results for any changes
   * in matching of the given queries.
   * @param value One or more media queries to check.
   * @returns A stream of matches for the given queries.
   */
  observe(value) {
    const queries = splitQueries(coerceArray(value));
    const observables = queries.map((query2) => this._registerQuery(query2).observable);
    let stateObservable = combineLatest(observables);
    stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));
    return stateObservable.pipe(map((breakpointStates) => {
      const response = {
        matches: false,
        breakpoints: {}
      };
      breakpointStates.forEach(({
        matches,
        query: query2
      }) => {
        response.matches = response.matches || matches;
        response.breakpoints[query2] = matches;
      });
      return response;
    }));
  }
  /** Registers a specific query to be listened for. */
  _registerQuery(query2) {
    if (this._queries.has(query2)) {
      return this._queries.get(query2);
    }
    const mql = this._mediaMatcher.matchMedia(query2);
    const queryObservable = new Observable((observer) => {
      const handler = (e83) => this._zone.run(() => observer.next(e83));
      mql.addListener(handler);
      return () => {
        mql.removeListener(handler);
      };
    }).pipe(startWith(mql), map(({
      matches
    }) => ({
      query: query2,
      matches
    })), takeUntil(this._destroySubject));
    const output = {
      observable: queryObservable,
      mql
    };
    this._queries.set(query2, output);
    return output;
  }
};
_BreakpointObserver.ɵfac = function BreakpointObserver_Factory(t161) {
  return new (t161 || _BreakpointObserver)(ɵɵinject(MediaMatcher), ɵɵinject(NgZone));
};
_BreakpointObserver.ɵprov = ɵɵdefineInjectable({
  token: _BreakpointObserver,
  factory: _BreakpointObserver.ɵfac,
  providedIn: "root"
});
var BreakpointObserver = _BreakpointObserver;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BreakpointObserver, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: MediaMatcher
  }, {
    type: NgZone
  }], null);
})();
function splitQueries(queries) {
  return queries.map((query2) => query2.split(",")).reduce((a1, a210) => a1.concat(a210)).map((query2) => query2.trim());
}

// node_modules/@angular/cdk/fesm2022/a11y.mjs
var ID_DELIMITER = " ";
function addAriaReferencedId(el, attr, id) {
  const ids = getAriaReferenceIds(el, attr);
  id = id.trim();
  if (ids.some((existingId) => existingId.trim() === id)) {
    return;
  }
  ids.push(id);
  el.setAttribute(attr, ids.join(ID_DELIMITER));
}
function removeAriaReferencedId(el, attr, id) {
  const ids = getAriaReferenceIds(el, attr);
  id = id.trim();
  const filteredIds = ids.filter((val) => val !== id);
  if (filteredIds.length) {
    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));
  } else {
    el.removeAttribute(attr);
  }
}
function getAriaReferenceIds(el, attr) {
  const attrValue = el.getAttribute(attr);
  return attrValue?.match(/\S+/g) ?? [];
}
var CDK_DESCRIBEDBY_ID_PREFIX = "cdk-describedby-message";
var CDK_DESCRIBEDBY_HOST_ATTRIBUTE = "cdk-describedby-host";
var nextId = 0;
var _AriaDescriber = class _AriaDescriber {
  constructor(_document, _platform) {
    this._platform = _platform;
    this._messageRegistry = /* @__PURE__ */ new Map();
    this._messagesContainer = null;
    this._id = `${nextId++}`;
    this._document = _document;
    this._id = inject(APP_ID) + "-" + nextId++;
  }
  describe(hostElement, message, role) {
    if (!this._canBeDescribed(hostElement, message)) {
      return;
    }
    const key = getKey(message, role);
    if (typeof message !== "string") {
      setMessageId(message, this._id);
      this._messageRegistry.set(key, {
        messageElement: message,
        referenceCount: 0
      });
    } else if (!this._messageRegistry.has(key)) {
      this._createMessageElement(message, role);
    }
    if (!this._isElementDescribedByMessage(hostElement, key)) {
      this._addMessageReference(hostElement, key);
    }
  }
  removeDescription(hostElement, message, role) {
    if (!message || !this._isElementNode(hostElement)) {
      return;
    }
    const key = getKey(message, role);
    if (this._isElementDescribedByMessage(hostElement, key)) {
      this._removeMessageReference(hostElement, key);
    }
    if (typeof message === "string") {
      const registeredMessage = this._messageRegistry.get(key);
      if (registeredMessage && registeredMessage.referenceCount === 0) {
        this._deleteMessageElement(key);
      }
    }
    if (this._messagesContainer?.childNodes.length === 0) {
      this._messagesContainer.remove();
      this._messagesContainer = null;
    }
  }
  /** Unregisters all created message elements and removes the message container. */
  ngOnDestroy() {
    const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}="${this._id}"]`);
    for (let i35 = 0; i35 < describedElements.length; i35++) {
      this._removeCdkDescribedByReferenceIds(describedElements[i35]);
      describedElements[i35].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
    }
    this._messagesContainer?.remove();
    this._messagesContainer = null;
    this._messageRegistry.clear();
  }
  /**
   * Creates a new element in the visually hidden message container element with the message
   * as its content and adds it to the message registry.
   */
  _createMessageElement(message, role) {
    const messageElement = this._document.createElement("div");
    setMessageId(messageElement, this._id);
    messageElement.textContent = message;
    if (role) {
      messageElement.setAttribute("role", role);
    }
    this._createMessagesContainer();
    this._messagesContainer.appendChild(messageElement);
    this._messageRegistry.set(getKey(message, role), {
      messageElement,
      referenceCount: 0
    });
  }
  /** Deletes the message element from the global messages container. */
  _deleteMessageElement(key) {
    this._messageRegistry.get(key)?.messageElement?.remove();
    this._messageRegistry.delete(key);
  }
  /** Creates the global container for all aria-describedby messages. */
  _createMessagesContainer() {
    if (this._messagesContainer) {
      return;
    }
    const containerClassName = "cdk-describedby-message-container";
    const serverContainers = this._document.querySelectorAll(`.${containerClassName}[platform="server"]`);
    for (let i35 = 0; i35 < serverContainers.length; i35++) {
      serverContainers[i35].remove();
    }
    const messagesContainer = this._document.createElement("div");
    messagesContainer.style.visibility = "hidden";
    messagesContainer.classList.add(containerClassName);
    messagesContainer.classList.add("cdk-visually-hidden");
    if (this._platform && !this._platform.isBrowser) {
      messagesContainer.setAttribute("platform", "server");
    }
    this._document.body.appendChild(messagesContainer);
    this._messagesContainer = messagesContainer;
  }
  /** Removes all cdk-describedby messages that are hosted through the element. */
  _removeCdkDescribedByReferenceIds(element) {
    const originalReferenceIds = getAriaReferenceIds(element, "aria-describedby").filter((id) => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);
    element.setAttribute("aria-describedby", originalReferenceIds.join(" "));
  }
  /**
   * Adds a message reference to the element using aria-describedby and increments the registered
   * message's reference count.
   */
  _addMessageReference(element, key) {
    const registeredMessage = this._messageRegistry.get(key);
    addAriaReferencedId(element, "aria-describedby", registeredMessage.messageElement.id);
    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);
    registeredMessage.referenceCount++;
  }
  /**
   * Removes a message reference from the element using aria-describedby
   * and decrements the registered message's reference count.
   */
  _removeMessageReference(element, key) {
    const registeredMessage = this._messageRegistry.get(key);
    registeredMessage.referenceCount--;
    removeAriaReferencedId(element, "aria-describedby", registeredMessage.messageElement.id);
    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
  }
  /** Returns true if the element has been described by the provided message ID. */
  _isElementDescribedByMessage(element, key) {
    const referenceIds = getAriaReferenceIds(element, "aria-describedby");
    const registeredMessage = this._messageRegistry.get(key);
    const messageId = registeredMessage && registeredMessage.messageElement.id;
    return !!messageId && referenceIds.indexOf(messageId) != -1;
  }
  /** Determines whether a message can be described on a particular element. */
  _canBeDescribed(element, message) {
    if (!this._isElementNode(element)) {
      return false;
    }
    if (message && typeof message === "object") {
      return true;
    }
    const trimmedMessage = message == null ? "" : `${message}`.trim();
    const ariaLabel = element.getAttribute("aria-label");
    return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;
  }
  /** Checks whether a node is an Element node. */
  _isElementNode(element) {
    return element.nodeType === this._document.ELEMENT_NODE;
  }
};
_AriaDescriber.ɵfac = function AriaDescriber_Factory(t161) {
  return new (t161 || _AriaDescriber)(ɵɵinject(DOCUMENT), ɵɵinject(Platform));
};
_AriaDescriber.ɵprov = ɵɵdefineInjectable({
  token: _AriaDescriber,
  factory: _AriaDescriber.ɵfac,
  providedIn: "root"
});
var AriaDescriber = _AriaDescriber;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AriaDescriber, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: Platform
  }], null);
})();
function getKey(message, role) {
  return typeof message === "string" ? `${role || ""}/${message}` : message;
}
function setMessageId(element, serviceId) {
  if (!element.id) {
    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;
  }
}
var _InteractivityChecker = class _InteractivityChecker {
  constructor(_platform) {
    this._platform = _platform;
  }
  /**
   * Gets whether an element is disabled.
   *
   * @param element Element to be checked.
   * @returns Whether the element is disabled.
   */
  isDisabled(element) {
    return element.hasAttribute("disabled");
  }
  /**
   * Gets whether an element is visible for the purposes of interactivity.
   *
   * This will capture states like `display: none` and `visibility: hidden`, but not things like
   * being clipped by an `overflow: hidden` parent or being outside the viewport.
   *
   * @returns Whether the element is visible.
   */
  isVisible(element) {
    return hasGeometry(element) && getComputedStyle(element).visibility === "visible";
  }
  /**
   * Gets whether an element can be reached via Tab key.
   * Assumes that the element has already been checked with isFocusable.
   *
   * @param element Element to be checked.
   * @returns Whether the element is tabbable.
   */
  isTabbable(element) {
    if (!this._platform.isBrowser) {
      return false;
    }
    const frameElement = getFrameElement(getWindow(element));
    if (frameElement) {
      if (getTabIndexValue(frameElement) === -1) {
        return false;
      }
      if (!this.isVisible(frameElement)) {
        return false;
      }
    }
    let nodeName = element.nodeName.toLowerCase();
    let tabIndexValue = getTabIndexValue(element);
    if (element.hasAttribute("contenteditable")) {
      return tabIndexValue !== -1;
    }
    if (nodeName === "iframe" || nodeName === "object") {
      return false;
    }
    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {
      return false;
    }
    if (nodeName === "audio") {
      if (!element.hasAttribute("controls")) {
        return false;
      }
      return tabIndexValue !== -1;
    }
    if (nodeName === "video") {
      if (tabIndexValue === -1) {
        return false;
      }
      if (tabIndexValue !== null) {
        return true;
      }
      return this._platform.FIREFOX || element.hasAttribute("controls");
    }
    return element.tabIndex >= 0;
  }
  /**
   * Gets whether an element can be focused by the user.
   *
   * @param element Element to be checked.
   * @param config The config object with options to customize this method's behavior
   * @returns Whether the element is focusable.
   */
  isFocusable(element, config) {
    return isPotentiallyFocusable(element) && !this.isDisabled(element) && (config?.ignoreVisibility || this.isVisible(element));
  }
};
_InteractivityChecker.ɵfac = function InteractivityChecker_Factory(t161) {
  return new (t161 || _InteractivityChecker)(ɵɵinject(Platform));
};
_InteractivityChecker.ɵprov = ɵɵdefineInjectable({
  token: _InteractivityChecker,
  factory: _InteractivityChecker.ɵfac,
  providedIn: "root"
});
var InteractivityChecker = _InteractivityChecker;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(InteractivityChecker, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Platform
  }], null);
})();
function getFrameElement(window2) {
  try {
    return window2.frameElement;
  } catch {
    return null;
  }
}
function hasGeometry(element) {
  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === "function" && element.getClientRects().length);
}
function isNativeFormElement(element) {
  let nodeName = element.nodeName.toLowerCase();
  return nodeName === "input" || nodeName === "select" || nodeName === "button" || nodeName === "textarea";
}
function isHiddenInput(element) {
  return isInputElement(element) && element.type == "hidden";
}
function isAnchorWithHref(element) {
  return isAnchorElement(element) && element.hasAttribute("href");
}
function isInputElement(element) {
  return element.nodeName.toLowerCase() == "input";
}
function isAnchorElement(element) {
  return element.nodeName.toLowerCase() == "a";
}
function hasValidTabIndex(element) {
  if (!element.hasAttribute("tabindex") || element.tabIndex === void 0) {
    return false;
  }
  let tabIndex = element.getAttribute("tabindex");
  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));
}
function getTabIndexValue(element) {
  if (!hasValidTabIndex(element)) {
    return null;
  }
  const tabIndex = parseInt(element.getAttribute("tabindex") || "", 10);
  return isNaN(tabIndex) ? -1 : tabIndex;
}
function isPotentiallyTabbableIOS(element) {
  let nodeName = element.nodeName.toLowerCase();
  let inputType = nodeName === "input" && element.type;
  return inputType === "text" || inputType === "password" || nodeName === "select" || nodeName === "textarea";
}
function isPotentiallyFocusable(element) {
  if (isHiddenInput(element)) {
    return false;
  }
  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute("contenteditable") || hasValidTabIndex(element);
}
function getWindow(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || window;
}
var FocusTrap = class {
  /** Whether the focus trap is active. */
  get enabled() {
    return this._enabled;
  }
  set enabled(value) {
    this._enabled = value;
    if (this._startAnchor && this._endAnchor) {
      this._toggleAnchorTabIndex(value, this._startAnchor);
      this._toggleAnchorTabIndex(value, this._endAnchor);
    }
  }
  constructor(_element, _checker, _ngZone, _document, deferAnchors = false) {
    this._element = _element;
    this._checker = _checker;
    this._ngZone = _ngZone;
    this._document = _document;
    this._hasAttached = false;
    this.startAnchorListener = () => this.focusLastTabbableElement();
    this.endAnchorListener = () => this.focusFirstTabbableElement();
    this._enabled = true;
    if (!deferAnchors) {
      this.attachAnchors();
    }
  }
  /** Destroys the focus trap by cleaning up the anchors. */
  destroy() {
    const startAnchor = this._startAnchor;
    const endAnchor = this._endAnchor;
    if (startAnchor) {
      startAnchor.removeEventListener("focus", this.startAnchorListener);
      startAnchor.remove();
    }
    if (endAnchor) {
      endAnchor.removeEventListener("focus", this.endAnchorListener);
      endAnchor.remove();
    }
    this._startAnchor = this._endAnchor = null;
    this._hasAttached = false;
  }
  /**
   * Inserts the anchors into the DOM. This is usually done automatically
   * in the constructor, but can be deferred for cases like directives with `*ngIf`.
   * @returns Whether the focus trap managed to attach successfully. This may not be the case
   * if the target element isn't currently in the DOM.
   */
  attachAnchors() {
    if (this._hasAttached) {
      return true;
    }
    this._ngZone.runOutsideAngular(() => {
      if (!this._startAnchor) {
        this._startAnchor = this._createAnchor();
        this._startAnchor.addEventListener("focus", this.startAnchorListener);
      }
      if (!this._endAnchor) {
        this._endAnchor = this._createAnchor();
        this._endAnchor.addEventListener("focus", this.endAnchorListener);
      }
    });
    if (this._element.parentNode) {
      this._element.parentNode.insertBefore(this._startAnchor, this._element);
      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);
      this._hasAttached = true;
    }
    return this._hasAttached;
  }
  /**
   * Waits for the zone to stabilize, then focuses the first tabbable element.
   * @returns Returns a promise that resolves with a boolean, depending
   * on whether focus was moved successfully.
   */
  focusInitialElementWhenReady(options) {
    return new Promise((resolve) => {
      this._executeOnStable(() => resolve(this.focusInitialElement(options)));
    });
  }
  /**
   * Waits for the zone to stabilize, then focuses
   * the first tabbable element within the focus trap region.
   * @returns Returns a promise that resolves with a boolean, depending
   * on whether focus was moved successfully.
   */
  focusFirstTabbableElementWhenReady(options) {
    return new Promise((resolve) => {
      this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));
    });
  }
  /**
   * Waits for the zone to stabilize, then focuses
   * the last tabbable element within the focus trap region.
   * @returns Returns a promise that resolves with a boolean, depending
   * on whether focus was moved successfully.
   */
  focusLastTabbableElementWhenReady(options) {
    return new Promise((resolve) => {
      this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));
    });
  }
  /**
   * Get the specified boundary element of the trapped region.
   * @param bound The boundary to get (start or end of trapped region).
   * @returns The boundary element.
   */
  _getRegionBoundary(bound) {
    const markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], [cdkFocusRegion${bound}], [cdk-focus-${bound}]`);
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      for (let i35 = 0; i35 < markers.length; i35++) {
        if (markers[i35].hasAttribute(`cdk-focus-${bound}`)) {
          console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', use 'cdkFocusRegion${bound}' instead. The deprecated attribute will be removed in 8.0.0.`, markers[i35]);
        } else if (markers[i35].hasAttribute(`cdk-focus-region-${bound}`)) {
          console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', use 'cdkFocusRegion${bound}' instead. The deprecated attribute will be removed in 8.0.0.`, markers[i35]);
        }
      }
    }
    if (bound == "start") {
      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);
    }
    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);
  }
  /**
   * Focuses the element that should be focused when the focus trap is initialized.
   * @returns Whether focus was moved successfully.
   */
  focusInitialElement(options) {
    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], [cdkFocusInitial]`);
    if (redirectToElement) {
      if ((typeof ngDevMode === "undefined" || ngDevMode) && redirectToElement.hasAttribute(`cdk-focus-initial`)) {
        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', use 'cdkFocusInitial' instead. The deprecated attribute will be removed in 8.0.0`, redirectToElement);
      }
      if ((typeof ngDevMode === "undefined" || ngDevMode) && !this._checker.isFocusable(redirectToElement)) {
        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);
      }
      if (!this._checker.isFocusable(redirectToElement)) {
        const focusableChild = this._getFirstTabbableElement(redirectToElement);
        focusableChild?.focus(options);
        return !!focusableChild;
      }
      redirectToElement.focus(options);
      return true;
    }
    return this.focusFirstTabbableElement(options);
  }
  /**
   * Focuses the first tabbable element within the focus trap region.
   * @returns Whether focus was moved successfully.
   */
  focusFirstTabbableElement(options) {
    const redirectToElement = this._getRegionBoundary("start");
    if (redirectToElement) {
      redirectToElement.focus(options);
    }
    return !!redirectToElement;
  }
  /**
   * Focuses the last tabbable element within the focus trap region.
   * @returns Whether focus was moved successfully.
   */
  focusLastTabbableElement(options) {
    const redirectToElement = this._getRegionBoundary("end");
    if (redirectToElement) {
      redirectToElement.focus(options);
    }
    return !!redirectToElement;
  }
  /**
   * Checks whether the focus trap has successfully been attached.
   */
  hasAttached() {
    return this._hasAttached;
  }
  /** Get the first tabbable element from a DOM subtree (inclusive). */
  _getFirstTabbableElement(root) {
    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
      return root;
    }
    const children = root.children;
    for (let i35 = 0; i35 < children.length; i35++) {
      const tabbableChild = children[i35].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i35]) : null;
      if (tabbableChild) {
        return tabbableChild;
      }
    }
    return null;
  }
  /** Get the last tabbable element from a DOM subtree (inclusive). */
  _getLastTabbableElement(root) {
    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
      return root;
    }
    const children = root.children;
    for (let i35 = children.length - 1; i35 >= 0; i35--) {
      const tabbableChild = children[i35].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i35]) : null;
      if (tabbableChild) {
        return tabbableChild;
      }
    }
    return null;
  }
  /** Creates an anchor element. */
  _createAnchor() {
    const anchor = this._document.createElement("div");
    this._toggleAnchorTabIndex(this._enabled, anchor);
    anchor.classList.add("cdk-visually-hidden");
    anchor.classList.add("cdk-focus-trap-anchor");
    anchor.setAttribute("aria-hidden", "true");
    return anchor;
  }
  /**
   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.
   * @param isEnabled Whether the focus trap is enabled.
   * @param anchor Anchor on which to toggle the tabindex.
   */
  _toggleAnchorTabIndex(isEnabled, anchor) {
    isEnabled ? anchor.setAttribute("tabindex", "0") : anchor.removeAttribute("tabindex");
  }
  /**
   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.
   * @param enabled: Whether the anchors should trap Tab.
   */
  toggleAnchors(enabled) {
    if (this._startAnchor && this._endAnchor) {
      this._toggleAnchorTabIndex(enabled, this._startAnchor);
      this._toggleAnchorTabIndex(enabled, this._endAnchor);
    }
  }
  /** Executes a function when the zone is stable. */
  _executeOnStable(fn) {
    if (this._ngZone.isStable) {
      fn();
    } else {
      this._ngZone.onStable.pipe(take(1)).subscribe(fn);
    }
  }
};
var _FocusTrapFactory = class _FocusTrapFactory {
  constructor(_checker, _ngZone, _document) {
    this._checker = _checker;
    this._ngZone = _ngZone;
    this._document = _document;
  }
  /**
   * Creates a focus-trapped region around the given element.
   * @param element The element around which focus will be trapped.
   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done
   *     manually by the user.
   * @returns The created focus trap instance.
   */
  create(element, deferCaptureElements = false) {
    return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);
  }
};
_FocusTrapFactory.ɵfac = function FocusTrapFactory_Factory(t161) {
  return new (t161 || _FocusTrapFactory)(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(DOCUMENT));
};
_FocusTrapFactory.ɵprov = ɵɵdefineInjectable({
  token: _FocusTrapFactory,
  factory: _FocusTrapFactory.ɵfac,
  providedIn: "root"
});
var FocusTrapFactory = _FocusTrapFactory;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FocusTrapFactory, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: InteractivityChecker
  }, {
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }], null);
})();
var _CdkTrapFocus = class _CdkTrapFocus {
  /** Whether the focus trap is active. */
  get enabled() {
    return this.focusTrap?.enabled || false;
  }
  set enabled(value) {
    if (this.focusTrap) {
      this.focusTrap.enabled = value;
    }
  }
  constructor(_elementRef, _focusTrapFactory, _document) {
    this._elementRef = _elementRef;
    this._focusTrapFactory = _focusTrapFactory;
    this._previouslyFocusedElement = null;
    const platform = inject(Platform);
    if (platform.isBrowser) {
      this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);
    }
  }
  ngOnDestroy() {
    this.focusTrap?.destroy();
    if (this._previouslyFocusedElement) {
      this._previouslyFocusedElement.focus();
      this._previouslyFocusedElement = null;
    }
  }
  ngAfterContentInit() {
    this.focusTrap?.attachAnchors();
    if (this.autoCapture) {
      this._captureFocus();
    }
  }
  ngDoCheck() {
    if (this.focusTrap && !this.focusTrap.hasAttached()) {
      this.focusTrap.attachAnchors();
    }
  }
  ngOnChanges(changes) {
    const autoCaptureChange = changes["autoCapture"];
    if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap?.hasAttached()) {
      this._captureFocus();
    }
  }
  _captureFocus() {
    this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();
    this.focusTrap?.focusInitialElementWhenReady();
  }
};
_CdkTrapFocus.ɵfac = function CdkTrapFocus_Factory(t161) {
  return new (t161 || _CdkTrapFocus)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(FocusTrapFactory), ɵɵdirectiveInject(DOCUMENT));
};
_CdkTrapFocus.ɵdir = ɵɵdefineDirective({
  type: _CdkTrapFocus,
  selectors: [["", "cdkTrapFocus", ""]],
  inputs: {
    enabled: [InputFlags.HasDecoratorInputTransform, "cdkTrapFocus", "enabled", booleanAttribute],
    autoCapture: [InputFlags.HasDecoratorInputTransform, "cdkTrapFocusAutoCapture", "autoCapture", booleanAttribute]
  },
  exportAs: ["cdkTrapFocus"],
  standalone: true,
  features: [ɵɵInputTransformsFeature, ɵɵNgOnChangesFeature]
});
var CdkTrapFocus = _CdkTrapFocus;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkTrapFocus, [{
    type: Directive,
    args: [{
      selector: "[cdkTrapFocus]",
      exportAs: "cdkTrapFocus",
      standalone: true
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: FocusTrapFactory
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }], {
    enabled: [{
      type: Input,
      args: [{
        alias: "cdkTrapFocus",
        transform: booleanAttribute
      }]
    }],
    autoCapture: [{
      type: Input,
      args: [{
        alias: "cdkTrapFocusAutoCapture",
        transform: booleanAttribute
      }]
    }]
  });
})();
var ConfigurableFocusTrap = class extends FocusTrap {
  /** Whether the FocusTrap is enabled. */
  get enabled() {
    return this._enabled;
  }
  set enabled(value) {
    this._enabled = value;
    if (this._enabled) {
      this._focusTrapManager.register(this);
    } else {
      this._focusTrapManager.deregister(this);
    }
  }
  constructor(_element, _checker, _ngZone, _document, _focusTrapManager, _inertStrategy, config) {
    super(_element, _checker, _ngZone, _document, config.defer);
    this._focusTrapManager = _focusTrapManager;
    this._inertStrategy = _inertStrategy;
    this._focusTrapManager.register(this);
  }
  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */
  destroy() {
    this._focusTrapManager.deregister(this);
    super.destroy();
  }
  /** @docs-private Implemented as part of ManagedFocusTrap. */
  _enable() {
    this._inertStrategy.preventFocus(this);
    this.toggleAnchors(true);
  }
  /** @docs-private Implemented as part of ManagedFocusTrap. */
  _disable() {
    this._inertStrategy.allowFocus(this);
    this.toggleAnchors(false);
  }
};
var FOCUS_TRAP_INERT_STRATEGY = new InjectionToken("FOCUS_TRAP_INERT_STRATEGY");
var EventListenerFocusTrapInertStrategy = class {
  constructor() {
    this._listener = null;
  }
  /** Adds a document event listener that keeps focus inside the FocusTrap. */
  preventFocus(focusTrap) {
    if (this._listener) {
      focusTrap._document.removeEventListener("focus", this._listener, true);
    }
    this._listener = (e83) => this._trapFocus(focusTrap, e83);
    focusTrap._ngZone.runOutsideAngular(() => {
      focusTrap._document.addEventListener("focus", this._listener, true);
    });
  }
  /** Removes the event listener added in preventFocus. */
  allowFocus(focusTrap) {
    if (!this._listener) {
      return;
    }
    focusTrap._document.removeEventListener("focus", this._listener, true);
    this._listener = null;
  }
  /**
   * Refocuses the first element in the FocusTrap if the focus event target was outside
   * the FocusTrap.
   *
   * This is an event listener callback. The event listener is added in runOutsideAngular,
   * so all this code runs outside Angular as well.
   */
  _trapFocus(focusTrap, event) {
    const target = event.target;
    const focusTrapRoot = focusTrap._element;
    if (target && !focusTrapRoot.contains(target) && !target.closest?.("div.cdk-overlay-pane")) {
      setTimeout(() => {
        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {
          focusTrap.focusFirstTabbableElement();
        }
      });
    }
  }
};
var _FocusTrapManager = class _FocusTrapManager {
  constructor() {
    this._focusTrapStack = [];
  }
  /**
   * Disables the FocusTrap at the top of the stack, and then pushes
   * the new FocusTrap onto the stack.
   */
  register(focusTrap) {
    this._focusTrapStack = this._focusTrapStack.filter((ft) => ft !== focusTrap);
    let stack = this._focusTrapStack;
    if (stack.length) {
      stack[stack.length - 1]._disable();
    }
    stack.push(focusTrap);
    focusTrap._enable();
  }
  /**
   * Removes the FocusTrap from the stack, and activates the
   * FocusTrap that is the new top of the stack.
   */
  deregister(focusTrap) {
    focusTrap._disable();
    const stack = this._focusTrapStack;
    const i35 = stack.indexOf(focusTrap);
    if (i35 !== -1) {
      stack.splice(i35, 1);
      if (stack.length) {
        stack[stack.length - 1]._enable();
      }
    }
  }
};
_FocusTrapManager.ɵfac = function FocusTrapManager_Factory(t161) {
  return new (t161 || _FocusTrapManager)();
};
_FocusTrapManager.ɵprov = ɵɵdefineInjectable({
  token: _FocusTrapManager,
  factory: _FocusTrapManager.ɵfac,
  providedIn: "root"
});
var FocusTrapManager = _FocusTrapManager;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FocusTrapManager, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var _ConfigurableFocusTrapFactory = class _ConfigurableFocusTrapFactory {
  constructor(_checker, _ngZone, _focusTrapManager, _document, _inertStrategy) {
    this._checker = _checker;
    this._ngZone = _ngZone;
    this._focusTrapManager = _focusTrapManager;
    this._document = _document;
    this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();
  }
  create(element, config = {
    defer: false
  }) {
    let configObject;
    if (typeof config === "boolean") {
      configObject = {
        defer: config
      };
    } else {
      configObject = config;
    }
    return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);
  }
};
_ConfigurableFocusTrapFactory.ɵfac = function ConfigurableFocusTrapFactory_Factory(t161) {
  return new (t161 || _ConfigurableFocusTrapFactory)(ɵɵinject(InteractivityChecker), ɵɵinject(NgZone), ɵɵinject(FocusTrapManager), ɵɵinject(DOCUMENT), ɵɵinject(FOCUS_TRAP_INERT_STRATEGY, 8));
};
_ConfigurableFocusTrapFactory.ɵprov = ɵɵdefineInjectable({
  token: _ConfigurableFocusTrapFactory,
  factory: _ConfigurableFocusTrapFactory.ɵfac,
  providedIn: "root"
});
var ConfigurableFocusTrapFactory = _ConfigurableFocusTrapFactory;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ConfigurableFocusTrapFactory, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: InteractivityChecker
  }, {
    type: NgZone
  }, {
    type: FocusTrapManager
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [FOCUS_TRAP_INERT_STRATEGY]
    }]
  }], null);
})();
function isFakeMousedownFromScreenReader(event) {
  return event.buttons === 0 || event.detail === 0;
}
function isFakeTouchstartFromScreenReader(event) {
  const touch = event.touches && event.touches[0] || event.changedTouches && event.changedTouches[0];
  return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) && (touch.radiusY == null || touch.radiusY === 1);
}
var INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken("cdk-input-modality-detector-options");
var INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {
  ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT]
};
var TOUCH_BUFFER_MS = 650;
var modalityEventListenerOptions = normalizePassiveListenerOptions({
  passive: true,
  capture: true
});
var _InputModalityDetector = class _InputModalityDetector {
  /** The most recently detected input modality. */
  get mostRecentModality() {
    return this._modality.value;
  }
  constructor(_platform, ngZone, document2, options) {
    this._platform = _platform;
    this._mostRecentTarget = null;
    this._modality = new BehaviorSubject(null);
    this._lastTouchMs = 0;
    this._onKeydown = (event) => {
      if (this._options?.ignoreKeys?.some((keyCode) => keyCode === event.keyCode)) {
        return;
      }
      this._modality.next("keyboard");
      this._mostRecentTarget = _getEventTarget(event);
    };
    this._onMousedown = (event) => {
      if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {
        return;
      }
      this._modality.next(isFakeMousedownFromScreenReader(event) ? "keyboard" : "mouse");
      this._mostRecentTarget = _getEventTarget(event);
    };
    this._onTouchstart = (event) => {
      if (isFakeTouchstartFromScreenReader(event)) {
        this._modality.next("keyboard");
        return;
      }
      this._lastTouchMs = Date.now();
      this._modality.next("touch");
      this._mostRecentTarget = _getEventTarget(event);
    };
    this._options = __spreadValues(__spreadValues({}, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS), options);
    this.modalityDetected = this._modality.pipe(skip(1));
    this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());
    if (_platform.isBrowser) {
      ngZone.runOutsideAngular(() => {
        document2.addEventListener("keydown", this._onKeydown, modalityEventListenerOptions);
        document2.addEventListener("mousedown", this._onMousedown, modalityEventListenerOptions);
        document2.addEventListener("touchstart", this._onTouchstart, modalityEventListenerOptions);
      });
    }
  }
  ngOnDestroy() {
    this._modality.complete();
    if (this._platform.isBrowser) {
      document.removeEventListener("keydown", this._onKeydown, modalityEventListenerOptions);
      document.removeEventListener("mousedown", this._onMousedown, modalityEventListenerOptions);
      document.removeEventListener("touchstart", this._onTouchstart, modalityEventListenerOptions);
    }
  }
};
_InputModalityDetector.ɵfac = function InputModalityDetector_Factory(t161) {
  return new (t161 || _InputModalityDetector)(ɵɵinject(Platform), ɵɵinject(NgZone), ɵɵinject(DOCUMENT), ɵɵinject(INPUT_MODALITY_DETECTOR_OPTIONS, 8));
};
_InputModalityDetector.ɵprov = ɵɵdefineInjectable({
  token: _InputModalityDetector,
  factory: _InputModalityDetector.ɵfac,
  providedIn: "root"
});
var InputModalityDetector = _InputModalityDetector;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(InputModalityDetector, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Platform
  }, {
    type: NgZone
  }, {
    type: Document,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [INPUT_MODALITY_DETECTOR_OPTIONS]
    }]
  }], null);
})();
var LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken("liveAnnouncerElement", {
  providedIn: "root",
  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY
});
function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {
  return null;
}
var LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken("LIVE_ANNOUNCER_DEFAULT_OPTIONS");
var uniqueIds = 0;
var _LiveAnnouncer = class _LiveAnnouncer {
  constructor(elementToken, _ngZone, _document, _defaultOptions) {
    this._ngZone = _ngZone;
    this._defaultOptions = _defaultOptions;
    this._document = _document;
    this._liveElement = elementToken || this._createLiveElement();
  }
  announce(message, ...args) {
    const defaultOptions = this._defaultOptions;
    let politeness;
    let duration;
    if (args.length === 1 && typeof args[0] === "number") {
      duration = args[0];
    } else {
      [politeness, duration] = args;
    }
    this.clear();
    clearTimeout(this._previousTimeout);
    if (!politeness) {
      politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : "polite";
    }
    if (duration == null && defaultOptions) {
      duration = defaultOptions.duration;
    }
    this._liveElement.setAttribute("aria-live", politeness);
    if (this._liveElement.id) {
      this._exposeAnnouncerToModals(this._liveElement.id);
    }
    return this._ngZone.runOutsideAngular(() => {
      if (!this._currentPromise) {
        this._currentPromise = new Promise((resolve) => this._currentResolve = resolve);
      }
      clearTimeout(this._previousTimeout);
      this._previousTimeout = setTimeout(() => {
        this._liveElement.textContent = message;
        if (typeof duration === "number") {
          this._previousTimeout = setTimeout(() => this.clear(), duration);
        }
        this._currentResolve?.();
        this._currentPromise = this._currentResolve = void 0;
      }, 100);
      return this._currentPromise;
    });
  }
  /**
   * Clears the current text from the announcer element. Can be used to prevent
   * screen readers from reading the text out again while the user is going
   * through the page landmarks.
   */
  clear() {
    if (this._liveElement) {
      this._liveElement.textContent = "";
    }
  }
  ngOnDestroy() {
    clearTimeout(this._previousTimeout);
    this._liveElement?.remove();
    this._liveElement = null;
    this._currentResolve?.();
    this._currentPromise = this._currentResolve = void 0;
  }
  _createLiveElement() {
    const elementClass = "cdk-live-announcer-element";
    const previousElements = this._document.getElementsByClassName(elementClass);
    const liveEl = this._document.createElement("div");
    for (let i35 = 0; i35 < previousElements.length; i35++) {
      previousElements[i35].remove();
    }
    liveEl.classList.add(elementClass);
    liveEl.classList.add("cdk-visually-hidden");
    liveEl.setAttribute("aria-atomic", "true");
    liveEl.setAttribute("aria-live", "polite");
    liveEl.id = `cdk-live-announcer-${uniqueIds++}`;
    this._document.body.appendChild(liveEl);
    return liveEl;
  }
  /**
   * Some browsers won't expose the accessibility node of the live announcer element if there is an
   * `aria-modal` and the live announcer is outside of it. This method works around the issue by
   * pointing the `aria-owns` of all modals to the live announcer element.
   */
  _exposeAnnouncerToModals(id) {
    const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal="true"]');
    for (let i35 = 0; i35 < modals.length; i35++) {
      const modal = modals[i35];
      const ariaOwns = modal.getAttribute("aria-owns");
      if (!ariaOwns) {
        modal.setAttribute("aria-owns", id);
      } else if (ariaOwns.indexOf(id) === -1) {
        modal.setAttribute("aria-owns", ariaOwns + " " + id);
      }
    }
  }
};
_LiveAnnouncer.ɵfac = function LiveAnnouncer_Factory(t161) {
  return new (t161 || _LiveAnnouncer)(ɵɵinject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), ɵɵinject(NgZone), ɵɵinject(DOCUMENT), ɵɵinject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));
};
_LiveAnnouncer.ɵprov = ɵɵdefineInjectable({
  token: _LiveAnnouncer,
  factory: _LiveAnnouncer.ɵfac,
  providedIn: "root"
});
var LiveAnnouncer = _LiveAnnouncer;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LiveAnnouncer, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]
    }]
  }, {
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]
    }]
  }], null);
})();
var _CdkAriaLive = class _CdkAriaLive {
  /** The aria-live politeness level to use when announcing messages. */
  get politeness() {
    return this._politeness;
  }
  set politeness(value) {
    this._politeness = value === "off" || value === "assertive" ? value : "polite";
    if (this._politeness === "off") {
      if (this._subscription) {
        this._subscription.unsubscribe();
        this._subscription = null;
      }
    } else if (!this._subscription) {
      this._subscription = this._ngZone.runOutsideAngular(() => {
        return this._contentObserver.observe(this._elementRef).subscribe(() => {
          const elementText = this._elementRef.nativeElement.textContent;
          if (elementText !== this._previousAnnouncedText) {
            this._liveAnnouncer.announce(elementText, this._politeness, this.duration);
            this._previousAnnouncedText = elementText;
          }
        });
      });
    }
  }
  constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {
    this._elementRef = _elementRef;
    this._liveAnnouncer = _liveAnnouncer;
    this._contentObserver = _contentObserver;
    this._ngZone = _ngZone;
    this._politeness = "polite";
  }
  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }
};
_CdkAriaLive.ɵfac = function CdkAriaLive_Factory(t161) {
  return new (t161 || _CdkAriaLive)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(LiveAnnouncer), ɵɵdirectiveInject(ContentObserver), ɵɵdirectiveInject(NgZone));
};
_CdkAriaLive.ɵdir = ɵɵdefineDirective({
  type: _CdkAriaLive,
  selectors: [["", "cdkAriaLive", ""]],
  inputs: {
    politeness: [InputFlags.None, "cdkAriaLive", "politeness"],
    duration: [InputFlags.None, "cdkAriaLiveDuration", "duration"]
  },
  exportAs: ["cdkAriaLive"],
  standalone: true
});
var CdkAriaLive = _CdkAriaLive;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkAriaLive, [{
    type: Directive,
    args: [{
      selector: "[cdkAriaLive]",
      exportAs: "cdkAriaLive",
      standalone: true
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: LiveAnnouncer
  }, {
    type: ContentObserver
  }, {
    type: NgZone
  }], {
    politeness: [{
      type: Input,
      args: ["cdkAriaLive"]
    }],
    duration: [{
      type: Input,
      args: ["cdkAriaLiveDuration"]
    }]
  });
})();
var FocusMonitorDetectionMode;
(function(FocusMonitorDetectionMode2) {
  FocusMonitorDetectionMode2[FocusMonitorDetectionMode2["IMMEDIATE"] = 0] = "IMMEDIATE";
  FocusMonitorDetectionMode2[FocusMonitorDetectionMode2["EVENTUAL"] = 1] = "EVENTUAL";
})(FocusMonitorDetectionMode || (FocusMonitorDetectionMode = {}));
var FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken("cdk-focus-monitor-default-options");
var captureEventListenerOptions = normalizePassiveListenerOptions({
  passive: true,
  capture: true
});
var _FocusMonitor = class _FocusMonitor {
  constructor(_ngZone, _platform, _inputModalityDetector, document2, options) {
    this._ngZone = _ngZone;
    this._platform = _platform;
    this._inputModalityDetector = _inputModalityDetector;
    this._origin = null;
    this._windowFocused = false;
    this._originFromTouchInteraction = false;
    this._elementInfo = /* @__PURE__ */ new Map();
    this._monitoredElementCount = 0;
    this._rootNodeFocusListenerCount = /* @__PURE__ */ new Map();
    this._windowFocusListener = () => {
      this._windowFocused = true;
      this._windowFocusTimeoutId = window.setTimeout(() => this._windowFocused = false);
    };
    this._stopInputModalityDetector = new Subject();
    this._rootNodeFocusAndBlurListener = (event) => {
      const target = _getEventTarget(event);
      for (let element = target; element; element = element.parentElement) {
        if (event.type === "focus") {
          this._onFocus(event, element);
        } else {
          this._onBlur(event, element);
        }
      }
    };
    this._document = document2;
    this._detectionMode = options?.detectionMode || FocusMonitorDetectionMode.IMMEDIATE;
  }
  monitor(element, checkChildren = false) {
    const nativeElement = coerceElement(element);
    if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {
      return of();
    }
    const rootNode = _getShadowRoot(nativeElement) || this._getDocument();
    const cachedInfo = this._elementInfo.get(nativeElement);
    if (cachedInfo) {
      if (checkChildren) {
        cachedInfo.checkChildren = true;
      }
      return cachedInfo.subject;
    }
    const info = {
      checkChildren,
      subject: new Subject(),
      rootNode
    };
    this._elementInfo.set(nativeElement, info);
    this._registerGlobalListeners(info);
    return info.subject;
  }
  stopMonitoring(element) {
    const nativeElement = coerceElement(element);
    const elementInfo = this._elementInfo.get(nativeElement);
    if (elementInfo) {
      elementInfo.subject.complete();
      this._setClasses(nativeElement);
      this._elementInfo.delete(nativeElement);
      this._removeGlobalListeners(elementInfo);
    }
  }
  focusVia(element, origin, options) {
    const nativeElement = coerceElement(element);
    const focusedElement = this._getDocument().activeElement;
    if (nativeElement === focusedElement) {
      this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));
    } else {
      this._setOrigin(origin);
      if (typeof nativeElement.focus === "function") {
        nativeElement.focus(options);
      }
    }
  }
  ngOnDestroy() {
    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));
  }
  /** Access injected document if available or fallback to global document reference */
  _getDocument() {
    return this._document || document;
  }
  /** Use defaultView of injected document if available or fallback to global window reference */
  _getWindow() {
    const doc = this._getDocument();
    return doc.defaultView || window;
  }
  _getFocusOrigin(focusEventTarget) {
    if (this._origin) {
      if (this._originFromTouchInteraction) {
        return this._shouldBeAttributedToTouch(focusEventTarget) ? "touch" : "program";
      } else {
        return this._origin;
      }
    }
    if (this._windowFocused && this._lastFocusOrigin) {
      return this._lastFocusOrigin;
    }
    if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {
      return "mouse";
    }
    return "program";
  }
  /**
   * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a
   * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we
   * handle a focus event following a touch interaction, we need to determine whether (1) the focus
   * event was directly caused by the touch interaction or (2) the focus event was caused by a
   * subsequent programmatic focus call triggered by the touch interaction.
   * @param focusEventTarget The target of the focus event under examination.
   */
  _shouldBeAttributedToTouch(focusEventTarget) {
    return this._detectionMode === FocusMonitorDetectionMode.EVENTUAL || !!focusEventTarget?.contains(this._inputModalityDetector._mostRecentTarget);
  }
  /**
   * Sets the focus classes on the element based on the given focus origin.
   * @param element The element to update the classes on.
   * @param origin The focus origin.
   */
  _setClasses(element, origin) {
    element.classList.toggle("cdk-focused", !!origin);
    element.classList.toggle("cdk-touch-focused", origin === "touch");
    element.classList.toggle("cdk-keyboard-focused", origin === "keyboard");
    element.classList.toggle("cdk-mouse-focused", origin === "mouse");
    element.classList.toggle("cdk-program-focused", origin === "program");
  }
  /**
   * Updates the focus origin. If we're using immediate detection mode, we schedule an async
   * function to clear the origin at the end of a timeout. The duration of the timeout depends on
   * the origin being set.
   * @param origin The origin to set.
   * @param isFromInteraction Whether we are setting the origin from an interaction event.
   */
  _setOrigin(origin, isFromInteraction = false) {
    this._ngZone.runOutsideAngular(() => {
      this._origin = origin;
      this._originFromTouchInteraction = origin === "touch" && isFromInteraction;
      if (this._detectionMode === FocusMonitorDetectionMode.IMMEDIATE) {
        clearTimeout(this._originTimeoutId);
        const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;
        this._originTimeoutId = setTimeout(() => this._origin = null, ms);
      }
    });
  }
  /**
   * Handles focus events on a registered element.
   * @param event The focus event.
   * @param element The monitored element.
   */
  _onFocus(event, element) {
    const elementInfo = this._elementInfo.get(element);
    const focusEventTarget = _getEventTarget(event);
    if (!elementInfo || !elementInfo.checkChildren && element !== focusEventTarget) {
      return;
    }
    this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);
  }
  /**
   * Handles blur events on a registered element.
   * @param event The blur event.
   * @param element The monitored element.
   */
  _onBlur(event, element) {
    const elementInfo = this._elementInfo.get(element);
    if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {
      return;
    }
    this._setClasses(element);
    this._emitOrigin(elementInfo, null);
  }
  _emitOrigin(info, origin) {
    if (info.subject.observers.length) {
      this._ngZone.run(() => info.subject.next(origin));
    }
  }
  _registerGlobalListeners(elementInfo) {
    if (!this._platform.isBrowser) {
      return;
    }
    const rootNode = elementInfo.rootNode;
    const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;
    if (!rootNodeFocusListeners) {
      this._ngZone.runOutsideAngular(() => {
        rootNode.addEventListener("focus", this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
        rootNode.addEventListener("blur", this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
      });
    }
    this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);
    if (++this._monitoredElementCount === 1) {
      this._ngZone.runOutsideAngular(() => {
        const window2 = this._getWindow();
        window2.addEventListener("focus", this._windowFocusListener);
      });
      this._inputModalityDetector.modalityDetected.pipe(takeUntil(this._stopInputModalityDetector)).subscribe((modality) => {
        this._setOrigin(
          modality,
          true
          /* isFromInteraction */
        );
      });
    }
  }
  _removeGlobalListeners(elementInfo) {
    const rootNode = elementInfo.rootNode;
    if (this._rootNodeFocusListenerCount.has(rootNode)) {
      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);
      if (rootNodeFocusListeners > 1) {
        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);
      } else {
        rootNode.removeEventListener("focus", this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
        rootNode.removeEventListener("blur", this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
        this._rootNodeFocusListenerCount.delete(rootNode);
      }
    }
    if (!--this._monitoredElementCount) {
      const window2 = this._getWindow();
      window2.removeEventListener("focus", this._windowFocusListener);
      this._stopInputModalityDetector.next();
      clearTimeout(this._windowFocusTimeoutId);
      clearTimeout(this._originTimeoutId);
    }
  }
  /** Updates all the state on an element once its focus origin has changed. */
  _originChanged(element, origin, elementInfo) {
    this._setClasses(element, origin);
    this._emitOrigin(elementInfo, origin);
    this._lastFocusOrigin = origin;
  }
  /**
   * Collects the `MonitoredElementInfo` of a particular element and
   * all of its ancestors that have enabled `checkChildren`.
   * @param element Element from which to start the search.
   */
  _getClosestElementsInfo(element) {
    const results = [];
    this._elementInfo.forEach((info, currentElement) => {
      if (currentElement === element || info.checkChildren && currentElement.contains(element)) {
        results.push([currentElement, info]);
      }
    });
    return results;
  }
  /**
   * Returns whether an interaction is likely to have come from the user clicking the `label` of
   * an `input` or `textarea` in order to focus it.
   * @param focusEventTarget Target currently receiving focus.
   */
  _isLastInteractionFromInputLabel(focusEventTarget) {
    const {
      _mostRecentTarget: mostRecentTarget,
      mostRecentModality
    } = this._inputModalityDetector;
    if (mostRecentModality !== "mouse" || !mostRecentTarget || mostRecentTarget === focusEventTarget || focusEventTarget.nodeName !== "INPUT" && focusEventTarget.nodeName !== "TEXTAREA" || focusEventTarget.disabled) {
      return false;
    }
    const labels = focusEventTarget.labels;
    if (labels) {
      for (let i35 = 0; i35 < labels.length; i35++) {
        if (labels[i35].contains(mostRecentTarget)) {
          return true;
        }
      }
    }
    return false;
  }
};
_FocusMonitor.ɵfac = function FocusMonitor_Factory(t161) {
  return new (t161 || _FocusMonitor)(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(InputModalityDetector), ɵɵinject(DOCUMENT, 8), ɵɵinject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));
};
_FocusMonitor.ɵprov = ɵɵdefineInjectable({
  token: _FocusMonitor,
  factory: _FocusMonitor.ɵfac,
  providedIn: "root"
});
var FocusMonitor = _FocusMonitor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FocusMonitor, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: NgZone
  }, {
    type: Platform
  }, {
    type: InputModalityDetector
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [FOCUS_MONITOR_DEFAULT_OPTIONS]
    }]
  }], null);
})();
var _CdkMonitorFocus = class _CdkMonitorFocus {
  constructor(_elementRef, _focusMonitor) {
    this._elementRef = _elementRef;
    this._focusMonitor = _focusMonitor;
    this._focusOrigin = null;
    this.cdkFocusChange = new EventEmitter();
  }
  get focusOrigin() {
    return this._focusOrigin;
  }
  ngAfterViewInit() {
    const element = this._elementRef.nativeElement;
    this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute("cdkMonitorSubtreeFocus")).subscribe((origin) => {
      this._focusOrigin = origin;
      this.cdkFocusChange.emit(origin);
    });
  }
  ngOnDestroy() {
    this._focusMonitor.stopMonitoring(this._elementRef);
    if (this._monitorSubscription) {
      this._monitorSubscription.unsubscribe();
    }
  }
};
_CdkMonitorFocus.ɵfac = function CdkMonitorFocus_Factory(t161) {
  return new (t161 || _CdkMonitorFocus)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(FocusMonitor));
};
_CdkMonitorFocus.ɵdir = ɵɵdefineDirective({
  type: _CdkMonitorFocus,
  selectors: [["", "cdkMonitorElementFocus", ""], ["", "cdkMonitorSubtreeFocus", ""]],
  outputs: {
    cdkFocusChange: "cdkFocusChange"
  },
  exportAs: ["cdkMonitorFocus"],
  standalone: true
});
var CdkMonitorFocus = _CdkMonitorFocus;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkMonitorFocus, [{
    type: Directive,
    args: [{
      selector: "[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]",
      exportAs: "cdkMonitorFocus",
      standalone: true
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: FocusMonitor
  }], {
    cdkFocusChange: [{
      type: Output
    }]
  });
})();
var HighContrastMode;
(function(HighContrastMode2) {
  HighContrastMode2[HighContrastMode2["NONE"] = 0] = "NONE";
  HighContrastMode2[HighContrastMode2["BLACK_ON_WHITE"] = 1] = "BLACK_ON_WHITE";
  HighContrastMode2[HighContrastMode2["WHITE_ON_BLACK"] = 2] = "WHITE_ON_BLACK";
})(HighContrastMode || (HighContrastMode = {}));
var BLACK_ON_WHITE_CSS_CLASS = "cdk-high-contrast-black-on-white";
var WHITE_ON_BLACK_CSS_CLASS = "cdk-high-contrast-white-on-black";
var HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = "cdk-high-contrast-active";
var _HighContrastModeDetector = class _HighContrastModeDetector {
  constructor(_platform, document2) {
    this._platform = _platform;
    this._document = document2;
    this._breakpointSubscription = inject(BreakpointObserver).observe("(forced-colors: active)").subscribe(() => {
      if (this._hasCheckedHighContrastMode) {
        this._hasCheckedHighContrastMode = false;
        this._applyBodyHighContrastModeCssClasses();
      }
    });
  }
  /** Gets the current high-contrast-mode for the page. */
  getHighContrastMode() {
    if (!this._platform.isBrowser) {
      return HighContrastMode.NONE;
    }
    const testElement = this._document.createElement("div");
    testElement.style.backgroundColor = "rgb(1,2,3)";
    testElement.style.position = "absolute";
    this._document.body.appendChild(testElement);
    const documentWindow = this._document.defaultView || window;
    const computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;
    const computedColor = (computedStyle && computedStyle.backgroundColor || "").replace(/ /g, "");
    testElement.remove();
    switch (computedColor) {
      case "rgb(0,0,0)":
      case "rgb(45,50,54)":
      case "rgb(32,32,32)":
        return HighContrastMode.WHITE_ON_BLACK;
      case "rgb(255,255,255)":
      case "rgb(255,250,239)":
        return HighContrastMode.BLACK_ON_WHITE;
    }
    return HighContrastMode.NONE;
  }
  ngOnDestroy() {
    this._breakpointSubscription.unsubscribe();
  }
  /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */
  _applyBodyHighContrastModeCssClasses() {
    if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {
      const bodyClasses = this._document.body.classList;
      bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);
      this._hasCheckedHighContrastMode = true;
      const mode = this.getHighContrastMode();
      if (mode === HighContrastMode.BLACK_ON_WHITE) {
        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);
      } else if (mode === HighContrastMode.WHITE_ON_BLACK) {
        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);
      }
    }
  }
};
_HighContrastModeDetector.ɵfac = function HighContrastModeDetector_Factory(t161) {
  return new (t161 || _HighContrastModeDetector)(ɵɵinject(Platform), ɵɵinject(DOCUMENT));
};
_HighContrastModeDetector.ɵprov = ɵɵdefineInjectable({
  token: _HighContrastModeDetector,
  factory: _HighContrastModeDetector.ɵfac,
  providedIn: "root"
});
var HighContrastModeDetector = _HighContrastModeDetector;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HighContrastModeDetector, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Platform
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }], null);
})();
var _A11yModule = class _A11yModule {
  constructor(highContrastModeDetector) {
    highContrastModeDetector._applyBodyHighContrastModeCssClasses();
  }
};
_A11yModule.ɵfac = function A11yModule_Factory(t161) {
  return new (t161 || _A11yModule)(ɵɵinject(HighContrastModeDetector));
};
_A11yModule.ɵmod = ɵɵdefineNgModule({
  type: _A11yModule,
  imports: [ObserversModule, CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],
  exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]
});
_A11yModule.ɵinj = ɵɵdefineInjector({
  imports: [ObserversModule]
});
var A11yModule = _A11yModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(A11yModule, [{
    type: NgModule,
    args: [{
      imports: [ObserversModule, CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],
      exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]
    }]
  }], () => [{
    type: HighContrastModeDetector
  }], null);
})();

// node_modules/@angular/cdk/fesm2022/bidi.mjs
var DIR_DOCUMENT = new InjectionToken("cdk-dir-doc", {
  providedIn: "root",
  factory: DIR_DOCUMENT_FACTORY
});
function DIR_DOCUMENT_FACTORY() {
  return inject(DOCUMENT);
}
var RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;
function _resolveDirectionality(rawValue) {
  const value = rawValue?.toLowerCase() || "";
  if (value === "auto" && typeof navigator !== "undefined" && navigator?.language) {
    return RTL_LOCALE_PATTERN.test(navigator.language) ? "rtl" : "ltr";
  }
  return value === "rtl" ? "rtl" : "ltr";
}
var _Directionality = class _Directionality {
  constructor(_document) {
    this.value = "ltr";
    this.change = new EventEmitter();
    if (_document) {
      const bodyDir = _document.body ? _document.body.dir : null;
      const htmlDir = _document.documentElement ? _document.documentElement.dir : null;
      this.value = _resolveDirectionality(bodyDir || htmlDir || "ltr");
    }
  }
  ngOnDestroy() {
    this.change.complete();
  }
};
_Directionality.ɵfac = function Directionality_Factory(t161) {
  return new (t161 || _Directionality)(ɵɵinject(DIR_DOCUMENT, 8));
};
_Directionality.ɵprov = ɵɵdefineInjectable({
  token: _Directionality,
  factory: _Directionality.ɵfac,
  providedIn: "root"
});
var Directionality = _Directionality;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Directionality, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [DIR_DOCUMENT]
    }]
  }], null);
})();
var _Dir = class _Dir {
  constructor() {
    this._dir = "ltr";
    this._isInitialized = false;
    this.change = new EventEmitter();
  }
  /** @docs-private */
  get dir() {
    return this._dir;
  }
  set dir(value) {
    const previousValue = this._dir;
    this._dir = _resolveDirectionality(value);
    this._rawDir = value;
    if (previousValue !== this._dir && this._isInitialized) {
      this.change.emit(this._dir);
    }
  }
  /** Current layout direction of the element. */
  get value() {
    return this.dir;
  }
  /** Initialize once default value has been set. */
  ngAfterContentInit() {
    this._isInitialized = true;
  }
  ngOnDestroy() {
    this.change.complete();
  }
};
_Dir.ɵfac = function Dir_Factory(t161) {
  return new (t161 || _Dir)();
};
_Dir.ɵdir = ɵɵdefineDirective({
  type: _Dir,
  selectors: [["", "dir", ""]],
  hostVars: 1,
  hostBindings: function Dir_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("dir", ctx._rawDir);
    }
  },
  inputs: {
    dir: "dir"
  },
  outputs: {
    change: "dirChange"
  },
  exportAs: ["dir"],
  standalone: true,
  features: [ɵɵProvidersFeature([{
    provide: Directionality,
    useExisting: _Dir
  }])]
});
var Dir = _Dir;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Dir, [{
    type: Directive,
    args: [{
      selector: "[dir]",
      providers: [{
        provide: Directionality,
        useExisting: Dir
      }],
      host: {
        "[attr.dir]": "_rawDir"
      },
      exportAs: "dir",
      standalone: true
    }]
  }], null, {
    change: [{
      type: Output,
      args: ["dirChange"]
    }],
    dir: [{
      type: Input
    }]
  });
})();
var _BidiModule = class _BidiModule {
};
_BidiModule.ɵfac = function BidiModule_Factory(t161) {
  return new (t161 || _BidiModule)();
};
_BidiModule.ɵmod = ɵɵdefineNgModule({
  type: _BidiModule,
  imports: [Dir],
  exports: [Dir]
});
_BidiModule.ɵinj = ɵɵdefineInjector({});
var BidiModule = _BidiModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BidiModule, [{
    type: NgModule,
    args: [{
      imports: [Dir],
      exports: [Dir]
    }]
  }], null, null);
})();

// node_modules/@angular/cdk/fesm2022/collections.mjs
var DataSource = class {
};
function isDataSource(value) {
  return value && typeof value.connect === "function" && !(value instanceof ConnectableObservable);
}
var ArrayDataSource = class extends DataSource {
  constructor(_data) {
    super();
    this._data = _data;
  }
  connect() {
    return isObservable(this._data) ? this._data : of(this._data);
  }
  disconnect() {
  }
};
var _ViewRepeaterOperation;
(function(_ViewRepeaterOperation2) {
  _ViewRepeaterOperation2[_ViewRepeaterOperation2["REPLACED"] = 0] = "REPLACED";
  _ViewRepeaterOperation2[_ViewRepeaterOperation2["INSERTED"] = 1] = "INSERTED";
  _ViewRepeaterOperation2[_ViewRepeaterOperation2["MOVED"] = 2] = "MOVED";
  _ViewRepeaterOperation2[_ViewRepeaterOperation2["REMOVED"] = 3] = "REMOVED";
})(_ViewRepeaterOperation || (_ViewRepeaterOperation = {}));
var _VIEW_REPEATER_STRATEGY = new InjectionToken("_ViewRepeater");
var _RecycleViewRepeaterStrategy = class {
  constructor() {
    this.viewCacheSize = 20;
    this._viewCache = [];
  }
  /** Apply changes to the DOM. */
  applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {
    changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {
      let view;
      let operation;
      if (record.previousIndex == null) {
        const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);
        view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));
        operation = view ? _ViewRepeaterOperation.INSERTED : _ViewRepeaterOperation.REPLACED;
      } else if (currentIndex == null) {
        this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);
        operation = _ViewRepeaterOperation.REMOVED;
      } else {
        view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));
        operation = _ViewRepeaterOperation.MOVED;
      }
      if (itemViewChanged) {
        itemViewChanged({
          context: view?.context,
          operation,
          record
        });
      }
    });
  }
  detach() {
    for (const view of this._viewCache) {
      view.destroy();
    }
    this._viewCache = [];
  }
  /**
   * Inserts a view for a new item, either from the cache or by creating a new
   * one. Returns `undefined` if the item was inserted into a cached view.
   */
  _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {
    const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);
    if (cachedView) {
      cachedView.context.$implicit = value;
      return void 0;
    }
    const viewArgs = viewArgsFactory();
    return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);
  }
  /** Detaches the view at the given index and inserts into the view cache. */
  _detachAndCacheView(index, viewContainerRef) {
    const detachedView = viewContainerRef.detach(index);
    this._maybeCacheView(detachedView, viewContainerRef);
  }
  /** Moves view at the previous index to the current index. */
  _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {
    const view = viewContainerRef.get(adjustedPreviousIndex);
    viewContainerRef.move(view, currentIndex);
    view.context.$implicit = value;
    return view;
  }
  /**
   * Cache the given detached view. If the cache is full, the view will be
   * destroyed.
   */
  _maybeCacheView(view, viewContainerRef) {
    if (this._viewCache.length < this.viewCacheSize) {
      this._viewCache.push(view);
    } else {
      const index = viewContainerRef.indexOf(view);
      if (index === -1) {
        view.destroy();
      } else {
        viewContainerRef.remove(index);
      }
    }
  }
  /** Inserts a recycled view from the cache at the given index. */
  _insertViewFromCache(index, viewContainerRef) {
    const cachedView = this._viewCache.pop();
    if (cachedView) {
      viewContainerRef.insert(cachedView, index);
    }
    return cachedView || null;
  }
};
var _UniqueSelectionDispatcher = class _UniqueSelectionDispatcher {
  constructor() {
    this._listeners = [];
  }
  /**
   * Notify other items that selection for the given name has been set.
   * @param id ID of the item.
   * @param name Name of the item.
   */
  notify(id, name) {
    for (let listener of this._listeners) {
      listener(id, name);
    }
  }
  /**
   * Listen for future changes to item selection.
   * @return Function used to deregister listener
   */
  listen(listener) {
    this._listeners.push(listener);
    return () => {
      this._listeners = this._listeners.filter((registered) => {
        return listener !== registered;
      });
    };
  }
  ngOnDestroy() {
    this._listeners = [];
  }
};
_UniqueSelectionDispatcher.ɵfac = function UniqueSelectionDispatcher_Factory(t161) {
  return new (t161 || _UniqueSelectionDispatcher)();
};
_UniqueSelectionDispatcher.ɵprov = ɵɵdefineInjectable({
  token: _UniqueSelectionDispatcher,
  factory: _UniqueSelectionDispatcher.ɵfac,
  providedIn: "root"
});
var UniqueSelectionDispatcher = _UniqueSelectionDispatcher;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UniqueSelectionDispatcher, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();

// node_modules/@angular/cdk/fesm2022/scrolling.mjs
var _c0 = ["contentWrapper"];
var _c1 = ["*"];
var VIRTUAL_SCROLL_STRATEGY = new InjectionToken("VIRTUAL_SCROLL_STRATEGY");
var FixedSizeVirtualScrollStrategy = class {
  /**
   * @param itemSize The size of the items in the virtually scrolling list.
   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more
   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.
   */
  constructor(itemSize, minBufferPx, maxBufferPx) {
    this._scrolledIndexChange = new Subject();
    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());
    this._viewport = null;
    this._itemSize = itemSize;
    this._minBufferPx = minBufferPx;
    this._maxBufferPx = maxBufferPx;
  }
  /**
   * Attaches this scroll strategy to a viewport.
   * @param viewport The viewport to attach this strategy to.
   */
  attach(viewport) {
    this._viewport = viewport;
    this._updateTotalContentSize();
    this._updateRenderedRange();
  }
  /** Detaches this scroll strategy from the currently attached viewport. */
  detach() {
    this._scrolledIndexChange.complete();
    this._viewport = null;
  }
  /**
   * Update the item size and buffer size.
   * @param itemSize The size of the items in the virtually scrolling list.
   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more
   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.
   */
  updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {
    if (maxBufferPx < minBufferPx && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw Error("CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx");
    }
    this._itemSize = itemSize;
    this._minBufferPx = minBufferPx;
    this._maxBufferPx = maxBufferPx;
    this._updateTotalContentSize();
    this._updateRenderedRange();
  }
  /** @docs-private Implemented as part of VirtualScrollStrategy. */
  onContentScrolled() {
    this._updateRenderedRange();
  }
  /** @docs-private Implemented as part of VirtualScrollStrategy. */
  onDataLengthChanged() {
    this._updateTotalContentSize();
    this._updateRenderedRange();
  }
  /** @docs-private Implemented as part of VirtualScrollStrategy. */
  onContentRendered() {
  }
  /** @docs-private Implemented as part of VirtualScrollStrategy. */
  onRenderedOffsetChanged() {
  }
  /**
   * Scroll to the offset for the given index.
   * @param index The index of the element to scroll to.
   * @param behavior The ScrollBehavior to use when scrolling.
   */
  scrollToIndex(index, behavior) {
    if (this._viewport) {
      this._viewport.scrollToOffset(index * this._itemSize, behavior);
    }
  }
  /** Update the viewport's total content size. */
  _updateTotalContentSize() {
    if (!this._viewport) {
      return;
    }
    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);
  }
  /** Update the viewport's rendered range. */
  _updateRenderedRange() {
    if (!this._viewport) {
      return;
    }
    const renderedRange = this._viewport.getRenderedRange();
    const newRange = {
      start: renderedRange.start,
      end: renderedRange.end
    };
    const viewportSize = this._viewport.getViewportSize();
    const dataLength = this._viewport.getDataLength();
    let scrollOffset = this._viewport.measureScrollOffset();
    let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;
    if (newRange.end > dataLength) {
      const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);
      const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));
      if (firstVisibleIndex != newVisibleIndex) {
        firstVisibleIndex = newVisibleIndex;
        scrollOffset = newVisibleIndex * this._itemSize;
        newRange.start = Math.floor(firstVisibleIndex);
      }
      newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));
    }
    const startBuffer = scrollOffset - newRange.start * this._itemSize;
    if (startBuffer < this._minBufferPx && newRange.start != 0) {
      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);
      newRange.start = Math.max(0, newRange.start - expandStart);
      newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));
    } else {
      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);
      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {
        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);
        if (expandEnd > 0) {
          newRange.end = Math.min(dataLength, newRange.end + expandEnd);
          newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));
        }
      }
    }
    this._viewport.setRenderedRange(newRange);
    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);
    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));
  }
};
function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {
  return fixedSizeDir._scrollStrategy;
}
var _CdkFixedSizeVirtualScroll = class _CdkFixedSizeVirtualScroll {
  constructor() {
    this._itemSize = 20;
    this._minBufferPx = 100;
    this._maxBufferPx = 200;
    this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);
  }
  /** The size of the items in the list (in pixels). */
  get itemSize() {
    return this._itemSize;
  }
  set itemSize(value) {
    this._itemSize = coerceNumberProperty(value);
  }
  /**
   * The minimum amount of buffer rendered beyond the viewport (in pixels).
   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.
   */
  get minBufferPx() {
    return this._minBufferPx;
  }
  set minBufferPx(value) {
    this._minBufferPx = coerceNumberProperty(value);
  }
  /**
   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.
   */
  get maxBufferPx() {
    return this._maxBufferPx;
  }
  set maxBufferPx(value) {
    this._maxBufferPx = coerceNumberProperty(value);
  }
  ngOnChanges() {
    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);
  }
};
_CdkFixedSizeVirtualScroll.ɵfac = function CdkFixedSizeVirtualScroll_Factory(t161) {
  return new (t161 || _CdkFixedSizeVirtualScroll)();
};
_CdkFixedSizeVirtualScroll.ɵdir = ɵɵdefineDirective({
  type: _CdkFixedSizeVirtualScroll,
  selectors: [["cdk-virtual-scroll-viewport", "itemSize", ""]],
  inputs: {
    itemSize: "itemSize",
    minBufferPx: "minBufferPx",
    maxBufferPx: "maxBufferPx"
  },
  standalone: true,
  features: [ɵɵProvidersFeature([{
    provide: VIRTUAL_SCROLL_STRATEGY,
    useFactory: _fixedSizeVirtualScrollStrategyFactory,
    deps: [forwardRef(() => _CdkFixedSizeVirtualScroll)]
  }]), ɵɵNgOnChangesFeature]
});
var CdkFixedSizeVirtualScroll = _CdkFixedSizeVirtualScroll;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkFixedSizeVirtualScroll, [{
    type: Directive,
    args: [{
      selector: "cdk-virtual-scroll-viewport[itemSize]",
      standalone: true,
      providers: [{
        provide: VIRTUAL_SCROLL_STRATEGY,
        useFactory: _fixedSizeVirtualScrollStrategyFactory,
        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]
      }]
    }]
  }], null, {
    itemSize: [{
      type: Input
    }],
    minBufferPx: [{
      type: Input
    }],
    maxBufferPx: [{
      type: Input
    }]
  });
})();
var DEFAULT_SCROLL_TIME = 20;
var _ScrollDispatcher = class _ScrollDispatcher {
  constructor(_ngZone, _platform, document2) {
    this._ngZone = _ngZone;
    this._platform = _platform;
    this._scrolled = new Subject();
    this._globalSubscription = null;
    this._scrolledCount = 0;
    this.scrollContainers = /* @__PURE__ */ new Map();
    this._document = document2;
  }
  /**
   * Registers a scrollable instance with the service and listens for its scrolled events. When the
   * scrollable is scrolled, the service emits the event to its scrolled observable.
   * @param scrollable Scrollable instance to be registered.
   */
  register(scrollable) {
    if (!this.scrollContainers.has(scrollable)) {
      this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));
    }
  }
  /**
   * De-registers a Scrollable reference and unsubscribes from its scroll event observable.
   * @param scrollable Scrollable instance to be deregistered.
   */
  deregister(scrollable) {
    const scrollableReference = this.scrollContainers.get(scrollable);
    if (scrollableReference) {
      scrollableReference.unsubscribe();
      this.scrollContainers.delete(scrollable);
    }
  }
  /**
   * Returns an observable that emits an event whenever any of the registered Scrollable
   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms
   * to override the default "throttle" time.
   *
   * **Note:** in order to avoid hitting change detection for every scroll event,
   * all of the events emitted from this stream will be run outside the Angular zone.
   * If you need to update any data bindings as a result of a scroll event, you have
   * to run the callback using `NgZone.run`.
   */
  scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {
    if (!this._platform.isBrowser) {
      return of();
    }
    return new Observable((observer) => {
      if (!this._globalSubscription) {
        this._addGlobalListener();
      }
      const subscription = auditTimeInMs > 0 ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : this._scrolled.subscribe(observer);
      this._scrolledCount++;
      return () => {
        subscription.unsubscribe();
        this._scrolledCount--;
        if (!this._scrolledCount) {
          this._removeGlobalListener();
        }
      };
    });
  }
  ngOnDestroy() {
    this._removeGlobalListener();
    this.scrollContainers.forEach((_4, container) => this.deregister(container));
    this._scrolled.complete();
  }
  /**
   * Returns an observable that emits whenever any of the
   * scrollable ancestors of an element are scrolled.
   * @param elementOrElementRef Element whose ancestors to listen for.
   * @param auditTimeInMs Time to throttle the scroll events.
   */
  ancestorScrolled(elementOrElementRef, auditTimeInMs) {
    const ancestors = this.getAncestorScrollContainers(elementOrElementRef);
    return this.scrolled(auditTimeInMs).pipe(filter((target) => {
      return !target || ancestors.indexOf(target) > -1;
    }));
  }
  /** Returns all registered Scrollables that contain the provided element. */
  getAncestorScrollContainers(elementOrElementRef) {
    const scrollingContainers = [];
    this.scrollContainers.forEach((_subscription, scrollable) => {
      if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {
        scrollingContainers.push(scrollable);
      }
    });
    return scrollingContainers;
  }
  /** Use defaultView of injected document if available or fallback to global window reference */
  _getWindow() {
    return this._document.defaultView || window;
  }
  /** Returns true if the element is contained within the provided Scrollable. */
  _scrollableContainsElement(scrollable, elementOrElementRef) {
    let element = coerceElement(elementOrElementRef);
    let scrollableElement = scrollable.getElementRef().nativeElement;
    do {
      if (element == scrollableElement) {
        return true;
      }
    } while (element = element.parentElement);
    return false;
  }
  /** Sets up the global scroll listeners. */
  _addGlobalListener() {
    this._globalSubscription = this._ngZone.runOutsideAngular(() => {
      const window2 = this._getWindow();
      return fromEvent(window2.document, "scroll").subscribe(() => this._scrolled.next());
    });
  }
  /** Cleans up the global scroll listener. */
  _removeGlobalListener() {
    if (this._globalSubscription) {
      this._globalSubscription.unsubscribe();
      this._globalSubscription = null;
    }
  }
};
_ScrollDispatcher.ɵfac = function ScrollDispatcher_Factory(t161) {
  return new (t161 || _ScrollDispatcher)(ɵɵinject(NgZone), ɵɵinject(Platform), ɵɵinject(DOCUMENT, 8));
};
_ScrollDispatcher.ɵprov = ɵɵdefineInjectable({
  token: _ScrollDispatcher,
  factory: _ScrollDispatcher.ɵfac,
  providedIn: "root"
});
var ScrollDispatcher = _ScrollDispatcher;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScrollDispatcher, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: NgZone
  }, {
    type: Platform
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [DOCUMENT]
    }]
  }], null);
})();
var _CdkScrollable = class _CdkScrollable {
  constructor(elementRef, scrollDispatcher, ngZone, dir) {
    this.elementRef = elementRef;
    this.scrollDispatcher = scrollDispatcher;
    this.ngZone = ngZone;
    this.dir = dir;
    this._destroyed = new Subject();
    this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, "scroll").pipe(takeUntil(this._destroyed)).subscribe(observer)));
  }
  ngOnInit() {
    this.scrollDispatcher.register(this);
  }
  ngOnDestroy() {
    this.scrollDispatcher.deregister(this);
    this._destroyed.next();
    this._destroyed.complete();
  }
  /** Returns observable that emits when a scroll event is fired on the host element. */
  elementScrolled() {
    return this._elementScrolled;
  }
  /** Gets the ElementRef for the viewport. */
  getElementRef() {
    return this.elementRef;
  }
  /**
   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo
   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method
   * left and right always refer to the left and right side of the scrolling container irrespective
   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
   * in an RTL context.
   * @param options specified the offsets to scroll to.
   */
  scrollTo(options) {
    const el = this.elementRef.nativeElement;
    const isRtl = this.dir && this.dir.value == "rtl";
    if (options.left == null) {
      options.left = isRtl ? options.end : options.start;
    }
    if (options.right == null) {
      options.right = isRtl ? options.start : options.end;
    }
    if (options.bottom != null) {
      options.top = el.scrollHeight - el.clientHeight - options.bottom;
    }
    if (isRtl && getRtlScrollAxisType() != RtlScrollAxisType.NORMAL) {
      if (options.left != null) {
        options.right = el.scrollWidth - el.clientWidth - options.left;
      }
      if (getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {
        options.left = options.right;
      } else if (getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {
        options.left = options.right ? -options.right : options.right;
      }
    } else {
      if (options.right != null) {
        options.left = el.scrollWidth - el.clientWidth - options.right;
      }
    }
    this._applyScrollToOptions(options);
  }
  _applyScrollToOptions(options) {
    const el = this.elementRef.nativeElement;
    if (supportsScrollBehavior()) {
      el.scrollTo(options);
    } else {
      if (options.top != null) {
        el.scrollTop = options.top;
      }
      if (options.left != null) {
        el.scrollLeft = options.left;
      }
    }
  }
  /**
   * Measures the scroll offset relative to the specified edge of the viewport. This method can be
   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent
   * about what scrollLeft means in RTL. The values returned by this method are normalized such that
   * left and right always refer to the left and right side of the scrolling container irrespective
   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
   * in an RTL context.
   * @param from The edge to measure from.
   */
  measureScrollOffset(from2) {
    const LEFT = "left";
    const RIGHT = "right";
    const el = this.elementRef.nativeElement;
    if (from2 == "top") {
      return el.scrollTop;
    }
    if (from2 == "bottom") {
      return el.scrollHeight - el.clientHeight - el.scrollTop;
    }
    const isRtl = this.dir && this.dir.value == "rtl";
    if (from2 == "start") {
      from2 = isRtl ? RIGHT : LEFT;
    } else if (from2 == "end") {
      from2 = isRtl ? LEFT : RIGHT;
    }
    if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.INVERTED) {
      if (from2 == LEFT) {
        return el.scrollWidth - el.clientWidth - el.scrollLeft;
      } else {
        return el.scrollLeft;
      }
    } else if (isRtl && getRtlScrollAxisType() == RtlScrollAxisType.NEGATED) {
      if (from2 == LEFT) {
        return el.scrollLeft + el.scrollWidth - el.clientWidth;
      } else {
        return -el.scrollLeft;
      }
    } else {
      if (from2 == LEFT) {
        return el.scrollLeft;
      } else {
        return el.scrollWidth - el.clientWidth - el.scrollLeft;
      }
    }
  }
};
_CdkScrollable.ɵfac = function CdkScrollable_Factory(t161) {
  return new (t161 || _CdkScrollable)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ScrollDispatcher), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(Directionality, 8));
};
_CdkScrollable.ɵdir = ɵɵdefineDirective({
  type: _CdkScrollable,
  selectors: [["", "cdk-scrollable", ""], ["", "cdkScrollable", ""]],
  standalone: true
});
var CdkScrollable = _CdkScrollable;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkScrollable, [{
    type: Directive,
    args: [{
      selector: "[cdk-scrollable], [cdkScrollable]",
      standalone: true
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: ScrollDispatcher
  }, {
    type: NgZone
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], null);
})();
var DEFAULT_RESIZE_TIME = 20;
var _ViewportRuler = class _ViewportRuler {
  constructor(_platform, ngZone, document2) {
    this._platform = _platform;
    this._change = new Subject();
    this._changeListener = (event) => {
      this._change.next(event);
    };
    this._document = document2;
    ngZone.runOutsideAngular(() => {
      if (_platform.isBrowser) {
        const window2 = this._getWindow();
        window2.addEventListener("resize", this._changeListener);
        window2.addEventListener("orientationchange", this._changeListener);
      }
      this.change().subscribe(() => this._viewportSize = null);
    });
  }
  ngOnDestroy() {
    if (this._platform.isBrowser) {
      const window2 = this._getWindow();
      window2.removeEventListener("resize", this._changeListener);
      window2.removeEventListener("orientationchange", this._changeListener);
    }
    this._change.complete();
  }
  /** Returns the viewport's width and height. */
  getViewportSize() {
    if (!this._viewportSize) {
      this._updateViewportSize();
    }
    const output = {
      width: this._viewportSize.width,
      height: this._viewportSize.height
    };
    if (!this._platform.isBrowser) {
      this._viewportSize = null;
    }
    return output;
  }
  /** Gets a DOMRect for the viewport's bounds. */
  getViewportRect() {
    const scrollPosition = this.getViewportScrollPosition();
    const {
      width,
      height
    } = this.getViewportSize();
    return {
      top: scrollPosition.top,
      left: scrollPosition.left,
      bottom: scrollPosition.top + height,
      right: scrollPosition.left + width,
      height,
      width
    };
  }
  /** Gets the (top, left) scroll position of the viewport. */
  getViewportScrollPosition() {
    if (!this._platform.isBrowser) {
      return {
        top: 0,
        left: 0
      };
    }
    const document2 = this._document;
    const window2 = this._getWindow();
    const documentElement = document2.documentElement;
    const documentRect = documentElement.getBoundingClientRect();
    const top = -documentRect.top || document2.body.scrollTop || window2.scrollY || documentElement.scrollTop || 0;
    const left = -documentRect.left || document2.body.scrollLeft || window2.scrollX || documentElement.scrollLeft || 0;
    return {
      top,
      left
    };
  }
  /**
   * Returns a stream that emits whenever the size of the viewport changes.
   * This stream emits outside of the Angular zone.
   * @param throttleTime Time in milliseconds to throttle the stream.
   */
  change(throttleTime = DEFAULT_RESIZE_TIME) {
    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;
  }
  /** Use defaultView of injected document if available or fallback to global window reference */
  _getWindow() {
    return this._document.defaultView || window;
  }
  /** Updates the cached viewport size. */
  _updateViewportSize() {
    const window2 = this._getWindow();
    this._viewportSize = this._platform.isBrowser ? {
      width: window2.innerWidth,
      height: window2.innerHeight
    } : {
      width: 0,
      height: 0
    };
  }
};
_ViewportRuler.ɵfac = function ViewportRuler_Factory(t161) {
  return new (t161 || _ViewportRuler)(ɵɵinject(Platform), ɵɵinject(NgZone), ɵɵinject(DOCUMENT, 8));
};
_ViewportRuler.ɵprov = ɵɵdefineInjectable({
  token: _ViewportRuler,
  factory: _ViewportRuler.ɵfac,
  providedIn: "root"
});
var ViewportRuler = _ViewportRuler;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ViewportRuler, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Platform
  }, {
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [DOCUMENT]
    }]
  }], null);
})();
var VIRTUAL_SCROLLABLE = new InjectionToken("VIRTUAL_SCROLLABLE");
var _CdkVirtualScrollable = class _CdkVirtualScrollable extends CdkScrollable {
  constructor(elementRef, scrollDispatcher, ngZone, dir) {
    super(elementRef, scrollDispatcher, ngZone, dir);
  }
  /**
   * Measure the viewport size for the provided orientation.
   *
   * @param orientation The orientation to measure the size from.
   */
  measureViewportSize(orientation) {
    const viewportEl = this.elementRef.nativeElement;
    return orientation === "horizontal" ? viewportEl.clientWidth : viewportEl.clientHeight;
  }
};
_CdkVirtualScrollable.ɵfac = function CdkVirtualScrollable_Factory(t161) {
  return new (t161 || _CdkVirtualScrollable)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ScrollDispatcher), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(Directionality, 8));
};
_CdkVirtualScrollable.ɵdir = ɵɵdefineDirective({
  type: _CdkVirtualScrollable,
  features: [ɵɵInheritDefinitionFeature]
});
var CdkVirtualScrollable = _CdkVirtualScrollable;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkVirtualScrollable, [{
    type: Directive
  }], () => [{
    type: ElementRef
  }, {
    type: ScrollDispatcher
  }, {
    type: NgZone
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], null);
})();
function rangesEqual(r1, r210) {
  return r1.start == r210.start && r1.end == r210.end;
}
var SCROLL_SCHEDULER = typeof requestAnimationFrame !== "undefined" ? animationFrameScheduler : asapScheduler;
var _CdkVirtualScrollViewport = class _CdkVirtualScrollViewport extends CdkVirtualScrollable {
  /** The direction the viewport scrolls. */
  get orientation() {
    return this._orientation;
  }
  set orientation(orientation) {
    if (this._orientation !== orientation) {
      this._orientation = orientation;
      this._calculateSpacerSize();
    }
  }
  constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {
    super(elementRef, scrollDispatcher, ngZone, dir);
    this.elementRef = elementRef;
    this._changeDetectorRef = _changeDetectorRef;
    this._scrollStrategy = _scrollStrategy;
    this.scrollable = scrollable;
    this._platform = inject(Platform);
    this._detachedSubject = new Subject();
    this._renderedRangeSubject = new Subject();
    this._orientation = "vertical";
    this.appendOnly = false;
    this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe((index) => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));
    this.renderedRangeStream = this._renderedRangeSubject;
    this._totalContentSize = 0;
    this._totalContentWidth = "";
    this._totalContentHeight = "";
    this._renderedRange = {
      start: 0,
      end: 0
    };
    this._dataLength = 0;
    this._viewportSize = 0;
    this._renderedContentOffset = 0;
    this._renderedContentOffsetNeedsRewrite = false;
    this._isChangeDetectionPending = false;
    this._runAfterChangeDetection = [];
    this._viewportChanges = Subscription.EMPTY;
    if (!_scrollStrategy && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw Error('Error: cdk-virtual-scroll-viewport requires the "itemSize" property to be set.');
    }
    this._viewportChanges = viewportRuler.change().subscribe(() => {
      this.checkViewportSize();
    });
    if (!this.scrollable) {
      this.elementRef.nativeElement.classList.add("cdk-virtual-scrollable");
      this.scrollable = this;
    }
  }
  ngOnInit() {
    if (!this._platform.isBrowser) {
      return;
    }
    if (this.scrollable === this) {
      super.ngOnInit();
    }
    this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {
      this._measureViewportSize();
      this._scrollStrategy.attach(this);
      this.scrollable.elementScrolled().pipe(
        // Start off with a fake scroll event so we properly detect our initial position.
        startWith(null),
        // Collect multiple events into one until the next animation frame. This way if
        // there are multiple scroll events in the same frame we only need to recheck
        // our layout once.
        auditTime(0, SCROLL_SCHEDULER),
        // Usually `elementScrolled` is completed when the scrollable is destroyed, but
        // that may not be the case if a `CdkVirtualScrollableElement` is used so we have
        // to unsubscribe here just in case.
        takeUntil(this._destroyed)
      ).subscribe(() => this._scrollStrategy.onContentScrolled());
      this._markChangeDetectionNeeded();
    }));
  }
  ngOnDestroy() {
    this.detach();
    this._scrollStrategy.detach();
    this._renderedRangeSubject.complete();
    this._detachedSubject.complete();
    this._viewportChanges.unsubscribe();
    super.ngOnDestroy();
  }
  /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */
  attach(forOf) {
    if (this._forOf && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw Error("CdkVirtualScrollViewport is already attached.");
    }
    this.ngZone.runOutsideAngular(() => {
      this._forOf = forOf;
      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe((data) => {
        const newLength = data.length;
        if (newLength !== this._dataLength) {
          this._dataLength = newLength;
          this._scrollStrategy.onDataLengthChanged();
        }
        this._doChangeDetection();
      });
    });
  }
  /** Detaches the current `CdkVirtualForOf`. */
  detach() {
    this._forOf = null;
    this._detachedSubject.next();
  }
  /** Gets the length of the data bound to this viewport (in number of items). */
  getDataLength() {
    return this._dataLength;
  }
  /** Gets the size of the viewport (in pixels). */
  getViewportSize() {
    return this._viewportSize;
  }
  // TODO(mmalerba): This is technically out of sync with what's really rendered until a render
  // cycle happens. I'm being careful to only call it after the render cycle is complete and before
  // setting it to something else, but its error prone and should probably be split into
  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.
  /** Get the current rendered range of items. */
  getRenderedRange() {
    return this._renderedRange;
  }
  measureBoundingClientRectWithScrollOffset(from2) {
    return this.getElementRef().nativeElement.getBoundingClientRect()[from2];
  }
  /**
   * Sets the total size of all content (in pixels), including content that is not currently
   * rendered.
   */
  setTotalContentSize(size) {
    if (this._totalContentSize !== size) {
      this._totalContentSize = size;
      this._calculateSpacerSize();
      this._markChangeDetectionNeeded();
    }
  }
  /** Sets the currently rendered range of indices. */
  setRenderedRange(range) {
    if (!rangesEqual(this._renderedRange, range)) {
      if (this.appendOnly) {
        range = {
          start: 0,
          end: Math.max(this._renderedRange.end, range.end)
        };
      }
      this._renderedRangeSubject.next(this._renderedRange = range);
      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());
    }
  }
  /**
   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).
   */
  getOffsetToRenderedContentStart() {
    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;
  }
  /**
   * Sets the offset from the start of the viewport to either the start or end of the rendered data
   * (in pixels).
   */
  setRenderedContentOffset(offset, to = "to-start") {
    offset = this.appendOnly && to === "to-start" ? 0 : offset;
    const isRtl = this.dir && this.dir.value == "rtl";
    const isHorizontal = this.orientation == "horizontal";
    const axis = isHorizontal ? "X" : "Y";
    const axisDirection = isHorizontal && isRtl ? -1 : 1;
    let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;
    this._renderedContentOffset = offset;
    if (to === "to-end") {
      transform += ` translate${axis}(-100%)`;
      this._renderedContentOffsetNeedsRewrite = true;
    }
    if (this._renderedContentTransform != transform) {
      this._renderedContentTransform = transform;
      this._markChangeDetectionNeeded(() => {
        if (this._renderedContentOffsetNeedsRewrite) {
          this._renderedContentOffset -= this.measureRenderedContentSize();
          this._renderedContentOffsetNeedsRewrite = false;
          this.setRenderedContentOffset(this._renderedContentOffset);
        } else {
          this._scrollStrategy.onRenderedOffsetChanged();
        }
      });
    }
  }
  /**
   * Scrolls to the given offset from the start of the viewport. Please note that this is not always
   * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left
   * direction, this would be the equivalent of setting a fictional `scrollRight` property.
   * @param offset The offset to scroll to.
   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
   */
  scrollToOffset(offset, behavior = "auto") {
    const options = {
      behavior
    };
    if (this.orientation === "horizontal") {
      options.start = offset;
    } else {
      options.top = offset;
    }
    this.scrollable.scrollTo(options);
  }
  /**
   * Scrolls to the offset for the given index.
   * @param index The index of the element to scroll to.
   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
   */
  scrollToIndex(index, behavior = "auto") {
    this._scrollStrategy.scrollToIndex(index, behavior);
  }
  /**
   * Gets the current scroll offset from the start of the scrollable (in pixels).
   * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'
   *     in horizontal mode.
   */
  measureScrollOffset(from2) {
    let measureScrollOffset;
    if (this.scrollable == this) {
      measureScrollOffset = (_from) => super.measureScrollOffset(_from);
    } else {
      measureScrollOffset = (_from) => this.scrollable.measureScrollOffset(_from);
    }
    return Math.max(0, measureScrollOffset(from2 ?? (this.orientation === "horizontal" ? "start" : "top")) - this.measureViewportOffset());
  }
  /**
   * Measures the offset of the viewport from the scrolling container
   * @param from The edge to measure from.
   */
  measureViewportOffset(from2) {
    let fromRect;
    const LEFT = "left";
    const RIGHT = "right";
    const isRtl = this.dir?.value == "rtl";
    if (from2 == "start") {
      fromRect = isRtl ? RIGHT : LEFT;
    } else if (from2 == "end") {
      fromRect = isRtl ? LEFT : RIGHT;
    } else if (from2) {
      fromRect = from2;
    } else {
      fromRect = this.orientation === "horizontal" ? "left" : "top";
    }
    const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);
    const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];
    return viewportClientRect - scrollerClientRect;
  }
  /** Measure the combined size of all of the rendered items. */
  measureRenderedContentSize() {
    const contentEl = this._contentWrapper.nativeElement;
    return this.orientation === "horizontal" ? contentEl.offsetWidth : contentEl.offsetHeight;
  }
  /**
   * Measure the total combined size of the given range. Throws if the range includes items that are
   * not rendered.
   */
  measureRangeSize(range) {
    if (!this._forOf) {
      return 0;
    }
    return this._forOf.measureRangeSize(range, this.orientation);
  }
  /** Update the viewport dimensions and re-render. */
  checkViewportSize() {
    this._measureViewportSize();
    this._scrollStrategy.onDataLengthChanged();
  }
  /** Measure the viewport size. */
  _measureViewportSize() {
    this._viewportSize = this.scrollable.measureViewportSize(this.orientation);
  }
  /** Queue up change detection to run. */
  _markChangeDetectionNeeded(runAfter) {
    if (runAfter) {
      this._runAfterChangeDetection.push(runAfter);
    }
    if (!this._isChangeDetectionPending) {
      this._isChangeDetectionPending = true;
      this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {
        this._doChangeDetection();
      }));
    }
  }
  /** Run change detection. */
  _doChangeDetection() {
    this._isChangeDetectionPending = false;
    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;
    this.ngZone.run(() => this._changeDetectorRef.markForCheck());
    const runAfterChangeDetection = this._runAfterChangeDetection;
    this._runAfterChangeDetection = [];
    for (const fn of runAfterChangeDetection) {
      fn();
    }
  }
  /** Calculates the `style.width` and `style.height` for the spacer element. */
  _calculateSpacerSize() {
    this._totalContentHeight = this.orientation === "horizontal" ? "" : `${this._totalContentSize}px`;
    this._totalContentWidth = this.orientation === "horizontal" ? `${this._totalContentSize}px` : "";
  }
};
_CdkVirtualScrollViewport.ɵfac = function CdkVirtualScrollViewport_Factory(t161) {
  return new (t161 || _CdkVirtualScrollViewport)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(VIRTUAL_SCROLL_STRATEGY, 8), ɵɵdirectiveInject(Directionality, 8), ɵɵdirectiveInject(ScrollDispatcher), ɵɵdirectiveInject(ViewportRuler), ɵɵdirectiveInject(VIRTUAL_SCROLLABLE, 8));
};
_CdkVirtualScrollViewport.ɵcmp = ɵɵdefineComponent({
  type: _CdkVirtualScrollViewport,
  selectors: [["cdk-virtual-scroll-viewport"]],
  viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c0, 7);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._contentWrapper = _t.first);
    }
  },
  hostAttrs: [1, "cdk-virtual-scroll-viewport"],
  hostVars: 4,
  hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("cdk-virtual-scroll-orientation-horizontal", ctx.orientation === "horizontal")("cdk-virtual-scroll-orientation-vertical", ctx.orientation !== "horizontal");
    }
  },
  inputs: {
    orientation: "orientation",
    appendOnly: [InputFlags.HasDecoratorInputTransform, "appendOnly", "appendOnly", booleanAttribute]
  },
  outputs: {
    scrolledIndexChange: "scrolledIndexChange"
  },
  standalone: true,
  features: [ɵɵProvidersFeature([{
    provide: CdkScrollable,
    useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,
    deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], _CdkVirtualScrollViewport]
  }]), ɵɵInputTransformsFeature, ɵɵInheritDefinitionFeature, ɵɵStandaloneFeature],
  ngContentSelectors: _c1,
  decls: 4,
  vars: 4,
  consts: [["contentWrapper", ""], [1, "cdk-virtual-scroll-content-wrapper"], [1, "cdk-virtual-scroll-spacer"]],
  template: function CdkVirtualScrollViewport_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "div", 1, 0);
      ɵɵprojection(2);
      ɵɵelementEnd();
      ɵɵelement(3, "div", 2);
    }
    if (rf & 2) {
      ɵɵadvance(3);
      ɵɵstyleProp("width", ctx._totalContentWidth)("height", ctx._totalContentHeight);
    }
  },
  styles: ["cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}"],
  encapsulation: 2,
  changeDetection: 0
});
var CdkVirtualScrollViewport = _CdkVirtualScrollViewport;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkVirtualScrollViewport, [{
    type: Component,
    args: [{
      selector: "cdk-virtual-scroll-viewport",
      host: {
        "class": "cdk-virtual-scroll-viewport",
        "[class.cdk-virtual-scroll-orientation-horizontal]": 'orientation === "horizontal"',
        "[class.cdk-virtual-scroll-orientation-vertical]": 'orientation !== "horizontal"'
      },
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      standalone: true,
      providers: [{
        provide: CdkScrollable,
        useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,
        deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport]
      }],
      template: '<!--\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\n  position.\n-->\n<div #contentWrapper class="cdk-virtual-scroll-content-wrapper">\n  <ng-content></ng-content>\n</div>\n<!--\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\n  so that the scrollbar captures the size of the entire data set.\n-->\n<div class="cdk-virtual-scroll-spacer"\n     [style.width]="_totalContentWidth" [style.height]="_totalContentHeight"></div>\n',
      styles: ["cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}"]
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: ChangeDetectorRef
  }, {
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [VIRTUAL_SCROLL_STRATEGY]
    }]
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }, {
    type: ScrollDispatcher
  }, {
    type: ViewportRuler
  }, {
    type: CdkVirtualScrollable,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [VIRTUAL_SCROLLABLE]
    }]
  }], {
    orientation: [{
      type: Input
    }],
    appendOnly: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    scrolledIndexChange: [{
      type: Output
    }],
    _contentWrapper: [{
      type: ViewChild,
      args: ["contentWrapper", {
        static: true
      }]
    }]
  });
})();
function getOffset(orientation, direction, node) {
  const el = node;
  if (!el.getBoundingClientRect) {
    return 0;
  }
  const rect = el.getBoundingClientRect();
  if (orientation === "horizontal") {
    return direction === "start" ? rect.left : rect.right;
  }
  return direction === "start" ? rect.top : rect.bottom;
}
var _CdkVirtualForOf = class _CdkVirtualForOf {
  /** The DataSource to display. */
  get cdkVirtualForOf() {
    return this._cdkVirtualForOf;
  }
  set cdkVirtualForOf(value) {
    this._cdkVirtualForOf = value;
    if (isDataSource(value)) {
      this._dataSourceChanges.next(value);
    } else {
      this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));
    }
  }
  /**
   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and
   * the item and produces a value to be used as the item's identity when tracking changes.
   */
  get cdkVirtualForTrackBy() {
    return this._cdkVirtualForTrackBy;
  }
  set cdkVirtualForTrackBy(fn) {
    this._needsUpdate = true;
    this._cdkVirtualForTrackBy = fn ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) : void 0;
  }
  /** The template used to stamp out new elements. */
  set cdkVirtualForTemplate(value) {
    if (value) {
      this._needsUpdate = true;
      this._template = value;
    }
  }
  /**
   * The size of the cache used to store templates that are not being used for re-use later.
   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.
   */
  get cdkVirtualForTemplateCacheSize() {
    return this._viewRepeater.viewCacheSize;
  }
  set cdkVirtualForTemplateCacheSize(size) {
    this._viewRepeater.viewCacheSize = coerceNumberProperty(size);
  }
  constructor(_viewContainerRef, _template, _differs, _viewRepeater, _viewport, ngZone) {
    this._viewContainerRef = _viewContainerRef;
    this._template = _template;
    this._differs = _differs;
    this._viewRepeater = _viewRepeater;
    this._viewport = _viewport;
    this.viewChange = new Subject();
    this._dataSourceChanges = new Subject();
    this.dataStream = this._dataSourceChanges.pipe(
      // Start off with null `DataSource`.
      startWith(null),
      // Bundle up the previous and current data sources so we can work with both.
      pairwise(),
      // Use `_changeDataSource` to disconnect from the previous data source and connect to the
      // new one, passing back a stream of data changes which we run through `switchMap` to give
      // us a data stream that emits the latest data from whatever the current `DataSource` is.
      switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),
      // Replay the last emitted data when someone subscribes.
      shareReplay(1)
    );
    this._differ = null;
    this._needsUpdate = false;
    this._destroyed = new Subject();
    this.dataStream.subscribe((data) => {
      this._data = data;
      this._onRenderedDataChange();
    });
    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe((range) => {
      this._renderedRange = range;
      if (this.viewChange.observers.length) {
        ngZone.run(() => this.viewChange.next(this._renderedRange));
      }
      this._onRenderedDataChange();
    });
    this._viewport.attach(this);
  }
  /**
   * Measures the combined size (width for horizontal orientation, height for vertical) of all items
   * in the specified range. Throws an error if the range includes items that are not currently
   * rendered.
   */
  measureRangeSize(range, orientation) {
    if (range.start >= range.end) {
      return 0;
    }
    if ((range.start < this._renderedRange.start || range.end > this._renderedRange.end) && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw Error(`Error: attempted to measure an item that isn't rendered.`);
    }
    const renderedStartIndex = range.start - this._renderedRange.start;
    const rangeLen = range.end - range.start;
    let firstNode;
    let lastNode;
    for (let i35 = 0; i35 < rangeLen; i35++) {
      const view = this._viewContainerRef.get(i35 + renderedStartIndex);
      if (view && view.rootNodes.length) {
        firstNode = lastNode = view.rootNodes[0];
        break;
      }
    }
    for (let i35 = rangeLen - 1; i35 > -1; i35--) {
      const view = this._viewContainerRef.get(i35 + renderedStartIndex);
      if (view && view.rootNodes.length) {
        lastNode = view.rootNodes[view.rootNodes.length - 1];
        break;
      }
    }
    return firstNode && lastNode ? getOffset(orientation, "end", lastNode) - getOffset(orientation, "start", firstNode) : 0;
  }
  ngDoCheck() {
    if (this._differ && this._needsUpdate) {
      const changes = this._differ.diff(this._renderedItems);
      if (!changes) {
        this._updateContext();
      } else {
        this._applyChanges(changes);
      }
      this._needsUpdate = false;
    }
  }
  ngOnDestroy() {
    this._viewport.detach();
    this._dataSourceChanges.next(void 0);
    this._dataSourceChanges.complete();
    this.viewChange.complete();
    this._destroyed.next();
    this._destroyed.complete();
    this._viewRepeater.detach();
  }
  /** React to scroll state changes in the viewport. */
  _onRenderedDataChange() {
    if (!this._renderedRange) {
      return;
    }
    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);
    if (!this._differ) {
      this._differ = this._differs.find(this._renderedItems).create((index, item) => {
        return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;
      });
    }
    this._needsUpdate = true;
  }
  /** Swap out one `DataSource` for another. */
  _changeDataSource(oldDs, newDs) {
    if (oldDs) {
      oldDs.disconnect(this);
    }
    this._needsUpdate = true;
    return newDs ? newDs.connect(this) : of();
  }
  /** Update the `CdkVirtualForOfContext` for all views. */
  _updateContext() {
    const count = this._data.length;
    let i35 = this._viewContainerRef.length;
    while (i35--) {
      const view = this._viewContainerRef.get(i35);
      view.context.index = this._renderedRange.start + i35;
      view.context.count = count;
      this._updateComputedContextProperties(view.context);
      view.detectChanges();
    }
  }
  /** Apply changes to the DOM. */
  _applyChanges(changes) {
    this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), (record) => record.item);
    changes.forEachIdentityChange((record) => {
      const view = this._viewContainerRef.get(record.currentIndex);
      view.context.$implicit = record.item;
    });
    const count = this._data.length;
    let i35 = this._viewContainerRef.length;
    while (i35--) {
      const view = this._viewContainerRef.get(i35);
      view.context.index = this._renderedRange.start + i35;
      view.context.count = count;
      this._updateComputedContextProperties(view.context);
    }
  }
  /** Update the computed properties on the `CdkVirtualForOfContext`. */
  _updateComputedContextProperties(context) {
    context.first = context.index === 0;
    context.last = context.index === context.count - 1;
    context.even = context.index % 2 === 0;
    context.odd = !context.even;
  }
  _getEmbeddedViewArgs(record, index) {
    return {
      templateRef: this._template,
      context: {
        $implicit: record.item,
        // It's guaranteed that the iterable is not "undefined" or "null" because we only
        // generate views for elements if the "cdkVirtualForOf" iterable has elements.
        cdkVirtualForOf: this._cdkVirtualForOf,
        index: -1,
        count: -1,
        first: false,
        last: false,
        odd: false,
        even: false
      },
      index
    };
  }
};
_CdkVirtualForOf.ɵfac = function CdkVirtualForOf_Factory(t161) {
  return new (t161 || _CdkVirtualForOf)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(TemplateRef), ɵɵdirectiveInject(IterableDiffers), ɵɵdirectiveInject(_VIEW_REPEATER_STRATEGY), ɵɵdirectiveInject(CdkVirtualScrollViewport, 4), ɵɵdirectiveInject(NgZone));
};
_CdkVirtualForOf.ɵdir = ɵɵdefineDirective({
  type: _CdkVirtualForOf,
  selectors: [["", "cdkVirtualFor", "", "cdkVirtualForOf", ""]],
  inputs: {
    cdkVirtualForOf: "cdkVirtualForOf",
    cdkVirtualForTrackBy: "cdkVirtualForTrackBy",
    cdkVirtualForTemplate: "cdkVirtualForTemplate",
    cdkVirtualForTemplateCacheSize: "cdkVirtualForTemplateCacheSize"
  },
  standalone: true,
  features: [ɵɵProvidersFeature([{
    provide: _VIEW_REPEATER_STRATEGY,
    useClass: _RecycleViewRepeaterStrategy
  }])]
});
var CdkVirtualForOf = _CdkVirtualForOf;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkVirtualForOf, [{
    type: Directive,
    args: [{
      selector: "[cdkVirtualFor][cdkVirtualForOf]",
      providers: [{
        provide: _VIEW_REPEATER_STRATEGY,
        useClass: _RecycleViewRepeaterStrategy
      }],
      standalone: true
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: TemplateRef
  }, {
    type: IterableDiffers
  }, {
    type: _RecycleViewRepeaterStrategy,
    decorators: [{
      type: Inject,
      args: [_VIEW_REPEATER_STRATEGY]
    }]
  }, {
    type: CdkVirtualScrollViewport,
    decorators: [{
      type: SkipSelf
    }]
  }, {
    type: NgZone
  }], {
    cdkVirtualForOf: [{
      type: Input
    }],
    cdkVirtualForTrackBy: [{
      type: Input
    }],
    cdkVirtualForTemplate: [{
      type: Input
    }],
    cdkVirtualForTemplateCacheSize: [{
      type: Input
    }]
  });
})();
var _CdkVirtualScrollableElement = class _CdkVirtualScrollableElement extends CdkVirtualScrollable {
  constructor(elementRef, scrollDispatcher, ngZone, dir) {
    super(elementRef, scrollDispatcher, ngZone, dir);
  }
  measureBoundingClientRectWithScrollOffset(from2) {
    return this.getElementRef().nativeElement.getBoundingClientRect()[from2] - this.measureScrollOffset(from2);
  }
};
_CdkVirtualScrollableElement.ɵfac = function CdkVirtualScrollableElement_Factory(t161) {
  return new (t161 || _CdkVirtualScrollableElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ScrollDispatcher), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(Directionality, 8));
};
_CdkVirtualScrollableElement.ɵdir = ɵɵdefineDirective({
  type: _CdkVirtualScrollableElement,
  selectors: [["", "cdkVirtualScrollingElement", ""]],
  hostAttrs: [1, "cdk-virtual-scrollable"],
  standalone: true,
  features: [ɵɵProvidersFeature([{
    provide: VIRTUAL_SCROLLABLE,
    useExisting: _CdkVirtualScrollableElement
  }]), ɵɵInheritDefinitionFeature]
});
var CdkVirtualScrollableElement = _CdkVirtualScrollableElement;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkVirtualScrollableElement, [{
    type: Directive,
    args: [{
      selector: "[cdkVirtualScrollingElement]",
      providers: [{
        provide: VIRTUAL_SCROLLABLE,
        useExisting: CdkVirtualScrollableElement
      }],
      standalone: true,
      host: {
        "class": "cdk-virtual-scrollable"
      }
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: ScrollDispatcher
  }, {
    type: NgZone
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], null);
})();
var _CdkVirtualScrollableWindow = class _CdkVirtualScrollableWindow extends CdkVirtualScrollable {
  constructor(scrollDispatcher, ngZone, dir) {
    super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);
    this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(document, "scroll").pipe(takeUntil(this._destroyed)).subscribe(observer)));
  }
  measureBoundingClientRectWithScrollOffset(from2) {
    return this.getElementRef().nativeElement.getBoundingClientRect()[from2];
  }
};
_CdkVirtualScrollableWindow.ɵfac = function CdkVirtualScrollableWindow_Factory(t161) {
  return new (t161 || _CdkVirtualScrollableWindow)(ɵɵdirectiveInject(ScrollDispatcher), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(Directionality, 8));
};
_CdkVirtualScrollableWindow.ɵdir = ɵɵdefineDirective({
  type: _CdkVirtualScrollableWindow,
  selectors: [["cdk-virtual-scroll-viewport", "scrollWindow", ""]],
  standalone: true,
  features: [ɵɵProvidersFeature([{
    provide: VIRTUAL_SCROLLABLE,
    useExisting: _CdkVirtualScrollableWindow
  }]), ɵɵInheritDefinitionFeature]
});
var CdkVirtualScrollableWindow = _CdkVirtualScrollableWindow;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkVirtualScrollableWindow, [{
    type: Directive,
    args: [{
      selector: "cdk-virtual-scroll-viewport[scrollWindow]",
      providers: [{
        provide: VIRTUAL_SCROLLABLE,
        useExisting: CdkVirtualScrollableWindow
      }],
      standalone: true
    }]
  }], () => [{
    type: ScrollDispatcher
  }, {
    type: NgZone
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], null);
})();
var _CdkScrollableModule = class _CdkScrollableModule {
};
_CdkScrollableModule.ɵfac = function CdkScrollableModule_Factory(t161) {
  return new (t161 || _CdkScrollableModule)();
};
_CdkScrollableModule.ɵmod = ɵɵdefineNgModule({
  type: _CdkScrollableModule,
  imports: [CdkScrollable],
  exports: [CdkScrollable]
});
_CdkScrollableModule.ɵinj = ɵɵdefineInjector({});
var CdkScrollableModule = _CdkScrollableModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkScrollableModule, [{
    type: NgModule,
    args: [{
      exports: [CdkScrollable],
      imports: [CdkScrollable]
    }]
  }], null, null);
})();
var _ScrollingModule = class _ScrollingModule {
};
_ScrollingModule.ɵfac = function ScrollingModule_Factory(t161) {
  return new (t161 || _ScrollingModule)();
};
_ScrollingModule.ɵmod = ɵɵdefineNgModule({
  type: _ScrollingModule,
  imports: [BidiModule, CdkScrollableModule, CdkVirtualScrollViewport, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollableWindow, CdkVirtualScrollableElement],
  exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollableWindow, CdkVirtualScrollableElement]
});
_ScrollingModule.ɵinj = ɵɵdefineInjector({
  imports: [BidiModule, CdkScrollableModule, BidiModule, CdkScrollableModule]
});
var ScrollingModule = _ScrollingModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScrollingModule, [{
    type: NgModule,
    args: [{
      imports: [BidiModule, CdkScrollableModule, CdkVirtualScrollViewport, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollableWindow, CdkVirtualScrollableElement],
      exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollableWindow, CdkVirtualScrollableElement]
    }]
  }], null, null);
})();

// node_modules/@angular/cdk/fesm2022/drag-drop.mjs
function extendStyles(dest, source, importantProperties) {
  for (let key in source) {
    if (source.hasOwnProperty(key)) {
      const value = source[key];
      if (value) {
        dest.setProperty(key, value, importantProperties?.has(key) ? "important" : "");
      } else {
        dest.removeProperty(key);
      }
    }
  }
  return dest;
}
function toggleNativeDragInteractions(element, enable) {
  const userSelect = enable ? "" : "none";
  extendStyles(element.style, {
    "touch-action": enable ? "" : "none",
    "-webkit-user-drag": enable ? "" : "none",
    "-webkit-tap-highlight-color": enable ? "" : "transparent",
    "user-select": userSelect,
    "-ms-user-select": userSelect,
    "-webkit-user-select": userSelect,
    "-moz-user-select": userSelect
  });
}
function toggleVisibility(element, enable, importantProperties) {
  extendStyles(element.style, {
    position: enable ? "" : "fixed",
    top: enable ? "" : "0",
    opacity: enable ? "" : "0",
    left: enable ? "" : "-999em"
  }, importantProperties);
}
function combineTransforms(transform, initialTransform) {
  return initialTransform && initialTransform != "none" ? transform + " " + initialTransform : transform;
}
function parseCssTimeUnitsToMs(value) {
  const multiplier = value.toLowerCase().indexOf("ms") > -1 ? 1 : 1e3;
  return parseFloat(value) * multiplier;
}
function getTransformTransitionDurationInMs(element) {
  const computedStyle = getComputedStyle(element);
  const transitionedProperties = parseCssPropertyValue(computedStyle, "transition-property");
  const property2 = transitionedProperties.find((prop) => prop === "transform" || prop === "all");
  if (!property2) {
    return 0;
  }
  const propertyIndex = transitionedProperties.indexOf(property2);
  const rawDurations = parseCssPropertyValue(computedStyle, "transition-duration");
  const rawDelays = parseCssPropertyValue(computedStyle, "transition-delay");
  return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) + parseCssTimeUnitsToMs(rawDelays[propertyIndex]);
}
function parseCssPropertyValue(computedStyle, name) {
  const value = computedStyle.getPropertyValue(name);
  return value.split(",").map((part) => part.trim());
}
function getMutableClientRect(element) {
  const rect = element.getBoundingClientRect();
  return {
    top: rect.top,
    right: rect.right,
    bottom: rect.bottom,
    left: rect.left,
    width: rect.width,
    height: rect.height,
    x: rect.x,
    y: rect.y
  };
}
function isInsideClientRect(clientRect, x6, y6) {
  const {
    top,
    bottom,
    left,
    right
  } = clientRect;
  return y6 >= top && y6 <= bottom && x6 >= left && x6 <= right;
}
function adjustDomRect(domRect, top, left) {
  domRect.top += top;
  domRect.bottom = domRect.top + domRect.height;
  domRect.left += left;
  domRect.right = domRect.left + domRect.width;
}
function isPointerNearDomRect(rect, threshold, pointerX, pointerY) {
  const {
    top,
    right,
    bottom,
    left,
    width,
    height
  } = rect;
  const xThreshold = width * threshold;
  const yThreshold = height * threshold;
  return pointerY > top - yThreshold && pointerY < bottom + yThreshold && pointerX > left - xThreshold && pointerX < right + xThreshold;
}
var ParentPositionTracker = class {
  constructor(_document) {
    this._document = _document;
    this.positions = /* @__PURE__ */ new Map();
  }
  /** Clears the cached positions. */
  clear() {
    this.positions.clear();
  }
  /** Caches the positions. Should be called at the beginning of a drag sequence. */
  cache(elements) {
    this.clear();
    this.positions.set(this._document, {
      scrollPosition: this.getViewportScrollPosition()
    });
    elements.forEach((element) => {
      this.positions.set(element, {
        scrollPosition: {
          top: element.scrollTop,
          left: element.scrollLeft
        },
        clientRect: getMutableClientRect(element)
      });
    });
  }
  /** Handles scrolling while a drag is taking place. */
  handleScroll(event) {
    const target = _getEventTarget(event);
    const cachedPosition = this.positions.get(target);
    if (!cachedPosition) {
      return null;
    }
    const scrollPosition = cachedPosition.scrollPosition;
    let newTop;
    let newLeft;
    if (target === this._document) {
      const viewportScrollPosition = this.getViewportScrollPosition();
      newTop = viewportScrollPosition.top;
      newLeft = viewportScrollPosition.left;
    } else {
      newTop = target.scrollTop;
      newLeft = target.scrollLeft;
    }
    const topDifference = scrollPosition.top - newTop;
    const leftDifference = scrollPosition.left - newLeft;
    this.positions.forEach((position, node) => {
      if (position.clientRect && target !== node && target.contains(node)) {
        adjustDomRect(position.clientRect, topDifference, leftDifference);
      }
    });
    scrollPosition.top = newTop;
    scrollPosition.left = newLeft;
    return {
      top: topDifference,
      left: leftDifference
    };
  }
  /**
   * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,
   * instead of going through the `ViewportRuler`, because the first value the ruler looks at is
   * the top/left offset of the `document.documentElement` which works for most cases, but breaks
   * if the element is offset by something like the `BlockScrollStrategy`.
   */
  getViewportScrollPosition() {
    return {
      top: window.scrollY,
      left: window.scrollX
    };
  }
};
function deepCloneNode(node) {
  const clone3 = node.cloneNode(true);
  const descendantsWithId = clone3.querySelectorAll("[id]");
  const nodeName = node.nodeName.toLowerCase();
  clone3.removeAttribute("id");
  for (let i35 = 0; i35 < descendantsWithId.length; i35++) {
    descendantsWithId[i35].removeAttribute("id");
  }
  if (nodeName === "canvas") {
    transferCanvasData(node, clone3);
  } else if (nodeName === "input" || nodeName === "select" || nodeName === "textarea") {
    transferInputData(node, clone3);
  }
  transferData("canvas", node, clone3, transferCanvasData);
  transferData("input, textarea, select", node, clone3, transferInputData);
  return clone3;
}
function transferData(selector, node, clone3, callback) {
  const descendantElements = node.querySelectorAll(selector);
  if (descendantElements.length) {
    const cloneElements = clone3.querySelectorAll(selector);
    for (let i35 = 0; i35 < descendantElements.length; i35++) {
      callback(descendantElements[i35], cloneElements[i35]);
    }
  }
}
var cloneUniqueId = 0;
function transferInputData(source, clone3) {
  if (clone3.type !== "file") {
    clone3.value = source.value;
  }
  if (clone3.type === "radio" && clone3.name) {
    clone3.name = `mat-clone-${clone3.name}-${cloneUniqueId++}`;
  }
}
function transferCanvasData(source, clone3) {
  const context = clone3.getContext("2d");
  if (context) {
    try {
      context.drawImage(source, 0, 0);
    } catch {
    }
  }
}
var passiveEventListenerOptions = normalizePassiveListenerOptions({
  passive: true
});
var activeEventListenerOptions = normalizePassiveListenerOptions({
  passive: false
});
var MOUSE_EVENT_IGNORE_TIME = 800;
var dragImportantProperties = /* @__PURE__ */ new Set([
  // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.
  "position"
]);
var DragRef = class {
  /** Whether starting to drag this element is disabled. */
  get disabled() {
    return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);
  }
  set disabled(value) {
    if (value !== this._disabled) {
      this._disabled = value;
      this._toggleNativeDragInteractions();
      this._handles.forEach((handle) => toggleNativeDragInteractions(handle, value));
    }
  }
  constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {
    this._config = _config;
    this._document = _document;
    this._ngZone = _ngZone;
    this._viewportRuler = _viewportRuler;
    this._dragDropRegistry = _dragDropRegistry;
    this._passiveTransform = {
      x: 0,
      y: 0
    };
    this._activeTransform = {
      x: 0,
      y: 0
    };
    this._hasStartedDragging = false;
    this._moveEvents = new Subject();
    this._pointerMoveSubscription = Subscription.EMPTY;
    this._pointerUpSubscription = Subscription.EMPTY;
    this._scrollSubscription = Subscription.EMPTY;
    this._resizeSubscription = Subscription.EMPTY;
    this._boundaryElement = null;
    this._nativeInteractionsEnabled = true;
    this._handles = [];
    this._disabledHandles = /* @__PURE__ */ new Set();
    this._direction = "ltr";
    this.dragStartDelay = 0;
    this._disabled = false;
    this.beforeStarted = new Subject();
    this.started = new Subject();
    this.released = new Subject();
    this.ended = new Subject();
    this.entered = new Subject();
    this.exited = new Subject();
    this.dropped = new Subject();
    this.moved = this._moveEvents;
    this._pointerDown = (event) => {
      this.beforeStarted.next();
      if (this._handles.length) {
        const targetHandle = this._getTargetHandle(event);
        if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {
          this._initializeDragSequence(targetHandle, event);
        }
      } else if (!this.disabled) {
        this._initializeDragSequence(this._rootElement, event);
      }
    };
    this._pointerMove = (event) => {
      const pointerPosition = this._getPointerPositionOnPage(event);
      if (!this._hasStartedDragging) {
        const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);
        const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);
        const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;
        if (isOverThreshold) {
          const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);
          const container = this._dropContainer;
          if (!isDelayElapsed) {
            this._endDragSequence(event);
            return;
          }
          if (!container || !container.isDragging() && !container.isReceiving()) {
            event.preventDefault();
            this._hasStartedDragging = true;
            this._ngZone.run(() => this._startDragSequence(event));
          }
        }
        return;
      }
      event.preventDefault();
      const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);
      this._hasMoved = true;
      this._lastKnownPointerPosition = pointerPosition;
      this._updatePointerDirectionDelta(constrainedPointerPosition);
      if (this._dropContainer) {
        this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);
      } else {
        const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;
        const activeTransform = this._activeTransform;
        activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;
        activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;
        this._applyRootElementTransform(activeTransform.x, activeTransform.y);
      }
      if (this._moveEvents.observers.length) {
        this._ngZone.run(() => {
          this._moveEvents.next({
            source: this,
            pointerPosition: constrainedPointerPosition,
            event,
            distance: this._getDragDistance(constrainedPointerPosition),
            delta: this._pointerDirectionDelta
          });
        });
      }
    };
    this._pointerUp = (event) => {
      this._endDragSequence(event);
    };
    this._nativeDragStart = (event) => {
      if (this._handles.length) {
        const targetHandle = this._getTargetHandle(event);
        if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {
          event.preventDefault();
        }
      } else if (!this.disabled) {
        event.preventDefault();
      }
    };
    this.withRootElement(element).withParent(_config.parentDragRef || null);
    this._parentPositions = new ParentPositionTracker(_document);
    _dragDropRegistry.registerDragItem(this);
  }
  /**
   * Returns the element that is being used as a placeholder
   * while the current element is being dragged.
   */
  getPlaceholderElement() {
    return this._placeholder;
  }
  /** Returns the root draggable element. */
  getRootElement() {
    return this._rootElement;
  }
  /**
   * Gets the currently-visible element that represents the drag item.
   * While dragging this is the placeholder, otherwise it's the root element.
   */
  getVisibleElement() {
    return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();
  }
  /** Registers the handles that can be used to drag the element. */
  withHandles(handles) {
    this._handles = handles.map((handle) => coerceElement(handle));
    this._handles.forEach((handle) => toggleNativeDragInteractions(handle, this.disabled));
    this._toggleNativeDragInteractions();
    const disabledHandles = /* @__PURE__ */ new Set();
    this._disabledHandles.forEach((handle) => {
      if (this._handles.indexOf(handle) > -1) {
        disabledHandles.add(handle);
      }
    });
    this._disabledHandles = disabledHandles;
    return this;
  }
  /**
   * Registers the template that should be used for the drag preview.
   * @param template Template that from which to stamp out the preview.
   */
  withPreviewTemplate(template) {
    this._previewTemplate = template;
    return this;
  }
  /**
   * Registers the template that should be used for the drag placeholder.
   * @param template Template that from which to stamp out the placeholder.
   */
  withPlaceholderTemplate(template) {
    this._placeholderTemplate = template;
    return this;
  }
  /**
   * Sets an alternate drag root element. The root element is the element that will be moved as
   * the user is dragging. Passing an alternate root element is useful when trying to enable
   * dragging on an element that you might not have access to.
   */
  withRootElement(rootElement) {
    const element = coerceElement(rootElement);
    if (element !== this._rootElement) {
      if (this._rootElement) {
        this._removeRootElementListeners(this._rootElement);
      }
      this._ngZone.runOutsideAngular(() => {
        element.addEventListener("mousedown", this._pointerDown, activeEventListenerOptions);
        element.addEventListener("touchstart", this._pointerDown, passiveEventListenerOptions);
        element.addEventListener("dragstart", this._nativeDragStart, activeEventListenerOptions);
      });
      this._initialTransform = void 0;
      this._rootElement = element;
    }
    if (typeof SVGElement !== "undefined" && this._rootElement instanceof SVGElement) {
      this._ownerSVGElement = this._rootElement.ownerSVGElement;
    }
    return this;
  }
  /**
   * Element to which the draggable's position will be constrained.
   */
  withBoundaryElement(boundaryElement) {
    this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;
    this._resizeSubscription.unsubscribe();
    if (boundaryElement) {
      this._resizeSubscription = this._viewportRuler.change(10).subscribe(() => this._containInsideBoundaryOnResize());
    }
    return this;
  }
  /** Sets the parent ref that the ref is nested in.  */
  withParent(parent) {
    this._parentDragRef = parent;
    return this;
  }
  /** Removes the dragging functionality from the DOM element. */
  dispose() {
    this._removeRootElementListeners(this._rootElement);
    if (this.isDragging()) {
      this._rootElement?.remove();
    }
    this._anchor?.remove();
    this._destroyPreview();
    this._destroyPlaceholder();
    this._dragDropRegistry.removeDragItem(this);
    this._removeSubscriptions();
    this.beforeStarted.complete();
    this.started.complete();
    this.released.complete();
    this.ended.complete();
    this.entered.complete();
    this.exited.complete();
    this.dropped.complete();
    this._moveEvents.complete();
    this._handles = [];
    this._disabledHandles.clear();
    this._dropContainer = void 0;
    this._resizeSubscription.unsubscribe();
    this._parentPositions.clear();
    this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate = this._previewTemplate = this._anchor = this._parentDragRef = null;
  }
  /** Checks whether the element is currently being dragged. */
  isDragging() {
    return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);
  }
  /** Resets a standalone drag item to its initial position. */
  reset() {
    this._rootElement.style.transform = this._initialTransform || "";
    this._activeTransform = {
      x: 0,
      y: 0
    };
    this._passiveTransform = {
      x: 0,
      y: 0
    };
  }
  /**
   * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.
   * @param handle Handle element that should be disabled.
   */
  disableHandle(handle) {
    if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {
      this._disabledHandles.add(handle);
      toggleNativeDragInteractions(handle, true);
    }
  }
  /**
   * Enables a handle, if it has been disabled.
   * @param handle Handle element to be enabled.
   */
  enableHandle(handle) {
    if (this._disabledHandles.has(handle)) {
      this._disabledHandles.delete(handle);
      toggleNativeDragInteractions(handle, this.disabled);
    }
  }
  /** Sets the layout direction of the draggable item. */
  withDirection(direction) {
    this._direction = direction;
    return this;
  }
  /** Sets the container that the item is part of. */
  _withDropContainer(container) {
    this._dropContainer = container;
  }
  /**
   * Gets the current position in pixels the draggable outside of a drop container.
   */
  getFreeDragPosition() {
    const position = this.isDragging() ? this._activeTransform : this._passiveTransform;
    return {
      x: position.x,
      y: position.y
    };
  }
  /**
   * Sets the current position in pixels the draggable outside of a drop container.
   * @param value New position to be set.
   */
  setFreeDragPosition(value) {
    this._activeTransform = {
      x: 0,
      y: 0
    };
    this._passiveTransform.x = value.x;
    this._passiveTransform.y = value.y;
    if (!this._dropContainer) {
      this._applyRootElementTransform(value.x, value.y);
    }
    return this;
  }
  /**
   * Sets the container into which to insert the preview element.
   * @param value Container into which to insert the preview.
   */
  withPreviewContainer(value) {
    this._previewContainer = value;
    return this;
  }
  /** Updates the item's sort order based on the last-known pointer position. */
  _sortFromLastPointerPosition() {
    const position = this._lastKnownPointerPosition;
    if (position && this._dropContainer) {
      this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);
    }
  }
  /** Unsubscribes from the global subscriptions. */
  _removeSubscriptions() {
    this._pointerMoveSubscription.unsubscribe();
    this._pointerUpSubscription.unsubscribe();
    this._scrollSubscription.unsubscribe();
  }
  /** Destroys the preview element and its ViewRef. */
  _destroyPreview() {
    this._preview?.remove();
    this._previewRef?.destroy();
    this._preview = this._previewRef = null;
  }
  /** Destroys the placeholder element and its ViewRef. */
  _destroyPlaceholder() {
    this._placeholder?.remove();
    this._placeholderRef?.destroy();
    this._placeholder = this._placeholderRef = null;
  }
  /**
   * Clears subscriptions and stops the dragging sequence.
   * @param event Browser event object that ended the sequence.
   */
  _endDragSequence(event) {
    if (!this._dragDropRegistry.isDragging(this)) {
      return;
    }
    this._removeSubscriptions();
    this._dragDropRegistry.stopDragging(this);
    this._toggleNativeDragInteractions();
    if (this._handles) {
      this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;
    }
    if (!this._hasStartedDragging) {
      return;
    }
    this.released.next({
      source: this,
      event
    });
    if (this._dropContainer) {
      this._dropContainer._stopScrolling();
      this._animatePreviewToPlaceholder().then(() => {
        this._cleanupDragArtifacts(event);
        this._cleanupCachedDimensions();
        this._dragDropRegistry.stopDragging(this);
      });
    } else {
      this._passiveTransform.x = this._activeTransform.x;
      const pointerPosition = this._getPointerPositionOnPage(event);
      this._passiveTransform.y = this._activeTransform.y;
      this._ngZone.run(() => {
        this.ended.next({
          source: this,
          distance: this._getDragDistance(pointerPosition),
          dropPoint: pointerPosition,
          event
        });
      });
      this._cleanupCachedDimensions();
      this._dragDropRegistry.stopDragging(this);
    }
  }
  /** Starts the dragging sequence. */
  _startDragSequence(event) {
    if (isTouchEvent(event)) {
      this._lastTouchEventTime = Date.now();
    }
    this._toggleNativeDragInteractions();
    const dropContainer = this._dropContainer;
    if (dropContainer) {
      const element = this._rootElement;
      const parent = element.parentNode;
      const placeholder = this._placeholder = this._createPlaceholderElement();
      const anchor = this._anchor = this._anchor || this._document.createComment("");
      const shadowRoot = this._getShadowRoot();
      parent.insertBefore(anchor, element);
      this._initialTransform = element.style.transform || "";
      this._preview = this._createPreviewElement();
      toggleVisibility(element, false, dragImportantProperties);
      this._document.body.appendChild(parent.replaceChild(placeholder, element));
      this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);
      this.started.next({
        source: this,
        event
      });
      dropContainer.start();
      this._initialContainer = dropContainer;
      this._initialIndex = dropContainer.getItemIndex(this);
    } else {
      this.started.next({
        source: this,
        event
      });
      this._initialContainer = this._initialIndex = void 0;
    }
    this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);
  }
  /**
   * Sets up the different variables and subscriptions
   * that will be necessary for the dragging sequence.
   * @param referenceElement Element that started the drag sequence.
   * @param event Browser event object that started the sequence.
   */
  _initializeDragSequence(referenceElement, event) {
    if (this._parentDragRef) {
      event.stopPropagation();
    }
    const isDragging = this.isDragging();
    const isTouchSequence = isTouchEvent(event);
    const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;
    const rootElement = this._rootElement;
    const target = _getEventTarget(event);
    const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime && this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();
    const isFakeEvent = isTouchSequence ? isFakeTouchstartFromScreenReader(event) : isFakeMousedownFromScreenReader(event);
    if (target && target.draggable && event.type === "mousedown") {
      event.preventDefault();
    }
    if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {
      return;
    }
    if (this._handles.length) {
      const rootStyles = rootElement.style;
      this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || "";
      rootStyles.webkitTapHighlightColor = "transparent";
    }
    this._hasStartedDragging = this._hasMoved = false;
    this._removeSubscriptions();
    this._initialDomRect = this._rootElement.getBoundingClientRect();
    this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);
    this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);
    this._scrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe((scrollEvent) => this._updateOnScroll(scrollEvent));
    if (this._boundaryElement) {
      this._boundaryRect = getMutableClientRect(this._boundaryElement);
    }
    const previewTemplate = this._previewTemplate;
    this._pickupPositionInElement = previewTemplate && previewTemplate.template && !previewTemplate.matchSize ? {
      x: 0,
      y: 0
    } : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);
    const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition = this._getPointerPositionOnPage(event);
    this._pointerDirectionDelta = {
      x: 0,
      y: 0
    };
    this._pointerPositionAtLastDirectionChange = {
      x: pointerPosition.x,
      y: pointerPosition.y
    };
    this._dragStartTime = Date.now();
    this._dragDropRegistry.startDragging(this, event);
  }
  /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */
  _cleanupDragArtifacts(event) {
    toggleVisibility(this._rootElement, true, dragImportantProperties);
    this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);
    this._destroyPreview();
    this._destroyPlaceholder();
    this._initialDomRect = this._boundaryRect = this._previewRect = this._initialTransform = void 0;
    this._ngZone.run(() => {
      const container = this._dropContainer;
      const currentIndex = container.getItemIndex(this);
      const pointerPosition = this._getPointerPositionOnPage(event);
      const distance = this._getDragDistance(pointerPosition);
      const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);
      this.ended.next({
        source: this,
        distance,
        dropPoint: pointerPosition,
        event
      });
      this.dropped.next({
        item: this,
        currentIndex,
        previousIndex: this._initialIndex,
        container,
        previousContainer: this._initialContainer,
        isPointerOverContainer,
        distance,
        dropPoint: pointerPosition,
        event
      });
      container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);
      this._dropContainer = this._initialContainer;
    });
  }
  /**
   * Updates the item's position in its drop container, or moves it
   * into a new one, depending on its current drag position.
   */
  _updateActiveDropContainer({
    x: x6,
    y: y6
  }, {
    x: rawX,
    y: rawY
  }) {
    let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x6, y6);
    if (!newContainer && this._dropContainer !== this._initialContainer && this._initialContainer._isOverContainer(x6, y6)) {
      newContainer = this._initialContainer;
    }
    if (newContainer && newContainer !== this._dropContainer) {
      this._ngZone.run(() => {
        this.exited.next({
          item: this,
          container: this._dropContainer
        });
        this._dropContainer.exit(this);
        this._dropContainer = newContainer;
        this._dropContainer.enter(this, x6, y6, newContainer === this._initialContainer && // If we're re-entering the initial container and sorting is disabled,
        // put item the into its starting index to begin with.
        newContainer.sortingDisabled ? this._initialIndex : void 0);
        this.entered.next({
          item: this,
          container: newContainer,
          currentIndex: newContainer.getItemIndex(this)
        });
      });
    }
    if (this.isDragging()) {
      this._dropContainer._startScrollingIfNecessary(rawX, rawY);
      this._dropContainer._sortItem(this, x6, y6, this._pointerDirectionDelta);
      if (this.constrainPosition) {
        this._applyPreviewTransform(x6, y6);
      } else {
        this._applyPreviewTransform(x6 - this._pickupPositionInElement.x, y6 - this._pickupPositionInElement.y);
      }
    }
  }
  /**
   * Creates the element that will be rendered next to the user's pointer
   * and will be used as a preview of the element that is being dragged.
   */
  _createPreviewElement() {
    const previewConfig = this._previewTemplate;
    const previewClass = this.previewClass;
    const previewTemplate = previewConfig ? previewConfig.template : null;
    let preview;
    if (previewTemplate && previewConfig) {
      const rootRect = previewConfig.matchSize ? this._initialDomRect : null;
      const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);
      viewRef.detectChanges();
      preview = getRootNode(viewRef, this._document);
      this._previewRef = viewRef;
      if (previewConfig.matchSize) {
        matchElementSize(preview, rootRect);
      } else {
        preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);
      }
    } else {
      preview = deepCloneNode(this._rootElement);
      matchElementSize(preview, this._initialDomRect);
      if (this._initialTransform) {
        preview.style.transform = this._initialTransform;
      }
    }
    extendStyles(preview.style, {
      // It's important that we disable the pointer events on the preview, because
      // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.
      "pointer-events": "none",
      // We have to reset the margin, because it can throw off positioning relative to the viewport.
      "margin": "0",
      "position": "fixed",
      "top": "0",
      "left": "0",
      "z-index": `${this._config.zIndex || 1e3}`
    }, dragImportantProperties);
    toggleNativeDragInteractions(preview, false);
    preview.classList.add("cdk-drag-preview");
    preview.setAttribute("dir", this._direction);
    if (previewClass) {
      if (Array.isArray(previewClass)) {
        previewClass.forEach((className) => preview.classList.add(className));
      } else {
        preview.classList.add(previewClass);
      }
    }
    return preview;
  }
  /**
   * Animates the preview element from its current position to the location of the drop placeholder.
   * @returns Promise that resolves when the animation completes.
   */
  _animatePreviewToPlaceholder() {
    if (!this._hasMoved) {
      return Promise.resolve();
    }
    const placeholderRect = this._placeholder.getBoundingClientRect();
    this._preview.classList.add("cdk-drag-animating");
    this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);
    const duration = getTransformTransitionDurationInMs(this._preview);
    if (duration === 0) {
      return Promise.resolve();
    }
    return this._ngZone.runOutsideAngular(() => {
      return new Promise((resolve) => {
        const handler = (event) => {
          if (!event || _getEventTarget(event) === this._preview && event.propertyName === "transform") {
            this._preview?.removeEventListener("transitionend", handler);
            resolve();
            clearTimeout(timeout);
          }
        };
        const timeout = setTimeout(handler, duration * 1.5);
        this._preview.addEventListener("transitionend", handler);
      });
    });
  }
  /** Creates an element that will be shown instead of the current element while dragging. */
  _createPlaceholderElement() {
    const placeholderConfig = this._placeholderTemplate;
    const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;
    let placeholder;
    if (placeholderTemplate) {
      this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);
      this._placeholderRef.detectChanges();
      placeholder = getRootNode(this._placeholderRef, this._document);
    } else {
      placeholder = deepCloneNode(this._rootElement);
    }
    placeholder.style.pointerEvents = "none";
    placeholder.classList.add("cdk-drag-placeholder");
    return placeholder;
  }
  /**
   * Figures out the coordinates at which an element was picked up.
   * @param referenceElement Element that initiated the dragging.
   * @param event Event that initiated the dragging.
   */
  _getPointerPositionInElement(elementRect, referenceElement, event) {
    const handleElement = referenceElement === this._rootElement ? null : referenceElement;
    const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;
    const point = isTouchEvent(event) ? event.targetTouches[0] : event;
    const scrollPosition = this._getViewportScrollPosition();
    const x6 = point.pageX - referenceRect.left - scrollPosition.left;
    const y6 = point.pageY - referenceRect.top - scrollPosition.top;
    return {
      x: referenceRect.left - elementRect.left + x6,
      y: referenceRect.top - elementRect.top + y6
    };
  }
  /** Determines the point of the page that was touched by the user. */
  _getPointerPositionOnPage(event) {
    const scrollPosition = this._getViewportScrollPosition();
    const point = isTouchEvent(event) ? (
      // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.
      // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`
      // to have a value, but Firefox in device emulation mode has a bug where both can be empty
      // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid
      // throwing an error. The value returned here will be incorrect, but since this only
      // breaks inside a developer tool and the value is only used for secondary information,
      // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.
      event.touches[0] || event.changedTouches[0] || {
        pageX: 0,
        pageY: 0
      }
    ) : event;
    const x6 = point.pageX - scrollPosition.left;
    const y6 = point.pageY - scrollPosition.top;
    if (this._ownerSVGElement) {
      const svgMatrix = this._ownerSVGElement.getScreenCTM();
      if (svgMatrix) {
        const svgPoint = this._ownerSVGElement.createSVGPoint();
        svgPoint.x = x6;
        svgPoint.y = y6;
        return svgPoint.matrixTransform(svgMatrix.inverse());
      }
    }
    return {
      x: x6,
      y: y6
    };
  }
  /** Gets the pointer position on the page, accounting for any position constraints. */
  _getConstrainedPointerPosition(point) {
    const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;
    let {
      x: x6,
      y: y6
    } = this.constrainPosition ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement) : point;
    if (this.lockAxis === "x" || dropContainerLock === "x") {
      y6 = this._pickupPositionOnPage.y - (this.constrainPosition ? this._pickupPositionInElement.y : 0);
    } else if (this.lockAxis === "y" || dropContainerLock === "y") {
      x6 = this._pickupPositionOnPage.x - (this.constrainPosition ? this._pickupPositionInElement.x : 0);
    }
    if (this._boundaryRect) {
      const {
        x: pickupX,
        y: pickupY
      } = !this.constrainPosition ? this._pickupPositionInElement : {
        x: 0,
        y: 0
      };
      const boundaryRect = this._boundaryRect;
      const {
        width: previewWidth,
        height: previewHeight
      } = this._getPreviewRect();
      const minY = boundaryRect.top + pickupY;
      const maxY = boundaryRect.bottom - (previewHeight - pickupY);
      const minX = boundaryRect.left + pickupX;
      const maxX = boundaryRect.right - (previewWidth - pickupX);
      x6 = clamp$1(x6, minX, maxX);
      y6 = clamp$1(y6, minY, maxY);
    }
    return {
      x: x6,
      y: y6
    };
  }
  /** Updates the current drag delta, based on the user's current pointer position on the page. */
  _updatePointerDirectionDelta(pointerPositionOnPage) {
    const {
      x: x6,
      y: y6
    } = pointerPositionOnPage;
    const delta = this._pointerDirectionDelta;
    const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;
    const changeX = Math.abs(x6 - positionSinceLastChange.x);
    const changeY = Math.abs(y6 - positionSinceLastChange.y);
    if (changeX > this._config.pointerDirectionChangeThreshold) {
      delta.x = x6 > positionSinceLastChange.x ? 1 : -1;
      positionSinceLastChange.x = x6;
    }
    if (changeY > this._config.pointerDirectionChangeThreshold) {
      delta.y = y6 > positionSinceLastChange.y ? 1 : -1;
      positionSinceLastChange.y = y6;
    }
    return delta;
  }
  /** Toggles the native drag interactions, based on how many handles are registered. */
  _toggleNativeDragInteractions() {
    if (!this._rootElement || !this._handles) {
      return;
    }
    const shouldEnable = this._handles.length > 0 || !this.isDragging();
    if (shouldEnable !== this._nativeInteractionsEnabled) {
      this._nativeInteractionsEnabled = shouldEnable;
      toggleNativeDragInteractions(this._rootElement, shouldEnable);
    }
  }
  /** Removes the manually-added event listeners from the root element. */
  _removeRootElementListeners(element) {
    element.removeEventListener("mousedown", this._pointerDown, activeEventListenerOptions);
    element.removeEventListener("touchstart", this._pointerDown, passiveEventListenerOptions);
    element.removeEventListener("dragstart", this._nativeDragStart, activeEventListenerOptions);
  }
  /**
   * Applies a `transform` to the root element, taking into account any existing transforms on it.
   * @param x New transform value along the X axis.
   * @param y New transform value along the Y axis.
   */
  _applyRootElementTransform(x6, y6) {
    const transform = getTransform(x6, y6);
    const styles = this._rootElement.style;
    if (this._initialTransform == null) {
      this._initialTransform = styles.transform && styles.transform != "none" ? styles.transform : "";
    }
    styles.transform = combineTransforms(transform, this._initialTransform);
  }
  /**
   * Applies a `transform` to the preview, taking into account any existing transforms on it.
   * @param x New transform value along the X axis.
   * @param y New transform value along the Y axis.
   */
  _applyPreviewTransform(x6, y6) {
    const initialTransform = this._previewTemplate?.template ? void 0 : this._initialTransform;
    const transform = getTransform(x6, y6);
    this._preview.style.transform = combineTransforms(transform, initialTransform);
  }
  /**
   * Gets the distance that the user has dragged during the current drag sequence.
   * @param currentPosition Current position of the user's pointer.
   */
  _getDragDistance(currentPosition) {
    const pickupPosition = this._pickupPositionOnPage;
    if (pickupPosition) {
      return {
        x: currentPosition.x - pickupPosition.x,
        y: currentPosition.y - pickupPosition.y
      };
    }
    return {
      x: 0,
      y: 0
    };
  }
  /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */
  _cleanupCachedDimensions() {
    this._boundaryRect = this._previewRect = void 0;
    this._parentPositions.clear();
  }
  /**
   * Checks whether the element is still inside its boundary after the viewport has been resized.
   * If not, the position is adjusted so that the element fits again.
   */
  _containInsideBoundaryOnResize() {
    let {
      x: x6,
      y: y6
    } = this._passiveTransform;
    if (x6 === 0 && y6 === 0 || this.isDragging() || !this._boundaryElement) {
      return;
    }
    const elementRect = this._rootElement.getBoundingClientRect();
    const boundaryRect = this._boundaryElement.getBoundingClientRect();
    if (boundaryRect.width === 0 && boundaryRect.height === 0 || elementRect.width === 0 && elementRect.height === 0) {
      return;
    }
    const leftOverflow = boundaryRect.left - elementRect.left;
    const rightOverflow = elementRect.right - boundaryRect.right;
    const topOverflow = boundaryRect.top - elementRect.top;
    const bottomOverflow = elementRect.bottom - boundaryRect.bottom;
    if (boundaryRect.width > elementRect.width) {
      if (leftOverflow > 0) {
        x6 += leftOverflow;
      }
      if (rightOverflow > 0) {
        x6 -= rightOverflow;
      }
    } else {
      x6 = 0;
    }
    if (boundaryRect.height > elementRect.height) {
      if (topOverflow > 0) {
        y6 += topOverflow;
      }
      if (bottomOverflow > 0) {
        y6 -= bottomOverflow;
      }
    } else {
      y6 = 0;
    }
    if (x6 !== this._passiveTransform.x || y6 !== this._passiveTransform.y) {
      this.setFreeDragPosition({
        y: y6,
        x: x6
      });
    }
  }
  /** Gets the drag start delay, based on the event type. */
  _getDragStartDelay(event) {
    const value = this.dragStartDelay;
    if (typeof value === "number") {
      return value;
    } else if (isTouchEvent(event)) {
      return value.touch;
    }
    return value ? value.mouse : 0;
  }
  /** Updates the internal state of the draggable element when scrolling has occurred. */
  _updateOnScroll(event) {
    const scrollDifference = this._parentPositions.handleScroll(event);
    if (scrollDifference) {
      const target = _getEventTarget(event);
      if (this._boundaryRect && target !== this._boundaryElement && target.contains(this._boundaryElement)) {
        adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);
      }
      this._pickupPositionOnPage.x += scrollDifference.left;
      this._pickupPositionOnPage.y += scrollDifference.top;
      if (!this._dropContainer) {
        this._activeTransform.x -= scrollDifference.left;
        this._activeTransform.y -= scrollDifference.top;
        this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);
      }
    }
  }
  /** Gets the scroll position of the viewport. */
  _getViewportScrollPosition() {
    return this._parentPositions.positions.get(this._document)?.scrollPosition || this._parentPositions.getViewportScrollPosition();
  }
  /**
   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather
   * than saving it in property directly on init, because we want to resolve it as late as possible
   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the
   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.
   */
  _getShadowRoot() {
    if (this._cachedShadowRoot === void 0) {
      this._cachedShadowRoot = _getShadowRoot(this._rootElement);
    }
    return this._cachedShadowRoot;
  }
  /** Gets the element into which the drag preview should be inserted. */
  _getPreviewInsertionPoint(initialParent, shadowRoot) {
    const previewContainer = this._previewContainer || "global";
    if (previewContainer === "parent") {
      return initialParent;
    }
    if (previewContainer === "global") {
      const documentRef = this._document;
      return shadowRoot || documentRef.fullscreenElement || documentRef.webkitFullscreenElement || documentRef.mozFullScreenElement || documentRef.msFullscreenElement || documentRef.body;
    }
    return coerceElement(previewContainer);
  }
  /** Lazily resolves and returns the dimensions of the preview. */
  _getPreviewRect() {
    if (!this._previewRect || !this._previewRect.width && !this._previewRect.height) {
      this._previewRect = this._preview ? this._preview.getBoundingClientRect() : this._initialDomRect;
    }
    return this._previewRect;
  }
  /** Gets a handle that is the target of an event. */
  _getTargetHandle(event) {
    return this._handles.find((handle) => {
      return event.target && (event.target === handle || handle.contains(event.target));
    });
  }
};
function getTransform(x6, y6) {
  return `translate3d(${Math.round(x6)}px, ${Math.round(y6)}px, 0)`;
}
function clamp$1(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
function isTouchEvent(event) {
  return event.type[0] === "t";
}
function getRootNode(viewRef, _document) {
  const rootNodes = viewRef.rootNodes;
  if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {
    return rootNodes[0];
  }
  const wrapper = _document.createElement("div");
  rootNodes.forEach((node) => wrapper.appendChild(node));
  return wrapper;
}
function matchElementSize(target, sourceRect) {
  target.style.width = `${sourceRect.width}px`;
  target.style.height = `${sourceRect.height}px`;
  target.style.transform = getTransform(sourceRect.left, sourceRect.top);
}
function moveItemInArray(array, fromIndex, toIndex) {
  const from2 = clamp(fromIndex, array.length - 1);
  const to = clamp(toIndex, array.length - 1);
  if (from2 === to) {
    return;
  }
  const target = array[from2];
  const delta = to < from2 ? -1 : 1;
  for (let i35 = from2; i35 !== to; i35 += delta) {
    array[i35] = array[i35 + delta];
  }
  array[to] = target;
}
function clamp(value, max) {
  return Math.max(0, Math.min(max, value));
}
var SingleAxisSortStrategy = class {
  constructor(_element, _dragDropRegistry) {
    this._element = _element;
    this._dragDropRegistry = _dragDropRegistry;
    this._itemPositions = [];
    this.orientation = "vertical";
    this._previousSwap = {
      drag: null,
      delta: 0,
      overlaps: false
    };
  }
  /**
   * To be called when the drag sequence starts.
   * @param items Items that are currently in the list.
   */
  start(items) {
    this.withItems(items);
  }
  /**
   * To be called when an item is being sorted.
   * @param item Item to be sorted.
   * @param pointerX Position of the item along the X axis.
   * @param pointerY Position of the item along the Y axis.
   * @param pointerDelta Direction in which the pointer is moving along each axis.
   */
  sort(item, pointerX, pointerY, pointerDelta) {
    const siblings = this._itemPositions;
    const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);
    if (newIndex === -1 && siblings.length > 0) {
      return null;
    }
    const isHorizontal = this.orientation === "horizontal";
    const currentIndex = siblings.findIndex((currentItem) => currentItem.drag === item);
    const siblingAtNewPosition = siblings[newIndex];
    const currentPosition = siblings[currentIndex].clientRect;
    const newPosition = siblingAtNewPosition.clientRect;
    const delta = currentIndex > newIndex ? 1 : -1;
    const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);
    const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);
    const oldOrder = siblings.slice();
    moveItemInArray(siblings, currentIndex, newIndex);
    siblings.forEach((sibling, index) => {
      if (oldOrder[index] === sibling) {
        return;
      }
      const isDraggedItem = sibling.drag === item;
      const offset = isDraggedItem ? itemOffset : siblingOffset;
      const elementToOffset = isDraggedItem ? item.getPlaceholderElement() : sibling.drag.getRootElement();
      sibling.offset += offset;
      if (isHorizontal) {
        elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);
        adjustDomRect(sibling.clientRect, 0, offset);
      } else {
        elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);
        adjustDomRect(sibling.clientRect, offset, 0);
      }
    });
    this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);
    this._previousSwap.drag = siblingAtNewPosition.drag;
    this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;
    return {
      previousIndex: currentIndex,
      currentIndex: newIndex
    };
  }
  /**
   * Called when an item is being moved into the container.
   * @param item Item that was moved into the container.
   * @param pointerX Position of the item along the X axis.
   * @param pointerY Position of the item along the Y axis.
   * @param index Index at which the item entered. If omitted, the container will try to figure it
   *   out automatically.
   */
  enter(item, pointerX, pointerY, index) {
    const newIndex = index == null || index < 0 ? (
      // We use the coordinates of where the item entered the drop
      // zone to figure out at which index it should be inserted.
      this._getItemIndexFromPointerPosition(item, pointerX, pointerY)
    ) : index;
    const activeDraggables = this._activeDraggables;
    const currentIndex = activeDraggables.indexOf(item);
    const placeholder = item.getPlaceholderElement();
    let newPositionReference = activeDraggables[newIndex];
    if (newPositionReference === item) {
      newPositionReference = activeDraggables[newIndex + 1];
    }
    if (!newPositionReference && (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) && this._shouldEnterAsFirstChild(pointerX, pointerY)) {
      newPositionReference = activeDraggables[0];
    }
    if (currentIndex > -1) {
      activeDraggables.splice(currentIndex, 1);
    }
    if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {
      const element = newPositionReference.getRootElement();
      element.parentElement.insertBefore(placeholder, element);
      activeDraggables.splice(newIndex, 0, item);
    } else {
      coerceElement(this._element).appendChild(placeholder);
      activeDraggables.push(item);
    }
    placeholder.style.transform = "";
    this._cacheItemPositions();
  }
  /** Sets the items that are currently part of the list. */
  withItems(items) {
    this._activeDraggables = items.slice();
    this._cacheItemPositions();
  }
  /** Assigns a sort predicate to the strategy. */
  withSortPredicate(predicate) {
    this._sortPredicate = predicate;
  }
  /** Resets the strategy to its initial state before dragging was started. */
  reset() {
    this._activeDraggables.forEach((item) => {
      const rootElement = item.getRootElement();
      if (rootElement) {
        const initialTransform = this._itemPositions.find((p14) => p14.drag === item)?.initialTransform;
        rootElement.style.transform = initialTransform || "";
      }
    });
    this._itemPositions = [];
    this._activeDraggables = [];
    this._previousSwap.drag = null;
    this._previousSwap.delta = 0;
    this._previousSwap.overlaps = false;
  }
  /**
   * Gets a snapshot of items currently in the list.
   * Can include items that we dragged in from another list.
   */
  getActiveItemsSnapshot() {
    return this._activeDraggables;
  }
  /** Gets the index of a specific item. */
  getItemIndex(item) {
    const items = this.orientation === "horizontal" && this.direction === "rtl" ? this._itemPositions.slice().reverse() : this._itemPositions;
    return items.findIndex((currentItem) => currentItem.drag === item);
  }
  /** Used to notify the strategy that the scroll position has changed. */
  updateOnScroll(topDifference, leftDifference) {
    this._itemPositions.forEach(({
      clientRect
    }) => {
      adjustDomRect(clientRect, topDifference, leftDifference);
    });
    this._itemPositions.forEach(({
      drag
    }) => {
      if (this._dragDropRegistry.isDragging(drag)) {
        drag._sortFromLastPointerPosition();
      }
    });
  }
  /** Refreshes the position cache of the items and sibling containers. */
  _cacheItemPositions() {
    const isHorizontal = this.orientation === "horizontal";
    this._itemPositions = this._activeDraggables.map((drag) => {
      const elementToMeasure = drag.getVisibleElement();
      return {
        drag,
        offset: 0,
        initialTransform: elementToMeasure.style.transform || "",
        clientRect: getMutableClientRect(elementToMeasure)
      };
    }).sort((a103, b8) => {
      return isHorizontal ? a103.clientRect.left - b8.clientRect.left : a103.clientRect.top - b8.clientRect.top;
    });
  }
  /**
   * Gets the offset in pixels by which the item that is being dragged should be moved.
   * @param currentPosition Current position of the item.
   * @param newPosition Position of the item where the current item should be moved.
   * @param delta Direction in which the user is moving.
   */
  _getItemOffsetPx(currentPosition, newPosition, delta) {
    const isHorizontal = this.orientation === "horizontal";
    let itemOffset = isHorizontal ? newPosition.left - currentPosition.left : newPosition.top - currentPosition.top;
    if (delta === -1) {
      itemOffset += isHorizontal ? newPosition.width - currentPosition.width : newPosition.height - currentPosition.height;
    }
    return itemOffset;
  }
  /**
   * Gets the offset in pixels by which the items that aren't being dragged should be moved.
   * @param currentIndex Index of the item currently being dragged.
   * @param siblings All of the items in the list.
   * @param delta Direction in which the user is moving.
   */
  _getSiblingOffsetPx(currentIndex, siblings, delta) {
    const isHorizontal = this.orientation === "horizontal";
    const currentPosition = siblings[currentIndex].clientRect;
    const immediateSibling = siblings[currentIndex + delta * -1];
    let siblingOffset = currentPosition[isHorizontal ? "width" : "height"] * delta;
    if (immediateSibling) {
      const start = isHorizontal ? "left" : "top";
      const end = isHorizontal ? "right" : "bottom";
      if (delta === -1) {
        siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];
      } else {
        siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];
      }
    }
    return siblingOffset;
  }
  /**
   * Checks if pointer is entering in the first position
   * @param pointerX Position of the user's pointer along the X axis.
   * @param pointerY Position of the user's pointer along the Y axis.
   */
  _shouldEnterAsFirstChild(pointerX, pointerY) {
    if (!this._activeDraggables.length) {
      return false;
    }
    const itemPositions = this._itemPositions;
    const isHorizontal = this.orientation === "horizontal";
    const reversed = itemPositions[0].drag !== this._activeDraggables[0];
    if (reversed) {
      const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;
      return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;
    } else {
      const firstItemRect = itemPositions[0].clientRect;
      return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;
    }
  }
  /**
   * Gets the index of an item in the drop container, based on the position of the user's pointer.
   * @param item Item that is being sorted.
   * @param pointerX Position of the user's pointer along the X axis.
   * @param pointerY Position of the user's pointer along the Y axis.
   * @param delta Direction in which the user is moving their pointer.
   */
  _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {
    const isHorizontal = this.orientation === "horizontal";
    const index = this._itemPositions.findIndex(({
      drag,
      clientRect
    }) => {
      if (drag === item) {
        return false;
      }
      if (delta) {
        const direction = isHorizontal ? delta.x : delta.y;
        if (drag === this._previousSwap.drag && this._previousSwap.overlaps && direction === this._previousSwap.delta) {
          return false;
        }
      }
      return isHorizontal ? (
        // Round these down since most browsers report client rects with
        // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.
        pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)
      ) : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);
    });
    return index === -1 || !this._sortPredicate(index, item) ? -1 : index;
  }
};
var DROP_PROXIMITY_THRESHOLD = 0.05;
var SCROLL_PROXIMITY_THRESHOLD = 0.05;
var AutoScrollVerticalDirection;
(function(AutoScrollVerticalDirection2) {
  AutoScrollVerticalDirection2[AutoScrollVerticalDirection2["NONE"] = 0] = "NONE";
  AutoScrollVerticalDirection2[AutoScrollVerticalDirection2["UP"] = 1] = "UP";
  AutoScrollVerticalDirection2[AutoScrollVerticalDirection2["DOWN"] = 2] = "DOWN";
})(AutoScrollVerticalDirection || (AutoScrollVerticalDirection = {}));
var AutoScrollHorizontalDirection;
(function(AutoScrollHorizontalDirection2) {
  AutoScrollHorizontalDirection2[AutoScrollHorizontalDirection2["NONE"] = 0] = "NONE";
  AutoScrollHorizontalDirection2[AutoScrollHorizontalDirection2["LEFT"] = 1] = "LEFT";
  AutoScrollHorizontalDirection2[AutoScrollHorizontalDirection2["RIGHT"] = 2] = "RIGHT";
})(AutoScrollHorizontalDirection || (AutoScrollHorizontalDirection = {}));
var DropListRef = class {
  constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {
    this._dragDropRegistry = _dragDropRegistry;
    this._ngZone = _ngZone;
    this._viewportRuler = _viewportRuler;
    this.disabled = false;
    this.sortingDisabled = false;
    this.autoScrollDisabled = false;
    this.autoScrollStep = 2;
    this.enterPredicate = () => true;
    this.sortPredicate = () => true;
    this.beforeStarted = new Subject();
    this.entered = new Subject();
    this.exited = new Subject();
    this.dropped = new Subject();
    this.sorted = new Subject();
    this.receivingStarted = new Subject();
    this.receivingStopped = new Subject();
    this._isDragging = false;
    this._draggables = [];
    this._siblings = [];
    this._activeSiblings = /* @__PURE__ */ new Set();
    this._viewportScrollSubscription = Subscription.EMPTY;
    this._verticalScrollDirection = AutoScrollVerticalDirection.NONE;
    this._horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;
    this._stopScrollTimers = new Subject();
    this._cachedShadowRoot = null;
    this._startScrollInterval = () => {
      this._stopScrolling();
      interval(0, animationFrameScheduler).pipe(takeUntil(this._stopScrollTimers)).subscribe(() => {
        const node = this._scrollNode;
        const scrollStep = this.autoScrollStep;
        if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {
          node.scrollBy(0, -scrollStep);
        } else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {
          node.scrollBy(0, scrollStep);
        }
        if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {
          node.scrollBy(-scrollStep, 0);
        } else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {
          node.scrollBy(scrollStep, 0);
        }
      });
    };
    this.element = coerceElement(element);
    this._document = _document;
    this.withScrollableParents([this.element]);
    _dragDropRegistry.registerDropContainer(this);
    this._parentPositions = new ParentPositionTracker(_document);
    this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);
    this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));
  }
  /** Removes the drop list functionality from the DOM element. */
  dispose() {
    this._stopScrolling();
    this._stopScrollTimers.complete();
    this._viewportScrollSubscription.unsubscribe();
    this.beforeStarted.complete();
    this.entered.complete();
    this.exited.complete();
    this.dropped.complete();
    this.sorted.complete();
    this.receivingStarted.complete();
    this.receivingStopped.complete();
    this._activeSiblings.clear();
    this._scrollNode = null;
    this._parentPositions.clear();
    this._dragDropRegistry.removeDropContainer(this);
  }
  /** Whether an item from this list is currently being dragged. */
  isDragging() {
    return this._isDragging;
  }
  /** Starts dragging an item. */
  start() {
    this._draggingStarted();
    this._notifyReceivingSiblings();
  }
  /**
   * Attempts to move an item into the container.
   * @param item Item that was moved into the container.
   * @param pointerX Position of the item along the X axis.
   * @param pointerY Position of the item along the Y axis.
   * @param index Index at which the item entered. If omitted, the container will try to figure it
   *   out automatically.
   */
  enter(item, pointerX, pointerY, index) {
    this._draggingStarted();
    if (index == null && this.sortingDisabled) {
      index = this._draggables.indexOf(item);
    }
    this._sortStrategy.enter(item, pointerX, pointerY, index);
    this._cacheParentPositions();
    this._notifyReceivingSiblings();
    this.entered.next({
      item,
      container: this,
      currentIndex: this.getItemIndex(item)
    });
  }
  /**
   * Removes an item from the container after it was dragged into another container by the user.
   * @param item Item that was dragged out.
   */
  exit(item) {
    this._reset();
    this.exited.next({
      item,
      container: this
    });
  }
  /**
   * Drops an item into this container.
   * @param item Item being dropped into the container.
   * @param currentIndex Index at which the item should be inserted.
   * @param previousIndex Index of the item when dragging started.
   * @param previousContainer Container from which the item got dragged in.
   * @param isPointerOverContainer Whether the user's pointer was over the
   *    container when the item was dropped.
   * @param distance Distance the user has dragged since the start of the dragging sequence.
   * @param event Event that triggered the dropping sequence.
   *
   * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.
   */
  drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {
    this._reset();
    this.dropped.next({
      item,
      currentIndex,
      previousIndex,
      container: this,
      previousContainer,
      isPointerOverContainer,
      distance,
      dropPoint,
      event
    });
  }
  /**
   * Sets the draggable items that are a part of this list.
   * @param items Items that are a part of this list.
   */
  withItems(items) {
    const previousItems = this._draggables;
    this._draggables = items;
    items.forEach((item) => item._withDropContainer(this));
    if (this.isDragging()) {
      const draggedItems = previousItems.filter((item) => item.isDragging());
      if (draggedItems.every((item) => items.indexOf(item) === -1)) {
        this._reset();
      } else {
        this._sortStrategy.withItems(this._draggables);
      }
    }
    return this;
  }
  /** Sets the layout direction of the drop list. */
  withDirection(direction) {
    this._sortStrategy.direction = direction;
    return this;
  }
  /**
   * Sets the containers that are connected to this one. When two or more containers are
   * connected, the user will be allowed to transfer items between them.
   * @param connectedTo Other containers that the current containers should be connected to.
   */
  connectedTo(connectedTo) {
    this._siblings = connectedTo.slice();
    return this;
  }
  /**
   * Sets the orientation of the container.
   * @param orientation New orientation for the container.
   */
  withOrientation(orientation) {
    this._sortStrategy.orientation = orientation;
    return this;
  }
  /**
   * Sets which parent elements are can be scrolled while the user is dragging.
   * @param elements Elements that can be scrolled.
   */
  withScrollableParents(elements) {
    const element = coerceElement(this.element);
    this._scrollableElements = elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();
    return this;
  }
  /** Gets the scrollable parents that are registered with this drop container. */
  getScrollableParents() {
    return this._scrollableElements;
  }
  /**
   * Figures out the index of an item in the container.
   * @param item Item whose index should be determined.
   */
  getItemIndex(item) {
    return this._isDragging ? this._sortStrategy.getItemIndex(item) : this._draggables.indexOf(item);
  }
  /**
   * Whether the list is able to receive the item that
   * is currently being dragged inside a connected drop list.
   */
  isReceiving() {
    return this._activeSiblings.size > 0;
  }
  /**
   * Sorts an item inside the container based on its position.
   * @param item Item to be sorted.
   * @param pointerX Position of the item along the X axis.
   * @param pointerY Position of the item along the Y axis.
   * @param pointerDelta Direction in which the pointer is moving along each axis.
   */
  _sortItem(item, pointerX, pointerY, pointerDelta) {
    if (this.sortingDisabled || !this._domRect || !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {
      return;
    }
    const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);
    if (result) {
      this.sorted.next({
        previousIndex: result.previousIndex,
        currentIndex: result.currentIndex,
        container: this,
        item
      });
    }
  }
  /**
   * Checks whether the user's pointer is close to the edges of either the
   * viewport or the drop list and starts the auto-scroll sequence.
   * @param pointerX User's pointer position along the x axis.
   * @param pointerY User's pointer position along the y axis.
   */
  _startScrollingIfNecessary(pointerX, pointerY) {
    if (this.autoScrollDisabled) {
      return;
    }
    let scrollNode;
    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;
    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;
    this._parentPositions.positions.forEach((position, element) => {
      if (element === this._document || !position.clientRect || scrollNode) {
        return;
      }
      if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {
        [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._sortStrategy.direction, pointerX, pointerY);
        if (verticalScrollDirection || horizontalScrollDirection) {
          scrollNode = element;
        }
      }
    });
    if (!verticalScrollDirection && !horizontalScrollDirection) {
      const {
        width,
        height
      } = this._viewportRuler.getViewportSize();
      const domRect = {
        width,
        height,
        top: 0,
        right: width,
        bottom: height,
        left: 0
      };
      verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);
      horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);
      scrollNode = window;
    }
    if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection || horizontalScrollDirection !== this._horizontalScrollDirection || scrollNode !== this._scrollNode)) {
      this._verticalScrollDirection = verticalScrollDirection;
      this._horizontalScrollDirection = horizontalScrollDirection;
      this._scrollNode = scrollNode;
      if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {
        this._ngZone.runOutsideAngular(this._startScrollInterval);
      } else {
        this._stopScrolling();
      }
    }
  }
  /** Stops any currently-running auto-scroll sequences. */
  _stopScrolling() {
    this._stopScrollTimers.next();
  }
  /** Starts the dragging sequence within the list. */
  _draggingStarted() {
    const styles = coerceElement(this.element).style;
    this.beforeStarted.next();
    this._isDragging = true;
    this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || "";
    styles.scrollSnapType = styles.msScrollSnapType = "none";
    this._sortStrategy.start(this._draggables);
    this._cacheParentPositions();
    this._viewportScrollSubscription.unsubscribe();
    this._listenToScrollEvents();
  }
  /** Caches the positions of the configured scrollable parents. */
  _cacheParentPositions() {
    const element = coerceElement(this.element);
    this._parentPositions.cache(this._scrollableElements);
    this._domRect = this._parentPositions.positions.get(element).clientRect;
  }
  /** Resets the container to its initial state. */
  _reset() {
    this._isDragging = false;
    const styles = coerceElement(this.element).style;
    styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;
    this._siblings.forEach((sibling) => sibling._stopReceiving(this));
    this._sortStrategy.reset();
    this._stopScrolling();
    this._viewportScrollSubscription.unsubscribe();
    this._parentPositions.clear();
  }
  /**
   * Checks whether the user's pointer is positioned over the container.
   * @param x Pointer position along the X axis.
   * @param y Pointer position along the Y axis.
   */
  _isOverContainer(x6, y6) {
    return this._domRect != null && isInsideClientRect(this._domRect, x6, y6);
  }
  /**
   * Figures out whether an item should be moved into a sibling
   * drop container, based on its current position.
   * @param item Drag item that is being moved.
   * @param x Position of the item along the X axis.
   * @param y Position of the item along the Y axis.
   */
  _getSiblingContainerFromPosition(item, x6, y6) {
    return this._siblings.find((sibling) => sibling._canReceive(item, x6, y6));
  }
  /**
   * Checks whether the drop list can receive the passed-in item.
   * @param item Item that is being dragged into the list.
   * @param x Position of the item along the X axis.
   * @param y Position of the item along the Y axis.
   */
  _canReceive(item, x6, y6) {
    if (!this._domRect || !isInsideClientRect(this._domRect, x6, y6) || !this.enterPredicate(item, this)) {
      return false;
    }
    const elementFromPoint = this._getShadowRoot().elementFromPoint(x6, y6);
    if (!elementFromPoint) {
      return false;
    }
    const nativeElement = coerceElement(this.element);
    return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);
  }
  /**
   * Called by one of the connected drop lists when a dragging sequence has started.
   * @param sibling Sibling in which dragging has started.
   */
  _startReceiving(sibling, items) {
    const activeSiblings = this._activeSiblings;
    if (!activeSiblings.has(sibling) && items.every((item) => {
      return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;
    })) {
      activeSiblings.add(sibling);
      this._cacheParentPositions();
      this._listenToScrollEvents();
      this.receivingStarted.next({
        initiator: sibling,
        receiver: this,
        items
      });
    }
  }
  /**
   * Called by a connected drop list when dragging has stopped.
   * @param sibling Sibling whose dragging has stopped.
   */
  _stopReceiving(sibling) {
    this._activeSiblings.delete(sibling);
    this._viewportScrollSubscription.unsubscribe();
    this.receivingStopped.next({
      initiator: sibling,
      receiver: this
    });
  }
  /**
   * Starts listening to scroll events on the viewport.
   * Used for updating the internal state of the list.
   */
  _listenToScrollEvents() {
    this._viewportScrollSubscription = this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe((event) => {
      if (this.isDragging()) {
        const scrollDifference = this._parentPositions.handleScroll(event);
        if (scrollDifference) {
          this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);
        }
      } else if (this.isReceiving()) {
        this._cacheParentPositions();
      }
    });
  }
  /**
   * Lazily resolves and returns the shadow root of the element. We do this in a function, rather
   * than saving it in property directly on init, because we want to resolve it as late as possible
   * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the
   * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.
   */
  _getShadowRoot() {
    if (!this._cachedShadowRoot) {
      const shadowRoot = _getShadowRoot(coerceElement(this.element));
      this._cachedShadowRoot = shadowRoot || this._document;
    }
    return this._cachedShadowRoot;
  }
  /** Notifies any siblings that may potentially receive the item. */
  _notifyReceivingSiblings() {
    const draggedItems = this._sortStrategy.getActiveItemsSnapshot().filter((item) => item.isDragging());
    this._siblings.forEach((sibling) => sibling._startReceiving(this, draggedItems));
  }
};
function getVerticalScrollDirection(clientRect, pointerY) {
  const {
    top,
    bottom,
    height
  } = clientRect;
  const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;
  if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {
    return AutoScrollVerticalDirection.UP;
  } else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {
    return AutoScrollVerticalDirection.DOWN;
  }
  return AutoScrollVerticalDirection.NONE;
}
function getHorizontalScrollDirection(clientRect, pointerX) {
  const {
    left,
    right,
    width
  } = clientRect;
  const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;
  if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {
    return AutoScrollHorizontalDirection.LEFT;
  } else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {
    return AutoScrollHorizontalDirection.RIGHT;
  }
  return AutoScrollHorizontalDirection.NONE;
}
function getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {
  const computedVertical = getVerticalScrollDirection(clientRect, pointerY);
  const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);
  let verticalScrollDirection = AutoScrollVerticalDirection.NONE;
  let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;
  if (computedVertical) {
    const scrollTop = element.scrollTop;
    if (computedVertical === AutoScrollVerticalDirection.UP) {
      if (scrollTop > 0) {
        verticalScrollDirection = AutoScrollVerticalDirection.UP;
      }
    } else if (element.scrollHeight - scrollTop > element.clientHeight) {
      verticalScrollDirection = AutoScrollVerticalDirection.DOWN;
    }
  }
  if (computedHorizontal) {
    const scrollLeft = element.scrollLeft;
    if (direction === "rtl") {
      if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {
        if (scrollLeft < 0) {
          horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;
        }
      } else if (element.scrollWidth + scrollLeft > element.clientWidth) {
        horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;
      }
    } else {
      if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {
        if (scrollLeft > 0) {
          horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;
        }
      } else if (element.scrollWidth - scrollLeft > element.clientWidth) {
        horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;
      }
    }
  }
  return [verticalScrollDirection, horizontalScrollDirection];
}
var activeCapturingEventOptions = normalizePassiveListenerOptions({
  passive: false,
  capture: true
});
var _DragDropRegistry = class _DragDropRegistry {
  constructor(_ngZone, _document) {
    this._ngZone = _ngZone;
    this._dropInstances = /* @__PURE__ */ new Set();
    this._dragInstances = /* @__PURE__ */ new Set();
    this._activeDragInstances = [];
    this._globalListeners = /* @__PURE__ */ new Map();
    this._draggingPredicate = (item) => item.isDragging();
    this.pointerMove = new Subject();
    this.pointerUp = new Subject();
    this.scroll = new Subject();
    this._preventDefaultWhileDragging = (event) => {
      if (this._activeDragInstances.length > 0) {
        event.preventDefault();
      }
    };
    this._persistentTouchmoveListener = (event) => {
      if (this._activeDragInstances.length > 0) {
        if (this._activeDragInstances.some(this._draggingPredicate)) {
          event.preventDefault();
        }
        this.pointerMove.next(event);
      }
    };
    this._document = _document;
  }
  /** Adds a drop container to the registry. */
  registerDropContainer(drop) {
    if (!this._dropInstances.has(drop)) {
      this._dropInstances.add(drop);
    }
  }
  /** Adds a drag item instance to the registry. */
  registerDragItem(drag) {
    this._dragInstances.add(drag);
    if (this._dragInstances.size === 1) {
      this._ngZone.runOutsideAngular(() => {
        this._document.addEventListener("touchmove", this._persistentTouchmoveListener, activeCapturingEventOptions);
      });
    }
  }
  /** Removes a drop container from the registry. */
  removeDropContainer(drop) {
    this._dropInstances.delete(drop);
  }
  /** Removes a drag item instance from the registry. */
  removeDragItem(drag) {
    this._dragInstances.delete(drag);
    this.stopDragging(drag);
    if (this._dragInstances.size === 0) {
      this._document.removeEventListener("touchmove", this._persistentTouchmoveListener, activeCapturingEventOptions);
    }
  }
  /**
   * Starts the dragging sequence for a drag instance.
   * @param drag Drag instance which is being dragged.
   * @param event Event that initiated the dragging.
   */
  startDragging(drag, event) {
    if (this._activeDragInstances.indexOf(drag) > -1) {
      return;
    }
    this._activeDragInstances.push(drag);
    if (this._activeDragInstances.length === 1) {
      const isTouchEvent2 = event.type.startsWith("touch");
      this._globalListeners.set(isTouchEvent2 ? "touchend" : "mouseup", {
        handler: (e83) => this.pointerUp.next(e83),
        options: true
      }).set("scroll", {
        handler: (e83) => this.scroll.next(e83),
        // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't
        // the document. See https://github.com/angular/components/issues/17144.
        options: true
      }).set("selectstart", {
        handler: this._preventDefaultWhileDragging,
        options: activeCapturingEventOptions
      });
      if (!isTouchEvent2) {
        this._globalListeners.set("mousemove", {
          handler: (e83) => this.pointerMove.next(e83),
          options: activeCapturingEventOptions
        });
      }
      this._ngZone.runOutsideAngular(() => {
        this._globalListeners.forEach((config, name) => {
          this._document.addEventListener(name, config.handler, config.options);
        });
      });
    }
  }
  /** Stops dragging a drag item instance. */
  stopDragging(drag) {
    const index = this._activeDragInstances.indexOf(drag);
    if (index > -1) {
      this._activeDragInstances.splice(index, 1);
      if (this._activeDragInstances.length === 0) {
        this._clearGlobalListeners();
      }
    }
  }
  /** Gets whether a drag item instance is currently being dragged. */
  isDragging(drag) {
    return this._activeDragInstances.indexOf(drag) > -1;
  }
  /**
   * Gets a stream that will emit when any element on the page is scrolled while an item is being
   * dragged.
   * @param shadowRoot Optional shadow root that the current dragging sequence started from.
   *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can
   *   be used to include an additional top-level listener at the shadow root level.
   */
  scrolled(shadowRoot) {
    const streams = [this.scroll];
    if (shadowRoot && shadowRoot !== this._document) {
      streams.push(new Observable((observer) => {
        return this._ngZone.runOutsideAngular(() => {
          const eventOptions = true;
          const callback = (event) => {
            if (this._activeDragInstances.length) {
              observer.next(event);
            }
          };
          shadowRoot.addEventListener("scroll", callback, eventOptions);
          return () => {
            shadowRoot.removeEventListener("scroll", callback, eventOptions);
          };
        });
      }));
    }
    return merge(...streams);
  }
  ngOnDestroy() {
    this._dragInstances.forEach((instance) => this.removeDragItem(instance));
    this._dropInstances.forEach((instance) => this.removeDropContainer(instance));
    this._clearGlobalListeners();
    this.pointerMove.complete();
    this.pointerUp.complete();
  }
  /** Clears out the global event listeners from the `document`. */
  _clearGlobalListeners() {
    this._globalListeners.forEach((config, name) => {
      this._document.removeEventListener(name, config.handler, config.options);
    });
    this._globalListeners.clear();
  }
};
_DragDropRegistry.ɵfac = function DragDropRegistry_Factory(t161) {
  return new (t161 || _DragDropRegistry)(ɵɵinject(NgZone), ɵɵinject(DOCUMENT));
};
_DragDropRegistry.ɵprov = ɵɵdefineInjectable({
  token: _DragDropRegistry,
  factory: _DragDropRegistry.ɵfac,
  providedIn: "root"
});
var DragDropRegistry = _DragDropRegistry;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DragDropRegistry, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }], null);
})();
var DEFAULT_CONFIG = {
  dragStartThreshold: 5,
  pointerDirectionChangeThreshold: 5
};
var _DragDrop = class _DragDrop {
  constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {
    this._document = _document;
    this._ngZone = _ngZone;
    this._viewportRuler = _viewportRuler;
    this._dragDropRegistry = _dragDropRegistry;
  }
  /**
   * Turns an element into a draggable item.
   * @param element Element to which to attach the dragging functionality.
   * @param config Object used to configure the dragging behavior.
   */
  createDrag(element, config = DEFAULT_CONFIG) {
    return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);
  }
  /**
   * Turns an element into a drop list.
   * @param element Element to which to attach the drop list functionality.
   */
  createDropList(element) {
    return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);
  }
};
_DragDrop.ɵfac = function DragDrop_Factory(t161) {
  return new (t161 || _DragDrop)(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry));
};
_DragDrop.ɵprov = ɵɵdefineInjectable({
  token: _DragDrop,
  factory: _DragDrop.ɵfac,
  providedIn: "root"
});
var DragDrop = _DragDrop;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DragDrop, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: NgZone
  }, {
    type: ViewportRuler
  }, {
    type: DragDropRegistry
  }], null);
})();
var CDK_DRAG_PARENT = new InjectionToken("CDK_DRAG_PARENT");
function assertElementNode(node, name) {
  if (node.nodeType !== 1) {
    throw Error(`${name} must be attached to an element node. Currently attached to "${node.nodeName}".`);
  }
}
var CDK_DRAG_HANDLE = new InjectionToken("CdkDragHandle");
var _CdkDragHandle = class _CdkDragHandle {
  /** Whether starting to drag through this handle is disabled. */
  get disabled() {
    return this._disabled;
  }
  set disabled(value) {
    this._disabled = value;
    this._stateChanges.next(this);
  }
  constructor(element, _parentDrag) {
    this.element = element;
    this._parentDrag = _parentDrag;
    this._stateChanges = new Subject();
    this._disabled = false;
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      assertElementNode(element.nativeElement, "cdkDragHandle");
    }
    _parentDrag?._addHandle(this);
  }
  ngOnDestroy() {
    this._parentDrag?._removeHandle(this);
    this._stateChanges.complete();
  }
};
_CdkDragHandle.ɵfac = function CdkDragHandle_Factory(t161) {
  return new (t161 || _CdkDragHandle)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));
};
_CdkDragHandle.ɵdir = ɵɵdefineDirective({
  type: _CdkDragHandle,
  selectors: [["", "cdkDragHandle", ""]],
  hostAttrs: [1, "cdk-drag-handle"],
  inputs: {
    disabled: [InputFlags.HasDecoratorInputTransform, "cdkDragHandleDisabled", "disabled", booleanAttribute]
  },
  standalone: true,
  features: [ɵɵProvidersFeature([{
    provide: CDK_DRAG_HANDLE,
    useExisting: _CdkDragHandle
  }]), ɵɵInputTransformsFeature]
});
var CdkDragHandle = _CdkDragHandle;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkDragHandle, [{
    type: Directive,
    args: [{
      selector: "[cdkDragHandle]",
      standalone: true,
      host: {
        "class": "cdk-drag-handle"
      },
      providers: [{
        provide: CDK_DRAG_HANDLE,
        useExisting: CdkDragHandle
      }]
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [CDK_DRAG_PARENT]
    }, {
      type: Optional
    }, {
      type: SkipSelf
    }]
  }], {
    disabled: [{
      type: Input,
      args: [{
        alias: "cdkDragHandleDisabled",
        transform: booleanAttribute
      }]
    }]
  });
})();
var CDK_DRAG_CONFIG = new InjectionToken("CDK_DRAG_CONFIG");
var DRAG_HOST_CLASS = "cdk-drag";
var CDK_DROP_LIST = new InjectionToken("CdkDropList");
var _CdkDrag = class _CdkDrag {
  /** Whether starting to drag this element is disabled. */
  get disabled() {
    return this._disabled || this.dropContainer && this.dropContainer.disabled;
  }
  set disabled(value) {
    this._disabled = value;
    this._dragRef.disabled = this._disabled;
  }
  constructor(element, dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {
    this.element = element;
    this.dropContainer = dropContainer;
    this._ngZone = _ngZone;
    this._viewContainerRef = _viewContainerRef;
    this._dir = _dir;
    this._changeDetectorRef = _changeDetectorRef;
    this._selfHandle = _selfHandle;
    this._parentDrag = _parentDrag;
    this._destroyed = new Subject();
    this._handles = new BehaviorSubject([]);
    this.started = new EventEmitter();
    this.released = new EventEmitter();
    this.ended = new EventEmitter();
    this.entered = new EventEmitter();
    this.exited = new EventEmitter();
    this.dropped = new EventEmitter();
    this.moved = new Observable((observer) => {
      const subscription = this._dragRef.moved.pipe(map((movedEvent) => ({
        source: this,
        pointerPosition: movedEvent.pointerPosition,
        event: movedEvent.event,
        delta: movedEvent.delta,
        distance: movedEvent.distance
      }))).subscribe(observer);
      return () => {
        subscription.unsubscribe();
      };
    });
    this._dragRef = dragDrop.createDrag(element, {
      dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,
      pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ? config.pointerDirectionChangeThreshold : 5,
      zIndex: config?.zIndex
    });
    this._dragRef.data = this;
    _CdkDrag._dragInstances.push(this);
    if (config) {
      this._assignDefaults(config);
    }
    if (dropContainer) {
      this._dragRef._withDropContainer(dropContainer._dropListRef);
      dropContainer.addItem(this);
    }
    this._syncInputs(this._dragRef);
    this._handleEvents(this._dragRef);
  }
  /**
   * Returns the element that is being used as a placeholder
   * while the current element is being dragged.
   */
  getPlaceholderElement() {
    return this._dragRef.getPlaceholderElement();
  }
  /** Returns the root draggable element. */
  getRootElement() {
    return this._dragRef.getRootElement();
  }
  /** Resets a standalone drag item to its initial position. */
  reset() {
    this._dragRef.reset();
  }
  /**
   * Gets the pixel coordinates of the draggable outside of a drop container.
   */
  getFreeDragPosition() {
    return this._dragRef.getFreeDragPosition();
  }
  /**
   * Sets the current position in pixels the draggable outside of a drop container.
   * @param value New position to be set.
   */
  setFreeDragPosition(value) {
    this._dragRef.setFreeDragPosition(value);
  }
  ngAfterViewInit() {
    this._ngZone.runOutsideAngular(() => {
      this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {
        this._updateRootElement();
        this._setupHandlesListener();
        if (this.freeDragPosition) {
          this._dragRef.setFreeDragPosition(this.freeDragPosition);
        }
      });
    });
  }
  ngOnChanges(changes) {
    const rootSelectorChange = changes["rootElementSelector"];
    const positionChange = changes["freeDragPosition"];
    if (rootSelectorChange && !rootSelectorChange.firstChange) {
      this._updateRootElement();
    }
    if (positionChange && !positionChange.firstChange && this.freeDragPosition) {
      this._dragRef.setFreeDragPosition(this.freeDragPosition);
    }
  }
  ngOnDestroy() {
    if (this.dropContainer) {
      this.dropContainer.removeItem(this);
    }
    const index = _CdkDrag._dragInstances.indexOf(this);
    if (index > -1) {
      _CdkDrag._dragInstances.splice(index, 1);
    }
    this._ngZone.runOutsideAngular(() => {
      this._handles.complete();
      this._destroyed.next();
      this._destroyed.complete();
      this._dragRef.dispose();
    });
  }
  _addHandle(handle) {
    const handles = this._handles.getValue();
    handles.push(handle);
    this._handles.next(handles);
  }
  _removeHandle(handle) {
    const handles = this._handles.getValue();
    const index = handles.indexOf(handle);
    if (index > -1) {
      handles.splice(index, 1);
      this._handles.next(handles);
    }
  }
  _setPreviewTemplate(preview) {
    this._previewTemplate = preview;
  }
  _resetPreviewTemplate(preview) {
    if (preview === this._previewTemplate) {
      this._previewTemplate = null;
    }
  }
  _setPlaceholderTemplate(placeholder) {
    this._placeholderTemplate = placeholder;
  }
  _resetPlaceholderTemplate(placeholder) {
    if (placeholder === this._placeholderTemplate) {
      this._placeholderTemplate = null;
    }
  }
  /** Syncs the root element with the `DragRef`. */
  _updateRootElement() {
    const element = this.element.nativeElement;
    let rootElement = element;
    if (this.rootElementSelector) {
      rootElement = element.closest !== void 0 ? element.closest(this.rootElementSelector) : (
        // Comment tag doesn't have closest method, so use parent's one.
        element.parentElement?.closest(this.rootElementSelector)
      );
    }
    if (rootElement && (typeof ngDevMode === "undefined" || ngDevMode)) {
      assertElementNode(rootElement, "cdkDrag");
    }
    this._dragRef.withRootElement(rootElement || element);
  }
  /** Gets the boundary element, based on the `boundaryElement` value. */
  _getBoundaryElement() {
    const boundary = this.boundaryElement;
    if (!boundary) {
      return null;
    }
    if (typeof boundary === "string") {
      return this.element.nativeElement.closest(boundary);
    }
    return coerceElement(boundary);
  }
  /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */
  _syncInputs(ref) {
    ref.beforeStarted.subscribe(() => {
      if (!ref.isDragging()) {
        const dir = this._dir;
        const dragStartDelay = this.dragStartDelay;
        const placeholder = this._placeholderTemplate ? {
          template: this._placeholderTemplate.templateRef,
          context: this._placeholderTemplate.data,
          viewContainer: this._viewContainerRef
        } : null;
        const preview = this._previewTemplate ? {
          template: this._previewTemplate.templateRef,
          context: this._previewTemplate.data,
          matchSize: this._previewTemplate.matchSize,
          viewContainer: this._viewContainerRef
        } : null;
        ref.disabled = this.disabled;
        ref.lockAxis = this.lockAxis;
        ref.dragStartDelay = typeof dragStartDelay === "object" && dragStartDelay ? dragStartDelay : coerceNumberProperty(dragStartDelay);
        ref.constrainPosition = this.constrainPosition;
        ref.previewClass = this.previewClass;
        ref.withBoundaryElement(this._getBoundaryElement()).withPlaceholderTemplate(placeholder).withPreviewTemplate(preview).withPreviewContainer(this.previewContainer || "global");
        if (dir) {
          ref.withDirection(dir.value);
        }
      }
    });
    ref.beforeStarted.pipe(take(1)).subscribe(() => {
      if (this._parentDrag) {
        ref.withParent(this._parentDrag._dragRef);
        return;
      }
      let parent = this.element.nativeElement.parentElement;
      while (parent) {
        if (parent.classList.contains(DRAG_HOST_CLASS)) {
          ref.withParent(_CdkDrag._dragInstances.find((drag) => {
            return drag.element.nativeElement === parent;
          })?._dragRef || null);
          break;
        }
        parent = parent.parentElement;
      }
    });
  }
  /** Handles the events from the underlying `DragRef`. */
  _handleEvents(ref) {
    ref.started.subscribe((startEvent) => {
      this.started.emit({
        source: this,
        event: startEvent.event
      });
      this._changeDetectorRef.markForCheck();
    });
    ref.released.subscribe((releaseEvent) => {
      this.released.emit({
        source: this,
        event: releaseEvent.event
      });
    });
    ref.ended.subscribe((endEvent) => {
      this.ended.emit({
        source: this,
        distance: endEvent.distance,
        dropPoint: endEvent.dropPoint,
        event: endEvent.event
      });
      this._changeDetectorRef.markForCheck();
    });
    ref.entered.subscribe((enterEvent) => {
      this.entered.emit({
        container: enterEvent.container.data,
        item: this,
        currentIndex: enterEvent.currentIndex
      });
    });
    ref.exited.subscribe((exitEvent) => {
      this.exited.emit({
        container: exitEvent.container.data,
        item: this
      });
    });
    ref.dropped.subscribe((dropEvent) => {
      this.dropped.emit({
        previousIndex: dropEvent.previousIndex,
        currentIndex: dropEvent.currentIndex,
        previousContainer: dropEvent.previousContainer.data,
        container: dropEvent.container.data,
        isPointerOverContainer: dropEvent.isPointerOverContainer,
        item: this,
        distance: dropEvent.distance,
        dropPoint: dropEvent.dropPoint,
        event: dropEvent.event
      });
    });
  }
  /** Assigns the default input values based on a provided config object. */
  _assignDefaults(config) {
    const {
      lockAxis,
      dragStartDelay,
      constrainPosition,
      previewClass,
      boundaryElement,
      draggingDisabled,
      rootElementSelector,
      previewContainer
    } = config;
    this.disabled = draggingDisabled == null ? false : draggingDisabled;
    this.dragStartDelay = dragStartDelay || 0;
    if (lockAxis) {
      this.lockAxis = lockAxis;
    }
    if (constrainPosition) {
      this.constrainPosition = constrainPosition;
    }
    if (previewClass) {
      this.previewClass = previewClass;
    }
    if (boundaryElement) {
      this.boundaryElement = boundaryElement;
    }
    if (rootElementSelector) {
      this.rootElementSelector = rootElementSelector;
    }
    if (previewContainer) {
      this.previewContainer = previewContainer;
    }
  }
  /** Sets up the listener that syncs the handles with the drag ref. */
  _setupHandlesListener() {
    this._handles.pipe(
      // Sync the new handles with the DragRef.
      tap((handles) => {
        const handleElements = handles.map((handle) => handle.element);
        if (this._selfHandle && this.rootElementSelector) {
          handleElements.push(this.element);
        }
        this._dragRef.withHandles(handleElements);
      }),
      // Listen if the state of any of the handles changes.
      switchMap((handles) => {
        return merge(...handles.map((item) => item._stateChanges.pipe(startWith(item))));
      }),
      takeUntil(this._destroyed)
    ).subscribe((handleInstance) => {
      const dragRef = this._dragRef;
      const handle = handleInstance.element.nativeElement;
      handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);
    });
  }
};
_CdkDrag._dragInstances = [];
_CdkDrag.ɵfac = function CdkDrag_Factory(t161) {
  return new (t161 || _CdkDrag)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵɵdirectiveInject(Directionality, 8), ɵɵdirectiveInject(DragDrop), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), ɵɵdirectiveInject(CDK_DRAG_PARENT, 12));
};
_CdkDrag.ɵdir = ɵɵdefineDirective({
  type: _CdkDrag,
  selectors: [["", "cdkDrag", ""]],
  hostAttrs: [1, "cdk-drag"],
  hostVars: 4,
  hostBindings: function CdkDrag_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("cdk-drag-disabled", ctx.disabled)("cdk-drag-dragging", ctx._dragRef.isDragging());
    }
  },
  inputs: {
    data: [InputFlags.None, "cdkDragData", "data"],
    lockAxis: [InputFlags.None, "cdkDragLockAxis", "lockAxis"],
    rootElementSelector: [InputFlags.None, "cdkDragRootElement", "rootElementSelector"],
    boundaryElement: [InputFlags.None, "cdkDragBoundary", "boundaryElement"],
    dragStartDelay: [InputFlags.None, "cdkDragStartDelay", "dragStartDelay"],
    freeDragPosition: [InputFlags.None, "cdkDragFreeDragPosition", "freeDragPosition"],
    disabled: [InputFlags.HasDecoratorInputTransform, "cdkDragDisabled", "disabled", booleanAttribute],
    constrainPosition: [InputFlags.None, "cdkDragConstrainPosition", "constrainPosition"],
    previewClass: [InputFlags.None, "cdkDragPreviewClass", "previewClass"],
    previewContainer: [InputFlags.None, "cdkDragPreviewContainer", "previewContainer"]
  },
  outputs: {
    started: "cdkDragStarted",
    released: "cdkDragReleased",
    ended: "cdkDragEnded",
    entered: "cdkDragEntered",
    exited: "cdkDragExited",
    dropped: "cdkDragDropped",
    moved: "cdkDragMoved"
  },
  exportAs: ["cdkDrag"],
  standalone: true,
  features: [ɵɵProvidersFeature([{
    provide: CDK_DRAG_PARENT,
    useExisting: _CdkDrag
  }]), ɵɵInputTransformsFeature, ɵɵNgOnChangesFeature]
});
var CdkDrag = _CdkDrag;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkDrag, [{
    type: Directive,
    args: [{
      selector: "[cdkDrag]",
      exportAs: "cdkDrag",
      standalone: true,
      host: {
        "class": DRAG_HOST_CLASS,
        "[class.cdk-drag-disabled]": "disabled",
        "[class.cdk-drag-dragging]": "_dragRef.isDragging()"
      },
      providers: [{
        provide: CDK_DRAG_PARENT,
        useExisting: CdkDrag
      }]
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [CDK_DROP_LIST]
    }, {
      type: Optional
    }, {
      type: SkipSelf
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT]
    }]
  }, {
    type: NgZone
  }, {
    type: ViewContainerRef
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [CDK_DRAG_CONFIG]
    }]
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }, {
    type: DragDrop
  }, {
    type: ChangeDetectorRef
  }, {
    type: CdkDragHandle,
    decorators: [{
      type: Optional
    }, {
      type: Self
    }, {
      type: Inject,
      args: [CDK_DRAG_HANDLE]
    }]
  }, {
    type: CdkDrag,
    decorators: [{
      type: Optional
    }, {
      type: SkipSelf
    }, {
      type: Inject,
      args: [CDK_DRAG_PARENT]
    }]
  }], {
    data: [{
      type: Input,
      args: ["cdkDragData"]
    }],
    lockAxis: [{
      type: Input,
      args: ["cdkDragLockAxis"]
    }],
    rootElementSelector: [{
      type: Input,
      args: ["cdkDragRootElement"]
    }],
    boundaryElement: [{
      type: Input,
      args: ["cdkDragBoundary"]
    }],
    dragStartDelay: [{
      type: Input,
      args: ["cdkDragStartDelay"]
    }],
    freeDragPosition: [{
      type: Input,
      args: ["cdkDragFreeDragPosition"]
    }],
    disabled: [{
      type: Input,
      args: [{
        alias: "cdkDragDisabled",
        transform: booleanAttribute
      }]
    }],
    constrainPosition: [{
      type: Input,
      args: ["cdkDragConstrainPosition"]
    }],
    previewClass: [{
      type: Input,
      args: ["cdkDragPreviewClass"]
    }],
    previewContainer: [{
      type: Input,
      args: ["cdkDragPreviewContainer"]
    }],
    started: [{
      type: Output,
      args: ["cdkDragStarted"]
    }],
    released: [{
      type: Output,
      args: ["cdkDragReleased"]
    }],
    ended: [{
      type: Output,
      args: ["cdkDragEnded"]
    }],
    entered: [{
      type: Output,
      args: ["cdkDragEntered"]
    }],
    exited: [{
      type: Output,
      args: ["cdkDragExited"]
    }],
    dropped: [{
      type: Output,
      args: ["cdkDragDropped"]
    }],
    moved: [{
      type: Output,
      args: ["cdkDragMoved"]
    }]
  });
})();
var CDK_DROP_LIST_GROUP = new InjectionToken("CdkDropListGroup");
var _CdkDropListGroup = class _CdkDropListGroup {
  constructor() {
    this._items = /* @__PURE__ */ new Set();
    this.disabled = false;
  }
  ngOnDestroy() {
    this._items.clear();
  }
};
_CdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t161) {
  return new (t161 || _CdkDropListGroup)();
};
_CdkDropListGroup.ɵdir = ɵɵdefineDirective({
  type: _CdkDropListGroup,
  selectors: [["", "cdkDropListGroup", ""]],
  inputs: {
    disabled: [InputFlags.HasDecoratorInputTransform, "cdkDropListGroupDisabled", "disabled", booleanAttribute]
  },
  exportAs: ["cdkDropListGroup"],
  standalone: true,
  features: [ɵɵProvidersFeature([{
    provide: CDK_DROP_LIST_GROUP,
    useExisting: _CdkDropListGroup
  }]), ɵɵInputTransformsFeature]
});
var CdkDropListGroup = _CdkDropListGroup;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkDropListGroup, [{
    type: Directive,
    args: [{
      selector: "[cdkDropListGroup]",
      exportAs: "cdkDropListGroup",
      standalone: true,
      providers: [{
        provide: CDK_DROP_LIST_GROUP,
        useExisting: CdkDropListGroup
      }]
    }]
  }], null, {
    disabled: [{
      type: Input,
      args: [{
        alias: "cdkDropListGroupDisabled",
        transform: booleanAttribute
      }]
    }]
  });
})();
var _uniqueIdCounter = 0;
var _CdkDropList = class _CdkDropList {
  /** Whether starting a dragging sequence from this container is disabled. */
  get disabled() {
    return this._disabled || !!this._group && this._group.disabled;
  }
  set disabled(value) {
    this._dropListRef.disabled = this._disabled = value;
  }
  constructor(element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {
    this.element = element;
    this._changeDetectorRef = _changeDetectorRef;
    this._scrollDispatcher = _scrollDispatcher;
    this._dir = _dir;
    this._group = _group;
    this._destroyed = new Subject();
    this.connectedTo = [];
    this.id = `cdk-drop-list-${_uniqueIdCounter++}`;
    this.enterPredicate = () => true;
    this.sortPredicate = () => true;
    this.dropped = new EventEmitter();
    this.entered = new EventEmitter();
    this.exited = new EventEmitter();
    this.sorted = new EventEmitter();
    this._unsortedItems = /* @__PURE__ */ new Set();
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      assertElementNode(element.nativeElement, "cdkDropList");
    }
    this._dropListRef = dragDrop.createDropList(element);
    this._dropListRef.data = this;
    if (config) {
      this._assignDefaults(config);
    }
    this._dropListRef.enterPredicate = (drag, drop) => {
      return this.enterPredicate(drag.data, drop.data);
    };
    this._dropListRef.sortPredicate = (index, drag, drop) => {
      return this.sortPredicate(index, drag.data, drop.data);
    };
    this._setupInputSyncSubscription(this._dropListRef);
    this._handleEvents(this._dropListRef);
    _CdkDropList._dropLists.push(this);
    if (_group) {
      _group._items.add(this);
    }
  }
  /** Registers an items with the drop list. */
  addItem(item) {
    this._unsortedItems.add(item);
    if (this._dropListRef.isDragging()) {
      this._syncItemsWithRef();
    }
  }
  /** Removes an item from the drop list. */
  removeItem(item) {
    this._unsortedItems.delete(item);
    if (this._dropListRef.isDragging()) {
      this._syncItemsWithRef();
    }
  }
  /** Gets the registered items in the list, sorted by their position in the DOM. */
  getSortedItems() {
    return Array.from(this._unsortedItems).sort((a103, b8) => {
      const documentPosition = a103._dragRef.getVisibleElement().compareDocumentPosition(b8._dragRef.getVisibleElement());
      return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;
    });
  }
  ngOnDestroy() {
    const index = _CdkDropList._dropLists.indexOf(this);
    if (index > -1) {
      _CdkDropList._dropLists.splice(index, 1);
    }
    if (this._group) {
      this._group._items.delete(this);
    }
    this._unsortedItems.clear();
    this._dropListRef.dispose();
    this._destroyed.next();
    this._destroyed.complete();
  }
  /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */
  _setupInputSyncSubscription(ref) {
    if (this._dir) {
      this._dir.change.pipe(startWith(this._dir.value), takeUntil(this._destroyed)).subscribe((value) => ref.withDirection(value));
    }
    ref.beforeStarted.subscribe(() => {
      const siblings = coerceArray(this.connectedTo).map((drop) => {
        if (typeof drop === "string") {
          const correspondingDropList = _CdkDropList._dropLists.find((list) => list.id === drop);
          if (!correspondingDropList && (typeof ngDevMode === "undefined" || ngDevMode)) {
            console.warn(`CdkDropList could not find connected drop list with id "${drop}"`);
          }
          return correspondingDropList;
        }
        return drop;
      });
      if (this._group) {
        this._group._items.forEach((drop) => {
          if (siblings.indexOf(drop) === -1) {
            siblings.push(drop);
          }
        });
      }
      if (!this._scrollableParentsResolved) {
        const scrollableParents = this._scrollDispatcher.getAncestorScrollContainers(this.element).map((scrollable) => scrollable.getElementRef().nativeElement);
        this._dropListRef.withScrollableParents(scrollableParents);
        this._scrollableParentsResolved = true;
      }
      ref.disabled = this.disabled;
      ref.lockAxis = this.lockAxis;
      ref.sortingDisabled = this.sortingDisabled;
      ref.autoScrollDisabled = this.autoScrollDisabled;
      ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);
      ref.connectedTo(siblings.filter((drop) => drop && drop !== this).map((list) => list._dropListRef)).withOrientation(this.orientation);
    });
  }
  /** Handles events from the underlying DropListRef. */
  _handleEvents(ref) {
    ref.beforeStarted.subscribe(() => {
      this._syncItemsWithRef();
      this._changeDetectorRef.markForCheck();
    });
    ref.entered.subscribe((event) => {
      this.entered.emit({
        container: this,
        item: event.item.data,
        currentIndex: event.currentIndex
      });
    });
    ref.exited.subscribe((event) => {
      this.exited.emit({
        container: this,
        item: event.item.data
      });
      this._changeDetectorRef.markForCheck();
    });
    ref.sorted.subscribe((event) => {
      this.sorted.emit({
        previousIndex: event.previousIndex,
        currentIndex: event.currentIndex,
        container: this,
        item: event.item.data
      });
    });
    ref.dropped.subscribe((dropEvent) => {
      this.dropped.emit({
        previousIndex: dropEvent.previousIndex,
        currentIndex: dropEvent.currentIndex,
        previousContainer: dropEvent.previousContainer.data,
        container: dropEvent.container.data,
        item: dropEvent.item.data,
        isPointerOverContainer: dropEvent.isPointerOverContainer,
        distance: dropEvent.distance,
        dropPoint: dropEvent.dropPoint,
        event: dropEvent.event
      });
      this._changeDetectorRef.markForCheck();
    });
    merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());
  }
  /** Assigns the default input values based on a provided config object. */
  _assignDefaults(config) {
    const {
      lockAxis,
      draggingDisabled,
      sortingDisabled,
      listAutoScrollDisabled,
      listOrientation
    } = config;
    this.disabled = draggingDisabled == null ? false : draggingDisabled;
    this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;
    this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;
    this.orientation = listOrientation || "vertical";
    if (lockAxis) {
      this.lockAxis = lockAxis;
    }
  }
  /** Syncs up the registered drag items with underlying drop list ref. */
  _syncItemsWithRef() {
    this._dropListRef.withItems(this.getSortedItems().map((item) => item._dragRef));
  }
};
_CdkDropList._dropLists = [];
_CdkDropList.ɵfac = function CdkDropList_Factory(t161) {
  return new (t161 || _CdkDropList)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(DragDrop), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ScrollDispatcher), ɵɵdirectiveInject(Directionality, 8), ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8));
};
_CdkDropList.ɵdir = ɵɵdefineDirective({
  type: _CdkDropList,
  selectors: [["", "cdkDropList", ""], ["cdk-drop-list"]],
  hostAttrs: [1, "cdk-drop-list"],
  hostVars: 7,
  hostBindings: function CdkDropList_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("id", ctx.id);
      ɵɵclassProp("cdk-drop-list-disabled", ctx.disabled)("cdk-drop-list-dragging", ctx._dropListRef.isDragging())("cdk-drop-list-receiving", ctx._dropListRef.isReceiving());
    }
  },
  inputs: {
    connectedTo: [InputFlags.None, "cdkDropListConnectedTo", "connectedTo"],
    data: [InputFlags.None, "cdkDropListData", "data"],
    orientation: [InputFlags.None, "cdkDropListOrientation", "orientation"],
    id: "id",
    lockAxis: [InputFlags.None, "cdkDropListLockAxis", "lockAxis"],
    disabled: [InputFlags.HasDecoratorInputTransform, "cdkDropListDisabled", "disabled", booleanAttribute],
    sortingDisabled: [InputFlags.HasDecoratorInputTransform, "cdkDropListSortingDisabled", "sortingDisabled", booleanAttribute],
    enterPredicate: [InputFlags.None, "cdkDropListEnterPredicate", "enterPredicate"],
    sortPredicate: [InputFlags.None, "cdkDropListSortPredicate", "sortPredicate"],
    autoScrollDisabled: [InputFlags.HasDecoratorInputTransform, "cdkDropListAutoScrollDisabled", "autoScrollDisabled", booleanAttribute],
    autoScrollStep: [InputFlags.None, "cdkDropListAutoScrollStep", "autoScrollStep"]
  },
  outputs: {
    dropped: "cdkDropListDropped",
    entered: "cdkDropListEntered",
    exited: "cdkDropListExited",
    sorted: "cdkDropListSorted"
  },
  exportAs: ["cdkDropList"],
  standalone: true,
  features: [ɵɵProvidersFeature([
    // Prevent child drop lists from picking up the same group as their parent.
    {
      provide: CDK_DROP_LIST_GROUP,
      useValue: void 0
    },
    {
      provide: CDK_DROP_LIST,
      useExisting: _CdkDropList
    }
  ]), ɵɵInputTransformsFeature]
});
var CdkDropList = _CdkDropList;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkDropList, [{
    type: Directive,
    args: [{
      selector: "[cdkDropList], cdk-drop-list",
      exportAs: "cdkDropList",
      standalone: true,
      providers: [
        // Prevent child drop lists from picking up the same group as their parent.
        {
          provide: CDK_DROP_LIST_GROUP,
          useValue: void 0
        },
        {
          provide: CDK_DROP_LIST,
          useExisting: CdkDropList
        }
      ],
      host: {
        "class": "cdk-drop-list",
        "[attr.id]": "id",
        "[class.cdk-drop-list-disabled]": "disabled",
        "[class.cdk-drop-list-dragging]": "_dropListRef.isDragging()",
        "[class.cdk-drop-list-receiving]": "_dropListRef.isReceiving()"
      }
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: DragDrop
  }, {
    type: ChangeDetectorRef
  }, {
    type: ScrollDispatcher
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }, {
    type: CdkDropListGroup,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [CDK_DROP_LIST_GROUP]
    }, {
      type: SkipSelf
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [CDK_DRAG_CONFIG]
    }]
  }], {
    connectedTo: [{
      type: Input,
      args: ["cdkDropListConnectedTo"]
    }],
    data: [{
      type: Input,
      args: ["cdkDropListData"]
    }],
    orientation: [{
      type: Input,
      args: ["cdkDropListOrientation"]
    }],
    id: [{
      type: Input
    }],
    lockAxis: [{
      type: Input,
      args: ["cdkDropListLockAxis"]
    }],
    disabled: [{
      type: Input,
      args: [{
        alias: "cdkDropListDisabled",
        transform: booleanAttribute
      }]
    }],
    sortingDisabled: [{
      type: Input,
      args: [{
        alias: "cdkDropListSortingDisabled",
        transform: booleanAttribute
      }]
    }],
    enterPredicate: [{
      type: Input,
      args: ["cdkDropListEnterPredicate"]
    }],
    sortPredicate: [{
      type: Input,
      args: ["cdkDropListSortPredicate"]
    }],
    autoScrollDisabled: [{
      type: Input,
      args: [{
        alias: "cdkDropListAutoScrollDisabled",
        transform: booleanAttribute
      }]
    }],
    autoScrollStep: [{
      type: Input,
      args: ["cdkDropListAutoScrollStep"]
    }],
    dropped: [{
      type: Output,
      args: ["cdkDropListDropped"]
    }],
    entered: [{
      type: Output,
      args: ["cdkDropListEntered"]
    }],
    exited: [{
      type: Output,
      args: ["cdkDropListExited"]
    }],
    sorted: [{
      type: Output,
      args: ["cdkDropListSorted"]
    }]
  });
})();
var CDK_DRAG_PREVIEW = new InjectionToken("CdkDragPreview");
var _CdkDragPreview = class _CdkDragPreview {
  constructor(templateRef) {
    this.templateRef = templateRef;
    this._drag = inject(CDK_DRAG_PARENT, {
      optional: true
    });
    this.matchSize = false;
    this._drag?._setPreviewTemplate(this);
  }
  ngOnDestroy() {
    this._drag?._resetPreviewTemplate(this);
  }
};
_CdkDragPreview.ɵfac = function CdkDragPreview_Factory(t161) {
  return new (t161 || _CdkDragPreview)(ɵɵdirectiveInject(TemplateRef));
};
_CdkDragPreview.ɵdir = ɵɵdefineDirective({
  type: _CdkDragPreview,
  selectors: [["ng-template", "cdkDragPreview", ""]],
  inputs: {
    data: "data",
    matchSize: [InputFlags.HasDecoratorInputTransform, "matchSize", "matchSize", booleanAttribute]
  },
  standalone: true,
  features: [ɵɵProvidersFeature([{
    provide: CDK_DRAG_PREVIEW,
    useExisting: _CdkDragPreview
  }]), ɵɵInputTransformsFeature]
});
var CdkDragPreview = _CdkDragPreview;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkDragPreview, [{
    type: Directive,
    args: [{
      selector: "ng-template[cdkDragPreview]",
      standalone: true,
      providers: [{
        provide: CDK_DRAG_PREVIEW,
        useExisting: CdkDragPreview
      }]
    }]
  }], () => [{
    type: TemplateRef
  }], {
    data: [{
      type: Input
    }],
    matchSize: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var CDK_DRAG_PLACEHOLDER = new InjectionToken("CdkDragPlaceholder");
var _CdkDragPlaceholder = class _CdkDragPlaceholder {
  constructor(templateRef) {
    this.templateRef = templateRef;
    this._drag = inject(CDK_DRAG_PARENT, {
      optional: true
    });
    this._drag?._setPlaceholderTemplate(this);
  }
  ngOnDestroy() {
    this._drag?._resetPlaceholderTemplate(this);
  }
};
_CdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t161) {
  return new (t161 || _CdkDragPlaceholder)(ɵɵdirectiveInject(TemplateRef));
};
_CdkDragPlaceholder.ɵdir = ɵɵdefineDirective({
  type: _CdkDragPlaceholder,
  selectors: [["ng-template", "cdkDragPlaceholder", ""]],
  inputs: {
    data: "data"
  },
  standalone: true,
  features: [ɵɵProvidersFeature([{
    provide: CDK_DRAG_PLACEHOLDER,
    useExisting: _CdkDragPlaceholder
  }])]
});
var CdkDragPlaceholder = _CdkDragPlaceholder;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkDragPlaceholder, [{
    type: Directive,
    args: [{
      selector: "ng-template[cdkDragPlaceholder]",
      standalone: true,
      providers: [{
        provide: CDK_DRAG_PLACEHOLDER,
        useExisting: CdkDragPlaceholder
      }]
    }]
  }], () => [{
    type: TemplateRef
  }], {
    data: [{
      type: Input
    }]
  });
})();
var DRAG_DROP_DIRECTIVES = [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder];
var _DragDropModule = class _DragDropModule {
};
_DragDropModule.ɵfac = function DragDropModule_Factory(t161) {
  return new (t161 || _DragDropModule)();
};
_DragDropModule.ɵmod = ɵɵdefineNgModule({
  type: _DragDropModule,
  imports: [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder],
  exports: [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]
});
_DragDropModule.ɵinj = ɵɵdefineInjector({
  providers: [DragDrop],
  imports: [CdkScrollableModule]
});
var DragDropModule = _DragDropModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DragDropModule, [{
    type: NgModule,
    args: [{
      imports: DRAG_DROP_DIRECTIVES,
      exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],
      providers: [DragDrop]
    }]
  }], null, null);
})();

// node_modules/@cds/core/icon/register.js
w4("cds-icon", v5);

// node_modules/@cds/core/button-action/button-action.element.scss.js
var t160 = css`:host{--icon-width:var(--cds-global-space-7, calc(16 * 1rem / var(--cds-global-base, 20)));--icon-height:var(--cds-global-space-7, calc(16 * 1rem / var(--cds-global-base, 20)));--width:var(--icon-width);--height:var(--icon-width);--cursor:pointer;--color:var(--cds-global-typography-color-300, var(--cds-global-color-construction-800, #2d4048));--font-size:var(--cds-global-typography-font-size-3, calc(13 * 1rem / var(--cds-global-base, 20)));--background:transparent;--padding:0;--outline:var(--cds-alias-object-interaction-outline, Highlight solid 2px);--outline-offset:calc(var(--cds-alias-object-interaction-outline-offset, 1px) * -1);pointer-events:none;display:inline-block;outline:0!important}:host([role=button]){pointer-events:initial;cursor:var(--cursor)!important}:host([status=active]){--color:var(--cds-alias-status-info, var(--cds-global-color-blue-700, #0079ad))}::slotted([shape=close]),::slotted([shape=info-circle]),::slotted([shape=times]),:host([shape=close]),:host([shape=info-circle]){--icon-width:var(--cds-global-space-8, calc(18 * 1rem / var(--cds-global-base, 20)));--icon-height:var(--cds-global-space-8, calc(18 * 1rem / var(--cds-global-base, 20)))}:host(:hover){--color:var(--cds-alias-object-interaction-color-hover, var(--cds-global-color-construction-1000, #1b2b32))}:host(:active){--color:var(--cds-alias-object-interaction-color-active, var(--cds-global-color-construction-1000, #1b2b32))}:host(:active) .private-host{transform:translateY(calc(var(--cds-global-space-1,calc(1 * 1rem / var(--cds-global-base,20)))/ 2))}:host([disabled]){--color:var(--cds-alias-object-interaction-color-disabled, var(--cds-global-color-construction-300, #aeb8bc))}.private-host{--icon-color:var(--color);background:var(--background);padding:var(--padding);color:var(--color);font-size:var(--font-size);display:flex;justify-content:center;align-items:center;min-width:var(--width);min-height:var(--height)}::slotted(cds-icon),cds-icon{width:var(--icon-width);height:var(--icon-height);pointer-events:none}::slotted(cds-icon:not([status])),cds-icon{--color:var(--icon-color)}:host([disabled]:active){pointer-events:none!important}.private-host::after{content:"";position:absolute;left:calc(-1*var(--width) - 1);top:calc(-1*var(--height) - 1);width:var(--cds-alias-object-interaction-touch-target,calc(36 * 1rem / var(--cds-global-base,20)));height:var(--cds-alias-object-interaction-touch-target,calc(36 * 1rem / var(--cds-global-base,20)))}:host([disabled]) .private-host::after{outline:0!important}:host(:focus) .private-host::after{outline:var(--outline);outline-offset:var(--outline-offset)}@media (-webkit-min-device-pixel-ratio:0){:host(:focus) .private-host::after{outline-color:-webkit-focus-ring-color;outline-style:auto}}`;

// node_modules/@cds/core/button-action/button-action.element.js
var c44 = class extends m3 {
  constructor() {
    super(...arguments);
    this.i18n = a11.keys.actions, this.cdsButtonAction = true;
  }
  render() {
    return html`<div class="private-host"><slot><cds-icon .shape="${this.shape ? this.shape : "ellipsis-vertical"}" .size="${this.iconSize}" ?solid="${this.pressed || this.expanded}" inner-offset="${1}"></cds-icon></slot></div>`;
  }
  updated(t161) {
    super.updated(t161), this.ariaLabel || this.readonly || n2.warn("A aria-label is required for interactive cds-button-action type", this), t161.has("readonly") && (this.readonly && !this.hasAttribute("aria-label") ? this.ariaHidden = "true" : this.ariaHidden = null);
  }
};
c44.styles = [o27, t160], __decorate([m2({ type: String })], c44.prototype, "shape", void 0), __decorate([m2({ type: String, reflect: true })], c44.prototype, "action", void 0), __decorate([m2({ type: String })], c44.prototype, "iconSize", void 0), __decorate([o9()], c44.prototype, "i18n", void 0), __decorate([p2({ type: Boolean, reflect: true, attribute: "cds-button-action" })], c44.prototype, "cdsButtonAction", void 0);

// node_modules/@cds/core/internal-components/close-button/close-button.element.js
var s26 = "cds-internal-close-button";
var r93 = class extends c44 {
  constructor() {
    super(...arguments);
    this.shape = "close";
  }
  connectedCallback() {
    super.connectedCallback(), this.ariaLabel = this.ariaLabel ? this.ariaLabel : this.i18n.close;
  }
};
__decorate([m2({ type: String })], r93.prototype, "shape", void 0);

// node_modules/@cds/core/internal-components/close-button/register.js
w4(s26, r93), r24.addIcons(o34), r24.addAliases(["times", ["close"]]);

// node_modules/@clr/angular/fesm2020/clr-angular.mjs
var _c02 = ["*"];
var _c12 = [[["clr-accordion-title"], ["clr-step-title"]], [["clr-accordion-description"], ["clr-step-description"]], "*"];
var _c22 = ["clr-accordion-title, clr-step-title", "clr-accordion-description, clr-step-description", "*"];
function ClrAccordionPanel_ng_container_0_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵadvance();
    ɵɵtextInterpolate(ctx_r1.commonStrings.keys.danger);
  }
}
function ClrAccordionPanel_ng_container_0_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵadvance();
    ɵɵtextInterpolate(ctx_r1.commonStrings.keys.success);
  }
}
function ClrAccordionPanel_ng_container_0_div_18_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 13);
    ɵɵlistener("@toggle.done", function ClrAccordionPanel_ng_container_0_div_18_Template_div_animation_toggle_done_0_listener() {
      ɵɵrestoreView(_r3);
      const panel_r4 = ɵɵnextContext().$implicit;
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.collapsePanelOnAnimationDone(panel_r4));
    });
    ɵɵelementStart(1, "div", 14);
    ɵɵprojection(2, 2);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    ɵɵproperty("@toggle", void 0);
  }
}
function ClrAccordionPanel_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "div", 2)(2, "div", 3)(3, "button", 4, 0);
    ɵɵpipe(5, "async");
    ɵɵlistener("click", function ClrAccordionPanel_ng_container_0_Template_button_click_3_listener() {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.togglePanel());
    });
    ɵɵelementStart(6, "span", 5);
    ɵɵtemplate(7, ClrAccordionPanel_ng_container_0_ng_container_7_Template, 2, 1, "ng-container", 1)(8, ClrAccordionPanel_ng_container_0_ng_container_8_Template, 2, 1, "ng-container", 1);
    ɵɵelementEnd();
    ɵɵelementStart(9, "span", 6);
    ɵɵelement(10, "cds-icon", 7);
    ɵɵelementStart(11, "span", 8);
    ɵɵtext(12);
    ɵɵelementEnd();
    ɵɵelement(13, "cds-icon", 9)(14, "cds-icon", 10);
    ɵɵelementEnd();
    ɵɵprojection(15);
    ɵɵprojection(16, 1);
    ɵɵelementEnd()();
    ɵɵelementStart(17, "div", 11);
    ɵɵtemplate(18, ClrAccordionPanel_ng_container_0_div_18_Template, 3, 1, "div", 12);
    ɵɵelementEnd()();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const panel_r4 = ctx.$implicit;
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵproperty("ngClass", ctx_r1.getPanelStateClasses(panel_r4));
    ɵɵadvance(2);
    ɵɵclassProp("clr-accordion-header-has-description", ((tmp_4_0 = ɵɵpipeBind1(5, 16, ctx_r1.accordionDescription.changes)) == null ? null : tmp_4_0.length) || ctx_r1.accordionDescription.length);
    ɵɵproperty("id", ctx_r1.getAccordionHeaderId(panel_r4.templateId))("disabled", ctx_r1.isAccordion && panel_r4.disabled);
    ɵɵattribute("aria-disabled", !ctx_r1.isAccordion && panel_r4.disabled)("aria-controls", ctx_r1.getAccordionContentId(panel_r4.templateId))("aria-expanded", panel_r4.open);
    ɵɵadvance(4);
    ɵɵproperty("ngIf", panel_r4.status === ctx_r1.AccordionStatus.Error);
    ɵɵadvance();
    ɵɵproperty("ngIf", panel_r4.status === ctx_r1.AccordionStatus.Complete);
    ɵɵadvance(4);
    ɵɵtextInterpolate1("", ctx_r1.panelNumber, ".");
    ɵɵadvance(5);
    ɵɵproperty("@skipInitialRender", void 0)("id", ctx_r1.getAccordionContentId(panel_r4.templateId));
    ɵɵattribute("aria-hidden", !panel_r4.open)("aria-labelledby", ctx_r1.getAccordionHeaderId(panel_r4.templateId));
    ɵɵadvance();
    ɵɵproperty("ngIf", panel_r4.open);
  }
}
var _c32 = ["headerButton"];
function ClrStepperPanel_ng_container_0_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵadvance();
    ɵɵtextInterpolate(ctx_r1.commonStrings.keys.danger);
  }
}
function ClrStepperPanel_ng_container_0_ng_container_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵadvance();
    ɵɵtextInterpolate(ctx_r1.commonStrings.keys.success);
  }
}
function ClrStepperPanel_ng_container_0_div_18_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 13);
    ɵɵlistener("@toggle.done", function ClrStepperPanel_ng_container_0_div_18_Template_div_animation_toggle_done_0_listener() {
      ɵɵrestoreView(_r3);
      const panel_r4 = ɵɵnextContext().$implicit;
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.collapsePanelOnAnimationDone(panel_r4));
    });
    ɵɵelementStart(1, "div", 14);
    ɵɵprojection(2, 2);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    ɵɵproperty("@toggle", void 0);
  }
}
function ClrStepperPanel_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "div", 2)(2, "div", 3)(3, "button", 4, 0);
    ɵɵpipe(5, "async");
    ɵɵlistener("click", function ClrStepperPanel_ng_container_0_Template_button_click_3_listener() {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.togglePanel());
    });
    ɵɵelementStart(6, "span", 5);
    ɵɵtemplate(7, ClrStepperPanel_ng_container_0_ng_container_7_Template, 2, 1, "ng-container", 1)(8, ClrStepperPanel_ng_container_0_ng_container_8_Template, 2, 1, "ng-container", 1);
    ɵɵelementEnd();
    ɵɵelementStart(9, "span", 6);
    ɵɵelement(10, "cds-icon", 7);
    ɵɵelementStart(11, "span", 8);
    ɵɵtext(12);
    ɵɵelementEnd();
    ɵɵelement(13, "cds-icon", 9)(14, "cds-icon", 10);
    ɵɵelementEnd();
    ɵɵprojection(15);
    ɵɵprojection(16, 1);
    ɵɵelementEnd()();
    ɵɵelementStart(17, "div", 11);
    ɵɵtemplate(18, ClrStepperPanel_ng_container_0_div_18_Template, 3, 1, "div", 12);
    ɵɵelementEnd()();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    let tmp_4_0;
    const panel_r4 = ctx.$implicit;
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵproperty("ngClass", ctx_r1.getPanelStateClasses(panel_r4));
    ɵɵadvance(2);
    ɵɵclassProp("clr-accordion-header-has-description", ((tmp_4_0 = ɵɵpipeBind1(5, 16, ctx_r1.accordionDescription.changes)) == null ? null : tmp_4_0.length) || ctx_r1.accordionDescription.length);
    ɵɵproperty("id", ctx_r1.getAccordionHeaderId(panel_r4.templateId))("disabled", ctx_r1.isAccordion && panel_r4.disabled);
    ɵɵattribute("aria-disabled", !ctx_r1.isAccordion && panel_r4.disabled)("aria-controls", ctx_r1.getAccordionContentId(panel_r4.templateId))("aria-expanded", panel_r4.open);
    ɵɵadvance(4);
    ɵɵproperty("ngIf", panel_r4.status === ctx_r1.AccordionStatus.Error);
    ɵɵadvance();
    ɵɵproperty("ngIf", panel_r4.status === ctx_r1.AccordionStatus.Complete);
    ɵɵadvance(4);
    ɵɵtextInterpolate1("", ctx_r1.panelNumber, ".");
    ɵɵadvance(5);
    ɵɵproperty("@skipInitialRender", void 0)("id", ctx_r1.getAccordionContentId(panel_r4.templateId));
    ɵɵattribute("aria-hidden", !panel_r4.open)("aria-labelledby", ctx_r1.getAccordionHeaderId(panel_r4.templateId));
    ɵɵadvance();
    ɵɵproperty("ngIf", panel_r4.open);
  }
}
var _c4 = ["clrStepper", ""];
var _c5 = ["buttonProjectedRef"];
function ClrButton_ng_template_0_span_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "span", 3);
  }
}
function ClrButton_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 1);
    ɵɵlistener("click", function ClrButton_ng_template_0_Template_button_click_0_listener() {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.emitClick());
    });
    ɵɵtemplate(1, ClrButton_ng_template_0_span_1_Template, 1, 0, "span", 2);
    ɵɵprojection(2);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵclassMap(ctx_r1.classNames);
    ɵɵattribute("type", ctx_r1.type)("name", ctx_r1.name)("disabled", ctx_r1.disabled)("role", ctx_r1.role)("id", ctx_r1.id);
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r1.loading);
  }
}
var _c6 = ["menuToggle"];
var _c7 = ["menu"];
function ClrButtonGroup_0_ng_template_0_Template(rf, ctx) {
}
function ClrButtonGroup_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, ClrButtonGroup_0_ng_template_0_Template, 0, 0, "ng-template", 4);
  }
  if (rf & 2) {
    const inlineButton_r1 = ctx.$implicit;
    ɵɵproperty("ngTemplateOutlet", inlineButton_r1.templateRef);
  }
}
function ClrButtonGroup_div_1_div_4_2_ng_template_0_Template(rf, ctx) {
}
function ClrButtonGroup_div_1_div_4_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, ClrButtonGroup_div_1_div_4_2_ng_template_0_Template, 0, 0, "ng-template", 4);
  }
  if (rf & 2) {
    const menuButton_r4 = ctx.$implicit;
    ɵɵproperty("ngTemplateOutlet", menuButton_r4.templateRef);
  }
}
function ClrButtonGroup_div_1_div_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 9, 1);
    ɵɵtemplate(2, ClrButtonGroup_div_1_div_4_2_Template, 1, 1, null, 2);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext(2);
    ɵɵproperty("id", ctx_r2.popoverId);
    ɵɵattribute("id", ctx_r2.popoverId)("aria-hidden", !ctx_r2.open);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r2.menuButtons);
  }
}
function ClrButtonGroup_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 5)(1, "button", 6, 0);
    ɵɵlistener("keydown.arrowup", function ClrButtonGroup_div_1_Template_button_keydown_arrowup_1_listener($event) {
      ɵɵrestoreView(_r2);
      const ctx_r2 = ɵɵnextContext();
      return ɵɵresetView(ctx_r2.openMenu($event, ctx_r2.InitialFocus.LAST_ITEM));
    })("keydown.arrowdown", function ClrButtonGroup_div_1_Template_button_keydown_arrowdown_1_listener($event) {
      ɵɵrestoreView(_r2);
      const ctx_r2 = ɵɵnextContext();
      return ɵɵresetView(ctx_r2.openMenu($event, ctx_r2.InitialFocus.FIRST_ITEM));
    });
    ɵɵelement(3, "cds-icon", 7);
    ɵɵelementEnd();
    ɵɵtemplate(4, ClrButtonGroup_div_1_div_4_Template, 3, 4, "div", 8);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("ngClass", ctx_r2.menuPosition);
    ɵɵadvance();
    ɵɵattribute("aria-controls", ctx_r2.popoverId)("aria-expanded", ctx_r2.open)("aria-label", ctx_r2.clrToggleButtonAriaLabel);
    ɵɵadvance(2);
    ɵɵattribute("title", ctx_r2.commonStrings.keys.more);
    ɵɵadvance();
    ɵɵproperty("clrPopoverContent", ctx_r2.open)("clrPopoverContentAt", ctx_r2.popoverPosition)("clrPopoverContentOutsideClickToClose", true)("clrPopoverContentScrollToClose", true);
  }
}
var _c8 = ["clrLoading", ""];
function ClrLoadingButton_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelement(1, "span", 3);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    ɵɵadvance();
    ɵɵproperty("@spinner", void 0);
  }
}
function ClrLoadingButton_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "span", 4);
    ɵɵlistener("@validated.done", function ClrLoadingButton_ng_container_2_Template_span_animation_validated_done_1_listener() {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.loadingStateChange(ctx_r1.buttonState.DEFAULT));
    });
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    ɵɵadvance();
    ɵɵproperty("@validated", void 0);
  }
}
function ClrLoadingButton_span_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 5);
    ɵɵprojection(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    ɵɵproperty("@defaultButton", void 0);
  }
}
var _c9 = [[["label"]], "*", [["clr-control-helper"]], [["clr-control-error"]], [["clr-control-success"]]];
var _c10 = ["label", "*", "clr-control-helper", "clr-control-error", "clr-control-success"];
function ClrControlContainer_label_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "label");
  }
}
function ClrControlContainer_cds_icon_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 5);
  }
}
function ClrControlContainer_cds_icon_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 6);
  }
}
function ClrControlContainer_ng_content_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 2, ["*ngIf", "showHelper"]);
  }
}
function ClrControlContainer_ng_content_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 3, ["*ngIf", "showInvalid"]);
  }
}
function ClrControlContainer_ng_content_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 4, ["*ngIf", "showValid"]);
  }
}
var _c11 = [[["", "clrCheckbox", ""], ["", "clrToggle", ""]], [["label"]]];
var _c122 = ["[clrCheckbox],[clrToggle]", "label"];
function ClrCheckboxWrapper_label_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "label");
  }
}
var _c13 = [[["label"]], [["clr-checkbox-wrapper"], ["clr-toggle-wrapper"]], [["clr-control-helper"]], [["clr-control-error"]], [["clr-control-success"]]];
var _c14 = ["label", "clr-checkbox-wrapper,clr-toggle-wrapper", "clr-control-helper", "clr-control-error", "clr-control-success"];
function ClrCheckboxContainer_label_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "label");
  }
}
function ClrCheckboxContainer_ng_content_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 2, ["*ngIf", "showHelper"]);
  }
}
function ClrCheckboxContainer_cds_icon_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 5);
  }
}
function ClrCheckboxContainer_cds_icon_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 6);
  }
}
function ClrCheckboxContainer_ng_content_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 3, ["*ngIf", "showInvalid"]);
  }
}
function ClrCheckboxContainer_ng_content_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 4, ["*ngIf", "showValid"]);
  }
}
var _c15 = ["clrKeyFocus", ""];
var _c16 = ["clrRovingTabindex", ""];
var _c17 = ["controlContainer"];
var _c18 = [[["label"]], [["clr-combobox"]], [["clr-control-helper"]], [["clr-control-error"]], [["clr-control-success"]]];
var _c19 = ["label", "clr-combobox", "clr-control-helper", "clr-control-error", "clr-control-success"];
function ClrComboboxContainer_label_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "label");
  }
}
function ClrComboboxContainer_cds_icon_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 5);
  }
}
function ClrComboboxContainer_cds_icon_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 6);
  }
}
function ClrComboboxContainer_ng_content_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 2, ["*ngIf", "showHelper"]);
  }
}
function ClrComboboxContainer_ng_content_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 3, ["*ngIf", "showInvalid"]);
  }
}
function ClrComboboxContainer_ng_content_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 4, ["*ngIf", "showValid"]);
  }
}
function ClrOption_span_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 1);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵtextInterpolate(ctx_r0.commonStrings.keys.comboboxSelected);
  }
}
function ClrOptions_div_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 2)(1, "clr-spinner", 3);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "span", 4);
    ɵɵtext(4);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r0.commonStrings.keys.loading, " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r0.searchText(ctx_r0.optionSelectionService.currentInput), " ");
  }
}
function ClrOptions_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div")(1, "span", 5);
    ɵɵtext(2);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r0.commonStrings.keys.comboboxNoResults, " ");
  }
}
var _c20 = ["textboxInput"];
var _c21 = ["trigger"];
var _c222 = (a0) => ({
  $implicit: a0
});
function ClrCombobox_span_1_span_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0, 18);
  }
  if (rf & 2) {
    const i_r3 = ɵɵnextContext().index;
    const ctx_r3 = ɵɵnextContext(2);
    ɵɵproperty("ngTemplateOutlet", ctx_r3.optionSelected.template)("ngTemplateOutletContext", ɵɵpureFunction1(2, _c222, ctx_r3.optionSelectionService.selectionModel.model[i_r3]));
  }
}
function ClrCombobox_span_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 12)(1, "span", 13)(2, "span", 14);
    ɵɵtemplate(3, ClrCombobox_span_1_span_1_ng_container_3_Template, 1, 4, "ng-container", 15);
    ɵɵelementEnd()();
    ɵɵelementStart(4, "span", 13)(5, "button", 16);
    ɵɵlistener("click", function ClrCombobox_span_1_span_1_Template_button_click_5_listener() {
      const item_r5 = ɵɵrestoreView(_r2).$implicit;
      const ctx_r3 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r3.unselect(item_r5));
    });
    ɵɵelement(6, "cds-icon", 17);
    ɵɵelementEnd()()();
  }
  if (rf & 2) {
    const i_r3 = ctx.index;
    const ctx_r3 = ɵɵnextContext(2);
    ɵɵadvance(3);
    ɵɵproperty("ngIf", ctx_r3.optionSelected);
    ɵɵadvance(2);
    ɵɵproperty("disabled", (ctx_r3.control == null ? null : ctx_r3.control.disabled) ? true : null);
    ɵɵattribute("aria-label", ctx_r3.commonStrings.keys.comboboxDelete + " " + ctx_r3.optionSelectionService.selectionModel.toString(ctx_r3.displayField, i_r3));
  }
}
function ClrCombobox_span_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 10);
    ɵɵtemplate(1, ClrCombobox_span_1_span_1_Template, 7, 3, "span", 11);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵproperty("clrRovingTabindexDisabled", ctx_r3.control == null ? null : ctx_r3.control.disabled);
    ɵɵattribute("aria-label", ctx_r3.getSelectionAriaLabel())("aria-disabled", (ctx_r3.control == null ? null : ctx_r3.control.disabled) ? true : null);
    ɵɵadvance();
    ɵɵproperty("ngForOf", ctx_r3.multiSelectModel);
  }
}
function ClrCombobox_div_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 19);
    ɵɵprojection(1);
    ɵɵelementEnd();
  }
}
var _c23 = [[["label"]], [["", "clrInput", ""]], [["clr-control-helper"]], [["clr-control-error"]], [["clr-control-success"]]];
var _c24 = ["label", "[clrInput]", "clr-control-helper", "clr-control-error", "clr-control-success"];
function ClrInputContainer_label_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "label");
  }
}
function ClrInputContainer_cds_icon_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 5);
  }
}
function ClrInputContainer_cds_icon_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 6);
  }
}
function ClrInputContainer_ng_content_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 2, ["*ngIf", "showHelper"]);
  }
}
function ClrInputContainer_ng_content_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 3, ["*ngIf", "showInvalid"]);
  }
}
function ClrInputContainer_ng_content_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 4, ["*ngIf", "showValid"]);
  }
}
var _c25 = [[["label"]], [["", "clrDatalistInput", ""]], [["datalist"]], [["clr-control-helper"]], [["clr-control-error"]], [["clr-control-success"]]];
var _c26 = ["label", "[clrDatalistInput]", "datalist", "clr-control-helper", "clr-control-error", "clr-control-success"];
function ClrDatalistContainer_label_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "label");
  }
}
function ClrDatalistContainer_cds_icon_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 7);
  }
}
function ClrDatalistContainer_cds_icon_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 8);
  }
}
function ClrDatalistContainer_ng_content_10_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 3, ["*ngIf", "showHelper"]);
  }
}
function ClrDatalistContainer_ng_content_11_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 4, ["*ngIf", "showInvalid"]);
  }
}
function ClrDatalistContainer_ng_content_12_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 5, ["*ngIf", "showValid"]);
  }
}
function ClrCalendar_th_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "th", 4)(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const day_r1 = ctx.$implicit;
    ɵɵadvance();
    ɵɵattribute("aria-label", day_r1.day);
    ɵɵadvance();
    ɵɵtextInterpolate(day_r1.narrow);
  }
}
function ClrCalendar_tr_3_td_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "td", 7);
    ɵɵelement(1, "clr-day", 8);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const dayView_r2 = ctx.$implicit;
    ɵɵadvance();
    ɵɵproperty("clrDayView", dayView_r2);
  }
}
function ClrCalendar_tr_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "tr", 5);
    ɵɵtemplate(1, ClrCalendar_tr_3_td_1_Template, 2, 1, "td", 6);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const row_r3 = ctx.$implicit;
    ɵɵadvance();
    ɵɵproperty("ngForOf", row_r3);
  }
}
function ClrMonthpicker_button_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 1);
    ɵɵlistener("click", function ClrMonthpicker_button_0_Template_button_click_0_listener() {
      const monthIndex_r2 = ɵɵrestoreView(_r1).index;
      const ctx_r2 = ɵɵnextContext();
      return ɵɵresetView(ctx_r2.changeMonth(monthIndex_r2));
    });
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const month_r4 = ctx.$implicit;
    const monthIndex_r2 = ctx.index;
    const ctx_r2 = ɵɵnextContext();
    ɵɵclassProp("is-selected", monthIndex_r2 === ctx_r2.calendarMonthIndex);
    ɵɵattribute("tabindex", ctx_r2.getTabIndex(monthIndex_r2));
    ɵɵadvance();
    ɵɵtextInterpolate1(" ", month_r4, " ");
  }
}
function ClrYearpicker_button_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 7);
    ɵɵlistener("click", function ClrYearpicker_button_8_Template_button_click_0_listener() {
      const year_r2 = ɵɵrestoreView(_r1).$implicit;
      const ctx_r2 = ɵɵnextContext();
      return ɵɵresetView(ctx_r2.changeYear(year_r2));
    });
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const year_r2 = ctx.$implicit;
    const ctx_r2 = ɵɵnextContext();
    ɵɵclassProp("is-selected", year_r2 === ctx_r2.calendarYear);
    ɵɵattribute("tabindex", ctx_r2.getTabIndex(year_r2));
    ɵɵadvance();
    ɵɵtextInterpolate1(" ", year_r2, " ");
  }
}
function ClrDatepickerViewManager_clr_monthpicker_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "clr-monthpicker");
  }
}
function ClrDatepickerViewManager_clr_yearpicker_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "clr-yearpicker");
  }
}
function ClrDatepickerViewManager_clr_daypicker_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "clr-daypicker");
  }
}
var _c27 = ["actionButton"];
var _c28 = [[["label"]], [["", "clrDate", ""]], [["clr-control-helper"]], [["clr-control-error"]], [["clr-control-success"]]];
var _c29 = ["label", "[clrDate]", "clr-control-helper", "clr-control-error", "clr-control-success"];
function ClrDateContainer_label_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "label");
  }
}
function ClrDateContainer_button_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "button", 9, 0);
    ɵɵelement(2, "cds-icon", 10);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("disabled", ctx_r0.isInputDateDisabled);
  }
}
function ClrDateContainer_clr_datepicker_view_manager_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "clr-datepicker-view-manager", 11);
  }
}
function ClrDateContainer_cds_icon_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 12);
  }
}
function ClrDateContainer_cds_icon_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 13);
  }
}
function ClrDateContainer_ng_content_10_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 2, ["*ngIf", "showHelper"]);
  }
}
function ClrDateContainer_ng_content_11_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 3, ["*ngIf", "showInvalid"]);
  }
}
function ClrDateContainer_ng_content_12_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 4, ["*ngIf", "showValid"]);
  }
}
var _c30 = [[["label"]], [["", "clrPassword", ""]], [["clr-control-helper"]], [["clr-control-error"]], [["clr-control-success"]]];
var _c31 = ["label", "[clrPassword]", "clr-control-helper", "clr-control-error", "clr-control-success"];
function ClrPasswordContainer_label_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "label");
  }
}
function ClrPasswordContainer_button_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 7);
    ɵɵlistener("click", function ClrPasswordContainer_button_6_Template_button_click_0_listener() {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.toggle());
    });
    ɵɵelement(1, "cds-icon", 8);
    ɵɵelementStart(2, "span", 9);
    ɵɵtext(3);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("disabled", ctx_r1.control == null ? null : ctx_r1.control.disabled);
    ɵɵadvance();
    ɵɵattribute("shape", ctx_r1.show ? "eye-hide" : "eye");
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r1.show ? ctx_r1.hidePasswordText(ctx_r1.label == null ? null : ctx_r1.label.labelText) : ctx_r1.showPasswordText(ctx_r1.label == null ? null : ctx_r1.label.labelText), " ");
  }
}
function ClrPasswordContainer_cds_icon_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 10);
  }
}
function ClrPasswordContainer_cds_icon_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 11);
  }
}
function ClrPasswordContainer_ng_content_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 2, ["*ngIf", "showHelper"]);
  }
}
function ClrPasswordContainer_ng_content_10_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 3, ["*ngIf", "showInvalid"]);
  }
}
function ClrPasswordContainer_ng_content_11_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 4, ["*ngIf", "showValid"]);
  }
}
var _c322 = [[["", "clrRadio", ""]], [["label"]]];
var _c33 = ["[clrRadio]", "label"];
function ClrRadioWrapper_label_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "label");
  }
}
var _c34 = [[["label"]], [["clr-radio-wrapper"]], [["clr-control-helper"]], [["clr-control-error"]], [["clr-control-success"]]];
var _c35 = ["label", "clr-radio-wrapper", "clr-control-helper", "clr-control-error", "clr-control-success"];
function ClrRadioContainer_label_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "label");
  }
}
function ClrRadioContainer_ng_content_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 2, ["*ngIf", "showHelper"]);
  }
}
function ClrRadioContainer_cds_icon_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 5);
  }
}
function ClrRadioContainer_cds_icon_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 6);
  }
}
function ClrRadioContainer_ng_content_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 3, ["*ngIf", "showInvalid"]);
  }
}
function ClrRadioContainer_ng_content_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 4, ["*ngIf", "showValid"]);
  }
}
var _c36 = [[["label"]], [["", "clrRange", ""]], [["clr-control-helper"]], [["clr-control-error"]], [["clr-control-success"]]];
var _c37 = ["label", "[clrRange]", "clr-control-helper", "clr-control-error", "clr-control-success"];
function ClrRangeContainer_label_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "label");
  }
}
function ClrRangeContainer_span_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "span", 6);
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵstyleProp("width", ctx_r0.getRangeProgressFillWidth());
  }
}
function ClrRangeContainer_cds_icon_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 7);
  }
}
function ClrRangeContainer_cds_icon_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 8);
  }
}
function ClrRangeContainer_ng_content_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 2, ["*ngIf", "showHelper"]);
  }
}
function ClrRangeContainer_ng_content_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 3, ["*ngIf", "showInvalid"]);
  }
}
function ClrRangeContainer_ng_content_10_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 4, ["*ngIf", "showValid"]);
  }
}
var _c38 = [[["label"]], [["", "clrSelect", ""]], [["clr-control-helper"]], [["clr-control-error"]], [["clr-control-success"]]];
var _c39 = ["label", "[clrSelect]", "clr-control-helper", "clr-control-error", "clr-control-success"];
function ClrSelectContainer_label_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "label");
  }
}
function ClrSelectContainer_cds_icon_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 5);
  }
}
function ClrSelectContainer_cds_icon_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 6);
  }
}
function ClrSelectContainer_ng_content_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 2, ["*ngIf", "showHelper"]);
  }
}
function ClrSelectContainer_ng_content_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 3, ["*ngIf", "showInvalid"]);
  }
}
function ClrSelectContainer_ng_content_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 4, ["*ngIf", "showValid"]);
  }
}
var _c40 = [[["label"]], [["", "clrTextarea", ""]], [["clr-control-helper"]], [["clr-control-error"]], [["clr-control-success"]]];
var _c41 = ["label", "[clrTextarea]", "clr-control-helper", "clr-control-error", "clr-control-success"];
function ClrTextareaContainer_label_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "label");
  }
}
function ClrTextareaContainer_cds_icon_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 5);
  }
}
function ClrTextareaContainer_cds_icon_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 6);
  }
}
function ClrTextareaContainer_ng_content_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 2, ["*ngIf", "showHelper"]);
  }
}
function ClrTextareaContainer_ng_content_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 3, ["*ngIf", "showInvalid"]);
  }
}
function ClrTextareaContainer_ng_content_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 4, ["*ngIf", "showValid"]);
  }
}
var _c42 = ["anchor"];
function ClrDatagridFilter_div_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 4)(1, "div", 5)(2, "button", 6);
    ɵɵelement(3, "cds-icon", 7);
    ɵɵelementEnd()();
    ɵɵprojection(4);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("id", ctx_r0.popoverId);
    ɵɵattribute("aria-label", ctx_r0.commonStrings.keys.datagridFilterDialogAriaLabel);
    ɵɵadvance(3);
    ɵɵattribute("title", ctx_r0.commonStrings.keys.close);
  }
}
var _c43 = ["input_low"];
var _c44 = ["input"];
var _c45 = ["columnPortal"];
function WrappedColumn_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0);
  }
}
var _c46 = ["resizeTracker"];
var _c47 = ["columnHandle"];
var _c48 = [[["clr-dg-filter"], ["clr-dg-string-filter"], ["clr-dg-numeric-filter"]], "*"];
var _c49 = ["clr-dg-filter, clr-dg-string-filter, clr-dg-numeric-filter", "*"];
function ClrDatagridColumn_button_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function ClrDatagridColumn_button_1_cds_icon_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 10);
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵattribute("direction", ctx_r1.sortDirection);
  }
}
function ClrDatagridColumn_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 7);
    ɵɵlistener("click", function ClrDatagridColumn_button_1_Template_button_click_0_listener() {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.sort());
    });
    ɵɵtemplate(1, ClrDatagridColumn_button_1_ng_container_1_Template, 1, 0, "ng-container", 8)(2, ClrDatagridColumn_button_1_cds_icon_2_Template, 1, 1, "cds-icon", 9);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    const columnTitle_r3 = ɵɵreference(6);
    ɵɵadvance();
    ɵɵproperty("ngTemplateOutlet", columnTitle_r3);
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r1.sortDirection);
  }
}
function ClrDatagridColumn_clr_dg_string_filter_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "clr-dg-string-filter", 11);
    ɵɵtwoWayListener("clrFilterValueChange", function ClrDatagridColumn_clr_dg_string_filter_3_Template_clr_dg_string_filter_clrFilterValueChange_0_listener($event) {
      ɵɵrestoreView(_r4);
      const ctx_r1 = ɵɵnextContext();
      ɵɵtwoWayBindingSet(ctx_r1.filterValue, $event) || (ctx_r1.filterValue = $event);
      return ɵɵresetView($event);
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("clrFilterPlaceholder", ctx_r1.filterStringPlaceholder)("clrDgStringFilter", ctx_r1.registered);
    ɵɵtwoWayProperty("clrFilterValue", ctx_r1.filterValue);
  }
}
function ClrDatagridColumn_clr_dg_numeric_filter_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "clr-dg-numeric-filter", 12);
    ɵɵtwoWayListener("clrFilterValueChange", function ClrDatagridColumn_clr_dg_numeric_filter_4_Template_clr_dg_numeric_filter_clrFilterValueChange_0_listener($event) {
      ɵɵrestoreView(_r5);
      const ctx_r1 = ɵɵnextContext();
      ɵɵtwoWayBindingSet(ctx_r1.filterValue, $event) || (ctx_r1.filterValue = $event);
      return ɵɵresetView($event);
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("clrFilterMaxPlaceholder", ctx_r1.filterNumberMaxPlaceholder)("clrFilterMinPlaceholder", ctx_r1.filterNumberMinPlaceholder)("clrDgNumericFilter", ctx_r1.registered);
    ɵɵtwoWayProperty("clrFilterValue", ctx_r1.filterValue);
  }
}
function ClrDatagridColumn_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 1);
  }
}
function ClrDatagridColumn_span_7_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function ClrDatagridColumn_span_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵtemplate(1, ClrDatagridColumn_span_7_ng_container_1_Template, 1, 0, "ng-container", 8);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    ɵɵnextContext();
    const columnTitle_r3 = ɵɵreference(6);
    ɵɵadvance();
    ɵɵproperty("ngTemplateOutlet", columnTitle_r3);
  }
}
function ClrDatagridColumn_clr_dg_column_separator_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "clr-dg-column-separator");
  }
}
function ClrDatagridPlaceholder_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "div", 4);
  }
}
function ClrDatagridPlaceholder_ng_content_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 0, ["*ngIf", "emptyDatagrid"]);
  }
}
function ClrSignpost_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "button", 1);
    ɵɵelement(2, "cds-icon", 2);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵattribute("aria-label", ctx_r0.commonStrings.keys.signpostToggle);
    ɵɵadvance();
    ɵɵattribute("title", ctx_r0.commonStrings.keys.info);
  }
}
var _c50 = ["cellPortal"];
function WrappedCell_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0);
  }
}
var _c51 = ["rowPortal"];
function WrappedRow_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0);
  }
}
var _c52 = ["detailButton"];
var _c53 = ["stickyCells"];
var _c54 = ["scrollableCells"];
var _c55 = ["calculatedCells"];
var _c56 = [[["clr-dg-row-detail"]], [["clr-dg-cell"]], [["clr-dg-action-overflow"]]];
var _c57 = ["clr-dg-row-detail", "clr-dg-cell", "clr-dg-action-overflow"];
var _c58 = (a0) => ({
  "is-replaced": a0
});
var _c59 = (a0) => ({
  "clr-form-control-disabled": a0
});
function ClrDatagridRow_div_0_clr_expandable_animation_1_ng_template_1_Template(rf, ctx) {
}
function ClrDatagridRow_div_0_clr_expandable_animation_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "clr-expandable-animation", 10);
    ɵɵtemplate(1, ClrDatagridRow_div_0_clr_expandable_animation_1_ng_template_1_Template, 0, 0, "ng-template", 11);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    const rowContent_r3 = ɵɵreference(6);
    ɵɵproperty("clrExpandTrigger", ctx_r1.expandAnimationTrigger);
    ɵɵadvance();
    ɵɵproperty("ngTemplateOutlet", rowContent_r3);
  }
}
function ClrDatagridRow_div_0_2_ng_template_0_Template(rf, ctx) {
}
function ClrDatagridRow_div_0_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, ClrDatagridRow_div_0_2_ng_template_0_Template, 0, 0, "ng-template", 11);
  }
  if (rf & 2) {
    ɵɵnextContext(2);
    const rowContent_r3 = ɵɵreference(6);
    ɵɵproperty("ngTemplateOutlet", rowContent_r3);
  }
}
function ClrDatagridRow_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 9);
    ɵɵlistener("mousedown", function ClrDatagridRow_div_0_Template_div_mousedown_0_listener($event) {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.clearRanges($event));
    })("click", function ClrDatagridRow_div_0_Template_div_click_0_listener($event) {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.selectRow(!ctx_r1.selected, $event));
    });
    ɵɵtemplate(1, ClrDatagridRow_div_0_clr_expandable_animation_1_Template, 2, 2, "clr-expandable-animation", 7)(2, ClrDatagridRow_div_0_2_Template, 1, 1, null, 8);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r1.expand.expandable);
    ɵɵadvance();
    ɵɵproperty("ngIf", !ctx_r1.expand.expandable);
  }
}
function ClrDatagridRow_clr_expandable_animation_1_ng_template_1_Template(rf, ctx) {
}
function ClrDatagridRow_clr_expandable_animation_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "clr-expandable-animation", 10);
    ɵɵtemplate(1, ClrDatagridRow_clr_expandable_animation_1_ng_template_1_Template, 0, 0, "ng-template", 11);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    const rowContent_r3 = ɵɵreference(6);
    ɵɵproperty("clrExpandTrigger", ctx_r1.expandAnimationTrigger);
    ɵɵadvance();
    ɵɵproperty("ngTemplateOutlet", rowContent_r3);
  }
}
function ClrDatagridRow_2_ng_template_0_Template(rf, ctx) {
}
function ClrDatagridRow_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, ClrDatagridRow_2_ng_template_0_Template, 0, 0, "ng-template", 11);
  }
  if (rf & 2) {
    ɵɵnextContext();
    const rowContent_r3 = ɵɵreference(6);
    ɵɵproperty("ngTemplateOutlet", rowContent_r3);
  }
}
function ClrDatagridRow_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0);
  }
}
function ClrDatagridRow_ng_template_5_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 20)(1, "clr-checkbox-wrapper")(2, "input", 21);
    ɵɵlistener("ngModelChange", function ClrDatagridRow_ng_template_5_div_4_Template_input_ngModelChange_2_listener($event) {
      ɵɵrestoreView(_r4);
      const ctx_r1 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r1.toggle($event));
    });
    ɵɵelementEnd();
    ɵɵelementStart(3, "label", 22);
    ɵɵlistener("click", function ClrDatagridRow_ng_template_5_div_4_Template_label_click_3_listener($event) {
      ɵɵrestoreView(_r4);
      const ctx_r1 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r1.clearRanges($event));
    });
    ɵɵelementStart(4, "span", 23);
    ɵɵtext(5);
    ɵɵelementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction1(7, _c59, !ctx_r1.clrDgSelectable));
    ɵɵadvance(2);
    ɵɵproperty("ngModel", ctx_r1.selected)("id", ctx_r1.checkboxId)("disabled", ctx_r1.clrDgSelectable ? null : true);
    ɵɵattribute("aria-disabled", ctx_r1.clrDgSelectable ? null : true);
    ɵɵadvance();
    ɵɵproperty("for", ctx_r1.checkboxId);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.clrDgRowSelectionLabel || ctx_r1.commonStrings.keys.select);
  }
}
function ClrDatagridRow_ng_template_5_div_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 20)(1, "clr-radio-wrapper")(2, "input", 24);
    ɵɵtwoWayListener("ngModelChange", function ClrDatagridRow_ng_template_5_div_5_Template_input_ngModelChange_2_listener($event) {
      ɵɵrestoreView(_r5);
      const ctx_r1 = ɵɵnextContext(2);
      ɵɵtwoWayBindingSet(ctx_r1.selection.currentSingle, $event) || (ctx_r1.selection.currentSingle = $event);
      return ɵɵresetView($event);
    });
    ɵɵelementEnd();
    ɵɵelementStart(3, "label", 25)(4, "span", 23);
    ɵɵtext(5);
    ɵɵelementEnd()()()();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction1(10, _c59, !ctx_r1.clrDgSelectable));
    ɵɵadvance(2);
    ɵɵproperty("id", ctx_r1.radioId)("name", ctx_r1.selection.id + "-radio")("value", ctx_r1.item);
    ɵɵtwoWayProperty("ngModel", ctx_r1.selection.currentSingle);
    ɵɵproperty("checked", ctx_r1.selection.currentSingle === ctx_r1.item)("disabled", ctx_r1.clrDgSelectable ? null : true);
    ɵɵattribute("aria-disabled", ctx_r1.clrDgSelectable ? null : true);
    ɵɵadvance();
    ɵɵproperty("for", ctx_r1.radioId);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.clrDgRowSelectionLabel || ctx_r1.commonStrings.keys.select);
  }
}
function ClrDatagridRow_ng_template_5_div_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 26);
    ɵɵprojection(1, 2);
    ɵɵelementEnd();
  }
}
function ClrDatagridRow_ng_template_5_div_7_ng_container_1_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 30);
    ɵɵlistener("click", function ClrDatagridRow_ng_template_5_div_7_ng_container_1_button_1_Template_button_click_0_listener() {
      ɵɵrestoreView(_r6);
      const ctx_r1 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r1.toggleExpand());
    });
    ɵɵelement(1, "cds-icon", 31);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(4);
    ɵɵattribute("aria-expanded", ctx_r1.expand.expanded)("aria-label", ctx_r1.expand.expanded ? ctx_r1.clrDgDetailCloseLabel : ctx_r1.clrDgDetailOpenLabel)("aria-controls", ctx_r1.expandableId);
    ɵɵadvance();
    ɵɵattribute("direction", ctx_r1.expand.expanded ? "down" : "right")("title", ctx_r1.expand.expanded ? ctx_r1.commonStrings.keys.collapse : ctx_r1.commonStrings.keys.expand);
  }
}
function ClrDatagridRow_ng_template_5_div_7_ng_container_1_clr_spinner_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "clr-spinner", 32);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(4);
    ɵɵadvance();
    ɵɵtextInterpolate(ctx_r1.commonStrings.keys.loading);
  }
}
function ClrDatagridRow_ng_template_5_div_7_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, ClrDatagridRow_ng_template_5_div_7_ng_container_1_button_1_Template, 2, 5, "button", 28)(2, ClrDatagridRow_ng_template_5_div_7_ng_container_1_clr_spinner_2_Template, 2, 1, "clr-spinner", 29);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(3);
    ɵɵadvance();
    ɵɵproperty("ngIf", !ctx_r1.expand.loading);
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r1.expand.loading);
  }
}
function ClrDatagridRow_ng_template_5_div_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 27);
    ɵɵtemplate(1, ClrDatagridRow_ng_template_5_div_7_ng_container_1_Template, 3, 2, "ng-container", 8);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r1.expand.expandable);
  }
}
function ClrDatagridRow_ng_template_5_div_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 33)(1, "button", 34, 5);
    ɵɵlistener("click", function ClrDatagridRow_ng_template_5_div_8_Template_button_click_1_listener() {
      ɵɵrestoreView(_r7);
      const detailButton_r8 = ɵɵreference(2);
      const ctx_r1 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r1.detailService.toggle(ctx_r1.item, detailButton_r8));
    });
    ɵɵelement(3, "cds-icon", 35);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵadvance();
    ɵɵclassProp("is-open", ctx_r1.detailService.isRowOpen(ctx_r1.item));
    ɵɵattribute("aria-label", ctx_r1.detailService.isRowOpen(ctx_r1.item) ? ctx_r1.clrDgDetailCloseLabel : ctx_r1.clrDgDetailOpenLabel)("aria-expanded", ctx_r1.detailService.isOpen)("aria-controls", ctx_r1.detailService.id);
    ɵɵadvance(2);
    ɵɵattribute("direction", ctx_r1.detailService.isRowOpen(ctx_r1.item) ? "left" : "right")("title", ctx_r1.detailService.isRowOpen(ctx_r1.item) ? ctx_r1.commonStrings.keys.close : ctx_r1.commonStrings.keys.open);
  }
}
function ClrDatagridRow_ng_template_5_14_ng_template_0_Template(rf, ctx) {
}
function ClrDatagridRow_ng_template_5_14_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, ClrDatagridRow_ng_template_5_14_ng_template_0_Template, 0, 0, "ng-template", 11);
  }
  if (rf & 2) {
    ɵɵnextContext(2);
    const detail_r9 = ɵɵreference(4);
    ɵɵproperty("ngTemplateOutlet", detail_r9);
  }
}
function ClrDatagridRow_ng_template_5_15_ng_template_0_Template(rf, ctx) {
}
function ClrDatagridRow_ng_template_5_15_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, ClrDatagridRow_ng_template_5_15_ng_template_0_Template, 0, 0, "ng-template", 11);
  }
  if (rf & 2) {
    ɵɵnextContext(2);
    const detail_r9 = ɵɵreference(4);
    ɵɵproperty("ngTemplateOutlet", detail_r9);
  }
}
function ClrDatagridRow_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 12)(1, "div", 13);
    ɵɵelementContainerStart(2, null, 3);
    ɵɵtemplate(4, ClrDatagridRow_ng_template_5_div_4_Template, 6, 9, "div", 14)(5, ClrDatagridRow_ng_template_5_div_5_Template, 6, 12, "div", 14)(6, ClrDatagridRow_ng_template_5_div_6_Template, 2, 0, "div", 15)(7, ClrDatagridRow_ng_template_5_div_7_Template, 2, 1, "div", 16)(8, ClrDatagridRow_ng_template_5_div_8_Template, 4, 7, "div", 17);
    ɵɵelementContainerEnd();
    ɵɵelementEnd();
    ɵɵelementStart(9, "div", 18)(10, "div", 19);
    ɵɵprojection(11, 1);
    ɵɵelementContainer(12, null, 4);
    ɵɵelementEnd();
    ɵɵtemplate(14, ClrDatagridRow_ng_template_5_14_Template, 1, 1, null, 8)(15, ClrDatagridRow_ng_template_5_15_Template, 1, 1, null, 8);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("datagrid-row-detail-open", ctx_r1.detailService.isRowOpen(ctx_r1.item));
    ɵɵproperty("id", ctx_r1.id);
    ɵɵadvance(4);
    ɵɵproperty("ngIf", ctx_r1.selection.selectionType === ctx_r1.SELECTION_TYPE.Multi);
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r1.selection.selectionType === ctx_r1.SELECTION_TYPE.Single);
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r1.rowActionService.hasActionableRow);
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r1.globalExpandable.hasExpandableRow);
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r1.detailService.enabled);
    ɵɵadvance();
    ɵɵproperty("ngClass", ɵɵpureFunction1(11, _c58, ctx_r1.replaced && ctx_r1.expanded));
    ɵɵadvance(5);
    ɵɵproperty("ngIf", ctx_r1.replaced && !ctx_r1.expand.loading);
    ɵɵadvance();
    ɵɵproperty("ngIf", !ctx_r1.replaced && !ctx_r1.expand.loading);
  }
}
var _c60 = ["datagridTable"];
var _c61 = ["scrollableColumns"];
var _c62 = ["projectedDisplayColumns"];
var _c63 = ["projectedCalculationColumns"];
var _c64 = ["displayedRows"];
var _c65 = ["calculationRows"];
var _c66 = [[["clr-dg-action-bar"]], [["clr-dg-placeholder"]], [["clr-dg-footer"]], [["", "clrIfDetail", ""], ["clr-dg-detail"]]];
var _c67 = ["clr-dg-action-bar", "clr-dg-placeholder", "clr-dg-footer", "[clrIfDetail],clr-dg-detail"];
function ClrDatagrid_div_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 24);
    ɵɵlistener("keydown.space", function ClrDatagrid_div_12_Template_div_keydown_space_0_listener($event) {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext();
      ctx_r1.allSelected = !ctx_r1.allSelected;
      return ɵɵresetView($event.preventDefault());
    });
    ɵɵelementStart(1, "div", 25)(2, "input", 26);
    ɵɵtwoWayListener("ngModelChange", function ClrDatagrid_div_12_Template_input_ngModelChange_2_listener($event) {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext();
      ɵɵtwoWayBindingSet(ctx_r1.allSelected, $event) || (ctx_r1.allSelected = $event);
      return ɵɵresetView($event);
    });
    ɵɵelementEnd();
    ɵɵelementStart(3, "label", 27)(4, "span", 28);
    ɵɵtext(5);
    ɵɵelementEnd()()();
    ɵɵelement(6, "div", 29);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("id", ctx_r1.selectAllId);
    ɵɵtwoWayProperty("ngModel", ctx_r1.allSelected);
    ɵɵattribute("aria-label", ctx_r1.commonStrings.keys.selectAll);
    ɵɵadvance();
    ɵɵproperty("for", ctx_r1.selectAllId);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.commonStrings.keys.selectAll);
  }
}
function ClrDatagrid_div_13_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 30);
    ɵɵelement(1, "div", 29);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵattribute("aria-label", ctx_r1.clrDgSingleSelectionAriaLabel);
  }
}
function ClrDatagrid_div_14_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 31);
    ɵɵelement(1, "div", 29);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵattribute("aria-label", ctx_r1.clrDgSingleActionableAriaLabel);
  }
}
function ClrDatagrid_div_15_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 32);
    ɵɵelement(1, "div", 29);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵattribute("aria-label", ctx_r1.clrDetailExpandableAriaLabel);
  }
}
function ClrDatagrid_clr_dg_placeholder_22_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "clr-dg-placeholder");
  }
}
function ClrDatagrid_div_24_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 33)(1, "clr-spinner", 34);
    ɵɵtext(2, "Loading");
    ɵɵelementEnd()();
  }
}
function ClrDatagridActionOverflow_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 4);
    ɵɵlistener("click", function ClrDatagridActionOverflow_div_3_Template_div_click_0_listener($event) {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.closeOverflowContent($event));
    });
    ɵɵprojection(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("id", ctx_r1.popoverId);
    ɵɵattribute("aria-hidden", !ctx_r1.open)("id", ctx_r1.popoverId);
  }
}
var _c68 = ["allSelected"];
function ClrDatagridColumnToggle_div_2_li_12_ng_template_4_Template(rf, ctx) {
}
function ClrDatagridColumnToggle_div_2_li_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "li")(1, "clr-checkbox-wrapper")(2, "input", 13);
    ɵɵlistener("ngModelChange", function ClrDatagridColumnToggle_div_2_li_12_Template_input_ngModelChange_2_listener($event) {
      const columnState_r3 = ɵɵrestoreView(_r2).$implicit;
      const ctx_r3 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r3.toggleColumnState(columnState_r3, !$event));
    });
    ɵɵelementEnd();
    ɵɵelementStart(3, "label");
    ɵɵtemplate(4, ClrDatagridColumnToggle_div_2_li_12_ng_template_4_Template, 0, 0, "ng-template", 14);
    ɵɵelementEnd()()();
  }
  if (rf & 2) {
    const columnState_r3 = ctx.$implicit;
    const ctx_r3 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("disabled", ctx_r3.hasOnlyOneVisibleColumn && !columnState_r3.hidden)("ngModel", !columnState_r3.hidden);
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", columnState_r3.titleTemplateRef);
  }
}
function ClrDatagridColumnToggle_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 3)(1, "div", 4)(2, "div", 5, 0);
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementStart(5, "h2");
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementStart(7, "button", 6);
    ɵɵelement(8, "cds-icon", 7);
    ɵɵelementStart(9, "span", 8);
    ɵɵtext(10);
    ɵɵelementEnd()()();
    ɵɵelementStart(11, "ul", 9);
    ɵɵtemplate(12, ClrDatagridColumnToggle_div_2_li_12_Template, 5, 3, "li", 10);
    ɵɵelementEnd();
    ɵɵelementStart(13, "div", 11)(14, "clr-dg-column-toggle-button", 12);
    ɵɵlistener("clrAllSelected", function ClrDatagridColumnToggle_div_2_Template_clr_dg_column_toggle_button_clrAllSelected_14_listener() {
      ɵɵrestoreView(_r1);
      const ctx_r3 = ɵɵnextContext();
      return ɵɵresetView(ctx_r3.allColumnsSelected());
    });
    ɵɵelementEnd()()();
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵproperty("id", ctx_r3.popoverId);
    ɵɵattribute("aria-label", ctx_r3.commonStrings.keys.showColumnsMenuDescription);
    ɵɵadvance(4);
    ɵɵtextInterpolate(ctx_r3.commonStrings.keys.allColumnsSelected);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r3.commonStrings.keys.showColumns);
    ɵɵadvance();
    ɵɵattribute("aria-label", ctx_r3.commonStrings.keys.close);
    ɵɵadvance();
    ɵɵattribute("title", ctx_r3.commonStrings.keys.close);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r3.commonStrings.keys.close);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r3.hideableColumnStates)("ngForTrackBy", ctx_r3.trackByFn);
  }
}
function ClrDatagridDetail_div_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 1)(1, "div", 2);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵprojection(3);
    ɵɵelementStart(4, "div", 2);
    ɵɵtext(5);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("cdkTrapFocusAutoCapture", true)("id", ctx_r0.detailService.id);
    ɵɵattribute("aria-describedby", ctx_r0.header ? ctx_r0.header.titleId : "");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r0.commonStrings.keys.detailPaneStart);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r0.commonStrings.keys.detailPaneEnd);
  }
}
var _c69 = [[["clr-dg-pagination"]], "*"];
var _c70 = ["clr-dg-pagination", "*"];
function ClrDatagridFooter_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "div", 1)(2, "clr-checkbox-wrapper", 2);
    ɵɵelement(3, "input", 3);
    ɵɵelementStart(4, "label");
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementStart(6, "span", 4);
    ɵɵtext(7);
    ɵɵelementEnd()()();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(5);
    ɵɵtextInterpolate(ctx_r0.selection.current.length);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r0.commonStrings.keys.selectedRows);
  }
}
function ClrDatagridFooter_ng_container_1_clr_dg_column_toggle_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "clr-dg-column-toggle");
  }
}
function ClrDatagridFooter_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, ClrDatagridFooter_ng_container_1_clr_dg_column_toggle_1_Template, 1, 0, "clr-dg-column-toggle", 0);
    ɵɵelementStart(2, "div", 5);
    ɵɵprojection(3, 1);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r0.hasHideableColumns);
  }
}
function ClrDatagridPageSize_option_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "option", 4);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const option_r1 = ctx.$implicit;
    ɵɵproperty("ngValue", option_r1);
    ɵɵadvance();
    ɵɵtextInterpolate(option_r1);
  }
}
var _c71 = ["currentPageInput"];
var _c72 = ["*", [["clr-dg-page-size"]]];
var _c73 = ["*", "clr-dg-page-size"];
function ClrDatagridPagination_ng_container_0_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 6);
    ɵɵprojection(1, 1);
    ɵɵelementEnd();
  }
}
function ClrDatagridPagination_ng_container_0_div_4_input_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 18, 1);
    ɵɵlistener("keydown.enter", function ClrDatagridPagination_ng_container_0_div_4_input_9_Template_input_keydown_enter_0_listener($event) {
      ɵɵrestoreView(_r3);
      const ctx_r1 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r1.updateCurrentPage($event));
    })("blur", function ClrDatagridPagination_ng_container_0_div_4_input_9_Template_input_blur_0_listener($event) {
      ɵɵrestoreView(_r3);
      const ctx_r1 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r1.verifyCurrentPage($event));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(3);
    ɵɵproperty("size", ctx_r1.page.last.toString().length)("value", ctx_r1.page.current);
    ɵɵattribute("aria-label", ctx_r1.commonStrings.keys.currentPage);
  }
}
function ClrDatagridPagination_ng_container_0_div_4_ng_template_10_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(3);
    ɵɵadvance();
    ɵɵtextInterpolate(ctx_r1.page.current);
  }
}
function ClrDatagridPagination_ng_container_0_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 7)(1, "button", 8);
    ɵɵlistener("click", function ClrDatagridPagination_ng_container_0_div_4_Template_button_click_1_listener() {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r1.page.current = 1);
    });
    ɵɵelementStart(2, "span", 9);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelement(4, "cds-icon", 10);
    ɵɵelementEnd();
    ɵɵelementStart(5, "button", 11);
    ɵɵlistener("click", function ClrDatagridPagination_ng_container_0_div_4_Template_button_click_5_listener() {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r1.page.current = ctx_r1.page.current - 1);
    });
    ɵɵelementStart(6, "span", 9);
    ɵɵtext(7);
    ɵɵelementEnd();
    ɵɵelement(8, "cds-icon", 12);
    ɵɵelementEnd();
    ɵɵtemplate(9, ClrDatagridPagination_ng_container_0_div_4_input_9_Template, 2, 3, "input", 13)(10, ClrDatagridPagination_ng_container_0_div_4_ng_template_10_Template, 2, 1, "ng-template", null, 0, ɵɵtemplateRefExtractor);
    ɵɵtext(12, "  / ");
    ɵɵelementStart(13, "span");
    ɵɵtext(14);
    ɵɵelementEnd();
    ɵɵelementStart(15, "button", 14);
    ɵɵlistener("click", function ClrDatagridPagination_ng_container_0_div_4_Template_button_click_15_listener() {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r1.page.current = ctx_r1.page.current + 1);
    });
    ɵɵelementStart(16, "span", 9);
    ɵɵtext(17);
    ɵɵelementEnd();
    ɵɵelement(18, "cds-icon", 15);
    ɵɵelementEnd();
    ɵɵelementStart(19, "button", 16);
    ɵɵlistener("click", function ClrDatagridPagination_ng_container_0_div_4_Template_button_click_19_listener() {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r1.page.current = ctx_r1.page.last);
    });
    ɵɵelementStart(20, "span", 9);
    ɵɵtext(21);
    ɵɵelementEnd();
    ɵɵelement(22, "cds-icon", 17);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const readOnly_r4 = ɵɵreference(11);
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵadvance();
    ɵɵproperty("disabled", ctx_r1.page.current <= 1);
    ɵɵattribute("aria-label", ctx_r1.commonStrings.keys.firstPage);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.commonStrings.keys.firstPage);
    ɵɵadvance(2);
    ɵɵproperty("disabled", ctx_r1.page.current <= 1);
    ɵɵattribute("aria-label", ctx_r1.commonStrings.keys.previousPage);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.commonStrings.keys.previousPage);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", !ctx_r1.disableCurrentPageInput)("ngIfElse", readOnly_r4);
    ɵɵadvance(4);
    ɵɵattribute("aria-label", ctx_r1.commonStrings.keys.totalPages);
    ɵɵadvance();
    ɵɵtextInterpolate(ctx_r1.page.last);
    ɵɵadvance();
    ɵɵproperty("disabled", ctx_r1.page.current >= ctx_r1.page.last);
    ɵɵattribute("aria-label", ctx_r1.commonStrings.keys.nextPage);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.commonStrings.keys.nextPage);
    ɵɵadvance(2);
    ɵɵproperty("disabled", ctx_r1.page.current >= ctx_r1.page.last);
    ɵɵattribute("aria-label", ctx_r1.commonStrings.keys.lastPage);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.commonStrings.keys.lastPage);
  }
}
function ClrDatagridPagination_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, ClrDatagridPagination_ng_container_0_div_1_Template, 2, 0, "div", 3);
    ɵɵelementStart(2, "div", 4);
    ɵɵprojection(3);
    ɵɵelementEnd();
    ɵɵtemplate(4, ClrDatagridPagination_ng_container_0_div_4_Template, 23, 16, "div", 5);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r1._pageSizeComponent);
    ɵɵadvance(3);
    ɵɵproperty("ngIf", ctx_r1.page.last > 1);
  }
}
function ClrDatagridPagination_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "div", 19);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "div", 7)(4, "button", 11);
    ɵɵlistener("click", function ClrDatagridPagination_ng_container_1_Template_button_click_4_listener() {
      ɵɵrestoreView(_r5);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.page.current = ctx_r1.page.current - 1);
    });
    ɵɵelementStart(5, "span", 9);
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelement(7, "cds-icon", 12);
    ɵɵelementEnd();
    ɵɵelementStart(8, "span");
    ɵɵtext(9);
    ɵɵelementEnd();
    ɵɵelementStart(10, "button", 14);
    ɵɵlistener("click", function ClrDatagridPagination_ng_container_1_Template_button_click_10_listener() {
      ɵɵrestoreView(_r5);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.page.current = ctx_r1.page.current + 1);
    });
    ɵɵelementStart(11, "span", 9);
    ɵɵtext(12);
    ɵɵelementEnd();
    ɵɵelement(13, "cds-icon", 15);
    ɵɵelementEnd()();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate3(" ", ctx_r1.page.firstItem + 1, "-", ctx_r1.page.lastItem + 1, " / ", ctx_r1.page.totalItems, " ");
    ɵɵadvance(2);
    ɵɵproperty("disabled", ctx_r1.page.current <= 1);
    ɵɵattribute("aria-label", ctx_r1.commonStrings.keys.previousPage);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.commonStrings.keys.previousPage);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r1.page.current);
    ɵɵadvance();
    ɵɵproperty("disabled", ctx_r1.page.current >= ctx_r1.page.last);
    ɵɵattribute("aria-label", ctx_r1.commonStrings.keys.nextPage);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.commonStrings.keys.nextPage);
  }
}
var _c74 = [[["clr-stack-label"]], "*", [["clr-stack-block"]]];
var _c75 = ["clr-stack-label", "*", "clr-stack-block"];
function ClrStackBlock_cds_icon_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 7);
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵattribute("direction", ctx_r0.caretDirection);
  }
}
function ClrStackBlock_span_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 8);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵtextInterpolate(ctx_r0.commonStrings.keys.stackViewChanged);
  }
}
function ClrStackBlock_div_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 9);
    ɵɵprojection(1, 2);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵstyleProp("height", ctx_r0.expanded ? "auto" : 0);
    ɵɵattribute("id", ctx_r0.getStackChildrenId())("aria-labelledby", ctx_r0.labelledById);
  }
}
var _c76 = [[["clr-stack-header"]], "*"];
var _c77 = ["clr-stack-header", "*"];
var _c78 = ["*", [["", 8, "stack-action"]]];
var _c79 = ["*", ".stack-action"];
function RecursiveChildren_ng_container_0_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function RecursiveChildren_ng_container_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, RecursiveChildren_ng_container_0_ng_container_1_ng_container_1_Template, 1, 0, "ng-container", 2);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const child_r1 = ctx.$implicit;
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵadvance();
    ɵɵproperty("ngTemplateOutlet", ctx_r1.featuresService.recursion.template)("ngTemplateOutletContext", ctx_r1.getContext(child_r1));
  }
}
function RecursiveChildren_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, RecursiveChildren_ng_container_0_ng_container_1_Template, 2, 2, "ng-container", 1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵproperty("ngForOf", (ctx_r1.parent == null ? null : ctx_r1.parent.children) || ctx_r1.children);
  }
}
var _c80 = ["contentContainer"];
var _c81 = [[["clr-tree-node"]], [["", "clrIfExpanded", ""]], "*"];
var _c82 = ["clr-tree-node", "[clrIfExpanded]", "*"];
function ClrTreeNode_button_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 9);
    ɵɵlistener("click", function ClrTreeNode_button_2_Template_button_click_0_listener() {
      ɵɵrestoreView(_r2);
      const ctx_r2 = ɵɵnextContext();
      return ɵɵresetView(ctx_r2.expandService.toggle());
    })("focus", function ClrTreeNode_button_2_Template_button_focus_0_listener() {
      ɵɵrestoreView(_r2);
      const ctx_r2 = ɵɵnextContext();
      return ɵɵresetView(ctx_r2.focusTreeNode());
    });
    ɵɵelement(1, "cds-icon", 10);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵattribute("direction", ctx_r2.expandService.expanded ? "down" : "right");
  }
}
function ClrTreeNode_div_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 11);
    ɵɵelement(1, "span", 12);
    ɵɵelementEnd();
  }
}
function ClrTreeNode_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 13)(1, "input", 14);
    ɵɵlistener("change", function ClrTreeNode_div_4_Template_input_change_1_listener() {
      ɵɵrestoreView(_r4);
      const ctx_r2 = ɵɵnextContext();
      return ɵɵresetView(ctx_r2._model.toggleSelection(ctx_r2.featuresService.eager));
    })("focus", function ClrTreeNode_div_4_Template_input_focus_1_listener() {
      ɵɵrestoreView(_r4);
      const ctx_r2 = ɵɵnextContext();
      return ɵɵresetView(ctx_r2.focusTreeNode());
    });
    ɵɵelementEnd();
    ɵɵelementStart(2, "label", 15);
    ɵɵelementContainer(3, 16);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    const treenodeContent_r5 = ɵɵreference(7);
    ɵɵadvance();
    ɵɵpropertyInterpolate1("id", "", ctx_r2.nodeId, "-check");
    ɵɵproperty("checked", ctx_r2._model.selected.value === ctx_r2.STATES.SELECTED)("indeterminate", ctx_r2._model.selected.value === ctx_r2.STATES.INDETERMINATE);
    ɵɵadvance();
    ɵɵpropertyInterpolate1("for", "", ctx_r2.nodeId, "-check");
    ɵɵadvance();
    ɵɵproperty("ngTemplateOutlet", treenodeContent_r5);
  }
}
function ClrTreeNode_div_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 17);
    ɵɵlistener("mouseup", function ClrTreeNode_div_5_Template_div_mouseup_0_listener() {
      ɵɵrestoreView(_r6);
      const ctx_r2 = ɵɵnextContext();
      return ɵɵresetView(ctx_r2.focusTreeNode());
    });
    ɵɵelementContainer(1, 16);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    const treenodeContent_r5 = ɵɵreference(7);
    ɵɵclassProp("clr-treenode-text-only", ctx_r2.treeNodeContentTextOnly);
    ɵɵadvance();
    ɵɵproperty("ngTemplateOutlet", treenodeContent_r5);
  }
}
function ClrTreeNode_ng_template_6_div_1_span_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1, " selected");
    ɵɵelementEnd();
  }
}
function ClrTreeNode_ng_template_6_div_1_span_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1, " unselected");
    ɵɵelementEnd();
  }
}
function ClrTreeNode_ng_template_6_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 19);
    ɵɵtemplate(1, ClrTreeNode_ng_template_6_div_1_span_1_Template, 2, 0, "span", 20)(2, ClrTreeNode_ng_template_6_div_1_span_2_Template, 2, 0, "span", 20);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext(2);
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r2.ariaSelected);
    ɵɵadvance();
    ɵɵproperty("ngIf", !ctx_r2.ariaSelected);
  }
}
function ClrTreeNode_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 2);
    ɵɵtemplate(1, ClrTreeNode_ng_template_6_div_1_Template, 3, 2, "div", 18);
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r2.featuresService.selectable || ctx_r2.ariaSelected);
  }
}
function ClrTree_clr_recursive_children_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "clr-recursive-children", 1);
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("children", ctx_r0.featuresService.recursion.root);
  }
}
function ClrAlert_div_0_button_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 4);
    ɵɵlistener("click", function ClrAlert_div_0_button_3_Template_button_click_0_listener() {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r1.close());
    });
    ɵɵelement(1, "cds-icon", 5);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵattribute("aria-label", ctx_r1.clrCloseButtonAriaLabel);
  }
}
function ClrAlert_div_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 1)(1, "div", 2);
    ɵɵprojection(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, ClrAlert_div_0_button_3_Template, 2, 1, "button", 3);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("alert-sm", ctx_r1.isSmall)("alert-lightweight", ctx_r1.isLightweight)("alert-app-level", ctx_r1.isAppLevel);
    ɵɵproperty("ngClass", ctx_r1.alertClass);
    ɵɵadvance(3);
    ɵɵproperty("ngIf", ctx_r1.closable);
  }
}
function ClrAlertItem_clr_spinner_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "clr-spinner", 3);
  }
}
function ClrAlertItem_cds_icon_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 4);
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵattribute("shape", ctx_r0.iconService.alertIconShape)("aria-label", ctx_r0.iconService.alertIconTitle);
  }
}
var _c83 = [[["clr-alert"]]];
var _c84 = ["clr-alert"];
function ClrAlerts_clr_alerts_pager_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "clr-alerts-pager", 2);
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("clrCurrentAlertIndex", ctx_r0.currentAlertIndex);
  }
}
function ClrHeader_button_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 3);
    ɵɵlistener("click", function ClrHeader_button_0_Template_button_click_0_listener() {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.openNav(ctx_r1.responsiveNavCodes.NAV_LEVEL_1));
    });
    ɵɵelement(1, "span");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵattribute("aria-label", ctx_r1.responsiveNavCommonString);
  }
}
function ClrHeader_button_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 4);
    ɵɵlistener("click", function ClrHeader_button_2_Template_button_click_0_listener() {
      ɵɵrestoreView(_r3);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.openNav(ctx_r1.responsiveNavCodes.NAV_LEVEL_2));
    });
    ɵɵelement(1, "span");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵattribute("aria-label", ctx_r1.responsiveOverflowCommonString);
  }
}
function TemplateRefContainer_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0);
  }
}
var _c85 = ["tabContentProjectedRef"];
function ClrTabContent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "section", 1);
    ɵɵprojection(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("active", ctx_r0.active);
    ɵɵproperty("id", ctx_r0.tabContentId)("hidden", !ctx_r0.active);
    ɵɵattribute("aria-labelledby", ctx_r0.ariaLabelledBy)("aria-hidden", !ctx_r0.active);
  }
}
var _c86 = ["tabContentViewContainer"];
function ClrTabs_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "li", 5);
    ɵɵelementContainer(2, 6);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const link_r2 = ɵɵnextContext().$implicit;
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", link_r2.templateRefContainer.template);
  }
}
function ClrTabs_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, ClrTabs_ng_container_1_ng_container_1_Template, 3, 1, "ng-container", 4);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const link_r2 = ctx.$implicit;
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵproperty("ngIf", link_r2.tabsId === ctx_r2.tabsId && !link_r2.inOverflow);
  }
}
function ClrTabs_ng_container_2_clr_tab_overflow_content_6_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0, 6);
  }
  if (rf & 2) {
    const link_r7 = ɵɵnextContext().$implicit;
    ɵɵproperty("ngTemplateOutlet", link_r7.templateRefContainer.template);
  }
}
function ClrTabs_ng_container_2_clr_tab_overflow_content_6_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, ClrTabs_ng_container_2_clr_tab_overflow_content_6_ng_container_1_ng_container_1_Template, 1, 1, "ng-container", 13);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const link_r7 = ctx.$implicit;
    const ctx_r2 = ɵɵnextContext(3);
    ɵɵadvance();
    ɵɵproperty("ngIf", link_r7.tabsId === ctx_r2.tabsId && link_r7.inOverflow);
  }
}
function ClrTabs_ng_container_2_clr_tab_overflow_content_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "clr-tab-overflow-content", 12);
    ɵɵlistener("keydown.escape", function ClrTabs_ng_container_2_clr_tab_overflow_content_6_Template_clr_tab_overflow_content_keydown_escape_0_listener() {
      ɵɵrestoreView(_r5);
      const ctx_r2 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r2.closeOnEscapeKey());
    }, false, ɵɵresolveDocument)("click", function ClrTabs_ng_container_2_clr_tab_overflow_content_6_Template_clr_tab_overflow_content_click_0_listener($event) {
      ɵɵrestoreView(_r5);
      ɵɵnextContext();
      const tabOverflowTrigger_r6 = ɵɵreference(4);
      const ctx_r2 = ɵɵnextContext();
      return ɵɵresetView(ctx_r2.closeOnOutsideClick($event, tabOverflowTrigger_r6));
    }, false, ɵɵresolveDocument)("focusout", function ClrTabs_ng_container_2_clr_tab_overflow_content_6_Template_clr_tab_overflow_content_focusout_0_listener($event) {
      ɵɵrestoreView(_r5);
      const ctx_r2 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r2.closeOnFocusOut($event));
    });
    ɵɵtemplate(1, ClrTabs_ng_container_2_clr_tab_overflow_content_6_ng_container_1_Template, 2, 1, "ng-container", 3);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext(2);
    ɵɵadvance();
    ɵɵproperty("ngForOf", ctx_r2.tabLinkDirectives);
  }
}
function ClrTabs_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "div", 7)(2, "li", 8)(3, "button", 9, 1);
    ɵɵlistener("mousedown", function ClrTabs_ng_container_2_Template_button_mousedown_3_listener() {
      ɵɵrestoreView(_r4);
      const ctx_r2 = ɵɵnextContext();
      return ɵɵresetView(ctx_r2._mousedown = true);
    })("focus", function ClrTabs_ng_container_2_Template_button_focus_3_listener() {
      ɵɵrestoreView(_r4);
      const ctx_r2 = ɵɵnextContext();
      return ɵɵresetView(ctx_r2.openOverflowOnFocus());
    })("click", function ClrTabs_ng_container_2_Template_button_click_3_listener() {
      ɵɵrestoreView(_r4);
      const ctx_r2 = ɵɵnextContext();
      return ɵɵresetView(ctx_r2.toggleOverflowOnClick());
    });
    ɵɵelement(5, "cds-icon", 10);
    ɵɵelementEnd()();
    ɵɵtemplate(6, ClrTabs_ng_container_2_clr_tab_overflow_content_6_Template, 2, 1, "clr-tab-overflow-content", 11);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵclassProp("open", ctx_r2.toggleService.open);
    ɵɵadvance(2);
    ɵɵclassProp("active", ctx_r2.activeTabInOverflow)("open", ctx_r2.toggleService.open);
    ɵɵattribute("tabindex", ctx_r2.activeTabInOverflow && !ctx_r2.toggleService.open ? 0 : -1)("title", ctx_r2.commonStrings.keys.more);
    ɵɵadvance(2);
    ɵɵattribute("status", ctx_r2.toggleService.open ? "info" : null)("title", ctx_r2.commonStrings.keys.more);
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r2.toggleService.open);
  }
}
function ClrVerticalNav_button_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 3);
    ɵɵlistener("click", function ClrVerticalNav_button_0_Template_button_click_0_listener() {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.toggleByButton());
    });
    ɵɵelement(1, "cds-icon", 4);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("on-collapse", ctx_r1.collapsed);
    ɵɵattribute("aria-expanded", ctx_r1.ariaExpanded)("aria-label", ctx_r1.commonStrings.keys.verticalNavToggle);
    ɵɵadvance();
    ɵɵattribute("direction", ctx_r1.collapsed ? "right" : "left");
  }
}
function ClrVerticalNav_button_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 5);
    ɵɵlistener("click", function ClrVerticalNav_button_3_Template_button_click_0_listener() {
      ɵɵrestoreView(_r3);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.collapsed = false);
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵattribute("aria-label", ctx_r1.commonStrings.keys.verticalNavToggle);
  }
}
var _c87 = [[["", "clrVerticalNavLink", ""]], [["", "clrVerticalNavIcon", ""]], "*", [["", "clrIfExpanded", ""], ["clr-vertical-nav-group-children"]]];
var _c88 = ["[clrVerticalNavLink]", "[clrVerticalNavIcon]", "*", "[clrIfExpanded], clr-vertical-nav-group-children"];
var _c89 = ["clrVerticalNavLink", ""];
var _c90 = [[["", "clrVerticalNavIcon", ""]], "*"];
var _c91 = ["[clrVerticalNavIcon]", "*"];
var _c92 = [[["", 8, "modal-nav"]], [["", 8, "modal-title"]], [["", 8, "modal-body"]], [["", 8, "modal-footer"]]];
var _c93 = [".modal-nav", ".modal-title", ".modal-body", ".modal-footer"];
function ClrModal_div_0_button_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 11);
    ɵɵlistener("click", function ClrModal_div_0_button_10_Template_button_click_0_listener() {
      ɵɵrestoreView(_r3);
      const ctx_r1 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r1.close());
    });
    ɵɵelement(1, "cds-icon", 12);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵattribute("aria-label", ctx_r1.closeButtonAriaLabel || ctx_r1.commonStrings.keys.close);
  }
}
function ClrModal_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 1)(1, "div", 2);
    ɵɵlistener("@fadeDown.done", function ClrModal_div_0_Template_div_animation_fadeDown_done_1_listener($event) {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.fadeDone($event));
    });
    ɵɵelementStart(2, "div", 3);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementStart(4, "div", 4);
    ɵɵprojection(5);
    ɵɵelementStart(6, "div", 5)(7, "div", 6)(8, "div", 7);
    ɵɵprojection(9, 1);
    ɵɵelementEnd();
    ɵɵtemplate(10, ClrModal_div_0_button_10_Template, 2, 1, "button", 8);
    ɵɵelementEnd();
    ɵɵelementStart(11, "div", 9);
    ɵɵprojection(12, 2);
    ɵɵelementEnd();
    ɵɵprojection(13, 3);
    ɵɵelementEnd()();
    ɵɵelementStart(14, "div", 3);
    ɵɵtext(15);
    ɵɵelementEnd()();
    ɵɵelementStart(16, "div", 10);
    ɵɵlistener("click", function ClrModal_div_0_Template_div_click_16_listener() {
      ɵɵrestoreView(_r1);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.staticBackdrop || ctx_r1.close());
    });
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵclassProp("modal-sm", ctx_r1.size == "sm")("modal-lg", ctx_r1.size == "lg")("modal-xl", ctx_r1.size == "xl");
    ɵɵproperty("cdkTrapFocusAutoCapture", true)("@fadeDown", ctx_r1.skipAnimation);
    ɵɵattribute("aria-hidden", !ctx_r1._open)("aria-labelledby", ctx_r1.labelledBy);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.commonStrings.keys.modalContentStart);
    ɵɵadvance(5);
    ɵɵpropertyInterpolate("id", ctx_r1.modalId);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r1.closable);
    ɵɵadvance(5);
    ɵɵtextInterpolate(ctx_r1.commonStrings.keys.modalContentEnd);
    ɵɵadvance();
    ɵɵproperty("@fade", void 0);
  }
}
function ClrProgressBar_span_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵtextInterpolate(ctx_r0.displayValue);
  }
}
var _c94 = [[["clr-timeline-step-header"]], [["clr-timeline-step-title"]], [["clr-timeline-step-description"]]];
var _c95 = ["clr-timeline-step-header", "clr-timeline-step-title", "clr-timeline-step-description"];
function ClrTimelineStep_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelement(1, "cds-icon", 4);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵattribute("status", ctx_r0.iconStatus)("shape", ctx_r0.iconShape)("aria-label", ctx_r0.iconAriaLabel);
  }
}
function ClrTimelineStep_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "clr-spinner", 5);
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵattribute("aria-label", ctx_r0.iconAriaLabel);
  }
}
var _c96 = ["clr-wizard-stepnav-item", ""];
function ClrWizardStepnavItem_cds_icon_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "cds-icon", 7);
  }
}
function ClrWizardStepnavItem_ng_content_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 0, ["*ngIf", "!hasError"]);
  }
}
function ClrWizardStepnavItem_ng_template_5_Template(rf, ctx) {
}
function ClrWizardStepnavItem_span_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 8);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵtextInterpolate(ctx_r0.commonStrings.keys.wizardStepError);
  }
}
function ClrWizardStepnavItem_span_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 8);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵtextInterpolate(ctx_r0.commonStrings.keys.wizardStepSuccess);
  }
}
function ClrWizardStepnav_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 2);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const page_r1 = ctx.$implicit;
    const i_r2 = ctx.index;
    ɵɵproperty("page", page_r1);
    ɵɵadvance();
    ɵɵtextInterpolate1(" ", i_r2 + 1, " ");
  }
}
var _c97 = ["pageTitle"];
var _c98 = [[["clr-wizard-title"]], "*", [["clr-wizard-header-action"]], [["clr-wizard-button"]]];
var _c99 = ["clr-wizard-title", "*", "clr-wizard-header-action", "clr-wizard-button"];
function ClrWizard_ng_template_8_Template(rf, ctx) {
}
function ClrWizard_div_9_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵprojection(1, 2);
    ɵɵelementEnd();
  }
}
function ClrWizard_div_9_div_2_ng_template_1_Template(rf, ctx) {
}
function ClrWizard_div_9_div_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtemplate(1, ClrWizard_div_9_div_2_ng_template_1_Template, 0, 0, "ng-template", 6);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵadvance();
    ɵɵproperty("ngTemplateOutlet", ctx_r1.navService.currentPage.headerActions);
  }
}
function ClrWizard_div_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 13);
    ɵɵtemplate(1, ClrWizard_div_9_div_1_Template, 2, 0, "div", 14)(2, ClrWizard_div_9_div_2_Template, 2, 1, "div", 14);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r1.headerActionService.showWizardHeaderActions);
    ɵɵadvance();
    ɵɵproperty("ngIf", ctx_r1.headerActionService.currentPageHasHeaderActions);
  }
}
function ClrWizard_div_15_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 15);
    ɵɵprojection(1, 3);
    ɵɵelementEnd();
  }
}
function ClrWizard_div_16_ng_template_1_Template(rf, ctx) {
}
function ClrWizard_div_16_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 15);
    ɵɵtemplate(1, ClrWizard_div_16_ng_template_1_Template, 0, 0, "ng-template", 6);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance();
    ɵɵproperty("ngTemplateOutlet", ctx_r1.navService.currentPage.buttons);
  }
}
var ClrIconCustomTag = class {
};
ClrIconCustomTag.ɵfac = function ClrIconCustomTag_Factory(t161) {
  return new (t161 || ClrIconCustomTag)();
};
ClrIconCustomTag.ɵdir = ɵɵdefineDirective({
  type: ClrIconCustomTag,
  selectors: [["clr-icon"]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrIconCustomTag, [{
    type: Directive,
    args: [{
      selector: "clr-icon"
    }]
  }], null, null);
})();
var CdsIconCustomTag = class {
};
CdsIconCustomTag.ɵfac = function CdsIconCustomTag_Factory(t161) {
  return new (t161 || CdsIconCustomTag)();
};
CdsIconCustomTag.ɵdir = ɵɵdefineDirective({
  type: CdsIconCustomTag,
  selectors: [["cds-icon"]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdsIconCustomTag, [{
    type: Directive,
    args: [{
      selector: "cds-icon"
    }]
  }], null, null);
})();
var CLR_ICON_DIRECTIVES = [ClrIconCustomTag, CdsIconCustomTag];
var ClrIconModule = class {
};
ClrIconModule.ɵfac = function ClrIconModule_Factory(t161) {
  return new (t161 || ClrIconModule)();
};
ClrIconModule.ɵmod = ɵɵdefineNgModule({
  type: ClrIconModule,
  declarations: [ClrIconCustomTag, CdsIconCustomTag],
  imports: [CommonModule],
  exports: [ClrIconCustomTag, CdsIconCustomTag]
});
ClrIconModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrIconModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [CLR_ICON_DIRECTIVES],
      exports: [CLR_ICON_DIRECTIVES]
    }]
  }], null, null);
})();
var LoadingListener = class {
};
var ClrLoadingState;
(function(ClrLoadingState2) {
  ClrLoadingState2[ClrLoadingState2["DEFAULT"] = 0] = "DEFAULT";
  ClrLoadingState2[ClrLoadingState2["LOADING"] = 1] = "LOADING";
  ClrLoadingState2[ClrLoadingState2["SUCCESS"] = 2] = "SUCCESS";
  ClrLoadingState2[ClrLoadingState2["ERROR"] = 3] = "ERROR";
})(ClrLoadingState || (ClrLoadingState = {}));
var ClrLoading = class {
  // We find the first parent that handles something loading
  constructor(listener) {
    this.listener = listener;
    this._loadingState = ClrLoadingState.DEFAULT;
  }
  get loadingState() {
    return this._loadingState;
  }
  set loadingState(value) {
    if (value === true) {
      value = ClrLoadingState.LOADING;
    } else if (!value) {
      value = ClrLoadingState.DEFAULT;
    }
    if (value === this._loadingState) {
      return;
    }
    this._loadingState = value;
    if (this.listener) {
      this.listener.loadingStateChange(value);
    }
  }
  ngOnDestroy() {
    this.loadingState = ClrLoadingState.DEFAULT;
  }
};
ClrLoading.ɵfac = function ClrLoading_Factory(t161) {
  return new (t161 || ClrLoading)(ɵɵdirectiveInject(LoadingListener, 8));
};
ClrLoading.ɵdir = ɵɵdefineDirective({
  type: ClrLoading,
  selectors: [["", "clrLoading", ""]],
  inputs: {
    loadingState: [InputFlags.None, "clrLoading", "loadingState"]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrLoading, [{
    type: Directive,
    args: [{
      selector: "[clrLoading]"
    }]
  }], function() {
    return [{
      type: LoadingListener,
      decorators: [{
        type: Optional
      }]
    }];
  }, {
    loadingState: [{
      type: Input,
      args: ["clrLoading"]
    }]
  });
})();
var IfExpandService = class {
  constructor() {
    this.expandable = 0;
    this._loading = false;
    this._expanded = false;
    this._expandChange = new Subject();
  }
  get loading() {
    return this._loading;
  }
  set loading(value) {
    value = !!value;
    if (value !== this._loading) {
      this._loading = value;
    }
  }
  get expanded() {
    return this._expanded;
  }
  set expanded(value) {
    value = !!value;
    if (value !== this._expanded) {
      this._expanded = value;
      this._expandChange.next(value);
    }
  }
  get expandChange() {
    return this._expandChange.asObservable();
  }
  toggle() {
    this.expanded = !this._expanded;
  }
  loadingStateChange(state2) {
    switch (state2) {
      case ClrLoadingState.LOADING:
        this.loading = true;
        break;
      default:
        this.loading = false;
        break;
    }
  }
};
IfExpandService.ɵfac = function IfExpandService_Factory(t161) {
  return new (t161 || IfExpandService)();
};
IfExpandService.ɵprov = ɵɵdefineInjectable({
  token: IfExpandService,
  factory: IfExpandService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IfExpandService, [{
    type: Injectable
  }], null, null);
})();
var NB_INSTANCES = 0;
function uniqueIdFactory() {
  return "clr-id-" + NB_INSTANCES++;
}
var ClrAccordionDescription = class {
};
ClrAccordionDescription.ɵfac = function ClrAccordionDescription_Factory(t161) {
  return new (t161 || ClrAccordionDescription)();
};
ClrAccordionDescription.ɵcmp = ɵɵdefineComponent({
  type: ClrAccordionDescription,
  selectors: [["clr-accordion-description"], ["clr-step-description"]],
  hostVars: 2,
  hostBindings: function ClrAccordionDescription_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-accordion-description", true);
    }
  },
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrAccordionDescription_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrAccordionDescription, [{
    type: Component,
    args: [{
      selector: "clr-accordion-description, clr-step-description",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.clr-accordion-description]": "true"
      },
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], null, null);
})();
var AccordionStatus;
(function(AccordionStatus2) {
  AccordionStatus2["Inactive"] = "inactive";
  AccordionStatus2["Error"] = "error";
  AccordionStatus2["Complete"] = "complete";
})(AccordionStatus || (AccordionStatus = {}));
var defaultAnimationTiming = "0.2s ease-in-out";
var panelAnimation = [trigger("skipInitialRender", [transition(":enter", [])]), trigger("toggle", [transition("void => *", [style({
  display: "block",
  height: 0
}), animate(defaultAnimationTiming, style({
  height: "*"
}))])])];
var stepAnimation = [trigger("skipInitialRender", [transition(":enter", [])]), trigger("toggle", [transition("void => *", [style({
  display: "block",
  height: 0
}), animate(defaultAnimationTiming, style({
  height: "*"
}))]), transition("* => void", [style({
  display: "block"
}), animate(defaultAnimationTiming, style({
  height: 0,
  display: "none"
}))])])];
var commonStringsDefault = {
  open: "Open",
  close: "Close",
  show: "Show",
  hide: "Hide",
  expand: "Expand",
  collapse: "Collapse",
  more: "More",
  select: "Select",
  selectAll: "Select All",
  previous: "Previous",
  next: "Next",
  current: "Jump to current",
  info: "Info",
  success: "Success",
  warning: "Warning",
  danger: "Error",
  neutral: "Neutral",
  unknown: "Unknown",
  rowActions: "Available actions",
  pickColumns: "Manage Columns",
  showColumns: "Show Columns",
  sortColumn: "Sort Column",
  firstPage: "First Page",
  lastPage: "Last Page",
  nextPage: "Next Page",
  previousPage: "Previous Page",
  currentPage: "Current Page",
  totalPages: "Total Pages",
  filterItems: "Filter items",
  minValue: "Min value",
  maxValue: "Max value",
  modalContentStart: "Beginning of Modal Content",
  modalContentEnd: "End of Modal Content",
  showColumnsMenuDescription: "Show or hide columns menu",
  allColumnsSelected: "All columns selected",
  signpostToggle: "Signpost Toggle",
  signpostClose: "Signpost Close",
  loading: "Loading",
  // Datagrid
  detailPaneStart: "Start of row details",
  detailPaneEnd: "End of row details",
  singleSelectionAriaLabel: "Single selection header",
  singleActionableAriaLabel: "Single actionable header",
  detailExpandableAriaLabel: "Toggle more row content",
  datagridFilterAriaLabel: "Toggle {COLUMN} filter",
  datagridFilterDialogAriaLabel: "Filter dialog",
  columnSeparatorAriaLabel: "Column resize handle",
  columnSeparatorDescription: "Use left or right key to resize the column",
  // Alert
  alertCloseButtonAriaLabel: "Close alert",
  alertNextAlertAriaLabel: "Next alert message, {CURRENT} of {COUNT}",
  alertPreviousAlertAriaLabel: "Previous alert message, {CURRENT} of {COUNT}",
  // Date Picker
  datepickerDialogLabel: "Choose date",
  datepickerToggleChooseDateLabel: "Choose date",
  datepickerToggleChangeDateLabel: "Change date, {SELECTED_DATE}",
  datepickerPreviousMonth: "Previous month",
  datepickerCurrentMonth: "Current month",
  datepickerNextMonth: "Next month",
  datepickerPreviousDecade: "Previous decade",
  datepickerNextDecade: "Next decade",
  datepickerCurrentDecade: "Current decade",
  datepickerSelectMonthText: "Select month, the current month is {CALENDAR_MONTH}",
  datepickerSelectYearText: "Select year, the current year is {CALENDAR_YEAR}",
  datepickerSelectedLabel: "{FULL_DATE} - Selected",
  // Stack View
  stackViewChanged: "Value changed.",
  // Responsive Nav
  responsiveNavToggleOpen: "Open navigation menu",
  responsiveNavToggleClose: "Close navigation menu",
  responsiveNavOverflowOpen: "Open navigation overflow menu",
  responsiveNavOverflowClose: "Close navigation overflow menu",
  //Vertical Nav
  verticalNavToggle: "Toggle vertical navigation",
  // Timeline steps
  timelineStepNotStarted: "Not started",
  timelineStepCurrent: "Current",
  timelineStepSuccess: "Completed",
  timelineStepError: "Error",
  timelineStepProcessing: "In progress",
  // Combobox
  comboboxDelete: "Delete selected option",
  comboboxSearching: 'Searching for matches for "{INPUT}"',
  comboboxSelection: "Selection",
  comboboxSelected: "Selected",
  comboboxNoResults: "No results",
  comboboxOpen: "Show options",
  // Datagrid expandable rows
  datagridExpandableBeginningOf: "Beginning of",
  datagridExpandableEndOf: "End of",
  datagridExpandableRowContent: "Expandable row content",
  datagridExpandableRowsHelperText: `Screen reader table commands may not work for viewing expanded content, please use your screen reader's browse mode to read the content exposed by this button`,
  // Wizard
  wizardStepSuccess: "Completed",
  wizardStepError: "Error",
  wizardStepnavAriaLabel: "Step navigation",
  /**
   * Password Input
   * Screen-reader text for the hide/show password field button
   */
  passwordHide: "Hide password for {LABEL}",
  passwordShow: "Show password for {LABEL}",
  /**
   * Datagrid footer; sr-only text after the number of selected rows.
   */
  selectedRows: "Selected rows"
};
var ClrCommonStringsService = class {
  constructor() {
    this._strings = commonStringsDefault;
  }
  /**
   * Access to all of the keys as strings
   */
  get keys() {
    return this._strings;
  }
  /**
   * Allows you to pass in new overrides for localization
   */
  localize(overrides) {
    this._strings = __spreadValues(__spreadValues({}, this._strings), overrides);
  }
  /**
   * Parse a string with a set of tokens to replace
   */
  parse(source, tokens = {}) {
    const names = Object.keys(tokens);
    let output = source;
    if (names.length) {
      names.forEach((name) => {
        output = output.replace(`{${name}}`, tokens[name]);
      });
    }
    return output;
  }
};
ClrCommonStringsService.ɵfac = function ClrCommonStringsService_Factory(t161) {
  return new (t161 || ClrCommonStringsService)();
};
ClrCommonStringsService.ɵprov = ɵɵdefineInjectable({
  token: ClrCommonStringsService,
  factory: ClrCommonStringsService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrCommonStringsService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var AccordionStrategy;
(function(AccordionStrategy2) {
  AccordionStrategy2["Default"] = "default";
  AccordionStrategy2["Multi"] = "multi";
})(AccordionStrategy || (AccordionStrategy = {}));
var accordionCount = 0;
var AccordionPanelModel = class {
  constructor(id, accordionId) {
    this.id = id;
    this.accordionId = accordionId;
    this.status = AccordionStatus.Inactive;
    this.index = null;
    this.disabled = false;
    this.open = false;
    this.templateId = `${this.id}-${this.accordionId}`;
  }
};
var AccordionModel = class {
  constructor() {
    this.strategy = AccordionStrategy.Default;
    this.accordionCount = accordionCount++;
    this._panels = {};
  }
  get panels() {
    return Object.keys(this._panels).map((id) => this._panels[id]);
  }
  setStrategy(strategy) {
    this.strategy = strategy;
  }
  updatePanelOrder(ids) {
    ids.forEach((id, index) => this._panels[id].index = index);
    this.removeOldPanels(ids);
  }
  addPanel(id, open = false) {
    this._panels[id] = new AccordionPanelModel(id, this.accordionCount);
    this._panels[id].open = open;
  }
  togglePanel(panelId, open) {
    const panelIsOpen = this._panels[panelId].open;
    const newOpenState = open !== void 0 ? open : !panelIsOpen;
    if (newOpenState && this.strategy === AccordionStrategy.Default) {
      this.closeAllPanels();
    }
    this._panels[panelId].open = newOpenState;
  }
  disablePanel(panelId, disabled) {
    this._panels[panelId].disabled = disabled;
  }
  closeAllPanels() {
    this.panels.forEach((panel) => this._panels[panel.id].open = false);
  }
  removeOldPanels(ids) {
    this.panels.filter((panel) => ids.find((id) => id === panel.id) === void 0).forEach((panel) => delete this._panels[panel.id]);
  }
};
var AccordionService = class {
  constructor() {
    this.accordion = new AccordionModel();
    this._panelsChanges = new BehaviorSubject(this.accordion.panels);
  }
  getPanelChanges(panelId) {
    return this._panelsChanges.pipe(map((panels) => panels.find((s27) => s27.id === panelId)));
  }
  setStrategy(strategy) {
    this.accordion.setStrategy(strategy);
  }
  addPanel(panelId, open = false) {
    this.accordion.addPanel(panelId, open);
    this.emitUpdatedPanels();
  }
  togglePanel(panelId, open) {
    this.accordion.togglePanel(panelId, open);
    this.emitUpdatedPanels();
  }
  disablePanel(panelId, disabled) {
    this.accordion.disablePanel(panelId, disabled);
    this.emitUpdatedPanels();
  }
  updatePanelOrder(ids) {
    this.accordion.updatePanelOrder(ids);
    this.emitUpdatedPanels();
  }
  emitUpdatedPanels() {
    this._panelsChanges.next(this.accordion.panels);
  }
};
AccordionService.ɵfac = function AccordionService_Factory(t161) {
  return new (t161 || AccordionService)();
};
AccordionService.ɵprov = ɵɵdefineInjectable({
  token: AccordionService,
  factory: AccordionService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AccordionService, [{
    type: Injectable
  }], null, null);
})();
var ClrAccordionPanel = class {
  constructor(commonStrings, accordionService, ifExpandService, cdr) {
    this.commonStrings = commonStrings;
    this.accordionService = accordionService;
    this.ifExpandService = ifExpandService;
    this.cdr = cdr;
    this.disabled = false;
    this.panelOpen = false;
    this.panelOpenChange = new EventEmitter();
    this.AccordionStatus = AccordionStatus;
    this.isAccordion = true;
    this._id = uniqueIdFactory();
  }
  get id() {
    return this._id;
  }
  set id(value) {
    this._id = value;
  }
  get panelNumber() {
    return this._panelIndex + 1;
  }
  ngOnInit() {
    this.panel = this.accordionService.getPanelChanges(this.id).pipe(tap((panel) => this.emitPanelChange(panel)));
    this.accordionService.addPanel(this.id, this.panelOpen);
    this.accordionService.togglePanel(this.id, this.panelOpen);
    this.accordionService.disablePanel(this.id, this.disabled);
  }
  ngOnChanges(changes) {
    if (this.panel && changes.panelOpen && changes.panelOpen.currentValue !== changes.panelOpen.previousValue) {
      this.accordionService.togglePanel(this.id, changes.panelOpen.currentValue);
    }
    if (this.panel && changes.disabled && changes.disabled.currentValue !== changes.disabled.previousValue) {
      this.accordionService.disablePanel(this.id, changes.disabled.currentValue);
    }
  }
  togglePanel() {
    this.accordionService.togglePanel(this.id);
  }
  collapsePanelOnAnimationDone(panel) {
    if (!panel.open) {
      this.ifExpandService.expanded = false;
    }
  }
  getPanelStateClasses(panel) {
    return `clr-accordion-panel-${panel.status} ${panel.open ? "clr-accordion-panel-open" : ""}`;
  }
  getAccordionContentId(id) {
    return `clr-accordion-content-${id}'`;
  }
  getAccordionHeaderId(id) {
    return `clr-accordion-header-${id}`;
  }
  emitPanelChange(panel) {
    if (panel.index !== this._panelIndex) {
      this._panelIndex = panel.index;
      this.cdr.detectChanges();
    }
    if (panel.open !== this.panelOpen) {
      this.panelOpenChange.emit(panel.open);
      this.panelOpen = panel.open;
    }
    if (panel.open) {
      this.ifExpandService.expanded = true;
    }
  }
};
ClrAccordionPanel.ɵfac = function ClrAccordionPanel_Factory(t161) {
  return new (t161 || ClrAccordionPanel)(ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(AccordionService), ɵɵdirectiveInject(IfExpandService), ɵɵdirectiveInject(ChangeDetectorRef));
};
ClrAccordionPanel.ɵcmp = ɵɵdefineComponent({
  type: ClrAccordionPanel,
  selectors: [["clr-accordion-panel"]],
  contentQueries: function ClrAccordionPanel_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrAccordionDescription, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.accordionDescription = _t);
    }
  },
  hostVars: 4,
  hostBindings: function ClrAccordionPanel_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-accordion-panel", true)("clr-accordion-panel-disabled", ctx.disabled);
    }
  },
  inputs: {
    disabled: [InputFlags.None, "clrAccordionPanelDisabled", "disabled"],
    panelOpen: [InputFlags.None, "clrAccordionPanelOpen", "panelOpen"]
  },
  outputs: {
    panelOpenChange: "clrAccordionPanelOpenChange"
  },
  features: [ɵɵProvidersFeature([IfExpandService]), ɵɵNgOnChangesFeature],
  ngContentSelectors: _c22,
  decls: 2,
  vars: 3,
  consts: [["headerButton", ""], [4, "ngIf"], [3, "ngClass"], [1, "clr-accordion-header"], ["type", "button", 1, "clr-accordion-header-button", 3, "click", "id", "disabled"], [1, "clr-sr-only"], [1, "clr-accordion-status"], ["shape", "angle", "direction", "right", 1, "clr-accordion-angle"], [1, "clr-accordion-number"], ["status", "danger", "shape", "exclamation-circle", 1, "clr-accordion-error-icon"], ["status", "success", "shape", "check-circle", 1, "clr-accordion-complete-icon"], ["role", "region", 1, "clr-accordion-content-region", 3, "id"], ["class", "clr-accordion-content", 4, "ngIf"], [1, "clr-accordion-content"], [1, "clr-accordion-inner-content"]],
  template: function ClrAccordionPanel_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c12);
      ɵɵtemplate(0, ClrAccordionPanel_ng_container_0_Template, 19, 18, "ng-container", 1);
      ɵɵpipe(1, "async");
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 1, ctx.panel));
    }
  },
  dependencies: [NgClass, NgIf, CdsIconCustomTag, AsyncPipe],
  encapsulation: 2,
  data: {
    animation: panelAnimation
  },
  changeDetection: 0
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrAccordionPanel, [{
    type: Component,
    args: [{
      selector: "clr-accordion-panel",
      host: {
        "[class.clr-accordion-panel]": "true"
      },
      changeDetection: ChangeDetectionStrategy.OnPush,
      animations: panelAnimation,
      providers: [IfExpandService],
      template: '<ng-container *ngIf="panel | async; let panel">\n  <div [ngClass]="getPanelStateClasses(panel)">\n    <div class="clr-accordion-header">\n      <button\n        type="button"\n        class="clr-accordion-header-button"\n        (click)="togglePanel()"\n        [id]="getAccordionHeaderId(panel.templateId)"\n        [disabled]="isAccordion && panel.disabled"\n        [attr.aria-disabled]="!isAccordion && panel.disabled"\n        [attr.aria-controls]="getAccordionContentId(panel.templateId)"\n        [attr.aria-expanded]="panel.open"\n        [class.clr-accordion-header-has-description]="(accordionDescription.changes | async)?.length || accordionDescription.length"\n        #headerButton\n      >\n        <span class="clr-sr-only">\n          <ng-container *ngIf="panel.status === AccordionStatus.Error">{{commonStrings.keys.danger}}</ng-container>\n          <ng-container *ngIf="panel.status === AccordionStatus.Complete">{{commonStrings.keys.success}}</ng-container>\n        </span>\n        <span class="clr-accordion-status">\n          <cds-icon shape="angle" direction="right" class="clr-accordion-angle"></cds-icon>\n          <span class="clr-accordion-number">{{panelNumber}}.</span>\n          <cds-icon status="danger" shape="exclamation-circle" class="clr-accordion-error-icon"></cds-icon>\n          <cds-icon status="success" shape="check-circle" class="clr-accordion-complete-icon"></cds-icon>\n        </span>\n        <ng-content select="clr-accordion-title, clr-step-title"></ng-content>\n        <ng-content select="clr-accordion-description, clr-step-description"></ng-content>\n      </button>\n    </div>\n    <div\n      @skipInitialRender\n      role="region"\n      class="clr-accordion-content-region"\n      [id]="getAccordionContentId(panel.templateId)"\n      [attr.aria-hidden]="!panel.open"\n      [attr.aria-labelledby]="getAccordionHeaderId(panel.templateId)"\n    >\n      <div\n        *ngIf="panel.open"\n        @toggle\n        (@toggle.done)="collapsePanelOnAnimationDone(panel)"\n        class="clr-accordion-content"\n      >\n        <div class="clr-accordion-inner-content">\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-container>\n'
    }]
  }], function() {
    return [{
      type: ClrCommonStringsService
    }, {
      type: AccordionService
    }, {
      type: IfExpandService
    }, {
      type: ChangeDetectorRef
    }];
  }, {
    disabled: [{
      type: Input,
      args: ["clrAccordionPanelDisabled"]
    }, {
      type: HostBinding,
      args: ["class.clr-accordion-panel-disabled"]
    }],
    panelOpen: [{
      type: Input,
      args: ["clrAccordionPanelOpen"]
    }],
    panelOpenChange: [{
      type: Output,
      args: ["clrAccordionPanelOpenChange"]
    }],
    accordionDescription: [{
      type: ContentChildren,
      args: [ClrAccordionDescription]
    }]
  });
})();
var ClrAccordion = class {
  constructor(accordionService) {
    this.accordionService = accordionService;
    this.multiPanel = false;
    this.subscriptions = [];
  }
  ngOnInit() {
    this.setAccordionStrategy();
  }
  ngOnChanges(changes) {
    if (changes.multiPanel.currentValue !== changes.multiPanel.previousValue) {
      this.setAccordionStrategy();
    }
  }
  ngAfterViewInit() {
    this.subscriptions.push(this.listenForDOMChanges());
  }
  ngOnDestroy() {
    this.subscriptions.forEach((s27) => s27.unsubscribe());
  }
  setAccordionStrategy() {
    const strategy = this.multiPanel ? AccordionStrategy.Multi : AccordionStrategy.Default;
    this.accordionService.setStrategy(strategy);
  }
  listenForDOMChanges() {
    return this.panels.changes.pipe(startWith(this.panels)).subscribe((panels) => this.accordionService.updatePanelOrder(panels.toArray().map((p14) => p14.id)));
  }
};
ClrAccordion.ɵfac = function ClrAccordion_Factory(t161) {
  return new (t161 || ClrAccordion)(ɵɵdirectiveInject(AccordionService));
};
ClrAccordion.ɵcmp = ɵɵdefineComponent({
  type: ClrAccordion,
  selectors: [["clr-accordion"]],
  contentQueries: function ClrAccordion_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrAccordionPanel, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.panels = _t);
    }
  },
  hostVars: 2,
  hostBindings: function ClrAccordion_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-accordion", true);
    }
  },
  inputs: {
    multiPanel: [InputFlags.None, "clrAccordionMultiPanel", "multiPanel"]
  },
  features: [ɵɵProvidersFeature([AccordionService]), ɵɵNgOnChangesFeature],
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrAccordion_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrAccordion, [{
    type: Component,
    args: [{
      selector: "clr-accordion",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.clr-accordion]": "true"
      },
      providers: [AccordionService],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: AccordionService
    }];
  }, {
    multiPanel: [{
      type: Input,
      args: ["clrAccordionMultiPanel"]
    }],
    panels: [{
      type: ContentChildren,
      args: [ClrAccordionPanel]
    }]
  });
})();
var ClrAccordionContent = class {
};
ClrAccordionContent.ɵfac = function ClrAccordionContent_Factory(t161) {
  return new (t161 || ClrAccordionContent)();
};
ClrAccordionContent.ɵcmp = ɵɵdefineComponent({
  type: ClrAccordionContent,
  selectors: [["clr-accordion-content"], ["clr-step-content"]],
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrAccordionContent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrAccordionContent, [{
    type: Component,
    args: [{
      selector: "clr-accordion-content, clr-step-content",
      template: `<ng-content></ng-content>`,
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], null, null);
})();
var ClrAccordionTitle = class {
};
ClrAccordionTitle.ɵfac = function ClrAccordionTitle_Factory(t161) {
  return new (t161 || ClrAccordionTitle)();
};
ClrAccordionTitle.ɵcmp = ɵɵdefineComponent({
  type: ClrAccordionTitle,
  selectors: [["clr-accordion-title"], ["clr-step-title"]],
  hostVars: 2,
  hostBindings: function ClrAccordionTitle_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-accordion-title", true);
    }
  },
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrAccordionTitle_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrAccordionTitle, [{
    type: Component,
    args: [{
      selector: "clr-accordion-title, clr-step-title",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.clr-accordion-title]": "true"
      },
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], null, null);
})();
var WillyWonka = class {
  constructor() {
    this.disableChocolateCheck = false;
    this._chocolate = new Subject();
  }
  get chocolate() {
    return this._chocolate.asObservable();
  }
  ngAfterViewChecked() {
    if (!this.disableChocolateCheck) {
      this._chocolate.next();
    }
  }
};
WillyWonka.ɵfac = function WillyWonka_Factory(t161) {
  return new (t161 || WillyWonka)();
};
WillyWonka.ɵdir = ɵɵdefineDirective({
  type: WillyWonka
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(WillyWonka, [{
    type: Directive
  }], null, null);
})();
var OompaLoompa = class {
  // FIXME: Request Injector once we move to Angular 4.2+, it'll allow easier refactors
  constructor(cdr, willyWonka) {
    this.subscription = willyWonka.chocolate.subscribe(() => {
      if (this.latestFlavor !== this.flavor) {
        willyWonka.disableChocolateCheck = true;
        cdr.detectChanges();
        willyWonka.disableChocolateCheck = false;
      }
    });
  }
  ngAfterContentChecked() {
    this.latestFlavor = this.flavor;
  }
  ngOnDestroy() {
    this.subscription.unsubscribe();
  }
};
OompaLoompa.ɵfac = function OompaLoompa_Factory(t161) {
  return new (t161 || OompaLoompa)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(WillyWonka));
};
OompaLoompa.ɵdir = ɵɵdefineDirective({
  type: OompaLoompa
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(OompaLoompa, [{
    type: Directive
  }], function() {
    return [{
      type: ChangeDetectorRef
    }, {
      type: WillyWonka
    }];
  }, null);
})();
var AccordionWillyWonka = class extends WillyWonka {
};
AccordionWillyWonka.ɵfac = /* @__PURE__ */ (() => {
  let ɵAccordionWillyWonka_BaseFactory;
  return function AccordionWillyWonka_Factory(t161) {
    return (ɵAccordionWillyWonka_BaseFactory || (ɵAccordionWillyWonka_BaseFactory = ɵɵgetInheritedFactory(AccordionWillyWonka)))(t161 || AccordionWillyWonka);
  };
})();
AccordionWillyWonka.ɵdir = ɵɵdefineDirective({
  type: AccordionWillyWonka,
  selectors: [["clr-accordion"]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AccordionWillyWonka, [{
    type: Directive,
    args: [{
      selector: "clr-accordion"
    }]
  }], null, null);
})();
var AccordionOompaLoompa = class extends OompaLoompa {
  constructor(cdr, willyWonka, ifExpandService) {
    if (!willyWonka) {
      throw new Error("clr-accordion-panel should only be used inside of clr-accordion");
    }
    super(cdr, willyWonka);
    this.expand = ifExpandService;
  }
  get flavor() {
    return this.expand.expanded;
  }
};
AccordionOompaLoompa.ɵfac = function AccordionOompaLoompa_Factory(t161) {
  return new (t161 || AccordionOompaLoompa)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(AccordionWillyWonka, 8), ɵɵdirectiveInject(IfExpandService));
};
AccordionOompaLoompa.ɵdir = ɵɵdefineDirective({
  type: AccordionOompaLoompa,
  selectors: [["clr-accordion-panel"]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AccordionOompaLoompa, [{
    type: Directive,
    args: [{
      selector: "clr-accordion-panel"
    }]
  }], function() {
    return [{
      type: ChangeDetectorRef
    }, {
      type: AccordionWillyWonka,
      decorators: [{
        type: Optional
      }]
    }, {
      type: IfExpandService
    }];
  }, null);
})();
var declarations$1 = [ClrAccordion, ClrAccordionPanel, ClrAccordionTitle, ClrAccordionDescription, ClrAccordionContent, AccordionOompaLoompa, AccordionWillyWonka];
var ClrAccordionModule = class {
  constructor() {
    r24.addIcons(o28, e30, l7);
  }
};
ClrAccordionModule.ɵfac = function ClrAccordionModule_Factory(t161) {
  return new (t161 || ClrAccordionModule)();
};
ClrAccordionModule.ɵmod = ɵɵdefineNgModule({
  type: ClrAccordionModule,
  declarations: [ClrAccordion, ClrAccordionPanel, ClrAccordionTitle, ClrAccordionDescription, ClrAccordionContent, AccordionOompaLoompa, AccordionWillyWonka],
  imports: [CommonModule, ClrIconModule],
  exports: [ClrAccordion, ClrAccordionPanel, ClrAccordionTitle, ClrAccordionDescription, ClrAccordionContent, AccordionOompaLoompa, AccordionWillyWonka]
});
ClrAccordionModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrIconModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrAccordionModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrIconModule],
      declarations: [...declarations$1],
      exports: [...declarations$1]
    }]
  }], function() {
    return [];
  }, null);
})();
function triggerAllFormControlValidation(formGroup) {
  Object.keys(formGroup.controls).forEach((field) => {
    const control = formGroup.get(field);
    if (control instanceof FormControl) {
      control.markAsTouched();
      control.markAsDirty();
      control.updateValueAndValidity();
    } else if (control instanceof FormGroup) {
      triggerAllFormControlValidation(control);
    }
  });
}
var StepperModel = class extends AccordionModel {
  constructor() {
    super(...arguments);
    this.stepperModelInitialize = false;
  }
  get allPanelsCompleted() {
    return this.panels.length && this.getNumberOfIncompletePanels() === 0 && this.getNumberOfOpenPanels() === 0;
  }
  get shouldOpenFirstPanel() {
    return !this.initialPanel || this._panels && Object.keys(this._panels).length && !this._panels[this.initialPanel];
  }
  addPanel(id, open = false) {
    super.addPanel(id, open);
    this._panels[id].disabled = true;
  }
  updatePanelOrder(ids) {
    super.updatePanelOrder(ids);
    if (this.stepperModelInitialize === false) {
      this.openFirstPanel();
    }
  }
  togglePanel(panelId) {
    if (this._panels[panelId].status === AccordionStatus.Complete) {
      this._panels[panelId].open = !this._panels[panelId].open;
    }
  }
  navigateToNextPanel(currentPanelId, currentPanelValid = true) {
    if (currentPanelValid) {
      this.completePanel(currentPanelId);
      this.openNextPanel(this._panels[currentPanelId].id);
    } else {
      this.setPanelError(currentPanelId);
    }
  }
  overrideInitialPanel(panelId) {
    this.initialPanel = panelId;
    this.panels.filter(() => this._panels[panelId] !== void 0).forEach((panel) => {
      if (panel.index < this._panels[panelId].index) {
        this.completePanel(panel.id);
      } else if (panel.id === panelId) {
        this._panels[panel.id].open = true;
      } else {
        this._panels[panel.id].open = false;
      }
    });
  }
  setPanelValid(panelId) {
    this._panels[panelId].status = AccordionStatus.Complete;
  }
  setPanelInvalid(panelId) {
    this._panels[panelId].status = AccordionStatus.Error;
  }
  setPanelsWithErrors(ids) {
    ids.forEach((id) => this.setPanelError(id));
  }
  resetPanels() {
    this.stepperModelInitialize = false;
    this.panels.forEach((p14) => this.resetPanel(p14.id));
    this.openFirstPanel();
  }
  getNextPanel(currentPanelId) {
    return this.panels.find((s27) => s27.index === this._panels[currentPanelId].index + 1);
  }
  resetAllFuturePanels(panelId) {
    this.panels.filter((panel) => panel.index >= this._panels[panelId].index).forEach((panel) => this.resetPanel(panel.id));
  }
  resetPanel(panelId) {
    this._panels[panelId].status = AccordionStatus.Inactive;
    this._panels[panelId].open = false;
    this._panels[panelId].disabled = true;
  }
  openFirstPanel() {
    if (!this.shouldOpenFirstPanel) {
      return;
    }
    const firstPanel = this.getFirstPanel();
    if (!firstPanel) {
      return;
    }
    this._panels[firstPanel.id].open = true;
    this._panels[firstPanel.id].disabled = true;
    this.stepperModelInitialize = true;
  }
  completePanel(panelId) {
    this._panels[panelId].status = AccordionStatus.Complete;
    this._panels[panelId].disabled = false;
    this._panels[panelId].open = false;
  }
  openNextPanel(currentPanelId) {
    const nextPanel = this.getNextPanel(currentPanelId);
    if (nextPanel) {
      this.resetAllFuturePanels(nextPanel.id);
      this._panels[nextPanel.id].open = true;
      this._panels[nextPanel.id].disabled = true;
    }
  }
  setPanelError(panelId) {
    this.resetAllFuturePanels(panelId);
    this._panels[panelId].open = true;
    this._panels[panelId].status = AccordionStatus.Error;
  }
  getFirstPanel() {
    return this.panels.find((panel) => panel.index === 0);
  }
  getNumberOfIncompletePanels() {
    return this.panels.reduce((prev, next) => next.status !== AccordionStatus.Complete ? prev + 1 : prev, 0);
  }
  getNumberOfOpenPanels() {
    return this.panels.reduce((prev, next) => next.open !== false ? prev + 1 : prev, 0);
  }
};
var StepperService = class extends AccordionService {
  constructor() {
    super();
    this.panelsCompleted = this.getAllCompletedPanelChanges();
    this.accordion = new StepperModel();
    this._activeStepChanges = new Subject();
    this.activeStep = this._activeStepChanges.asObservable();
  }
  resetPanels() {
    this.accordion.resetPanels();
    this.emitUpdatedPanels();
  }
  setPanelValid(panelId) {
    this.accordion.setPanelValid(panelId);
    this.emitUpdatedPanels();
  }
  setPanelInvalid(panelId) {
    this.accordion.setPanelInvalid(panelId);
    this.emitUpdatedPanels();
  }
  setPanelsWithErrors(ids) {
    this.accordion.setPanelsWithErrors(ids);
    this.emitUpdatedPanels();
  }
  navigateToNextPanel(currentPanelId, currentPanelValid = true) {
    this.accordion.navigateToNextPanel(currentPanelId, currentPanelValid);
    this.updateNextStep(currentPanelId, currentPanelValid);
    this.emitUpdatedPanels();
  }
  overrideInitialPanel(panelId) {
    this.accordion.overrideInitialPanel(panelId);
    this.emitUpdatedPanels();
  }
  updateNextStep(currentPanelId, currentPanelValid) {
    const nextPanel = this.accordion.getNextPanel(currentPanelId);
    if (currentPanelValid && nextPanel) {
      this._activeStepChanges.next(nextPanel.id);
    } else if (currentPanelValid) {
      this._activeStepChanges.next(currentPanelId);
    }
  }
  getAllCompletedPanelChanges() {
    return this._panelsChanges.pipe(map(() => this.accordion.allPanelsCompleted), distinctUntilChanged());
  }
};
StepperService.ɵfac = function StepperService_Factory(t161) {
  return new (t161 || StepperService)();
};
StepperService.ɵprov = ɵɵdefineInjectable({
  token: StepperService,
  factory: StepperService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StepperService, [{
    type: Injectable
  }], function() {
    return [];
  }, null);
})();
var ClrStepperPanel = class extends ClrAccordionPanel {
  constructor(platformId, commonStrings, formGroupName, ngModelGroup, stepperService, ifExpandService, cdr) {
    super(commonStrings, stepperService, ifExpandService, cdr);
    this.platformId = platformId;
    this.commonStrings = commonStrings;
    this.formGroupName = formGroupName;
    this.ngModelGroup = ngModelGroup;
    this.stepperService = stepperService;
    this.isAccordion = false;
    this.subscriptions = [];
  }
  get id() {
    return this.formGroupName ? this.formGroupName.name.toString() : this.ngModelGroup.name;
  }
  set id(_value) {
  }
  get formGroup() {
    return this.formGroupName ? this.formGroupName.control : this.ngModelGroup.control;
  }
  ngOnInit() {
    super.ngOnInit();
    this.panel = this.panel.pipe(tap((panel) => this.triggerAllFormControlValidationIfError(panel)));
    this.stepperService.disablePanel(this.id, true);
    this.listenToFocusChanges();
    if (this.formGroup) {
      const invalidStatusTrigger = this.formGroup.statusChanges.pipe(filter((status) => status === "INVALID"));
      this.subscriptions.push(this.formGroup.statusChanges.pipe(skipUntil(invalidStatusTrigger), distinctUntilChanged()).subscribe((status) => {
        if (status === "VALID") {
          this.stepperService.setPanelValid(this.id);
        } else if (status === "INVALID") {
          this.stepperService.setPanelInvalid(this.id);
        }
      }));
    }
  }
  ngOnDestroy() {
    this.subscriptions.forEach((s27) => s27.unsubscribe());
  }
  listenToFocusChanges() {
    this.subscriptions.push(this.stepperService.activeStep.pipe(filter((panelId) => isPlatformBrowser(this.platformId) && panelId === this.id)).subscribe(() => this.headerButton.nativeElement.focus()));
  }
  triggerAllFormControlValidationIfError(panel) {
    if (panel.status === AccordionStatus.Error) {
      triggerAllFormControlValidation(this.formGroup);
    }
  }
};
ClrStepperPanel.ɵfac = function ClrStepperPanel_Factory(t161) {
  return new (t161 || ClrStepperPanel)(ɵɵdirectiveInject(PLATFORM_ID), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(FormGroupName, 8), ɵɵdirectiveInject(NgModelGroup, 8), ɵɵdirectiveInject(StepperService), ɵɵdirectiveInject(IfExpandService), ɵɵdirectiveInject(ChangeDetectorRef));
};
ClrStepperPanel.ɵcmp = ɵɵdefineComponent({
  type: ClrStepperPanel,
  selectors: [["clr-stepper-panel"]],
  viewQuery: function ClrStepperPanel_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c32, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.headerButton = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function ClrStepperPanel_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-accordion-panel", true);
    }
  },
  features: [ɵɵProvidersFeature([IfExpandService]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c22,
  decls: 2,
  vars: 3,
  consts: [["headerButton", ""], [4, "ngIf"], [3, "ngClass"], [1, "clr-accordion-header"], ["type", "button", 1, "clr-accordion-header-button", 3, "click", "id", "disabled"], [1, "clr-sr-only"], [1, "clr-accordion-status"], ["shape", "angle", "direction", "right", 1, "clr-accordion-angle"], [1, "clr-accordion-number"], ["status", "danger", "shape", "exclamation-circle", 1, "clr-accordion-error-icon"], ["status", "success", "shape", "check-circle", 1, "clr-accordion-complete-icon"], ["role", "region", 1, "clr-accordion-content-region", 3, "id"], ["class", "clr-accordion-content", 4, "ngIf"], [1, "clr-accordion-content"], [1, "clr-accordion-inner-content"]],
  template: function ClrStepperPanel_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c12);
      ɵɵtemplate(0, ClrStepperPanel_ng_container_0_Template, 19, 18, "ng-container", 1);
      ɵɵpipe(1, "async");
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 1, ctx.panel));
    }
  },
  dependencies: [NgClass, NgIf, CdsIconCustomTag, AsyncPipe],
  encapsulation: 2,
  data: {
    animation: stepAnimation
  },
  changeDetection: 0
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrStepperPanel, [{
    type: Component,
    args: [{
      selector: "clr-stepper-panel",
      host: {
        "[class.clr-accordion-panel]": "true"
      },
      changeDetection: ChangeDetectionStrategy.OnPush,
      animations: stepAnimation,
      providers: [IfExpandService],
      template: '<ng-container *ngIf="panel | async; let panel">\n  <div [ngClass]="getPanelStateClasses(panel)">\n    <div class="clr-accordion-header">\n      <button\n        type="button"\n        class="clr-accordion-header-button"\n        (click)="togglePanel()"\n        [id]="getAccordionHeaderId(panel.templateId)"\n        [disabled]="isAccordion && panel.disabled"\n        [attr.aria-disabled]="!isAccordion && panel.disabled"\n        [attr.aria-controls]="getAccordionContentId(panel.templateId)"\n        [attr.aria-expanded]="panel.open"\n        [class.clr-accordion-header-has-description]="(accordionDescription.changes | async)?.length || accordionDescription.length"\n        #headerButton\n      >\n        <span class="clr-sr-only">\n          <ng-container *ngIf="panel.status === AccordionStatus.Error">{{commonStrings.keys.danger}}</ng-container>\n          <ng-container *ngIf="panel.status === AccordionStatus.Complete">{{commonStrings.keys.success}}</ng-container>\n        </span>\n        <span class="clr-accordion-status">\n          <cds-icon shape="angle" direction="right" class="clr-accordion-angle"></cds-icon>\n          <span class="clr-accordion-number">{{panelNumber}}.</span>\n          <cds-icon status="danger" shape="exclamation-circle" class="clr-accordion-error-icon"></cds-icon>\n          <cds-icon status="success" shape="check-circle" class="clr-accordion-complete-icon"></cds-icon>\n        </span>\n        <ng-content select="clr-accordion-title, clr-step-title"></ng-content>\n        <ng-content select="clr-accordion-description, clr-step-description"></ng-content>\n      </button>\n    </div>\n    <div\n      @skipInitialRender\n      role="region"\n      class="clr-accordion-content-region"\n      [id]="getAccordionContentId(panel.templateId)"\n      [attr.aria-hidden]="!panel.open"\n      [attr.aria-labelledby]="getAccordionHeaderId(panel.templateId)"\n    >\n      <div\n        *ngIf="panel.open"\n        @toggle\n        (@toggle.done)="collapsePanelOnAnimationDone(panel)"\n        class="clr-accordion-content"\n      >\n        <div class="clr-accordion-inner-content">\n          <ng-content></ng-content>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-container>\n'
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }, {
      type: ClrCommonStringsService
    }, {
      type: FormGroupName,
      decorators: [{
        type: Optional
      }]
    }, {
      type: NgModelGroup,
      decorators: [{
        type: Optional
      }]
    }, {
      type: StepperService
    }, {
      type: IfExpandService
    }, {
      type: ChangeDetectorRef
    }];
  }, {
    headerButton: [{
      type: ViewChild,
      args: ["headerButton"]
    }]
  });
})();
var ClrStepButtonType;
(function(ClrStepButtonType2) {
  ClrStepButtonType2["Next"] = "next";
  ClrStepButtonType2["Submit"] = "submit";
})(ClrStepButtonType || (ClrStepButtonType = {}));
var ClrStepButton = class {
  constructor(clrStep, stepperService) {
    this.clrStep = clrStep;
    this.stepperService = stepperService;
    this.type = ClrStepButtonType.Next;
    this.submitButton = false;
  }
  ngOnInit() {
    this.submitButton = this.type === ClrStepButtonType.Submit;
  }
  navigateToNextPanel() {
    this.stepperService.navigateToNextPanel(this.clrStep.id, this.clrStep.formGroup.valid);
  }
};
ClrStepButton.ɵfac = function ClrStepButton_Factory(t161) {
  return new (t161 || ClrStepButton)(ɵɵdirectiveInject(ClrStepperPanel), ɵɵdirectiveInject(StepperService));
};
ClrStepButton.ɵdir = ɵɵdefineDirective({
  type: ClrStepButton,
  selectors: [["", "clrStepButton", ""]],
  hostVars: 7,
  hostBindings: function ClrStepButton_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("click", function ClrStepButton_click_HostBindingHandler() {
        return ctx.navigateToNextPanel();
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("type", "button");
      ɵɵclassProp("clr-step-button", true)("btn", true)("btn-primary", ctx.submitButton);
    }
  },
  inputs: {
    type: [InputFlags.None, "clrStepButton", "type"]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrStepButton, [{
    type: Directive,
    args: [{
      selector: "[clrStepButton]",
      host: {
        "[class.clr-step-button]": "true",
        "[class.btn]": "true",
        "[type]": "'button'"
      }
    }]
  }], function() {
    return [{
      type: ClrStepperPanel
    }, {
      type: StepperService
    }];
  }, {
    type: [{
      type: Input,
      args: ["clrStepButton"]
    }],
    submitButton: [{
      type: HostBinding,
      args: ["class.btn-primary"]
    }],
    navigateToNextPanel: [{
      type: HostListener,
      args: ["click"]
    }]
  });
})();
var ClrStepper = class {
  constructor(formGroup, ngForm, stepperService) {
    this.formGroup = formGroup;
    this.ngForm = ngForm;
    this.stepperService = stepperService;
    this.subscriptions = [];
  }
  ngOnInit() {
    if (!this.formGroup && !this.ngForm) {
      throw new Error("To use stepper a Reactive or Template Form is required.");
    }
    this.form = this.formGroup ? this.formGroup : this.ngForm;
    this.subscriptions.push(this.listenForPanelsCompleted());
    this.subscriptions.push(this.listenForFormResetChanges());
  }
  ngOnChanges(changes) {
    if (changes.initialPanel.currentValue !== changes.initialPanel.previousValue) {
      this.stepperService.overrideInitialPanel(this.initialPanel);
    }
  }
  ngAfterViewInit() {
    this.subscriptions.push(this.listenForDOMChanges());
  }
  ngOnDestroy() {
    this.subscriptions.forEach((s27) => s27.unsubscribe());
  }
  listenForFormResetChanges() {
    return fromControlReset(this.form.form).subscribe(() => this.stepperService.resetPanels());
  }
  listenForPanelsCompleted() {
    return this.stepperService.panelsCompleted.subscribe((panelsCompleted) => {
      if (panelsCompleted && this.form.valid) {
        this.form.ngSubmit.emit();
      } else if (!this.form.valid && this.form.touched) {
        this.setPanelsWithFormErrors();
      }
    });
  }
  setPanelsWithFormErrors() {
    const panelsWithErrors = this.panels.reduce((panels, p14) => p14.formGroup.invalid ? [...panels, p14.id] : panels, []);
    this.stepperService.setPanelsWithErrors(panelsWithErrors);
  }
  listenForDOMChanges() {
    return this.panels.changes.pipe(startWith(this.panels)).subscribe((panels) => {
      this.stepperService.updatePanelOrder(panels.toArray().map((p14) => p14.id));
      if (this.initialPanel) {
        this.stepperService.overrideInitialPanel(this.initialPanel);
      }
    });
  }
};
ClrStepper.ɵfac = function ClrStepper_Factory(t161) {
  return new (t161 || ClrStepper)(ɵɵdirectiveInject(FormGroupDirective, 8), ɵɵdirectiveInject(NgForm, 8), ɵɵdirectiveInject(StepperService));
};
ClrStepper.ɵcmp = ɵɵdefineComponent({
  type: ClrStepper,
  selectors: [["form", "clrStepper", ""]],
  contentQueries: function ClrStepper_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrStepperPanel, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.panels = _t);
    }
  },
  hostVars: 4,
  hostBindings: function ClrStepper_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-accordion", true)("clr-stepper-forms", true);
    }
  },
  inputs: {
    initialPanel: [InputFlags.None, "clrInitialStep", "initialPanel"]
  },
  features: [ɵɵProvidersFeature([StepperService, {
    provide: AccordionService,
    useExisting: StepperService
  }]), ɵɵNgOnChangesFeature],
  attrs: _c4,
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrStepper_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrStepper, [{
    type: Component,
    args: [{
      selector: "form[clrStepper]",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.clr-accordion]": "true",
        "[class.clr-stepper-forms]": "true"
      },
      providers: [StepperService, {
        provide: AccordionService,
        useExisting: StepperService
      }],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: FormGroupDirective,
      decorators: [{
        type: Optional
      }]
    }, {
      type: NgForm,
      decorators: [{
        type: Optional
      }]
    }, {
      type: StepperService
    }];
  }, {
    initialPanel: [{
      type: Input,
      args: ["clrInitialStep"]
    }],
    panels: [{
      type: ContentChildren,
      args: [ClrStepperPanel, {
        descendants: true
      }]
    }]
  });
})();
function fromControlReset(control) {
  return new Observable((observer) => {
    const unpatchedControlReset = control.reset;
    control.reset = () => {
      observer.next();
      unpatchedControlReset.apply(control);
    };
    return () => {
      control.reset = unpatchedControlReset;
    };
  });
}
var StepperWillyWonka = class extends WillyWonka {
};
StepperWillyWonka.ɵfac = /* @__PURE__ */ (() => {
  let ɵStepperWillyWonka_BaseFactory;
  return function StepperWillyWonka_Factory(t161) {
    return (ɵStepperWillyWonka_BaseFactory || (ɵStepperWillyWonka_BaseFactory = ɵɵgetInheritedFactory(StepperWillyWonka)))(t161 || StepperWillyWonka);
  };
})();
StepperWillyWonka.ɵdir = ɵɵdefineDirective({
  type: StepperWillyWonka,
  selectors: [["form", "clrStepper", ""]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StepperWillyWonka, [{
    type: Directive,
    args: [{
      selector: "form[clrStepper]"
    }]
  }], null, null);
})();
var StepperOompaLoompa = class extends OompaLoompa {
  constructor(cdr, willyWonka, ifExpandService) {
    if (!willyWonka) {
      throw new Error("clr-stepper-panel should only be used inside of clrStepper");
    }
    super(cdr, willyWonka);
    this.expand = ifExpandService;
  }
  get flavor() {
    return this.expand.expanded;
  }
};
StepperOompaLoompa.ɵfac = function StepperOompaLoompa_Factory(t161) {
  return new (t161 || StepperOompaLoompa)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(StepperWillyWonka, 8), ɵɵdirectiveInject(IfExpandService));
};
StepperOompaLoompa.ɵdir = ɵɵdefineDirective({
  type: StepperOompaLoompa,
  selectors: [["clr-stepper-panel"], ["", "clrStepButton", ""]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StepperOompaLoompa, [{
    type: Directive,
    args: [{
      selector: "clr-stepper-panel, [clrStepButton]"
    }]
  }], function() {
    return [{
      type: ChangeDetectorRef
    }, {
      type: StepperWillyWonka,
      decorators: [{
        type: Optional
      }]
    }, {
      type: IfExpandService
    }];
  }, null);
})();
var declarations = [ClrStepper, ClrStepButton, ClrStepperPanel, StepperOompaLoompa, StepperWillyWonka];
var ClrStepperModule = class {
};
ClrStepperModule.ɵfac = function ClrStepperModule_Factory(t161) {
  return new (t161 || ClrStepperModule)();
};
ClrStepperModule.ɵmod = ɵɵdefineNgModule({
  type: ClrStepperModule,
  declarations: [ClrStepper, ClrStepButton, ClrStepperPanel, StepperOompaLoompa, StepperWillyWonka],
  imports: [CommonModule, ClrIconModule, ClrAccordionModule],
  exports: [ClrStepper, ClrStepButton, ClrStepperPanel, StepperOompaLoompa, StepperWillyWonka, ClrAccordionModule]
});
ClrStepperModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrIconModule, ClrAccordionModule, ClrAccordionModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrStepperModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrIconModule, ClrAccordionModule],
      declarations: [...declarations],
      exports: [...declarations, ClrAccordionModule]
    }]
  }], null, null);
})();
var Keys;
(function(Keys2) {
  Keys2["ArrowLeft"] = "ArrowLeft";
  Keys2["ArrowUp"] = "ArrowUp";
  Keys2["ArrowRight"] = "ArrowRight";
  Keys2["ArrowDown"] = "ArrowDown";
  Keys2["Backspace"] = "Backspace";
  Keys2["Tab"] = "Tab";
  Keys2["Enter"] = "Enter";
  Keys2["Escape"] = "Escape";
  Keys2["Space"] = "Space";
  Keys2["Spacebar"] = " ";
  Keys2["Home"] = "Home";
  Keys2["End"] = "End";
})(Keys || (Keys = {}));
var IEKeys;
(function(IEKeys2) {
  IEKeys2["ArrowUp"] = "Up";
  IEKeys2["ArrowDown"] = "Down";
  IEKeys2["ArrowRight"] = "Right";
  IEKeys2["ArrowLeft"] = "Left";
  IEKeys2["Space"] = "Spacebar";
  IEKeys2["Escape"] = "Esc";
})(IEKeys || (IEKeys = {}));
function normalizeKey(key) {
  if (key === Keys.ArrowUp || key === IEKeys.ArrowUp) {
    return Keys.ArrowUp;
  } else if (key === Keys.ArrowDown || key === IEKeys.ArrowDown) {
    return Keys.ArrowDown;
  } else if (key === Keys.ArrowRight || key === IEKeys.ArrowRight) {
    return Keys.ArrowRight;
  } else if (key === Keys.ArrowLeft || key === IEKeys.ArrowLeft) {
    return Keys.ArrowLeft;
  } else if (key === Keys.Space || key === IEKeys.Space) {
    return Keys.Space;
  } else if (key === Keys.Escape || key === IEKeys.Escape) {
    return Keys.Escape;
  } else {
    return key;
  }
}
function preventArrowKeyScroll(event) {
  const key = normalizeKey(event.key);
  if (key === Keys.ArrowUp || key === Keys.ArrowDown || key === Keys.ArrowLeft || key === Keys.ArrowRight) {
    event.preventDefault();
  }
}
function isKeyEitherLetterOrNumber(event) {
  const char = event.key;
  return char.toLowerCase() !== char.toUpperCase() || char >= "0" && char <= "9";
}
var ClrPopoverToggleService = class {
  constructor() {
    this._open = false;
    this._openChange = new Subject();
    this._openEventChange = new Subject();
    this._popoverAligned = new Subject();
    this._popoverVisible = new Subject();
  }
  get openChange() {
    return this._openChange.asObservable();
  }
  get popoverVisible() {
    return this._popoverVisible.asObservable();
  }
  get openEvent() {
    return this._openEvent;
  }
  set openEvent(event) {
    this._openEvent = event;
    this._openEventChange.next(event);
  }
  get open() {
    return this._open;
  }
  set open(value) {
    value = !!value;
    if (this._open !== value) {
      this._open = value;
      this._openChange.next(value);
    }
  }
  // For compatibility with legacy IfOpenService based implementations
  get originalEvent() {
    return this._openEvent;
  }
  get popoverAligned() {
    return this._popoverAligned.asObservable();
  }
  getEventChange() {
    return this._openEventChange.asObservable();
  }
  /**
   * Sometimes, we need to remember the event that triggered the toggling to avoid loops.
   * This is for instance the case of components that open on a click, but close on a click outside.
   */
  toggleWithEvent(event) {
    preventArrowKeyScroll(event);
    this.openEvent = event;
    this.open = !this.open;
  }
  popoverVisibleEmit(visible) {
    this._popoverVisible.next(visible);
  }
  popoverAlignedEmit(popoverNode) {
    this._popoverAligned.next(popoverNode);
  }
};
ClrPopoverToggleService.ɵfac = function ClrPopoverToggleService_Factory(t161) {
  return new (t161 || ClrPopoverToggleService)();
};
ClrPopoverToggleService.ɵprov = ɵɵdefineInjectable({
  token: ClrPopoverToggleService,
  factory: ClrPopoverToggleService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrPopoverToggleService, [{
    type: Injectable
  }], null, null);
})();
var ClrPopoverEventsService = class {
  constructor(renderer, smartOpenService, document2) {
    this.renderer = renderer;
    this.smartOpenService = smartOpenService;
    this.document = document2;
    this.outsideClickClose = true;
    this.scrollToClose = true;
    this.subscriptions = [];
    this.subscriptions.push(smartOpenService.openChange.subscribe((open) => {
      if (open) {
        this.addEscapeListener();
        this.addClickListener();
        this.addScrollListener();
      } else {
        this.removeAllEventListeners();
      }
    }), smartOpenService.getEventChange().subscribe((event) => {
      this.ignoredEvent = event;
    }));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
    this.removeAllEventListeners();
  }
  addScrollListener() {
    if (this.scrollToClose) {
      this.documentScroller = fromEvent(this.document, "scroll", {
        capture: true
      });
      this.scrollSubscription = this.documentScroller.pipe(filter(this.testForSmartPopoverContentContainer)).subscribe(() => {
        this.smartOpenService.open = false;
        this.setAnchorFocus();
      });
    } else {
      return;
    }
  }
  removeScrollListener() {
    if (this.documentScroller) {
      this.scrollSubscription.unsubscribe();
      delete this.documentScroller;
    }
  }
  addClickListener() {
    if (this.outsideClickClose) {
      this.documentClickListener = this.renderer.listen(this.document, "click", (event) => {
        if (event === this.ignoredEvent) {
          delete this.ignoredEvent;
        } else {
          this.smartOpenService.open = false;
          const clickedElement = event.target;
          clickedElement.focus();
        }
      });
    }
  }
  removeClickListener() {
    if (this.outsideClickClose) {
      delete this.ignoredEvent;
      if (this.documentClickListener) {
        this.documentClickListener();
        delete this.documentClickListener;
      }
    }
  }
  addEscapeListener() {
    this.escapeListener = this.renderer.listen(this.document, "keydown.escape", () => {
      this.smartOpenService.open = false;
      this.setAnchorFocus();
    });
  }
  removeEscapeListener() {
    if (this.escapeListener) {
      this.escapeListener();
      delete this.escapeListener;
    }
  }
  setCloseFocus() {
    this.closeButtonRef.nativeElement.focus();
  }
  setAnchorFocus() {
    this.anchorButtonRef.nativeElement.focus();
  }
  testForSmartPopoverContentContainer(event) {
    let target = event.target;
    while (target.classList && target.parentElement.localName !== "body") {
      target = target.parentElement;
    }
    if (target.classList) {
      return target.classList.contains("clr-popover-content") ? false : true;
    } else {
      return false;
    }
  }
  removeAllEventListeners() {
    this.removeScrollListener();
    this.removeClickListener();
    this.removeEscapeListener();
  }
};
ClrPopoverEventsService.ɵfac = function ClrPopoverEventsService_Factory(t161) {
  return new (t161 || ClrPopoverEventsService)(ɵɵinject(Renderer2), ɵɵinject(ClrPopoverToggleService), ɵɵinject(DOCUMENT));
};
ClrPopoverEventsService.ɵprov = ɵɵdefineInjectable({
  token: ClrPopoverEventsService,
  factory: ClrPopoverEventsService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrPopoverEventsService, [{
    type: Injectable
  }], function() {
    return [{
      type: Renderer2
    }, {
      type: ClrPopoverToggleService
    }, {
      type: HTMLDocument,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }];
  }, null);
})();
var ClrPopoverAnchor = class {
  constructor(smartEventService, element) {
    smartEventService.anchorButtonRef = element;
  }
};
ClrPopoverAnchor.ɵfac = function ClrPopoverAnchor_Factory(t161) {
  return new (t161 || ClrPopoverAnchor)(ɵɵdirectiveInject(ClrPopoverEventsService), ɵɵdirectiveInject(ElementRef));
};
ClrPopoverAnchor.ɵdir = ɵɵdefineDirective({
  type: ClrPopoverAnchor,
  selectors: [["", "clrPopoverAnchor", ""]],
  hostVars: 2,
  hostBindings: function ClrPopoverAnchor_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-anchor", true);
    }
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrPopoverAnchor, [{
    type: Directive,
    args: [{
      selector: "[clrPopoverAnchor]",
      host: {
        "[class.clr-anchor]": "true"
      }
    }]
  }], function() {
    return [{
      type: ClrPopoverEventsService
    }, {
      type: ElementRef
    }];
  }, null);
})();
var ClrPopoverCloseButton = class {
  constructor(elementRef, smartEventsService, smartOpenService) {
    this.elementRef = elementRef;
    this.smartEventsService = smartEventsService;
    this.smartOpenService = smartOpenService;
    this.closeChange = new EventEmitter();
    this.subscriptions = [];
    this.subscriptions.push(smartOpenService.openChange.pipe(filter((value) => !value)).subscribe(() => {
      this.closeChange.next();
    }));
  }
  handleClick(event) {
    this.smartOpenService.toggleWithEvent(event);
    this.smartEventsService.setAnchorFocus();
  }
  ngAfterViewInit() {
    this.smartEventsService.closeButtonRef = this.elementRef;
    this.smartEventsService.setCloseFocus();
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
};
ClrPopoverCloseButton.ɵfac = function ClrPopoverCloseButton_Factory(t161) {
  return new (t161 || ClrPopoverCloseButton)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ClrPopoverEventsService), ɵɵdirectiveInject(ClrPopoverToggleService));
};
ClrPopoverCloseButton.ɵdir = ɵɵdefineDirective({
  type: ClrPopoverCloseButton,
  selectors: [["", "clrPopoverCloseButton", ""]],
  hostVars: 2,
  hostBindings: function ClrPopoverCloseButton_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("click", function ClrPopoverCloseButton_click_HostBindingHandler($event) {
        return ctx.handleClick($event);
      });
    }
    if (rf & 2) {
      ɵɵclassProp("clr-smart-close-button", true);
    }
  },
  outputs: {
    closeChange: "clrPopoverOnCloseChange"
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrPopoverCloseButton, [{
    type: Directive,
    args: [{
      selector: "[clrPopoverCloseButton]",
      host: {
        "[class.clr-smart-close-button]": "true"
      }
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: ClrPopoverEventsService
    }, {
      type: ClrPopoverToggleService
    }];
  }, {
    closeChange: [{
      type: Output,
      args: ["clrPopoverOnCloseChange"]
    }],
    handleClick: [{
      type: HostListener,
      args: ["click", ["$event"]]
    }]
  });
})();
var ClrAxis;
(function(ClrAxis2) {
  ClrAxis2[ClrAxis2["VERTICAL"] = 0] = "VERTICAL";
  ClrAxis2[ClrAxis2["HORIZONTAL"] = 1] = "HORIZONTAL";
})(ClrAxis || (ClrAxis = {}));
var ClrAlignment;
(function(ClrAlignment2) {
  ClrAlignment2[ClrAlignment2["START"] = 0] = "START";
  ClrAlignment2[ClrAlignment2["CENTER"] = 0.5] = "CENTER";
  ClrAlignment2[ClrAlignment2["END"] = 1] = "END";
})(ClrAlignment || (ClrAlignment = {}));
var ClrViewportViolation;
(function(ClrViewportViolation2) {
  ClrViewportViolation2[ClrViewportViolation2["BOTTOM"] = 0] = "BOTTOM";
  ClrViewportViolation2[ClrViewportViolation2["LEFT"] = 1] = "LEFT";
  ClrViewportViolation2[ClrViewportViolation2["RIGHT"] = 2] = "RIGHT";
  ClrViewportViolation2[ClrViewportViolation2["TOP"] = 3] = "TOP";
})(ClrViewportViolation || (ClrViewportViolation = {}));
var flipSides = (position) => {
  return __spreadProps(__spreadValues({}, position), {
    side: -1 * position.side
  });
};
var nudgeContent = (position, forward) => {
  const nextAlignment = position.content + (forward ? 0.5 : -0.5);
  if (nextAlignment < 0 || nextAlignment > 1) {
    return position;
  } else {
    return __spreadProps(__spreadValues({}, position), {
      content: nextAlignment
    });
  }
};
function flipSidesAndNudgeContent(flip, nudge, nudgeBack) {
  return (position) => nudge(flip(position), nudgeBack);
}
function align(position, anchor, content) {
  let xDiff = anchor.left;
  let yDiff = anchor.top;
  switch (position.axis + position.side) {
    case -1: {
      xDiff += alignHorizontal(position, anchor, content);
      yDiff -= content.height;
      break;
    }
    case 1: {
      xDiff += alignHorizontal(position, anchor, content);
      yDiff += anchor.height;
      break;
    }
    case 0: {
      xDiff -= content.width;
      yDiff += alignVertical(position, anchor, content);
      break;
    }
    case 2: {
      xDiff += anchor.width;
      yDiff += alignVertical(position, anchor, content);
      break;
    }
    default: {
      break;
    }
  }
  return {
    xOffset: xDiff,
    yOffset: yDiff
  };
}
function alignHorizontal(position, anchor, content) {
  let horizontalOffset = 0;
  switch (position.anchor) {
    case ClrAlignment.START: {
      break;
    }
    case ClrAlignment.CENTER: {
      horizontalOffset += anchor.width / 2;
      break;
    }
    case ClrAlignment.END: {
      horizontalOffset += anchor.width;
      break;
    }
    default: {
      break;
    }
  }
  switch (position.content) {
    case ClrAlignment.START: {
      break;
    }
    case ClrAlignment.CENTER: {
      horizontalOffset -= content.width / 2;
      break;
    }
    case ClrAlignment.END: {
      horizontalOffset -= content.width;
      break;
    }
    default: {
      break;
    }
  }
  return horizontalOffset;
}
function alignVertical(position, anchor, content) {
  let verticalOffset = 0;
  switch (position.anchor) {
    case ClrAlignment.START: {
      break;
    }
    case ClrAlignment.CENTER: {
      verticalOffset += anchor.height / 2;
      break;
    }
    case ClrAlignment.END: {
      verticalOffset += anchor.height;
      break;
    }
    default: {
      break;
    }
  }
  switch (position.content) {
    case ClrAlignment.START: {
      break;
    }
    case ClrAlignment.CENTER: {
      verticalOffset -= content.height / 2;
      break;
    }
    case ClrAlignment.END: {
      verticalOffset -= content.height;
      break;
    }
    default: {
      break;
    }
  }
  return verticalOffset;
}
function testVisibility(offset, content) {
  const violations = [];
  const mockCoords = {
    bottom: offset.yOffset + content.height,
    left: offset.xOffset,
    right: offset.xOffset + content.width,
    top: offset.yOffset
  };
  if (!(mockCoords.top >= 0)) {
    violations.push(ClrViewportViolation.TOP);
  }
  if (!(mockCoords.left >= 0)) {
    violations.push(ClrViewportViolation.LEFT);
  }
  if (!(mockCoords.bottom <= (window.innerHeight || document.documentElement.clientHeight))) {
    violations.push(ClrViewportViolation.BOTTOM);
  }
  if (!(mockCoords.right <= (window.innerWidth || document.documentElement.clientWidth))) {
    violations.push(ClrViewportViolation.RIGHT);
  }
  return violations;
}
var ClrPopoverPositionService = class {
  constructor(eventService, platformId) {
    this.eventService = eventService;
    this.platformId = platformId;
    this._shouldRealign = new Subject();
    this.shouldRealign = this._shouldRealign.asObservable();
  }
  realign() {
    this._shouldRealign.next();
  }
  alignContent(content) {
    if (!isPlatformBrowser(this.platformId)) {
      return {
        xOffset: 0,
        yOffset: 0
      };
    }
    this.currentAnchorCoords = this.eventService.anchorButtonRef.nativeElement.getBoundingClientRect();
    this.currentContentCoords = content.getBoundingClientRect();
    this.contentOffsets = align(this.position, this.currentAnchorCoords, this.currentContentCoords);
    const visibilityViolations = testVisibility(this.contentOffsets, this.currentContentCoords);
    const errorSum = visibilityViolations.reduce((count, current) => {
      return count + current;
    }, 0);
    if (visibilityViolations.length === 1 && this.position.axis === ClrAxis.VERTICAL) {
      this.handleVerticalAxisOneViolation(errorSum);
    } else if (visibilityViolations.length === 1 && this.position.axis === ClrAxis.HORIZONTAL) {
      this.handleHorizontalAxisOneViolation(errorSum);
    } else if (visibilityViolations.length === 2 && this.position.axis === ClrAxis.VERTICAL) {
      this.handleVerticalAxisTwoViolations(errorSum);
    } else if (visibilityViolations.length === 2 && this.position.axis === ClrAxis.HORIZONTAL) {
      this.handleHorizontalAxisTwoViolations(errorSum);
    }
    if (this.currentContentCoords.top < 0) {
      this.contentOffsets.yOffset += Math.abs(this.currentContentCoords.top);
    }
    if (this.contentOffsets.yOffset + this.currentAnchorCoords.y < 0) {
      this.contentOffsets.yOffset = 0 - this.currentContentCoords.top;
    }
    return this.contentOffsets;
  }
  handleVerticalAxisOneViolation(errorSum) {
    switch (errorSum) {
      case 0:
      case 3: {
        this.contentOffsets = align(flipSides(this.position), this.currentAnchorCoords, this.currentContentCoords);
        break;
      }
      case 1: {
        this.contentOffsets = align(this.position, this.currentAnchorCoords, this.currentContentCoords);
        if (this.contentOffsets.xOffset < 0) {
          this.contentOffsets.xOffset = 10;
        }
        break;
      }
      case 2: {
        this.contentOffsets = align(nudgeContent(this.position, true), this.currentAnchorCoords, this.currentContentCoords);
        break;
      }
      default: {
        break;
      }
    }
  }
  handleVerticalAxisTwoViolations(errorSum) {
    switch (errorSum) {
      case 5: {
        const flipAndNudgeLeft = flipSidesAndNudgeContent(flipSides, nudgeContent, true);
        this.contentOffsets = align(flipAndNudgeLeft(this.position), this.currentAnchorCoords, this.currentContentCoords);
        break;
      }
      case 4: {
        const flipAndNudgeRight = flipSidesAndNudgeContent(flipSides, nudgeContent, false);
        this.contentOffsets = align(flipAndNudgeRight(this.position), this.currentAnchorCoords, this.currentContentCoords);
        break;
      }
      case 3: {
        break;
      }
      case 2: {
        const flipAndNudgeLeft = flipSidesAndNudgeContent(flipSides, nudgeContent, true);
        this.contentOffsets = align(flipAndNudgeLeft(this.position), this.currentAnchorCoords, this.currentContentCoords);
        break;
      }
      case 1: {
        const flipAndNudgeRight = flipSidesAndNudgeContent(flipSides, nudgeContent, false);
        this.contentOffsets = align(flipAndNudgeRight(this.position), this.currentAnchorCoords, this.currentContentCoords);
        break;
      }
      default: {
        break;
      }
    }
  }
  handleHorizontalAxisOneViolation(errorSum) {
    switch (errorSum) {
      case 1:
      case 2: {
        this.contentOffsets = align(flipSides(this.position), this.currentAnchorCoords, this.currentContentCoords);
        break;
      }
      case 0: {
        this.contentOffsets = align(nudgeContent(this.position, true), this.currentAnchorCoords, this.currentContentCoords);
        break;
      }
      case 3: {
        this.contentOffsets = align(nudgeContent(this.position), this.currentAnchorCoords, this.currentContentCoords);
        break;
      }
      default: {
        break;
      }
    }
  }
  handleHorizontalAxisTwoViolations(errorSum) {
    switch (errorSum) {
      case 5:
      case 4: {
        const flipAndNudgeDown = flipSidesAndNudgeContent(flipSides, nudgeContent, false);
        this.contentOffsets = align(flipAndNudgeDown(this.position), this.currentAnchorCoords, this.currentContentCoords);
        break;
      }
      case 3: {
        break;
      }
      case 2:
      case 1: {
        const flipAndNudgeUp = flipSidesAndNudgeContent(flipSides, nudgeContent, true);
        this.contentOffsets = align(flipAndNudgeUp(this.position), this.currentAnchorCoords, this.currentContentCoords);
        break;
      }
      default: {
        break;
      }
    }
  }
};
ClrPopoverPositionService.ɵfac = function ClrPopoverPositionService_Factory(t161) {
  return new (t161 || ClrPopoverPositionService)(ɵɵinject(ClrPopoverEventsService), ɵɵinject(PLATFORM_ID));
};
ClrPopoverPositionService.ɵprov = ɵɵdefineInjectable({
  token: ClrPopoverPositionService,
  factory: ClrPopoverPositionService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrPopoverPositionService, [{
    type: Injectable
  }], function() {
    return [{
      type: ClrPopoverEventsService
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }];
  }, null);
})();
var ClrPopoverContent = class {
  constructor(document2, container, template, renderer, smartPositionService, smartEventsService, smartOpenService) {
    this.document = document2;
    this.container = container;
    this.template = template;
    this.renderer = renderer;
    this.smartPositionService = smartPositionService;
    this.smartEventsService = smartEventsService;
    this.smartOpenService = smartOpenService;
    this.subscriptions = [];
    this.removeClickListenerFn = null;
    this.shouldRealign = false;
    this.checkCollector = new EventEmitter();
  }
  set open(value) {
    this.smartOpenService.open = !!value;
  }
  set contentAt(position) {
    this.smartPositionService.position = position;
  }
  set outsideClickClose(clickToClose) {
    this.smartEventsService.outsideClickClose = !!clickToClose;
  }
  set scrollToClose(scrollToClose) {
    this.smartEventsService.scrollToClose = !!scrollToClose;
  }
  ngAfterContentChecked() {
    if (this.smartOpenService.open && this.view && this.shouldRealign) {
      this.checkCollector.emit();
    }
  }
  ngAfterViewInit() {
    this.subscriptions.push(
      this.smartOpenService.openChange.subscribe((change) => {
        if (change) {
          this.addContent();
        } else {
          this.removeContent();
        }
      }),
      this.smartPositionService.shouldRealign.subscribe(() => {
        this.shouldRealign = true;
      }),
      // Here we collect subsequent synchronously received content-check events and only take action
      // at the end of the cycle. See below for details on the check-collector pattern.
      this.checkCollector.pipe(debounceTime(0)).subscribe(() => {
        this.alignContent();
        this.shouldRealign = false;
        if (this.view) {
          this.renderer.setStyle(this.view.rootNodes[0], "opacity", "1");
          this.smartOpenService.popoverVisibleEmit(true);
        }
      })
    );
  }
  ngOnDestroy() {
    this.removeContent();
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  /**
   * TODO(matt): investigate why DebugElement retains a reference to the nodes and causes a memory leak.
   * A note about the use of appendChild/removeChild
   * The DebugElement is keeping a reference to the detached node and its unclear why.
   * This does warrant further investigation. But, since it doesn't happen in production mode
   * it is a low priority issue for now.
   */
  addContent() {
    this.view = this.container.createEmbeddedView(this.template);
    const [rootNode] = this.view.rootNodes;
    this.smartEventsService.contentRef = rootNode;
    this.renderer.addClass(rootNode, "clr-popover-content");
    this.renderer.setStyle(rootNode, "top", "0px");
    this.renderer.setStyle(rootNode, "left", "0px");
    this.renderer.setStyle(rootNode, "opacity", "0");
    this.removeClickListenerFn = this.renderer.listen(rootNode, "click", (event) => {
      this.smartOpenService.openEvent = event;
    });
    this.view.rootNodes.forEach((node) => {
      this.renderer.appendChild(this.document.body, node);
    });
    this.shouldRealign = true;
  }
  removeContent() {
    if (!this.view) {
      return;
    }
    if (this.removeClickListenerFn) {
      this.removeClickListenerFn();
      this.removeClickListenerFn = null;
    }
    this.view.rootNodes.forEach((node) => this.renderer.removeChild(this.document.body, node));
    this.container.clear();
    delete this.view;
    this.smartOpenService.popoverVisibleEmit(false);
  }
  alignContent() {
    if (!this.view) {
      return;
    }
    const positionCoords = this.smartPositionService.alignContent(this.view.rootNodes[0]);
    this.renderer.setStyle(this.view.rootNodes[0], "top", `${positionCoords.yOffset}px`);
    this.renderer.setStyle(this.view.rootNodes[0], "left", `${positionCoords.xOffset}px`);
    this.smartOpenService.popoverAlignedEmit(this.view.rootNodes[0]);
  }
};
ClrPopoverContent.ɵfac = function ClrPopoverContent_Factory(t161) {
  return new (t161 || ClrPopoverContent)(ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(TemplateRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ClrPopoverPositionService), ɵɵdirectiveInject(ClrPopoverEventsService), ɵɵdirectiveInject(ClrPopoverToggleService));
};
ClrPopoverContent.ɵdir = ɵɵdefineDirective({
  type: ClrPopoverContent,
  selectors: [["", "clrPopoverContent", ""]],
  inputs: {
    open: [InputFlags.None, "clrPopoverContent", "open"],
    contentAt: [InputFlags.None, "clrPopoverContentAt", "contentAt"],
    outsideClickClose: [InputFlags.None, "clrPopoverContentOutsideClickToClose", "outsideClickClose"],
    scrollToClose: [InputFlags.None, "clrPopoverContentScrollToClose", "scrollToClose"]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrPopoverContent, [{
    type: Directive,
    args: [{
      selector: "[clrPopoverContent]"
    }]
  }], function() {
    return [{
      type: Document,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }, {
      type: ViewContainerRef
    }, {
      type: TemplateRef
    }, {
      type: Renderer2
    }, {
      type: ClrPopoverPositionService
    }, {
      type: ClrPopoverEventsService
    }, {
      type: ClrPopoverToggleService
    }];
  }, {
    open: [{
      type: Input,
      args: ["clrPopoverContent"]
    }],
    contentAt: [{
      type: Input,
      args: ["clrPopoverContentAt"]
    }],
    outsideClickClose: [{
      type: Input,
      args: ["clrPopoverContentOutsideClickToClose"]
    }],
    scrollToClose: [{
      type: Input,
      args: ["clrPopoverContentScrollToClose"]
    }]
  });
})();
var ClrPopoverOpenCloseButton = class {
  constructor(smartOpenService) {
    this.smartOpenService = smartOpenService;
    this.openCloseChange = new EventEmitter();
    this.subscriptions = [];
    this.subscriptions.push(this.smartOpenService.openChange.subscribe((change) => {
      this.openCloseChange.next(change);
    }));
  }
  handleClick(event) {
    this.smartOpenService.toggleWithEvent(event);
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
};
ClrPopoverOpenCloseButton.ɵfac = function ClrPopoverOpenCloseButton_Factory(t161) {
  return new (t161 || ClrPopoverOpenCloseButton)(ɵɵdirectiveInject(ClrPopoverToggleService));
};
ClrPopoverOpenCloseButton.ɵdir = ɵɵdefineDirective({
  type: ClrPopoverOpenCloseButton,
  selectors: [["", "clrPopoverOpenCloseButton", ""]],
  hostVars: 2,
  hostBindings: function ClrPopoverOpenCloseButton_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("click", function ClrPopoverOpenCloseButton_click_HostBindingHandler($event) {
        return ctx.handleClick($event);
      });
    }
    if (rf & 2) {
      ɵɵclassProp("clr-smart-open-close", true);
    }
  },
  outputs: {
    openCloseChange: "clrPopoverOpenCloseChange"
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrPopoverOpenCloseButton, [{
    type: Directive,
    args: [{
      selector: "[clrPopoverOpenCloseButton]",
      host: {
        "[class.clr-smart-open-close]": "true"
      }
    }]
  }], function() {
    return [{
      type: ClrPopoverToggleService
    }];
  }, {
    openCloseChange: [{
      type: Output,
      args: ["clrPopoverOpenCloseChange"]
    }],
    handleClick: [{
      type: HostListener,
      args: ["click", ["$event"]]
    }]
  });
})();
var ClrPopoverModuleNext = class {
};
ClrPopoverModuleNext.ɵfac = function ClrPopoverModuleNext_Factory(t161) {
  return new (t161 || ClrPopoverModuleNext)();
};
ClrPopoverModuleNext.ɵmod = ɵɵdefineNgModule({
  type: ClrPopoverModuleNext,
  declarations: [ClrPopoverAnchor, ClrPopoverCloseButton, ClrPopoverOpenCloseButton, ClrPopoverContent],
  exports: [ClrPopoverAnchor, ClrPopoverCloseButton, ClrPopoverOpenCloseButton, ClrPopoverContent]
});
ClrPopoverModuleNext.ɵinj = ɵɵdefineInjector({});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrPopoverModuleNext, [{
    type: NgModule,
    args: [{
      imports: [],
      declarations: [ClrPopoverAnchor, ClrPopoverCloseButton, ClrPopoverOpenCloseButton, ClrPopoverContent],
      exports: [ClrPopoverAnchor, ClrPopoverCloseButton, ClrPopoverOpenCloseButton, ClrPopoverContent]
    }]
  }], null, null);
})();
var ButtonInGroupService = class {
  constructor() {
    this._changes = new Subject();
  }
  get changes() {
    return this._changes.asObservable();
  }
  updateButtonGroup(button) {
    this._changes.next(button);
  }
};
ButtonInGroupService.ɵfac = function ButtonInGroupService_Factory(t161) {
  return new (t161 || ButtonInGroupService)();
};
ButtonInGroupService.ɵprov = ɵɵdefineInjectable({
  token: ButtonInGroupService,
  factory: ButtonInGroupService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ButtonInGroupService, [{
    type: Injectable
  }], null, null);
})();
var ClrButton = class {
  constructor(buttonInGroupService) {
    this.buttonInGroupService = buttonInGroupService;
    this._click = new EventEmitter(false);
    this._inMenu = false;
    this._enableService = false;
    this._classNames = "btn";
    this._name = null;
    this._type = null;
    this._disabled = null;
    this._id = uniqueIdFactory();
  }
  get inMenu() {
    return this._inMenu;
  }
  set inMenu(value) {
    value = !!value;
    if (this._inMenu !== value) {
      this._inMenu = value;
      if (this._enableService && this.buttonInGroupService) {
        this.buttonInGroupService.updateButtonGroup(this);
      }
    }
  }
  get classNames() {
    return this._classNames;
  }
  set classNames(value) {
    if (typeof value === "string") {
      const classNames = value.split(" ");
      if (classNames.indexOf("btn") === -1) {
        classNames.push("btn");
      }
      this._classNames = classNames.join(" ");
    }
  }
  get name() {
    return this._name;
  }
  set name(value) {
    if (typeof value === "string") {
      this._name = value;
    }
  }
  get type() {
    return this._type;
  }
  set type(value) {
    if (typeof value === "string") {
      this._type = value;
    }
  }
  get id() {
    return this._id;
  }
  set id(value) {
    if (typeof value === "string") {
      this._id = value;
    }
  }
  get disabled() {
    return this._disabled;
  }
  set disabled(value) {
    if (value !== null && value !== false) {
      this._disabled = "";
    } else {
      this._disabled = null;
    }
  }
  get role() {
    return this.inMenu ? "menuitem" : null;
  }
  ngAfterViewInit() {
    this._enableService = true;
  }
  loadingStateChange(state2) {
    this.loading = state2 === ClrLoadingState.LOADING;
  }
  emitClick() {
    this._click.emit(true);
  }
};
ClrButton.ɵfac = function ClrButton_Factory(t161) {
  return new (t161 || ClrButton)(ɵɵdirectiveInject(ButtonInGroupService, 12));
};
ClrButton.ɵcmp = ɵɵdefineComponent({
  type: ClrButton,
  selectors: [["clr-button"]],
  viewQuery: function ClrButton_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c5, 7);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.templateRef = _t.first);
    }
  },
  inputs: {
    inMenu: [InputFlags.None, "clrInMenu", "inMenu"],
    classNames: [InputFlags.None, "class", "classNames"],
    name: "name",
    type: "type",
    id: "id",
    disabled: "disabled"
  },
  outputs: {
    _click: "click"
  },
  features: [ɵɵProvidersFeature([{
    provide: LoadingListener,
    useExisting: ClrButton
  }])],
  ngContentSelectors: _c02,
  decls: 2,
  vars: 0,
  consts: [["buttonProjectedRef", ""], [3, "click"], ["class", "spinner spinner-inline", 4, "ngIf"], [1, "spinner", "spinner-inline"]],
  template: function ClrButton_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, ClrButton_ng_template_0_Template, 3, 8, "ng-template", null, 0, ɵɵtemplateRefExtractor);
    }
  },
  dependencies: [NgIf],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrButton, [{
    type: Component,
    args: [{
      selector: "clr-button",
      template: `
    <ng-template #buttonProjectedRef>
      <button
        [class]="classNames"
        (click)="emitClick()"
        [attr.type]="type"
        [attr.name]="name"
        [attr.disabled]="disabled"
        [attr.role]="role"
        [attr.id]="id"
      >
        <span class="spinner spinner-inline" *ngIf="loading"></span>
        <ng-content></ng-content>
      </button>
    </ng-template>
  `,
      providers: [{
        provide: LoadingListener,
        useExisting: ClrButton
      }]
    }]
  }], function() {
    return [{
      type: ButtonInGroupService,
      decorators: [{
        type: SkipSelf
      }, {
        type: Optional
      }]
    }];
  }, {
    _click: [{
      type: Output,
      args: ["click"]
    }],
    templateRef: [{
      type: ViewChild,
      args: ["buttonProjectedRef", {
        static: true
      }]
    }],
    inMenu: [{
      type: Input,
      args: ["clrInMenu"]
    }],
    classNames: [{
      type: Input,
      args: ["class"]
    }],
    name: [{
      type: Input,
      args: ["name"]
    }],
    type: [{
      type: Input,
      args: ["type"]
    }],
    id: [{
      type: Input,
      args: ["id"]
    }],
    disabled: [{
      type: Input,
      args: ["disabled"]
    }]
  });
})();
var ClrDestroyService = class extends Subject {
  ngOnDestroy() {
    this.next();
    this.complete();
  }
};
ClrDestroyService.ɵfac = /* @__PURE__ */ (() => {
  let ɵClrDestroyService_BaseFactory;
  return function ClrDestroyService_Factory(t161) {
    return (ɵClrDestroyService_BaseFactory || (ɵClrDestroyService_BaseFactory = ɵɵgetInheritedFactory(ClrDestroyService)))(t161 || ClrDestroyService);
  };
})();
ClrDestroyService.ɵprov = ɵɵdefineInjectable({
  token: ClrDestroyService,
  factory: ClrDestroyService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDestroyService, [{
    type: Injectable
  }], null, null);
})();
var ArrowKeyDirection;
(function(ArrowKeyDirection2) {
  ArrowKeyDirection2["UP"] = "up";
  ArrowKeyDirection2["DOWN"] = "down";
  ArrowKeyDirection2["LEFT"] = "left";
  ArrowKeyDirection2["RIGHT"] = "right";
})(ArrowKeyDirection || (ArrowKeyDirection = {}));
var FocusService$1 = class FocusService {
  constructor(renderer) {
    this.renderer = renderer;
    this._unlistenFuncs = [];
  }
  get current() {
    return this._current;
  }
  reset(first2) {
    this._current = first2;
  }
  listenToArrowKeys(el) {
    this._unlistenFuncs.push(this.renderer.listen(el, "keydown.arrowup", () => !this.move(ArrowKeyDirection.UP)));
    this._unlistenFuncs.push(this.renderer.listen(el, "keydown.arrowdown", () => !this.move(ArrowKeyDirection.DOWN)));
    this._unlistenFuncs.push(this.renderer.listen(el, "keydown.arrowleft", () => !this.move(ArrowKeyDirection.LEFT)));
    this._unlistenFuncs.push(this.renderer.listen(el, "keydown.arrowright", () => !this.move(ArrowKeyDirection.RIGHT)));
  }
  registerContainer(el, tabIndex = "0") {
    this.renderer.setAttribute(el, "tabindex", tabIndex);
    this.listenToArrowKeys(el);
    this._unlistenFuncs.push(this.renderer.listen(el, "keydown.space", () => !this.activateCurrent()));
    this._unlistenFuncs.push(this.renderer.listen(el, "keydown.enter", () => !this.activateCurrent()));
  }
  moveTo(item) {
    if (item === void 0) {
      return;
    }
    if (this.current) {
      this.current.blur();
    }
    item.focus();
    this._current = item;
  }
  move(direction) {
    let moved = false;
    if (this.current) {
      const next = this.current[direction];
      if (next) {
        const nextObs = isObservable(next) ? next : of(next);
        nextObs.subscribe((item) => {
          if (item) {
            this.moveTo(item);
            moved = true;
          }
        });
      }
    }
    return moved;
  }
  activateCurrent() {
    if (this.current && this.current.activate) {
      this.current.activate();
      return true;
    }
    return false;
  }
  detachListeners() {
    this._unlistenFuncs.forEach((unlisten) => unlisten());
  }
};
FocusService$1.ɵfac = function FocusService$1_Factory(t161) {
  return new (t161 || FocusService$1)(ɵɵinject(Renderer2));
};
FocusService$1.ɵprov = ɵɵdefineInjectable({
  token: FocusService$1,
  factory: FocusService$1.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FocusService$1, [{
    type: Injectable
  }], function() {
    return [{
      type: Renderer2
    }];
  }, null);
})();
function clrFocusServiceFactory(existing, renderer) {
  return existing || new FocusService$1(renderer);
}
var FOCUS_SERVICE_PROVIDER = {
  provide: FocusService$1,
  useFactory: clrFocusServiceFactory,
  deps: [[new Optional(), new SkipSelf(), FocusService$1], Renderer2]
};
var ClrSide;
(function(ClrSide2) {
  ClrSide2[ClrSide2["BEFORE"] = -1] = "BEFORE";
  ClrSide2[ClrSide2["AFTER"] = 1] = "AFTER";
})(ClrSide || (ClrSide = {}));
var ClrPopoverPositions = class {
};
ClrPopoverPositions["top-right"] = {
  axis: ClrAxis.VERTICAL,
  side: ClrSide.BEFORE,
  anchor: ClrAlignment.END,
  content: ClrAlignment.END
};
ClrPopoverPositions["top-left"] = {
  axis: ClrAxis.VERTICAL,
  side: ClrSide.BEFORE,
  anchor: ClrAlignment.START,
  content: ClrAlignment.START
};
ClrPopoverPositions["bottom-right"] = {
  axis: ClrAxis.VERTICAL,
  side: ClrSide.AFTER,
  anchor: ClrAlignment.END,
  content: ClrAlignment.END
};
ClrPopoverPositions["bottom-left"] = {
  axis: ClrAxis.VERTICAL,
  side: ClrSide.AFTER,
  anchor: ClrAlignment.START,
  content: ClrAlignment.START
};
ClrPopoverPositions["right-top"] = {
  axis: ClrAxis.HORIZONTAL,
  side: ClrSide.AFTER,
  anchor: ClrAlignment.CENTER,
  content: ClrAlignment.END
};
ClrPopoverPositions["right-bottom"] = {
  axis: ClrAxis.HORIZONTAL,
  side: ClrSide.AFTER,
  anchor: ClrAlignment.START,
  content: ClrAlignment.START
};
ClrPopoverPositions["left-top"] = {
  axis: ClrAxis.HORIZONTAL,
  side: ClrSide.BEFORE,
  anchor: ClrAlignment.CENTER,
  content: ClrAlignment.END
};
ClrPopoverPositions["left-bottom"] = {
  axis: ClrAxis.HORIZONTAL,
  side: ClrSide.BEFORE,
  anchor: ClrAlignment.START,
  content: ClrAlignment.START
};
var POPOVER_HOST_ANCHOR = new InjectionToken("POPOVER_HOST_ANCHOR");
var ClrStopEscapePropagationDirective = class {
  constructor(toggleService) {
    this.toggleService = toggleService;
    this.lastOpenChange = null;
  }
  ngOnInit() {
    this.subscription = this.toggleService.openChange.subscribe((open) => {
      this.lastOpenChange = open;
    });
  }
  ngOnDestroy() {
    this.subscription?.unsubscribe();
  }
  onEscapeKey(event) {
    if (this.lastOpenChange !== null) {
      if (this.lastOpenChange === false) {
        event.stopPropagation();
      }
      this.lastOpenChange = null;
    }
  }
};
ClrStopEscapePropagationDirective.ɵfac = function ClrStopEscapePropagationDirective_Factory(t161) {
  return new (t161 || ClrStopEscapePropagationDirective)(ɵɵdirectiveInject(ClrPopoverToggleService));
};
ClrStopEscapePropagationDirective.ɵdir = ɵɵdefineDirective({
  type: ClrStopEscapePropagationDirective,
  hostBindings: function ClrStopEscapePropagationDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("keyup.escape", function ClrStopEscapePropagationDirective_keyup_escape_HostBindingHandler($event) {
        return ctx.onEscapeKey($event);
      });
    }
  },
  standalone: true
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrStopEscapePropagationDirective, [{
    type: Directive,
    args: [{
      standalone: true
    }]
  }], function() {
    return [{
      type: ClrPopoverToggleService
    }];
  }, {
    onEscapeKey: [{
      type: HostListener,
      args: ["keyup.escape", ["$event"]]
    }]
  });
})();
var ClrPopoverHostDirective = class {
};
ClrPopoverHostDirective.ɵfac = function ClrPopoverHostDirective_Factory(t161) {
  return new (t161 || ClrPopoverHostDirective)();
};
ClrPopoverHostDirective.ɵdir = ɵɵdefineDirective({
  type: ClrPopoverHostDirective,
  standalone: true,
  features: [ɵɵProvidersFeature([ClrPopoverToggleService, ClrPopoverEventsService, ClrPopoverPositionService, {
    provide: POPOVER_HOST_ANCHOR,
    useExisting: ElementRef
  }]), ɵɵHostDirectivesFeature([ClrStopEscapePropagationDirective])]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrPopoverHostDirective, [{
    type: Directive,
    args: [{
      standalone: true,
      providers: [ClrPopoverToggleService, ClrPopoverEventsService, ClrPopoverPositionService, {
        provide: POPOVER_HOST_ANCHOR,
        useExisting: ElementRef
      }],
      hostDirectives: [ClrStopEscapePropagationDirective]
    }]
  }], null, null);
})();
var Linkers = class {
  /**
   * Links a set of focusable items to a parent along one direction
   */
  static linkParent(items, parent, direction) {
    items.forEach((item) => item[direction] = parent);
  }
  /**
   * Double-links a set of focusable items vertically, possibly looping
   */
  static linkVertical(items, loop = true) {
    items.forEach((item, index) => {
      if (index > 0) {
        item.up = items[index - 1];
      }
      if (index < items.length - 1) {
        item.down = items[index + 1];
      }
    });
    if (loop && items.length > 1) {
      items[0].up = items[items.length - 1];
      items[items.length - 1].down = items[0];
    }
  }
};
var InitialFocus;
(function(InitialFocus2) {
  InitialFocus2["FIRST_ITEM"] = "first";
  InitialFocus2["LAST_ITEM"] = "last";
})(InitialFocus || (InitialFocus = {}));
function collapse() {
  "use strict";
  return [state("true", style({
    height: 0,
    "overflow-y": "hidden"
  })), transition("true => false", [animate(defaultAnimationTiming, style({
    height: "*",
    "overflow-y": "hidden"
  }))]), transition("false => true", [style({
    height: "*",
    "overflow-y": "hidden"
  }), animate(defaultAnimationTiming)])];
}
var DomAdapter = class {
  userDefinedWidth(element) {
    element.classList.add("datagrid-cell-width-zero");
    const userDefinedWidth = this.clientRect(element).width;
    element.classList.remove("datagrid-cell-width-zero");
    return userDefinedWidth;
  }
  scrollBarWidth(element) {
    return element.offsetWidth - element.clientWidth;
  }
  scrollWidth(element) {
    return element.scrollWidth || 0;
  }
  computedHeight(element) {
    return parseInt(getComputedStyle(element).getPropertyValue("height"), 10);
  }
  clientRect(element) {
    const elementClientRect = element.getBoundingClientRect();
    return {
      top: parseInt(elementClientRect.top, 10),
      bottom: parseInt(elementClientRect.bottom, 10),
      left: parseInt(elementClientRect.left, 10),
      right: parseInt(elementClientRect.right, 10),
      width: parseInt(elementClientRect.width, 10),
      height: parseInt(elementClientRect.height, 10)
    };
  }
  minWidth(element) {
    return parseInt(getComputedStyle(element).getPropertyValue("min-width"), 10);
  }
  focus(element) {
    element.focus();
  }
};
DomAdapter.ɵfac = function DomAdapter_Factory(t161) {
  return new (t161 || DomAdapter)();
};
DomAdapter.ɵprov = ɵɵdefineInjectable({
  token: DomAdapter,
  factory: DomAdapter.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomAdapter, [{
    type: Injectable
  }], null, null);
})();
var ClrExpandableAnimation = class {
  constructor(element, domAdapter) {
    this.element = element;
    this.domAdapter = domAdapter;
    this.startHeight = 0;
  }
  get expandAnimation() {
    return {
      value: this.clrExpandTrigger,
      params: {
        startHeight: this.startHeight
      }
    };
  }
  animationDone() {
    this.updateStartHeight();
  }
  updateStartHeight() {
    this.startHeight = this.domAdapter.computedHeight(this.element.nativeElement) || 0;
  }
};
ClrExpandableAnimation.ɵfac = function ClrExpandableAnimation_Factory(t161) {
  return new (t161 || ClrExpandableAnimation)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(DomAdapter));
};
ClrExpandableAnimation.ɵcmp = ɵɵdefineComponent({
  type: ClrExpandableAnimation,
  selectors: [["clr-expandable-animation"]],
  hostVars: 1,
  hostBindings: function ClrExpandableAnimation_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵsyntheticHostListener("@expandAnimation.done", function ClrExpandableAnimation_animation_expandAnimation_done_HostBindingHandler() {
        return ctx.animationDone();
      });
    }
    if (rf & 2) {
      ɵɵsyntheticHostProperty("@expandAnimation", ctx.expandAnimation);
    }
  },
  inputs: {
    clrExpandTrigger: "clrExpandTrigger"
  },
  features: [ɵɵProvidersFeature([DomAdapter])],
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrExpandableAnimation_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  styles: ["[_nghost-%COMP%]{display:block;overflow:hidden}"],
  data: {
    animation: [trigger("expandAnimation", [transition("true <=> false", [style({
      height: "{{startHeight}}px"
    }), animate("0.2s ease-in-out", style({
      height: "*"
    }))])])]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrExpandableAnimation, [{
    type: Component,
    args: [{
      selector: "clr-expandable-animation",
      template: `<ng-content></ng-content>`,
      animations: [trigger("expandAnimation", [transition("true <=> false", [style({
        height: "{{startHeight}}px"
      }), animate("0.2s ease-in-out", style({
        height: "*"
      }))])])],
      providers: [DomAdapter],
      styles: [":host{display:block;overflow:hidden}\n"]
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: DomAdapter
    }];
  }, {
    clrExpandTrigger: [{
      type: Input
    }],
    expandAnimation: [{
      type: HostBinding,
      args: ["@expandAnimation"]
    }],
    animationDone: [{
      type: HostListener,
      args: ["@expandAnimation.done"]
    }]
  });
})();
var EXPANDABLE_ANIMATION_DIRECTIVES = [ClrExpandableAnimation];
function fade(opacity = 1) {
  return [transition("void => *", [style({
    opacity: 0
  }), animate(defaultAnimationTiming, style({
    opacity
  }))]), transition("* => void", [animate(defaultAnimationTiming, style({
    opacity: 0
  }))])];
}
function fadeSlide(direction) {
  let transform = null;
  if (direction === "up") {
    transform = "translate(0, 25%)";
  } else if (direction === "down") {
    transform = "translate(0, -25%)";
  } else if (direction === "left") {
    transform = "translate(25%, 0)";
  } else if (direction === "right") {
    transform = "translate(-25%, 0)";
  } else {
    throw new Error("Unknown direction " + direction + " for slide animation.");
  }
  return [transition("void => *", [style({
    opacity: 0,
    transform
  }), animate(defaultAnimationTiming)]), transition("* => void", [animate(defaultAnimationTiming, style({
    opacity: 0,
    transform
  }))])];
}
function slide(direction) {
  let transform = null;
  if (direction === "up") {
    transform = "translate(0, 25%)";
  } else if (direction === "down") {
    transform = "translate(0, -25%)";
  } else if (direction === "left") {
    transform = "translate(25%, 0)";
  } else if (direction === "right") {
    transform = "translate(-25%, 0)";
  } else {
    throw new Error("Unknown direction " + direction + " for slide animation.");
  }
  return [transition("void => *", [style({
    transform
  }), animate(defaultAnimationTiming)]), transition("* => void", [animate(defaultAnimationTiming, style({
    transform
  }))])];
}
var CLR_LOADING_DIRECTIVES = [ClrLoading];
var ClrLoadingModule = class {
};
ClrLoadingModule.ɵfac = function ClrLoadingModule_Factory(t161) {
  return new (t161 || ClrLoadingModule)();
};
ClrLoadingModule.ɵmod = ɵɵdefineNgModule({
  type: ClrLoadingModule,
  declarations: [ClrLoading],
  imports: [CommonModule],
  exports: [ClrLoading]
});
ClrLoadingModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrLoadingModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [CLR_LOADING_DIRECTIVES],
      exports: [CLR_LOADING_DIRECTIVES]
    }]
  }], null, null);
})();
var activeCounter = 0;
var IF_ACTIVE_ID = new InjectionToken("IF_ACTIVE_ID");
function tokenFactory$1() {
  return ++activeCounter;
}
var IF_ACTIVE_ID_PROVIDER = {
  provide: IF_ACTIVE_ID,
  useFactory: tokenFactory$1
};
var IfActiveService = class {
  constructor() {
    this._currentChange = new Subject();
  }
  /*********
   *
   * @description
   * A getter function that provides an observable for the _current Subject.
   *
   */
  get currentChange() {
    return this._currentChange.asObservable();
  }
  /*********
   *
   * @description
   * A property that gets/sets the current state of _current for this instance of IfActive structural directive.
   * And, broadcasts the new value to all subscribers.
   *
   */
  get current() {
    return this._current;
  }
  set current(value) {
    if (this._current !== value) {
      this._current = value;
      this._currentChange.next(value);
    }
  }
};
IfActiveService.ɵfac = function IfActiveService_Factory(t161) {
  return new (t161 || IfActiveService)();
};
IfActiveService.ɵprov = ɵɵdefineInjectable({
  token: IfActiveService,
  factory: IfActiveService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IfActiveService, [{
    type: Injectable
  }], null, null);
})();
var ClrIfActive = class {
  constructor(ifActiveService, id, template, container) {
    this.ifActiveService = ifActiveService;
    this.id = id;
    this.template = template;
    this.container = container;
    this.activeChange = new EventEmitter(false);
    this.wasActive = false;
    this.checkAndUpdateView(ifActiveService.current);
    this.subscription = this.ifActiveService.currentChange.subscribe((newCurrentId) => {
      this.checkAndUpdateView(newCurrentId);
    });
  }
  /**
   * @description
   * A property that gets/sets IfActiveService.active with value.
   *
   */
  get active() {
    return this.ifActiveService.current === this.id;
  }
  set active(value) {
    if (value) {
      this.ifActiveService.current = this.id;
    }
  }
  ngOnDestroy() {
    this.subscription.unsubscribe();
  }
  /**
   * @description
   * Function that takes a any value and either created an embedded view for the associated ViewContainerRef or,
   * Clears all views from the ViewContainerRef
   */
  updateView(value) {
    if (value) {
      this.container.createEmbeddedView(this.template);
    } else {
      this.container.clear();
    }
  }
  checkAndUpdateView(currentId) {
    const isNowActive = currentId === this.id;
    if (isNowActive !== this.wasActive) {
      this.updateView(isNowActive);
      this.activeChange.emit(isNowActive);
      this.wasActive = isNowActive;
    }
  }
};
ClrIfActive.ɵfac = function ClrIfActive_Factory(t161) {
  return new (t161 || ClrIfActive)(ɵɵdirectiveInject(IfActiveService), ɵɵdirectiveInject(IF_ACTIVE_ID), ɵɵdirectiveInject(TemplateRef), ɵɵdirectiveInject(ViewContainerRef));
};
ClrIfActive.ɵdir = ɵɵdefineDirective({
  type: ClrIfActive,
  selectors: [["", "clrIfActive", ""]],
  inputs: {
    active: [InputFlags.None, "clrIfActive", "active"]
  },
  outputs: {
    activeChange: "clrIfActiveChange"
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrIfActive, [{
    type: Directive,
    args: [{
      selector: "[clrIfActive]"
    }]
  }], function() {
    return [{
      type: IfActiveService
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [IF_ACTIVE_ID]
      }]
    }, {
      type: TemplateRef
    }, {
      type: ViewContainerRef
    }];
  }, {
    activeChange: [{
      type: Output,
      args: ["clrIfActiveChange"]
    }],
    active: [{
      type: Input,
      args: ["clrIfActive"]
    }]
  });
})();
var ClrIfOpen = class {
  constructor(toggleService, template, container) {
    this.toggleService = toggleService;
    this.template = template;
    this.container = container;
    this.openChange = new EventEmitter(false);
    this.subscription = this.toggleService.openChange.subscribe((change) => {
      this.updateView(change);
      this.openChange.emit(change);
    });
  }
  /**
   * @description
   * A property that gets/sets ClrPopoverToggleService.open with value.
   */
  get open() {
    return this.toggleService.open;
  }
  set open(value) {
    this.toggleService.open = value;
  }
  ngOnDestroy() {
    this.subscription.unsubscribe();
  }
  /**
   * @description
   * Function that takes a boolean value and either created an embedded view for the associated ViewContainerRef or,
   * Clears all views from the ViewContainerRef
   *
   * @param value
   */
  updateView(value) {
    if (value) {
      this.container.createEmbeddedView(this.template);
    } else {
      this.container.clear();
    }
  }
};
ClrIfOpen.ɵfac = function ClrIfOpen_Factory(t161) {
  return new (t161 || ClrIfOpen)(ɵɵdirectiveInject(ClrPopoverToggleService), ɵɵdirectiveInject(TemplateRef), ɵɵdirectiveInject(ViewContainerRef));
};
ClrIfOpen.ɵdir = ɵɵdefineDirective({
  type: ClrIfOpen,
  selectors: [["", "clrIfOpen", ""]],
  inputs: {
    open: [InputFlags.None, "clrIfOpen", "open"]
  },
  outputs: {
    openChange: "clrIfOpenChange"
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrIfOpen, [{
    type: Directive,
    args: [{
      selector: "[clrIfOpen]"
    }]
  }], function() {
    return [{
      type: ClrPopoverToggleService
    }, {
      type: TemplateRef
    }, {
      type: ViewContainerRef
    }];
  }, {
    openChange: [{
      type: Output,
      args: ["clrIfOpenChange"]
    }],
    open: [{
      type: Input,
      args: ["clrIfOpen"]
    }]
  });
})();
var ClrIfExpanded = class {
  constructor(template, container, el, renderer, expand) {
    this.template = template;
    this.container = container;
    this.el = el;
    this.renderer = renderer;
    this.expand = expand;
    this.expandedChange = new EventEmitter(true);
    this._expanded = false;
    this._subscriptions = [];
    this._subscriptions.push(expand.expandChange.subscribe(() => {
      this.updateView();
      this.expandedChange.emit(this.expand.expanded);
    }));
  }
  get expanded() {
    return this._expanded;
  }
  set expanded(value) {
    if (typeof value === "boolean") {
      this.expand.expanded = value;
      this._expanded = value;
    }
  }
  ngOnInit() {
    this.expand.expandable++;
    this.updateView();
  }
  ngOnDestroy() {
    this.expand.expandable--;
    this._subscriptions.forEach((sub) => sub.unsubscribe());
  }
  updateView() {
    if (this.expand.expanded && this.container.length !== 0) {
      return;
    }
    if (this.template) {
      if (this.expand.expanded) {
        this.container.createEmbeddedView(this.template);
      } else {
        this.container.clear();
      }
    } else {
      try {
        if (this.expand.expanded) {
          this.renderer.setStyle(this.el.nativeElement, "display", null);
        } else {
          this.renderer.setStyle(this.el.nativeElement, "display", "none");
        }
      } catch (e83) {
      }
    }
  }
};
ClrIfExpanded.ɵfac = function ClrIfExpanded_Factory(t161) {
  return new (t161 || ClrIfExpanded)(ɵɵdirectiveInject(TemplateRef, 8), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(IfExpandService));
};
ClrIfExpanded.ɵdir = ɵɵdefineDirective({
  type: ClrIfExpanded,
  selectors: [["", "clrIfExpanded", ""]],
  inputs: {
    expanded: [InputFlags.None, "clrIfExpanded", "expanded"]
  },
  outputs: {
    expandedChange: "clrIfExpandedChange"
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrIfExpanded, [{
    type: Directive,
    args: [{
      selector: "[clrIfExpanded]"
    }]
  }], function() {
    return [{
      type: TemplateRef,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ViewContainerRef
    }, {
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: IfExpandService
    }];
  }, {
    expandedChange: [{
      type: Output,
      args: ["clrIfExpandedChange"]
    }],
    expanded: [{
      type: Input,
      args: ["clrIfExpanded"]
    }]
  });
})();
var CONDITIONAL_DIRECTIVES = [ClrIfActive, ClrIfOpen, ClrIfExpanded];
var ClrConditionalModule = class {
};
ClrConditionalModule.ɵfac = function ClrConditionalModule_Factory(t161) {
  return new (t161 || ClrConditionalModule)();
};
ClrConditionalModule.ɵmod = ɵɵdefineNgModule({
  type: ClrConditionalModule,
  declarations: [ClrIfActive, ClrIfOpen, ClrIfExpanded],
  imports: [CommonModule],
  exports: [ClrIfActive, ClrIfOpen, ClrIfExpanded]
});
ClrConditionalModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrConditionalModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [CONDITIONAL_DIRECTIVES],
      exports: [CONDITIONAL_DIRECTIVES]
    }]
  }], null, null);
})();
var FOCUS_ON_VIEW_INIT = new InjectionToken("FOCUS_ON_VIEW_INIT");
var FOCUS_ON_VIEW_INIT_PROVIDER = {
  provide: FOCUS_ON_VIEW_INIT,
  useValue: true
};
var ClrFocusOnViewInit = class {
  constructor(el, platformId, focusOnViewInit, document2, renderer, ngZone) {
    this.el = el;
    this.platformId = platformId;
    this.focusOnViewInit = focusOnViewInit;
    this.renderer = renderer;
    this.directFocus = true;
    this.destroy$ = new Subject();
    this._isEnabled = this.focusOnViewInit;
    this.document = document2;
    ngZone.runOutsideAngular(() => fromEvent(el.nativeElement, "focusout").pipe(takeUntil(this.destroy$)).subscribe(() => {
      if (!this.directFocus) {
        this.renderer.removeAttribute(this.el.nativeElement, "tabindex");
        this.renderer.setStyle(this.el.nativeElement, "outline", null);
      }
    }));
  }
  set isEnabled(value) {
    if (this.focusOnViewInit && typeof value === "boolean") {
      this._isEnabled = value;
    }
  }
  ngAfterViewInit() {
    this.focus();
  }
  ngOnDestroy() {
    this.destroy$.next();
  }
  focus() {
    if (!isPlatformBrowser(this.platformId)) {
      return;
    }
    if (!this._isEnabled) {
      return;
    }
    if (this.document && this.document.activeElement !== this.el.nativeElement) {
      this.el.nativeElement.focus();
      if (this.document.activeElement !== this.el.nativeElement) {
        this.directFocus = false;
        this.renderer.setAttribute(this.el.nativeElement, "tabindex", "-1");
        this.renderer.setStyle(this.el.nativeElement, "outline", "none");
        this.el.nativeElement.focus();
      }
    }
  }
};
ClrFocusOnViewInit.ɵfac = function ClrFocusOnViewInit_Factory(t161) {
  return new (t161 || ClrFocusOnViewInit)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(PLATFORM_ID), ɵɵdirectiveInject(FOCUS_ON_VIEW_INIT), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NgZone));
};
ClrFocusOnViewInit.ɵdir = ɵɵdefineDirective({
  type: ClrFocusOnViewInit,
  selectors: [["", "clrFocusOnViewInit", ""]],
  inputs: {
    isEnabled: [InputFlags.None, "clrFocusOnViewInit", "isEnabled"]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrFocusOnViewInit, [{
    type: Directive,
    args: [{
      selector: "[clrFocusOnViewInit]"
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [FOCUS_ON_VIEW_INIT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }, {
      type: Renderer2
    }, {
      type: NgZone
    }];
  }, {
    isEnabled: [{
      type: Input,
      args: ["clrFocusOnViewInit"]
    }]
  });
})();
var FOCUS_ON_VIEW_INIT_DIRECTIVES = [ClrFocusOnViewInit];
var ClrFocusOnViewInitModule = class {
};
ClrFocusOnViewInitModule.ɵfac = function ClrFocusOnViewInitModule_Factory(t161) {
  return new (t161 || ClrFocusOnViewInitModule)();
};
ClrFocusOnViewInitModule.ɵmod = ɵɵdefineNgModule({
  type: ClrFocusOnViewInitModule,
  declarations: [ClrFocusOnViewInit],
  imports: [CommonModule],
  exports: [ClrFocusOnViewInit]
});
ClrFocusOnViewInitModule.ɵinj = ɵɵdefineInjector({
  providers: [FOCUS_ON_VIEW_INIT_PROVIDER],
  imports: [CommonModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrFocusOnViewInitModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [FOCUS_ON_VIEW_INIT_DIRECTIVES],
      providers: [FOCUS_ON_VIEW_INIT_PROVIDER],
      exports: [FOCUS_ON_VIEW_INIT_DIRECTIVES]
    }]
  }], null, null);
})();
var ClrStandaloneCdkTrapFocus = class extends CdkTrapFocus {
};
ClrStandaloneCdkTrapFocus.ɵfac = /* @__PURE__ */ (() => {
  let ɵClrStandaloneCdkTrapFocus_BaseFactory;
  return function ClrStandaloneCdkTrapFocus_Factory(t161) {
    return (ɵClrStandaloneCdkTrapFocus_BaseFactory || (ɵClrStandaloneCdkTrapFocus_BaseFactory = ɵɵgetInheritedFactory(ClrStandaloneCdkTrapFocus)))(t161 || ClrStandaloneCdkTrapFocus);
  };
})();
ClrStandaloneCdkTrapFocus.ɵdir = ɵɵdefineDirective({
  type: ClrStandaloneCdkTrapFocus,
  standalone: true,
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrStandaloneCdkTrapFocus, [{
    type: Directive,
    args: [{
      standalone: true
    }]
  }], null, null);
})();
var ButtonGroupFocusHandler = class {
  constructor(focusService, toggleService, renderer) {
    this.focusService = focusService;
    this.toggleService = toggleService;
    this.renderer = renderer;
    this.initialFocus = InitialFocus.FIRST_ITEM;
    this._unlistenFuncs = [];
  }
  ngOnDestroy() {
    this._unlistenFuncs.forEach((unlisten) => unlisten());
    this.focusService.detachListeners();
  }
  initialize({
    menu,
    menuToggle
  }) {
    this.menu = menu;
    this.menuToggle = menuToggle;
    this.focusService.registerContainer(this.menu, "-1");
    this.listenToKeys();
    this.linkButtons();
    switch (this.initialFocus) {
      case InitialFocus.LAST_ITEM:
        this.focusLastItem();
        break;
      default:
        this.focusFirstItem();
        break;
    }
  }
  resetButtonsFocus() {
    this.buttons.forEach((button) => {
      button.blur();
    });
  }
  listenToKeys() {
    this._unlistenFuncs.push(this.renderer.listen(this.menu, "keydown.shift.tab", (event) => this.closeMenu(event, false)));
    this._unlistenFuncs.push(this.renderer.listen(this.menu, "keydown.tab", (event) => this.closeMenu(event, true)));
  }
  closeMenu(event, focusBackOnToggle) {
    this.toggleService.toggleWithEvent(event);
    if (focusBackOnToggle) {
      this.menuToggle.focus();
    }
    this.resetButtonsFocus();
  }
  linkButtons() {
    const buttonElements = Array.from(this.menu.children);
    this.buttons = buttonElements.map((buttonElement) => {
      this._unlistenFuncs.push(this.renderer.listen(buttonElement, "click", (event) => this.closeMenu(event, true)));
      return {
        id: buttonElement.id,
        value: buttonElement,
        focus: () => {
          buttonElement.setAttribute("tabindex", "0");
          buttonElement.focus();
        },
        blur: () => {
          buttonElement.setAttribute("tabindex", "-1");
          buttonElement.blur();
        }
      };
    });
    this.resetButtonsFocus();
    Linkers.linkVertical(this.buttons);
  }
  focusFirstItem() {
    if (this.buttons.length) {
      this.focusService.moveTo(this.buttons[0]);
    }
    this.initialFocus = InitialFocus.FIRST_ITEM;
  }
  focusLastItem() {
    if (this.buttons.length) {
      this.focusService.moveTo(this.buttons[this.buttons.length - 1]);
    }
    this.initialFocus = InitialFocus.FIRST_ITEM;
  }
};
ButtonGroupFocusHandler.ɵfac = function ButtonGroupFocusHandler_Factory(t161) {
  return new (t161 || ButtonGroupFocusHandler)(ɵɵinject(FocusService$1), ɵɵinject(ClrPopoverToggleService), ɵɵinject(Renderer2));
};
ButtonGroupFocusHandler.ɵprov = ɵɵdefineInjectable({
  token: ButtonGroupFocusHandler,
  factory: ButtonGroupFocusHandler.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ButtonGroupFocusHandler, [{
    type: Injectable
  }], function() {
    return [{
      type: FocusService$1
    }, {
      type: ClrPopoverToggleService
    }, {
      type: Renderer2
    }];
  }, null);
})();
var BUTTON_GROUP_FOCUS_HANDLER_PROVIDER = {
  provide: ButtonGroupFocusHandler
};
var ClrButtonGroup = class {
  constructor(buttonGroupNewService, toggleService, commonStrings, destroy$, focusHandler) {
    this.buttonGroupNewService = buttonGroupNewService;
    this.toggleService = toggleService;
    this.commonStrings = commonStrings;
    this.destroy$ = destroy$;
    this.focusHandler = focusHandler;
    this.clrToggleButtonAriaLabel = this.commonStrings.keys.rowActions;
    this.popoverId = uniqueIdFactory();
    this.InitialFocus = InitialFocus;
    this.popoverPosition = ClrPopoverPositions["bottom-left"];
    this.inlineButtons = [];
    this.menuButtons = [];
  }
  get menuPosition() {
    return this._menuPosition;
  }
  set menuPosition(pos) {
    if (pos && ClrPopoverPositions[pos]) {
      this._menuPosition = pos;
    } else {
      this._menuPosition = "bottom-left";
    }
    this.popoverPosition = ClrPopoverPositions[this._menuPosition];
  }
  get open() {
    return this.toggleService.open;
  }
  /**
   * 1. Initializes the initial Button Group View
   * 2. Subscribes to changes on the ContentChildren
   *    in case the user content projection changes
   */
  ngAfterContentInit() {
    this.initializeButtons();
    this.buttonGroupNewService.changes.pipe(takeUntil(this.destroy$)).subscribe((button) => this.rearrangeButton(button));
    this.buttons.changes.subscribe(() => {
      this.initializeButtons();
    });
  }
  ngAfterViewInit() {
    this.handleFocusOnMenuOpen();
  }
  /**
   * Moves the button into the other ViewContainer
   * when an update is received.
   *
   * @param button
   */
  rearrangeButton(button) {
    let fromView;
    let toView;
    if (button.inMenu) {
      fromView = this.inlineButtons;
      toView = this.menuButtons;
    } else {
      fromView = this.menuButtons;
      toView = this.inlineButtons;
    }
    const index = fromView.indexOf(button);
    if (index > -1) {
      fromView.splice(index, 1);
      const moveIndex = this.getMoveIndex(button);
      if (moveIndex <= toView.length) {
        toView.splice(moveIndex, 0, button);
      }
    }
  }
  openMenu(event, initialFocus) {
    this.focusHandler.initialFocus = initialFocus;
    if (!this.toggleService.open) {
      this.toggleService.toggleWithEvent(event);
    }
  }
  /**
   * Author: Eudes
   *
   * Finds the order of a button w.r.t other buttons
   *
   * @param buttonToMove
   * @returns
   */
  getMoveIndex(buttonToMove) {
    const tempArr = this.buttons.filter((button) => button.inMenu === buttonToMove.inMenu);
    return tempArr.indexOf(buttonToMove);
  }
  initializeButtons() {
    const tempInlineButtons = [];
    const tempInMenuButtons = [];
    this.buttons.forEach((button) => {
      if (button.inMenu) {
        tempInMenuButtons.push(button);
      } else {
        tempInlineButtons.push(button);
      }
    });
    this.inlineButtons = tempInlineButtons;
    this.menuButtons = tempInMenuButtons;
  }
  handleFocusOnMenuOpen() {
    this.toggleService.popoverVisible.pipe(takeUntil(this.destroy$)).subscribe((visible) => {
      if (visible) {
        this.focusHandler.initialize({
          menu: this.menu.nativeElement,
          menuToggle: this.menuToggle.nativeElement
        });
      }
    });
  }
};
ClrButtonGroup.ɵfac = function ClrButtonGroup_Factory(t161) {
  return new (t161 || ClrButtonGroup)(ɵɵdirectiveInject(ButtonInGroupService), ɵɵdirectiveInject(ClrPopoverToggleService), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(ClrDestroyService), ɵɵdirectiveInject(ButtonGroupFocusHandler));
};
ClrButtonGroup.ɵcmp = ɵɵdefineComponent({
  type: ClrButtonGroup,
  selectors: [["clr-button-group"]],
  contentQueries: function ClrButtonGroup_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrButton, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.buttons = _t);
    }
  },
  viewQuery: function ClrButtonGroup_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c6, 5);
      ɵɵviewQuery(_c7, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.menuToggle = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.menu = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function ClrButtonGroup_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("btn-group", true);
    }
  },
  inputs: {
    clrToggleButtonAriaLabel: "clrToggleButtonAriaLabel",
    menuPosition: [InputFlags.None, "clrMenuPosition", "menuPosition"]
  },
  features: [ɵɵProvidersFeature([ButtonInGroupService, ClrDestroyService, BUTTON_GROUP_FOCUS_HANDLER_PROVIDER, FOCUS_SERVICE_PROVIDER]), ɵɵHostDirectivesFeature([ClrPopoverHostDirective])],
  decls: 2,
  vars: 2,
  consts: [["menuToggle", ""], ["menu", ""], [4, "ngFor", "ngForOf"], ["class", "btn-group-overflow open", 3, "ngClass", 4, "ngIf"], [3, "ngTemplateOutlet"], [1, "btn-group-overflow", "open", 3, "ngClass"], ["clrPopoverAnchor", "", "clrPopoverOpenCloseButton", "", 1, "btn", "dropdown-toggle", 3, "keydown.arrowup", "keydown.arrowdown"], ["shape", "ellipsis-horizontal"], ["role", "menu", "class", "dropdown-menu clr-button-group-menu", 3, "id", 4, "clrPopoverContent", "clrPopoverContentAt", "clrPopoverContentOutsideClickToClose", "clrPopoverContentScrollToClose"], ["role", "menu", 1, "dropdown-menu", "clr-button-group-menu", 3, "id"]],
  template: function ClrButtonGroup_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, ClrButtonGroup_0_Template, 1, 1, null, 2)(1, ClrButtonGroup_div_1_Template, 5, 9, "div", 3);
    }
    if (rf & 2) {
      ɵɵproperty("ngForOf", ctx.inlineButtons);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.menuButtons.length > 0);
    }
  },
  dependencies: [NgClass, NgForOf, NgIf, NgTemplateOutlet, CdsIconCustomTag, ClrPopoverAnchor, ClrPopoverOpenCloseButton, ClrPopoverContent],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrButtonGroup, [{
    type: Component,
    args: [{
      selector: "clr-button-group",
      providers: [ButtonInGroupService, ClrDestroyService, BUTTON_GROUP_FOCUS_HANDLER_PROVIDER, FOCUS_SERVICE_PROVIDER],
      hostDirectives: [ClrPopoverHostDirective],
      host: {
        "[class.btn-group]": "true"
      },
      template: '<!--\n  ~ Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<ng-template *ngFor="let inlineButton of inlineButtons" [ngTemplateOutlet]="inlineButton.templateRef"></ng-template>\n\n<div *ngIf="menuButtons.length > 0" class="btn-group-overflow open" [ngClass]="menuPosition">\n  <button\n    #menuToggle\n    class="btn dropdown-toggle"\n    clrPopoverAnchor\n    clrPopoverOpenCloseButton\n    (keydown.arrowup)="openMenu($event, InitialFocus.LAST_ITEM)"\n    (keydown.arrowdown)="openMenu($event, InitialFocus.FIRST_ITEM)"\n    [attr.aria-controls]="popoverId"\n    [attr.aria-expanded]="open"\n    [attr.aria-label]="clrToggleButtonAriaLabel"\n  >\n    <cds-icon shape="ellipsis-horizontal" [attr.title]="commonStrings.keys.more"></cds-icon>\n  </button>\n  <div\n    #menu\n    role="menu"\n    class="dropdown-menu clr-button-group-menu"\n    [id]="popoverId"\n    [attr.id]="popoverId"\n    [attr.aria-hidden]="!open"\n    *clrPopoverContent="open at popoverPosition; outsideClickToClose: true; scrollToClose: true"\n  >\n    <ng-template *ngFor="let menuButton of menuButtons" [ngTemplateOutlet]="menuButton.templateRef"></ng-template>\n  </div>\n</div>\n'
    }]
  }], function() {
    return [{
      type: ButtonInGroupService
    }, {
      type: ClrPopoverToggleService
    }, {
      type: ClrCommonStringsService
    }, {
      type: ClrDestroyService
    }, {
      type: ButtonGroupFocusHandler
    }];
  }, {
    clrToggleButtonAriaLabel: [{
      type: Input,
      args: ["clrToggleButtonAriaLabel"]
    }],
    menuToggle: [{
      type: ViewChild,
      args: ["menuToggle"]
    }],
    menu: [{
      type: ViewChild,
      args: ["menu"]
    }],
    buttons: [{
      type: ContentChildren,
      args: [ClrButton]
    }],
    menuPosition: [{
      type: Input,
      args: ["clrMenuPosition"]
    }]
  });
})();
var CLR_BUTTON_GROUP_DIRECTIVES = [ClrButton, ClrButtonGroup];
var ClrButtonGroupModule = class {
};
ClrButtonGroupModule.ɵfac = function ClrButtonGroupModule_Factory(t161) {
  return new (t161 || ClrButtonGroupModule)();
};
ClrButtonGroupModule.ɵmod = ɵɵdefineNgModule({
  type: ClrButtonGroupModule,
  declarations: [ClrButton, ClrButtonGroup],
  imports: [CommonModule, ClrIconModule, ClrPopoverModuleNext],
  exports: [ClrButton, ClrButtonGroup]
});
ClrButtonGroupModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrIconModule, ClrPopoverModuleNext]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrButtonGroupModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrIconModule, ClrPopoverModuleNext],
      declarations: [CLR_BUTTON_GROUP_DIRECTIVES],
      exports: [CLR_BUTTON_GROUP_DIRECTIVES]
    }]
  }], null, null);
})();
var MIN_BUTTON_WIDTH = 42;
var ClrLoadingButton = class {
  constructor(el, renderer) {
    this.el = el;
    this.renderer = renderer;
    this.clrLoadingChange = new EventEmitter(false);
    this.buttonState = ClrLoadingState;
    this.state = ClrLoadingState.DEFAULT;
  }
  loadingStateChange(state2) {
    if (state2 === this.state) {
      return;
    }
    this.state = state2;
    switch (state2) {
      case ClrLoadingState.DEFAULT:
        this.renderer.removeStyle(this.el.nativeElement, "width");
        this.renderer.removeStyle(this.el.nativeElement, "transform");
        if (!this.disabled) {
          this.renderer.removeAttribute(this.el.nativeElement, "disabled");
        }
        break;
      case ClrLoadingState.LOADING:
        this.setExplicitButtonWidth();
        this.renderer.setStyle(this.el.nativeElement, "transform", "translatez(0)");
        this.renderer.setAttribute(this.el.nativeElement, "disabled", "");
        break;
      case ClrLoadingState.SUCCESS:
        this.setExplicitButtonWidth();
        break;
      case ClrLoadingState.ERROR:
        this.loadingStateChange(ClrLoadingState.DEFAULT);
        break;
      default:
        break;
    }
    this.clrLoadingChange.emit(state2);
  }
  setExplicitButtonWidth() {
    if (this.el.nativeElement && this.el.nativeElement.getBoundingClientRect) {
      const boundingClientRect = this.el.nativeElement.getBoundingClientRect();
      const width = Math.max(MIN_BUTTON_WIDTH, boundingClientRect.width);
      this.renderer.setStyle(this.el.nativeElement, "width", `${width}px`);
    }
  }
};
ClrLoadingButton.ɵfac = function ClrLoadingButton_Factory(t161) {
  return new (t161 || ClrLoadingButton)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2));
};
ClrLoadingButton.ɵcmp = ɵɵdefineComponent({
  type: ClrLoadingButton,
  selectors: [["button", "clrLoading", ""]],
  hostVars: 1,
  hostBindings: function ClrLoadingButton_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("disabled", ctx.disabled ? "" : null);
    }
  },
  inputs: {
    disabled: "disabled"
  },
  outputs: {
    clrLoadingChange: "clrLoadingChange"
  },
  features: [ɵɵProvidersFeature([{
    provide: LoadingListener,
    useExisting: ClrLoadingButton
  }])],
  attrs: _c8,
  ngContentSelectors: _c02,
  decls: 4,
  vars: 5,
  consts: [[3, "ngSwitch"], [4, "ngSwitchCase"], ["class", "clr-loading-btn-content", 4, "ngSwitchCase"], [1, "spinner", "spinner-inline"], [1, "spinner", "spinner-inline", "spinner-check"], [1, "clr-loading-btn-content"]],
  template: function ClrLoadingButton_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "span", 0);
      ɵɵtemplate(1, ClrLoadingButton_ng_container_1_Template, 2, 1, "ng-container", 1)(2, ClrLoadingButton_ng_container_2_Template, 2, 1, "ng-container", 1)(3, ClrLoadingButton_span_3_Template, 2, 1, "span", 2);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵproperty("@parent", void 0)("ngSwitch", ctx.state);
      ɵɵadvance();
      ɵɵproperty("ngSwitchCase", ctx.buttonState.LOADING);
      ɵɵadvance();
      ɵɵproperty("ngSwitchCase", ctx.buttonState.SUCCESS);
      ɵɵadvance();
      ɵɵproperty("ngSwitchCase", ctx.buttonState.DEFAULT);
    }
  },
  dependencies: [NgSwitch, NgSwitchCase],
  encapsulation: 2,
  data: {
    animation: [trigger("parent", [
      // Skip :enter animation on first render.
      // The button text/content should only be faded when transitioning to or from a non-default state.
      transition(":enter", [])
    ]), trigger("defaultButton", [
      transition(":enter", [style({
        opacity: 0
      }), animate("200ms 100ms ease-in", style({
        opacity: 1
      }))]),
      // TODO: see if we can get leave animation to work before spinner's enter animation
      transition(":leave", [style({
        opacity: 0
      })])
    ]), trigger("spinner", [transition(":enter", [style({
      opacity: 0
    }), animate("200ms 100ms ease-in", style({
      opacity: 1
    }))]), transition(":leave", [style({
      opacity: 1
    }), animate("100ms ease-out", style({
      opacity: 0
    }))])]), trigger("validated", [transition(":enter", [animate("600ms", keyframes([style({
      transform: "scale(0,0)",
      offset: 0
    }), style({
      opacity: 1,
      offset: 0.2
    }), style({
      transform: "scale(1.2,1.2)",
      offset: 0.4
    }), style({
      transform: "scale(.9,.9)",
      offset: 0.6
    }), style({
      transform: "scale(1,1)",
      offset: 1
    })]))]), transition(":leave", [style({
      opacity: 1
    }), animate("100ms ease-out", style({
      opacity: 0
    }))])])]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrLoadingButton, [{
    type: Component,
    args: [{
      selector: "button[clrLoading]",
      template: `
    <span @parent [ngSwitch]="state">
      <ng-container *ngSwitchCase="buttonState.LOADING">
        <span @spinner class="spinner spinner-inline"></span>
      </ng-container>
      <ng-container *ngSwitchCase="buttonState.SUCCESS">
        <span
          @validated
          (@validated.done)="this.loadingStateChange(this.buttonState.DEFAULT)"
          class="spinner spinner-inline spinner-check"
        ></span>
      </ng-container>
      <span *ngSwitchCase="buttonState.DEFAULT" @defaultButton class="clr-loading-btn-content">
        <ng-content></ng-content>
      </span>
    </span>
  `,
      providers: [{
        provide: LoadingListener,
        useExisting: ClrLoadingButton
      }],
      animations: [trigger("parent", [
        // Skip :enter animation on first render.
        // The button text/content should only be faded when transitioning to or from a non-default state.
        transition(":enter", [])
      ]), trigger("defaultButton", [
        transition(":enter", [style({
          opacity: 0
        }), animate("200ms 100ms ease-in", style({
          opacity: 1
        }))]),
        // TODO: see if we can get leave animation to work before spinner's enter animation
        transition(":leave", [style({
          opacity: 0
        })])
      ]), trigger("spinner", [transition(":enter", [style({
        opacity: 0
      }), animate("200ms 100ms ease-in", style({
        opacity: 1
      }))]), transition(":leave", [style({
        opacity: 1
      }), animate("100ms ease-out", style({
        opacity: 0
      }))])]), trigger("validated", [transition(":enter", [animate("600ms", keyframes([style({
        transform: "scale(0,0)",
        offset: 0
      }), style({
        opacity: 1,
        offset: 0.2
      }), style({
        transform: "scale(1.2,1.2)",
        offset: 0.4
      }), style({
        transform: "scale(.9,.9)",
        offset: 0.6
      }), style({
        transform: "scale(1,1)",
        offset: 1
      })]))]), transition(":leave", [style({
        opacity: 1
      }), animate("100ms ease-out", style({
        opacity: 0
      }))])])],
      host: {
        "[attr.disabled]": "disabled? '' : null"
      }
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: Renderer2
    }];
  }, {
    disabled: [{
      type: Input,
      args: ["disabled"]
    }],
    clrLoadingChange: [{
      type: Output,
      args: ["clrLoadingChange"]
    }]
  });
})();
var CLR_LOADING_BUTTON_DIRECTIVES = [ClrLoadingButton];
var ClrLoadingButtonModule = class {
};
ClrLoadingButtonModule.ɵfac = function ClrLoadingButtonModule_Factory(t161) {
  return new (t161 || ClrLoadingButtonModule)();
};
ClrLoadingButtonModule.ɵmod = ɵɵdefineNgModule({
  type: ClrLoadingButtonModule,
  declarations: [ClrLoadingButton],
  imports: [CommonModule],
  exports: [ClrLoadingButton]
});
ClrLoadingButtonModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrLoadingButtonModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [CLR_LOADING_BUTTON_DIRECTIVES],
      exports: [CLR_LOADING_BUTTON_DIRECTIVES]
    }]
  }], null, null);
})();
var ClrButtonModule = class {
  constructor() {
    r24.addIcons(i23);
  }
};
ClrButtonModule.ɵfac = function ClrButtonModule_Factory(t161) {
  return new (t161 || ClrButtonModule)();
};
ClrButtonModule.ɵmod = ɵɵdefineNgModule({
  type: ClrButtonModule,
  exports: [ClrLoadingButtonModule, ClrButtonGroupModule]
});
ClrButtonModule.ɵinj = ɵɵdefineInjector({
  imports: [ClrLoadingButtonModule, ClrButtonGroupModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrButtonModule, [{
    type: NgModule,
    args: [{
      exports: [ClrLoadingButtonModule, ClrButtonGroupModule]
    }]
  }], function() {
    return [];
  }, null);
})();
var EmptyAnchor = class {
};
EmptyAnchor.ɵfac = function EmptyAnchor_Factory(t161) {
  return new (t161 || EmptyAnchor)();
};
EmptyAnchor.ɵcmp = ɵɵdefineComponent({
  type: EmptyAnchor,
  selectors: [["ng-component"]],
  decls: 0,
  vars: 0,
  template: function EmptyAnchor_Template(rf, ctx) {
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EmptyAnchor, [{
    type: Component,
    args: [{
      template: ""
    }]
  }], null, null);
})();
var ClrHostWrappingModule = class {
};
ClrHostWrappingModule.ɵfac = function ClrHostWrappingModule_Factory(t161) {
  return new (t161 || ClrHostWrappingModule)();
};
ClrHostWrappingModule.ɵmod = ɵɵdefineNgModule({
  type: ClrHostWrappingModule,
  declarations: [EmptyAnchor],
  exports: [EmptyAnchor]
});
ClrHostWrappingModule.ɵinj = ɵɵdefineInjector({});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrHostWrappingModule, [{
    type: NgModule,
    args: [{
      declarations: [EmptyAnchor],
      exports: [EmptyAnchor]
    }]
  }], null, null);
})();
var counter$2 = 0;
var ControlIdService = class {
  constructor() {
    this._id = "clr-form-control-" + ++counter$2;
    this._idChange = new BehaviorSubject(this._id);
  }
  get id() {
    return this._id;
  }
  set id(value) {
    this._id = value;
    this._idChange.next(value);
  }
  get idChange() {
    return this._idChange.asObservable();
  }
};
ControlIdService.ɵfac = function ControlIdService_Factory(t161) {
  return new (t161 || ControlIdService)();
};
ControlIdService.ɵprov = ɵɵdefineInjectable({
  token: ControlIdService,
  factory: ControlIdService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ControlIdService, [{
    type: Injectable
  }], null, null);
})();
var counter$1 = 0;
var ContainerIdService = class {
  constructor() {
    this._id = `clr-form-container-${++counter$1}`;
    this._idChange = new BehaviorSubject(this._id);
  }
  get id() {
    return this._id;
  }
  set id(value) {
    this._id = value;
    this._idChange.next(value);
  }
  get idChange() {
    return this._idChange.asObservable();
  }
};
ContainerIdService.ɵfac = function ContainerIdService_Factory(t161) {
  return new (t161 || ContainerIdService)();
};
ContainerIdService.ɵprov = ɵɵdefineInjectable({
  token: ContainerIdService,
  factory: ContainerIdService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ContainerIdService, [{
    type: Injectable
  }], null, null);
})();
var CONTROL_SUFFIX = {
  HELPER: "helper",
  ERROR: "error",
  SUCCESS: "success",
  NONE: null
};
var ClrAbstractControl = class {
  constructor(controlIdService, containerIdService) {
    this.controlIdService = controlIdService;
    this.containerIdService = containerIdService;
    this.controlIdSuffix = "abstract";
  }
  get id() {
    if (this.containerIdService) {
      return `${this.containerIdService.id}-${this.controlIdSuffix}`;
    }
    if (this.controlIdService) {
      return `${this.controlIdService.id}-${this.controlIdSuffix}`;
    }
    return null;
  }
};
ClrAbstractControl.ɵfac = function ClrAbstractControl_Factory(t161) {
  return new (t161 || ClrAbstractControl)(ɵɵdirectiveInject(ControlIdService, 8), ɵɵdirectiveInject(ContainerIdService, 8));
};
ClrAbstractControl.ɵdir = ɵɵdefineDirective({
  type: ClrAbstractControl
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrAbstractControl, [{
    type: Directive
  }], function() {
    return [{
      type: ControlIdService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ContainerIdService,
      decorators: [{
        type: Optional
      }]
    }];
  }, null);
})();
var ClrControlError = class extends ClrAbstractControl {
  constructor(controlIdService, containerIdService) {
    super(controlIdService, containerIdService);
    this.controlIdService = controlIdService;
    this.containerIdService = containerIdService;
    this.controlIdSuffix = CONTROL_SUFFIX.ERROR;
  }
};
ClrControlError.ɵfac = function ClrControlError_Factory(t161) {
  return new (t161 || ClrControlError)(ɵɵdirectiveInject(ControlIdService, 8), ɵɵdirectiveInject(ContainerIdService, 8));
};
ClrControlError.ɵcmp = ɵɵdefineComponent({
  type: ClrControlError,
  selectors: [["clr-control-error"]],
  hostVars: 5,
  hostBindings: function ClrControlError_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("id", ctx.id);
      ɵɵclassProp("clr-subtext", true)("error", true);
    }
  },
  features: [ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrControlError_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrControlError, [{
    type: Component,
    args: [{
      selector: "clr-control-error",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.clr-subtext]": "true",
        "[class.error]": "true",
        "[attr.id]": "id"
      }
    }]
  }], function() {
    return [{
      type: ControlIdService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ContainerIdService,
      decorators: [{
        type: Optional
      }]
    }];
  }, null);
})();
var ClrControlHelper = class extends ClrAbstractControl {
  constructor(controlIdService, containerIdService) {
    super(controlIdService, containerIdService);
    this.controlIdService = controlIdService;
    this.containerIdService = containerIdService;
    this.controlIdSuffix = CONTROL_SUFFIX.HELPER;
  }
};
ClrControlHelper.ɵfac = function ClrControlHelper_Factory(t161) {
  return new (t161 || ClrControlHelper)(ɵɵdirectiveInject(ControlIdService, 8), ɵɵdirectiveInject(ContainerIdService, 8));
};
ClrControlHelper.ɵcmp = ɵɵdefineComponent({
  type: ClrControlHelper,
  selectors: [["clr-control-helper"]],
  hostVars: 3,
  hostBindings: function ClrControlHelper_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("id", ctx.id);
      ɵɵclassProp("clr-subtext", true);
    }
  },
  features: [ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrControlHelper_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrControlHelper, [{
    type: Component,
    args: [{
      selector: "clr-control-helper",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.clr-subtext]": "true",
        "[attr.id]": "id"
      }
    }]
  }], function() {
    return [{
      type: ControlIdService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ContainerIdService,
      decorators: [{
        type: Optional
      }]
    }];
  }, null);
})();
var NgControlService = class {
  constructor() {
    this._controlChanges = new Subject();
    this._helpers = new Subject();
  }
  get controlChanges() {
    return this._controlChanges.asObservable();
  }
  get helpersChange() {
    return this._helpers.asObservable();
  }
  setControl(control) {
    this._controlChanges.next(control);
  }
  setHelpers(state2) {
    this._helpers.next(state2);
  }
};
NgControlService.ɵfac = function NgControlService_Factory(t161) {
  return new (t161 || NgControlService)();
};
NgControlService.ɵprov = ɵɵdefineInjectable({
  token: NgControlService,
  factory: NgControlService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgControlService, [{
    type: Injectable
  }], null, null);
})();
var CONTROL_STATE;
(function(CONTROL_STATE2) {
  CONTROL_STATE2["NONE"] = "NONE";
  CONTROL_STATE2["VALID"] = "VALID";
  CONTROL_STATE2["INVALID"] = "INVALID";
})(CONTROL_STATE || (CONTROL_STATE = {}));
var IfControlStateService = class {
  constructor(ngControlService) {
    this.ngControlService = ngControlService;
    this.subscriptions = [];
    this._statusChanges = new BehaviorSubject(CONTROL_STATE.NONE);
    this.subscriptions.push(this.ngControlService.controlChanges.subscribe((control) => {
      if (control) {
        this.control = control;
        this.subscriptions.push(this.control.statusChanges.subscribe(() => {
          this.triggerStatusChange();
        }));
      }
    }));
  }
  get statusChanges() {
    return this._statusChanges.asObservable();
  }
  ngOnDestroy() {
    this.subscriptions.forEach((subscription) => subscription.unsubscribe());
  }
  triggerStatusChange() {
    if (this.control) {
      const status = CONTROL_STATE[this.control.status];
      this._statusChanges.next(["VALID", "INVALID"].includes(status) ? status : CONTROL_STATE.NONE);
    }
  }
};
IfControlStateService.ɵfac = function IfControlStateService_Factory(t161) {
  return new (t161 || IfControlStateService)(ɵɵinject(NgControlService));
};
IfControlStateService.ɵprov = ɵɵdefineInjectable({
  token: IfControlStateService,
  factory: IfControlStateService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IfControlStateService, [{
    type: Injectable
  }], function() {
    return [{
      type: NgControlService
    }];
  }, null);
})();
var ClrFormLayout;
(function(ClrFormLayout2) {
  ClrFormLayout2["VERTICAL"] = "vertical";
  ClrFormLayout2["HORIZONTAL"] = "horizontal";
  ClrFormLayout2["COMPACT"] = "compact";
})(ClrFormLayout || (ClrFormLayout = {}));
var LayoutService = class {
  constructor() {
    this.minLabelSize = 1;
    this.maxLabelSize = 12;
    this.layout = ClrFormLayout.HORIZONTAL;
    this.layoutValues = Object.keys(ClrFormLayout).map((key) => ClrFormLayout[key]);
    this._labelSize = 2;
  }
  get labelSize() {
    return this._labelSize;
  }
  set labelSize(size) {
    if (this.labelSizeIsValid(size)) {
      this._labelSize = size;
    }
  }
  get layoutClass() {
    return `clr-form-${this.layout}`;
  }
  isVertical() {
    return this.layout === ClrFormLayout.VERTICAL;
  }
  isHorizontal() {
    return this.layout === ClrFormLayout.HORIZONTAL;
  }
  isCompact() {
    return this.layout === ClrFormLayout.COMPACT;
  }
  isValid(layout) {
    return this.layoutValues.indexOf(layout) > -1;
  }
  labelSizeIsValid(labelSize) {
    return Number.isInteger(labelSize) && labelSize >= this.minLabelSize && labelSize <= this.maxLabelSize;
  }
};
LayoutService.ɵfac = function LayoutService_Factory(t161) {
  return new (t161 || LayoutService)();
};
LayoutService.ɵprov = ɵɵdefineInjectable({
  token: LayoutService,
  factory: LayoutService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LayoutService, [{
    type: Injectable
  }], null, null);
})();
var ClrLabel = class {
  constructor(controlIdService, layoutService, ngControlService, renderer, el) {
    this.controlIdService = controlIdService;
    this.layoutService = layoutService;
    this.ngControlService = ngControlService;
    this.renderer = renderer;
    this.el = el;
    this.enableGrid = true;
    this.subscriptions = [];
  }
  get labelText() {
    return this.el.nativeElement && this.el.nativeElement.textContent;
  }
  ngOnInit() {
    if (this.controlIdService || this.ngControlService) {
      this.renderer.addClass(this.el.nativeElement, "clr-control-label");
    }
    if (this.enableGrid && this.layoutService && !this.layoutService.isVertical() && this.el.nativeElement && this.el.nativeElement.className.indexOf("clr-col") < 0) {
      this.renderer.addClass(this.el.nativeElement, "clr-col-12");
      this.renderer.addClass(this.el.nativeElement, `clr-col-md-${this.layoutService.labelSize}`);
    }
    if (this.controlIdService && !this.forAttr) {
      this.subscriptions.push(this.controlIdService.idChange.subscribe((id) => this.forAttr = id));
    }
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  disableGrid() {
    this.enableGrid = false;
  }
};
ClrLabel.ɵfac = function ClrLabel_Factory(t161) {
  return new (t161 || ClrLabel)(ɵɵdirectiveInject(ControlIdService, 8), ɵɵdirectiveInject(LayoutService, 8), ɵɵdirectiveInject(NgControlService, 8), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef));
};
ClrLabel.ɵdir = ɵɵdefineDirective({
  type: ClrLabel,
  selectors: [["label"]],
  hostVars: 1,
  hostBindings: function ClrLabel_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("for", ctx.forAttr);
    }
  },
  inputs: {
    forAttr: [InputFlags.None, "for", "forAttr"]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrLabel, [{
    type: Directive,
    args: [{
      selector: "label"
    }]
  }], function() {
    return [{
      type: ControlIdService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: LayoutService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: NgControlService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: Renderer2
    }, {
      type: ElementRef
    }];
  }, {
    forAttr: [{
      type: Input,
      args: ["for"]
    }, {
      type: HostBinding,
      args: ["attr.for"]
    }]
  });
})();
var ClrControlSuccess = class extends ClrAbstractControl {
  constructor(controlIdService, containerIdService) {
    super(controlIdService, containerIdService);
    this.controlIdService = controlIdService;
    this.containerIdService = containerIdService;
    this.controlIdSuffix = CONTROL_SUFFIX.SUCCESS;
  }
};
ClrControlSuccess.ɵfac = function ClrControlSuccess_Factory(t161) {
  return new (t161 || ClrControlSuccess)(ɵɵdirectiveInject(ControlIdService, 8), ɵɵdirectiveInject(ContainerIdService, 8));
};
ClrControlSuccess.ɵcmp = ɵɵdefineComponent({
  type: ClrControlSuccess,
  selectors: [["clr-control-success"]],
  hostVars: 5,
  hostBindings: function ClrControlSuccess_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("id", ctx.id);
      ɵɵclassProp("clr-subtext", true)("success", true);
    }
  },
  features: [ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrControlSuccess_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrControlSuccess, [{
    type: Component,
    args: [{
      selector: "clr-control-success",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.clr-subtext]": "true",
        "[class.success]": "true",
        "[attr.id]": "id"
      }
    }]
  }], function() {
    return [{
      type: ControlIdService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ContainerIdService,
      decorators: [{
        type: Optional
      }]
    }];
  }, null);
})();
var CLASS_ERROR = "clr-error";
var CLASS_SUCCESS = "clr-success";
var ControlClassService = class {
  constructor(layoutService) {
    this.layoutService = layoutService;
    this.className = "";
  }
  controlClass(state2 = CONTROL_STATE.NONE, grid = false, additional = "") {
    const controlClasses = [this.className, additional];
    switch (state2) {
      case CONTROL_STATE.VALID:
        controlClasses.push(CLASS_SUCCESS);
        break;
      case CONTROL_STATE.INVALID:
        controlClasses.push(CLASS_ERROR);
        break;
    }
    if (grid && this.layoutService && this.className.indexOf("clr-col") === -1) {
      controlClasses.push(`clr-col-md-${this.layoutService.maxLabelSize - this.layoutService.labelSize} clr-col-12`);
    }
    return controlClasses.join(" ").trim();
  }
  // We want to remove the column classes from the input up to the container
  initControlClass(renderer, element) {
    if (element && element.className) {
      this.className = element.className;
      const klasses = element.className.split(" ");
      klasses.forEach((klass) => {
        if (klass.startsWith("clr-col")) {
          renderer.removeClass(element, klass);
        }
      });
    }
  }
};
ControlClassService.ɵfac = function ControlClassService_Factory(t161) {
  return new (t161 || ControlClassService)(ɵɵinject(LayoutService, 8));
};
ControlClassService.ɵprov = ɵɵdefineInjectable({
  token: ControlClassService,
  factory: ControlClassService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ControlClassService, [{
    type: Injectable
  }], function() {
    return [{
      type: LayoutService,
      decorators: [{
        type: Optional
      }]
    }];
  }, null);
})();
var ClrAbstractContainer = class {
  constructor(ifControlStateService, layoutService, controlClassService, ngControlService) {
    this.ifControlStateService = ifControlStateService;
    this.layoutService = layoutService;
    this.controlClassService = controlClassService;
    this.ngControlService = ngControlService;
    this._dynamic = false;
    this.subscriptions = [];
    this.subscriptions.push(this.ifControlStateService.statusChanges.subscribe((state2) => {
      this.state = state2;
      this.updateHelpers();
    }));
    this.subscriptions.push(this.ngControlService.controlChanges.subscribe((control) => {
      this.control = control;
    }));
  }
  /**
   * @NOTE
   * Helper control is a bit different than the others, it must be always visible:
   *   -  Labels and instructions must always accompany forms and are persistent.
   *   -  The recommendation here is to always have helper text or anything instructions visible.
   *   -  The expectation is to have error text + helper text in the errored state. this way all users will have the helper text information always available.
   */
  get showHelper() {
    return Boolean(this.controlHelperComponent);
  }
  get showValid() {
    return this.touched && this.state === CONTROL_STATE.VALID && !!this.controlSuccessComponent;
  }
  get showInvalid() {
    return this.touched && this.state === CONTROL_STATE.INVALID && !!this.controlErrorComponent;
  }
  get touched() {
    return this.control?.touched;
  }
  ngAfterContentInit() {
    this.updateHelpers();
  }
  ngOnDestroy() {
    this.subscriptions.forEach((subscription) => subscription.unsubscribe());
  }
  controlClass() {
    if (!this.controlSuccessComponent && this.state === CONTROL_STATE.VALID || !this.touched) {
      return this.controlClassService.controlClass(CONTROL_STATE.NONE, this.addGrid());
    }
    return this.controlClassService.controlClass(this.state, this.addGrid());
  }
  addGrid() {
    return this.layoutService && !this.layoutService.isVertical();
  }
  updateHelpers() {
    if (this.ngControlService) {
      this.ngControlService.setHelpers({
        show: this.showInvalid || this.showHelper || this.showValid,
        showInvalid: this.showInvalid,
        showHelper: this.showHelper,
        showValid: this.showValid
      });
    }
  }
};
ClrAbstractContainer.ɵfac = function ClrAbstractContainer_Factory(t161) {
  return new (t161 || ClrAbstractContainer)(ɵɵdirectiveInject(IfControlStateService), ɵɵdirectiveInject(LayoutService, 8), ɵɵdirectiveInject(ControlClassService), ɵɵdirectiveInject(NgControlService));
};
ClrAbstractContainer.ɵdir = ɵɵdefineDirective({
  type: ClrAbstractContainer,
  contentQueries: function ClrAbstractContainer_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrLabel, 5);
      ɵɵcontentQuery(dirIndex, ClrControlSuccess, 5);
      ɵɵcontentQuery(dirIndex, ClrControlError, 5);
      ɵɵcontentQuery(dirIndex, ClrControlHelper, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.label = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.controlSuccessComponent = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.controlErrorComponent = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.controlHelperComponent = _t.first);
    }
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrAbstractContainer, [{
    type: Directive
  }], function() {
    return [{
      type: IfControlStateService
    }, {
      type: LayoutService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ControlClassService
    }, {
      type: NgControlService
    }];
  }, {
    label: [{
      type: ContentChild,
      args: [ClrLabel, {
        static: false
      }]
    }],
    controlSuccessComponent: [{
      type: ContentChild,
      args: [ClrControlSuccess]
    }],
    controlErrorComponent: [{
      type: ContentChild,
      args: [ClrControlError]
    }],
    controlHelperComponent: [{
      type: ContentChild,
      args: [ClrControlHelper]
    }]
  });
})();
var ClrControlContainer = class extends ClrAbstractContainer {
};
ClrControlContainer.ɵfac = /* @__PURE__ */ (() => {
  let ɵClrControlContainer_BaseFactory;
  return function ClrControlContainer_Factory(t161) {
    return (ɵClrControlContainer_BaseFactory || (ɵClrControlContainer_BaseFactory = ɵɵgetInheritedFactory(ClrControlContainer)))(t161 || ClrControlContainer);
  };
})();
ClrControlContainer.ɵcmp = ɵɵdefineComponent({
  type: ClrControlContainer,
  selectors: [["clr-control-container"]],
  hostVars: 6,
  hostBindings: function ClrControlContainer_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-form-control", true)("clr-form-control-disabled", ctx.control == null ? null : ctx.control.disabled)("clr-row", ctx.addGrid());
    }
  },
  features: [ɵɵProvidersFeature([IfControlStateService, NgControlService, ControlIdService, ControlClassService]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c10,
  decls: 10,
  vars: 7,
  consts: [[4, "ngIf"], [1, "clr-control-container", 3, "ngClass"], [1, "clr-input-wrapper"], ["class", "clr-validate-icon", "shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 4, "ngIf"], ["class", "clr-validate-icon", "shape", "check-circle", "status", "success", "aria-hidden", "true", 4, "ngIf"], ["shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 1, "clr-validate-icon"], ["shape", "check-circle", "status", "success", "aria-hidden", "true", 1, "clr-validate-icon"]],
  template: function ClrControlContainer_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c9);
      ɵɵprojection(0);
      ɵɵtemplate(1, ClrControlContainer_label_1_Template, 1, 0, "label", 0);
      ɵɵelementStart(2, "div", 1)(3, "div", 2);
      ɵɵprojection(4, 1);
      ɵɵtemplate(5, ClrControlContainer_cds_icon_5_Template, 1, 0, "cds-icon", 3)(6, ClrControlContainer_cds_icon_6_Template, 1, 0, "cds-icon", 4);
      ɵɵelementEnd();
      ɵɵtemplate(7, ClrControlContainer_ng_content_7_Template, 1, 0, "ng-content", 0)(8, ClrControlContainer_ng_content_8_Template, 1, 0, "ng-content", 0)(9, ClrControlContainer_ng_content_9_Template, 1, 0, "ng-content", 0);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.label && ctx.addGrid());
      ɵɵadvance();
      ɵɵproperty("ngClass", ctx.controlClass());
      ɵɵadvance(3);
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showHelper);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
    }
  },
  dependencies: [NgClass, NgIf, CdsIconCustomTag, ClrLabel],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrControlContainer, [{
    type: Component,
    args: [{
      selector: "clr-control-container",
      template: `
    <ng-content select="label"></ng-content>
    <label *ngIf="!label && addGrid()"></label>
    <div class="clr-control-container" [ngClass]="controlClass()">
      <div class="clr-input-wrapper">
        <ng-content></ng-content>
        <cds-icon
          *ngIf="showInvalid"
          class="clr-validate-icon"
          shape="exclamation-circle"
          status="danger"
          aria-hidden="true"
        ></cds-icon>
        <cds-icon
          *ngIf="showValid"
          class="clr-validate-icon"
          shape="check-circle"
          status="success"
          aria-hidden="true"
        ></cds-icon>
      </div>
      <ng-content select="clr-control-helper" *ngIf="showHelper"></ng-content>
      <ng-content select="clr-control-error" *ngIf="showInvalid"></ng-content>
      <ng-content select="clr-control-success" *ngIf="showValid"></ng-content>
    </div>
  `,
      host: {
        "[class.clr-form-control]": "true",
        "[class.clr-form-control-disabled]": "control?.disabled",
        "[class.clr-row]": "addGrid()"
      },
      providers: [IfControlStateService, NgControlService, ControlIdService, ControlClassService]
    }]
  }], null, null);
})();
var HostWrapper = class {
  constructor(containerType, vcr, index = 0) {
    this.injector = vcr.injector;
    if (!this.injector.get(containerType, null)) {
      const cfr = this.injector.get(ComponentFactoryResolver$1);
      const el = this.injector.get(ElementRef);
      vcr.createComponent(cfr.resolveComponentFactory(EmptyAnchor));
      const factory = cfr.resolveComponentFactory(containerType);
      const element = [];
      element[index] = [el.nativeElement];
      const containerRef = vcr.createComponent(factory, void 0, void 0, element);
      vcr.remove(0);
      containerRef.instance._dynamic = true;
      this.injector = containerRef.injector;
    }
  }
  get(token, notFoundValue) {
    return this.injector.get(token, notFoundValue);
  }
};
var MarkControlService = class {
  constructor() {
    this._touched = new Subject();
  }
  get touchedChange() {
    return this._touched.asObservable();
  }
  markAsTouched() {
    this._touched.next();
  }
};
MarkControlService.ɵfac = function MarkControlService_Factory(t161) {
  return new (t161 || MarkControlService)();
};
MarkControlService.ɵprov = ɵɵdefineInjectable({
  token: MarkControlService,
  factory: MarkControlService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MarkControlService, [{
    type: Injectable
  }], null, null);
})();
var CHANGE_KEYS;
(function(CHANGE_KEYS2) {
  CHANGE_KEYS2["FORM"] = "form";
  CHANGE_KEYS2["MODEL"] = "model";
})(CHANGE_KEYS || (CHANGE_KEYS = {}));
var WrappedFormControl = class {
  // I lost way too much time trying to make this work without injecting the ViewContainerRef and the Injector,
  // I'm giving up. So we have to inject these two manually for now.
  constructor(vcr, wrapperType, injector, ngControl, renderer, el) {
    this.vcr = vcr;
    this.wrapperType = wrapperType;
    this.ngControl = ngControl;
    this.index = 0;
    this.subscriptions = [];
    this.renderer = renderer;
    this.el = el;
    if (injector) {
      this.ngControlService = injector.get(NgControlService, null);
      this.ifControlStateService = injector.get(IfControlStateService, null);
      this.controlClassService = injector.get(ControlClassService, null);
      this.markControlService = injector.get(MarkControlService, null);
      this.differs = injector.get(KeyValueDiffers, null);
    }
    if (this.controlClassService) {
      this.controlClassService.initControlClass(renderer, el.nativeElement);
    }
    if (this.markControlService) {
      this.subscriptions.push(this.markControlService.touchedChange.subscribe(() => {
        this.markAsTouched();
      }));
    }
    if (this.ngControlService) {
      this.subscriptions.push(this.ngControlService.helpersChange.subscribe((state2) => {
        this.setAriaDescribedBy(state2);
      }));
    }
    if (ngControl) {
      this.differ = this.differs.find(ngControl).create();
    }
  }
  get id() {
    return this._id;
  }
  set id(value) {
    this._id = value;
    if (this.controlIdService) {
      this.controlIdService.id = value;
    }
  }
  ngOnInit() {
    this._containerInjector = new HostWrapper(this.wrapperType, this.vcr, this.index);
    this.controlIdService = this._containerInjector.get(ControlIdService);
    this.containerIdService = this._containerInjector.get(ContainerIdService, null);
    if (this._id) {
      this.controlIdService.id = this._id;
    } else {
      this._id = this.controlIdService.id;
    }
    if (this.ngControlService && this.ngControl) {
      this.ngControlService.setControl(this.ngControl);
    }
  }
  ngDoCheck() {
    if (this.differ) {
      const changes = this.differ.diff(this.ngControl);
      if (changes) {
        changes.forEachChangedItem((change) => {
          if ((change.key === CHANGE_KEYS.FORM || change.key === CHANGE_KEYS.MODEL) && change.currentValue !== change.previousValue) {
            this.triggerValidation();
          }
        });
      }
    }
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  triggerValidation() {
    if (this.ifControlStateService) {
      this.ifControlStateService.triggerStatusChange();
    }
  }
  // @TODO This method has a try/catch due to an unknown issue that came when building the clrToggle feature
  // We need to figure out why this fails for the ClrToggle scenario but works for Date picker...
  // To see the error, remove the try/catch here and run the ClrToggle suite to see issues getting the container
  // injector in time, and this ONLY HAPPENS in tests and not in dev/prod mode.
  getProviderFromContainer(token, notFoundValue) {
    try {
      return this._containerInjector.get(token, notFoundValue);
    } catch (e83) {
      return notFoundValue;
    }
  }
  markAsTouched() {
    if (this.ngControl) {
      this.ngControl.control.markAsTouched();
      this.ngControl.control.updateValueAndValidity();
    }
  }
  setAriaDescribedBy(helpers) {
    if (helpers.show) {
      const ariaDescribedBy = this.getAriaDescribedById(helpers);
      if (ariaDescribedBy !== null) {
        this.renderer.setAttribute(this.el.nativeElement, "aria-describedby", ariaDescribedBy);
        return;
      }
    }
    this.renderer.removeAttribute(this.el.nativeElement, "aria-describedby");
  }
  getAriaDescribedById(helpers) {
    const elementId = this.containerIdService?.id || this.controlIdService?.id;
    if (!elementId) {
      return null;
    }
    const describedByIds = [`${elementId}-${CONTROL_SUFFIX.HELPER}`];
    if (helpers.showInvalid) {
      describedByIds.push(`${elementId}-${CONTROL_SUFFIX.ERROR}`);
    } else if (helpers.showValid) {
      describedByIds.push(`${elementId}-${CONTROL_SUFFIX.SUCCESS}`);
    }
    return describedByIds.join(" ");
  }
};
WrappedFormControl.ɵfac = function WrappedFormControl_Factory(t161) {
  return new (t161 || WrappedFormControl)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Type), ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(NgControl), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef));
};
WrappedFormControl.ɵdir = ɵɵdefineDirective({
  type: WrappedFormControl,
  hostVars: 1,
  hostBindings: function WrappedFormControl_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("blur", function WrappedFormControl_blur_HostBindingHandler() {
        return ctx.triggerValidation();
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("id", ctx.id);
    }
  },
  inputs: {
    id: "id"
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(WrappedFormControl, [{
    type: Directive
  }], function() {
    return [{
      type: ViewContainerRef
    }, {
      type: Type
    }, {
      type: Injector
    }, {
      type: NgControl
    }, {
      type: Renderer2
    }, {
      type: ElementRef
    }];
  }, {
    id: [{
      type: Input
    }, {
      type: HostBinding
    }],
    triggerValidation: [{
      type: HostListener,
      args: ["blur"]
    }]
  });
})();
var ClrControl = class extends WrappedFormControl {
  constructor(vcr, injector, control, renderer, el) {
    super(vcr, ClrControlContainer, injector, control, renderer, el);
    this.index = 1;
  }
};
ClrControl.ɵfac = function ClrControl_Factory(t161) {
  return new (t161 || ClrControl)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef));
};
ClrControl.ɵdir = ɵɵdefineDirective({
  type: ClrControl,
  selectors: [["", "clrControl", ""]],
  hostVars: 2,
  hostBindings: function ClrControl_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-input", true);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrControl, [{
    type: Directive,
    args: [{
      selector: "[clrControl]",
      host: {
        "[class.clr-input]": "true"
      }
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }, {
      type: Injector
    }, {
      type: NgControl,
      decorators: [{
        type: Self
      }, {
        type: Optional
      }]
    }, {
      type: Renderer2
    }, {
      type: ElementRef
    }];
  }, null);
})();
var ClrForm = class {
  constructor(layoutService, markControlService) {
    this.layoutService = layoutService;
    this.markControlService = markControlService;
  }
  set labelSize(size) {
    const sizeNumber = parseInt(size, 10) || 2;
    this.layoutService.labelSize = sizeNumber;
  }
  onFormSubmit() {
    this.markAsTouched();
  }
  // Trying to avoid adding an input and keep this backwards compatible at the same time
  markAsTouched() {
    this.markControlService.markAsTouched();
  }
};
ClrForm.ɵfac = function ClrForm_Factory(t161) {
  return new (t161 || ClrForm)(ɵɵdirectiveInject(LayoutService), ɵɵdirectiveInject(MarkControlService));
};
ClrForm.ɵdir = ɵɵdefineDirective({
  type: ClrForm,
  selectors: [["", "clrForm", ""]],
  contentQueries: function ClrForm_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrLabel, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.labels = _t);
    }
  },
  hostVars: 6,
  hostBindings: function ClrForm_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("submit", function ClrForm_submit_HostBindingHandler() {
        return ctx.onFormSubmit();
      });
    }
    if (rf & 2) {
      ɵɵclassProp("clr-form", true)("clr-form-horizontal", ctx.layoutService.isHorizontal())("clr-form-compact", ctx.layoutService.isCompact());
    }
  },
  inputs: {
    labelSize: [InputFlags.None, "clrLabelSize", "labelSize"]
  },
  features: [ɵɵProvidersFeature([LayoutService, MarkControlService])]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrForm, [{
    type: Directive,
    args: [{
      selector: "[clrForm]",
      providers: [LayoutService, MarkControlService],
      host: {
        "[class.clr-form]": "true",
        "[class.clr-form-horizontal]": "layoutService.isHorizontal()",
        "[class.clr-form-compact]": "layoutService.isCompact()"
      }
    }]
  }], function() {
    return [{
      type: LayoutService
    }, {
      type: MarkControlService
    }];
  }, {
    labels: [{
      type: ContentChildren,
      args: [ClrLabel, {
        descendants: true
      }]
    }],
    labelSize: [{
      type: Input,
      args: ["clrLabelSize"]
    }],
    onFormSubmit: [{
      type: HostListener,
      args: ["submit"]
    }]
  });
})();
var AbstractIfState = class {
  constructor(ifControlStateService, ngControlService) {
    this.ifControlStateService = ifControlStateService;
    this.ngControlService = ngControlService;
    this.subscriptions = [];
    this.displayedContent = false;
    if (ngControlService) {
      this.subscriptions.push(this.ngControlService.controlChanges.subscribe((control) => {
        this.control = control;
      }));
    }
    if (ifControlStateService) {
      this.subscriptions.push(this.ifControlStateService.statusChanges.subscribe((state2) => {
        this.handleState(state2);
      }));
    }
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  handleState(_state) {
  }
};
AbstractIfState.ɵfac = function AbstractIfState_Factory(t161) {
  return new (t161 || AbstractIfState)(ɵɵdirectiveInject(IfControlStateService, 8), ɵɵdirectiveInject(NgControlService, 8));
};
AbstractIfState.ɵdir = ɵɵdefineDirective({
  type: AbstractIfState
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AbstractIfState, [{
    type: Directive
  }], function() {
    return [{
      type: IfControlStateService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: NgControlService,
      decorators: [{
        type: Optional
      }]
    }];
  }, null);
})();
var ClrIfError = class extends AbstractIfState {
  constructor(ifControlStateService, ngControlService, template, container) {
    super(ifControlStateService, ngControlService);
    this.template = template;
    this.container = container;
    if (!this.ifControlStateService) {
      throw new Error("clrIfError can only be used within a form control container element like clr-input-container");
    }
  }
  /**
   * @param state CONTROL_STATE
   */
  handleState(state2) {
    if (this.error && this.control) {
      this.displayError(this.control.hasError(this.error));
    } else {
      this.displayError(CONTROL_STATE.INVALID === state2);
    }
  }
  displayError(invalid) {
    if (!this.container) {
      return;
    }
    if (invalid) {
      if (this.displayedContent === false) {
        this.embeddedViewRef = this.container.createEmbeddedView(this.template, {
          error: this.control.getError(this.error)
        });
        this.displayedContent = true;
      } else if (this.embeddedViewRef && this.embeddedViewRef.context) {
        this.embeddedViewRef.context.error = this.control.getError(this.error);
      }
    } else {
      this.container.clear();
      this.displayedContent = false;
    }
  }
};
ClrIfError.ɵfac = function ClrIfError_Factory(t161) {
  return new (t161 || ClrIfError)(ɵɵdirectiveInject(IfControlStateService, 8), ɵɵdirectiveInject(NgControlService, 8), ɵɵdirectiveInject(TemplateRef), ɵɵdirectiveInject(ViewContainerRef));
};
ClrIfError.ɵdir = ɵɵdefineDirective({
  type: ClrIfError,
  selectors: [["", "clrIfError", ""]],
  inputs: {
    error: [InputFlags.None, "clrIfError", "error"]
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrIfError, [{
    type: Directive,
    args: [{
      selector: "[clrIfError]"
    }]
  }], function() {
    return [{
      type: IfControlStateService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: NgControlService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: TemplateRef
    }, {
      type: ViewContainerRef
    }];
  }, {
    error: [{
      type: Input,
      args: ["clrIfError"]
    }]
  });
})();
var ClrIfSuccess = class extends AbstractIfState {
  constructor(ifControlStateService, ngControlService, template, container) {
    super(ifControlStateService, ngControlService);
    this.template = template;
    this.container = container;
    if (!ifControlStateService) {
      throw new Error("ClrIfSuccess can only be used within a form control container element like clr-input-container");
    }
  }
  /**
   * @param state CONTROL_STATE
   */
  handleState(state2) {
    const isValid = CONTROL_STATE.VALID === state2;
    if (isValid && !this.displayedContent) {
      this.container.createEmbeddedView(this.template);
    } else if (!isValid && this.container) {
      this.container.clear();
    }
    this.displayedContent = isValid;
  }
};
ClrIfSuccess.ɵfac = function ClrIfSuccess_Factory(t161) {
  return new (t161 || ClrIfSuccess)(ɵɵdirectiveInject(IfControlStateService, 8), ɵɵdirectiveInject(NgControlService, 8), ɵɵdirectiveInject(TemplateRef), ɵɵdirectiveInject(ViewContainerRef));
};
ClrIfSuccess.ɵdir = ɵɵdefineDirective({
  type: ClrIfSuccess,
  selectors: [["", "clrIfSuccess", ""]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrIfSuccess, [{
    type: Directive,
    args: [{
      selector: "[clrIfSuccess]"
    }]
  }], function() {
    return [{
      type: IfControlStateService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: NgControlService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: TemplateRef
    }, {
      type: ViewContainerRef
    }];
  }, null);
})();
var ClrLayout = class {
  constructor(layoutService) {
    this.layoutService = layoutService;
  }
  ngOnInit() {
    if (this.layout && this.layoutService.isValid(this.layout)) {
      this.layoutService.layout = this.layout;
    }
  }
};
ClrLayout.ɵfac = function ClrLayout_Factory(t161) {
  return new (t161 || ClrLayout)(ɵɵdirectiveInject(LayoutService));
};
ClrLayout.ɵdir = ɵɵdefineDirective({
  type: ClrLayout,
  selectors: [["", "clrForm", "", "clrLayout", ""]],
  inputs: {
    layout: [InputFlags.None, "clrLayout", "layout"]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrLayout, [{
    type: Directive,
    args: [{
      selector: "[clrForm][clrLayout]"
    }]
  }], function() {
    return [{
      type: LayoutService
    }];
  }, {
    layout: [{
      type: Input,
      args: ["clrLayout"]
    }]
  });
})();
var ClrCommonFormsModule = class {
  constructor() {
    r24.addIcons(e30, l7);
  }
};
ClrCommonFormsModule.ɵfac = function ClrCommonFormsModule_Factory(t161) {
  return new (t161 || ClrCommonFormsModule)();
};
ClrCommonFormsModule.ɵmod = ɵɵdefineNgModule({
  type: ClrCommonFormsModule,
  declarations: [ClrLabel, ClrControlError, ClrControlSuccess, ClrControlHelper, ClrIfError, ClrIfSuccess, ClrForm, ClrLayout, ClrControlContainer, ClrControl],
  imports: [CommonModule, ClrIconModule],
  exports: [ClrLabel, ClrControlError, ClrControlSuccess, ClrControlHelper, ClrIfError, ClrIfSuccess, ClrForm, ClrLayout, ClrControlContainer, ClrControl]
});
ClrCommonFormsModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrIconModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrCommonFormsModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrIconModule],
      declarations: [ClrLabel, ClrControlError, ClrControlSuccess, ClrControlHelper, ClrIfError, ClrIfSuccess, ClrForm, ClrLayout, ClrControlContainer, ClrControl],
      exports: [ClrLabel, ClrControlError, ClrControlSuccess, ClrControlHelper, ClrIfError, ClrIfSuccess, ClrForm, ClrLayout, ClrControlContainer, ClrControl]
    }]
  }], function() {
    return [];
  }, null);
})();
var IS_TOGGLE = new InjectionToken("IS_TOGGLE");
function isToggleFactory() {
  return new BehaviorSubject(false);
}
var IS_TOGGLE_PROVIDER = {
  provide: IS_TOGGLE,
  useFactory: isToggleFactory
};
var ClrCheckboxWrapper = class {
  constructor(toggleService) {
    this._dynamic = false;
    this.toggle = false;
    this.subscriptions = [];
    this.subscriptions.push(toggleService.subscribe((state2) => {
      this.toggle = state2;
    }));
  }
  ngOnInit() {
    if (this.label) {
      this.label.disableGrid();
    }
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
};
ClrCheckboxWrapper.ɵfac = function ClrCheckboxWrapper_Factory(t161) {
  return new (t161 || ClrCheckboxWrapper)(ɵɵdirectiveInject(IS_TOGGLE));
};
ClrCheckboxWrapper.ɵcmp = ɵɵdefineComponent({
  type: ClrCheckboxWrapper,
  selectors: [["clr-checkbox-wrapper"], ["clr-toggle-wrapper"]],
  contentQueries: function ClrCheckboxWrapper_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrLabel, 7);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.label = _t.first);
    }
  },
  hostVars: 4,
  hostBindings: function ClrCheckboxWrapper_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-checkbox-wrapper", !ctx.toggle)("clr-toggle-wrapper", ctx.toggle);
    }
  },
  features: [ɵɵProvidersFeature([ControlIdService, IS_TOGGLE_PROVIDER])],
  ngContentSelectors: _c122,
  decls: 3,
  vars: 1,
  consts: [[4, "ngIf"]],
  template: function ClrCheckboxWrapper_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c11);
      ɵɵprojection(0);
      ɵɵprojection(1, 1);
      ɵɵtemplate(2, ClrCheckboxWrapper_label_2_Template, 1, 0, "label", 0);
    }
    if (rf & 2) {
      ɵɵadvance(2);
      ɵɵproperty("ngIf", !ctx.label);
    }
  },
  dependencies: [NgIf, ClrLabel],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrCheckboxWrapper, [{
    type: Component,
    args: [{
      selector: "clr-checkbox-wrapper,clr-toggle-wrapper",
      template: `
    <ng-content select="[clrCheckbox],[clrToggle]"></ng-content>
    <ng-content select="label"></ng-content>
    <label *ngIf="!label"></label>
  `,
      host: {
        "[class.clr-checkbox-wrapper]": "!toggle",
        "[class.clr-toggle-wrapper]": "toggle"
      },
      providers: [ControlIdService, IS_TOGGLE_PROVIDER]
    }]
  }], function() {
    return [{
      type: BehaviorSubject,
      decorators: [{
        type: Inject,
        args: [IS_TOGGLE]
      }]
    }];
  }, {
    label: [{
      type: ContentChild,
      args: [ClrLabel, {
        static: true
      }]
    }]
  });
})();
var ClrCheckbox = class extends WrappedFormControl {
  constructor(vcr, injector, control, renderer, el, toggle) {
    super(vcr, ClrCheckboxWrapper, injector, control, renderer, el);
    this.toggle = toggle;
  }
  ngOnInit() {
    super.ngOnInit();
    const toggleService = this.getProviderFromContainer(IS_TOGGLE, null);
    if (toggleService && this.toggle !== null) {
      toggleService.next(true);
    }
  }
};
ClrCheckbox.ɵfac = function ClrCheckbox_Factory(t161) {
  return new (t161 || ClrCheckbox)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef), ɵɵinjectAttribute("clrToggle"));
};
ClrCheckbox.ɵdir = ɵɵdefineDirective({
  type: ClrCheckbox,
  selectors: [["", "clrCheckbox", ""], ["", "clrToggle", ""]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrCheckbox, [{
    type: Directive,
    args: [{
      selector: "[clrCheckbox],[clrToggle]"
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }, {
      type: Injector
    }, {
      type: NgControl,
      decorators: [{
        type: Self
      }, {
        type: Optional
      }]
    }, {
      type: Renderer2
    }, {
      type: ElementRef
    }, {
      type: void 0,
      decorators: [{
        type: Attribute,
        args: ["clrToggle"]
      }]
    }];
  }, null);
})();
var ClrCheckboxContainer = class extends ClrAbstractContainer {
  constructor(layoutService, controlClassService, ngControlService, ifControlStateService) {
    super(ifControlStateService, layoutService, controlClassService, ngControlService);
    this.layoutService = layoutService;
    this.controlClassService = controlClassService;
    this.ngControlService = ngControlService;
    this.ifControlStateService = ifControlStateService;
    this.inline = false;
  }
  /*
   * Here we want to support the following cases
   * clrInline - true by presence
   * clrInline="true|false" - unless it is explicitly false, strings are considered true
   * [clrInline]="true|false" - expect a boolean
   */
  get clrInline() {
    return this.inline;
  }
  set clrInline(value) {
    if (typeof value === "string") {
      this.inline = value === "false" ? false : true;
    } else {
      this.inline = !!value;
    }
  }
  ngAfterContentInit() {
    this.setAriaRoles();
  }
  setAriaRoles() {
    this.role = this.checkboxes.length ? "group" : null;
  }
};
ClrCheckboxContainer.ɵfac = function ClrCheckboxContainer_Factory(t161) {
  return new (t161 || ClrCheckboxContainer)(ɵɵdirectiveInject(LayoutService, 8), ɵɵdirectiveInject(ControlClassService), ɵɵdirectiveInject(NgControlService), ɵɵdirectiveInject(IfControlStateService));
};
ClrCheckboxContainer.ɵcmp = ɵɵdefineComponent({
  type: ClrCheckboxContainer,
  selectors: [["clr-checkbox-container"], ["clr-toggle-container"]],
  contentQueries: function ClrCheckboxContainer_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrCheckbox, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.checkboxes = _t);
    }
  },
  hostVars: 7,
  hostBindings: function ClrCheckboxContainer_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("role", ctx.role);
      ɵɵclassProp("clr-form-control", true)("clr-form-control-disabled", ctx.control == null ? null : ctx.control.disabled)("clr-row", ctx.addGrid());
    }
  },
  inputs: {
    clrInline: "clrInline"
  },
  features: [ɵɵProvidersFeature([IfControlStateService, NgControlService, ControlClassService, ContainerIdService]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c14,
  decls: 10,
  vars: 9,
  consts: [[4, "ngIf"], [1, "clr-control-container", 3, "ngClass"], [1, "clr-subtext-wrapper"], ["class", "clr-validate-icon", "shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 4, "ngIf"], ["class", "clr-validate-icon", "shape", "check-circle", "status", "success", "aria-hidden", "true", 4, "ngIf"], ["shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 1, "clr-validate-icon"], ["shape", "check-circle", "status", "success", "aria-hidden", "true", 1, "clr-validate-icon"]],
  template: function ClrCheckboxContainer_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c13);
      ɵɵprojection(0);
      ɵɵtemplate(1, ClrCheckboxContainer_label_1_Template, 1, 0, "label", 0);
      ɵɵelementStart(2, "div", 1);
      ɵɵprojection(3, 1);
      ɵɵelementStart(4, "div", 2);
      ɵɵtemplate(5, ClrCheckboxContainer_ng_content_5_Template, 1, 0, "ng-content", 0)(6, ClrCheckboxContainer_cds_icon_6_Template, 1, 0, "cds-icon", 3)(7, ClrCheckboxContainer_cds_icon_7_Template, 1, 0, "cds-icon", 4)(8, ClrCheckboxContainer_ng_content_8_Template, 1, 0, "ng-content", 0)(9, ClrCheckboxContainer_ng_content_9_Template, 1, 0, "ng-content", 0);
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.label && ctx.addGrid());
      ɵɵadvance();
      ɵɵclassProp("clr-control-inline", ctx.clrInline);
      ɵɵproperty("ngClass", ctx.controlClass());
      ɵɵadvance(3);
      ɵɵproperty("ngIf", ctx.showHelper);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
    }
  },
  dependencies: [NgClass, NgIf, CdsIconCustomTag, ClrLabel],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrCheckboxContainer, [{
    type: Component,
    args: [{
      selector: "clr-checkbox-container,clr-toggle-container",
      template: `
    <ng-content select="label"></ng-content>
    <label *ngIf="!label && addGrid()"></label>
    <div class="clr-control-container" [class.clr-control-inline]="clrInline" [ngClass]="controlClass()">
      <ng-content select="clr-checkbox-wrapper,clr-toggle-wrapper"></ng-content>
      <div class="clr-subtext-wrapper">
        <ng-content select="clr-control-helper" *ngIf="showHelper"></ng-content>
        <cds-icon
          *ngIf="showInvalid"
          class="clr-validate-icon"
          shape="exclamation-circle"
          status="danger"
          aria-hidden="true"
        ></cds-icon>
        <cds-icon
          *ngIf="showValid"
          class="clr-validate-icon"
          shape="check-circle"
          status="success"
          aria-hidden="true"
        ></cds-icon>
        <ng-content select="clr-control-error" *ngIf="showInvalid"></ng-content>
        <ng-content select="clr-control-success" *ngIf="showValid"></ng-content>
      </div>
    </div>
  `,
      host: {
        "[class.clr-form-control]": "true",
        "[class.clr-form-control-disabled]": "control?.disabled",
        "[class.clr-row]": "addGrid()",
        "[attr.role]": "role"
      },
      providers: [IfControlStateService, NgControlService, ControlClassService, ContainerIdService]
    }]
  }], function() {
    return [{
      type: LayoutService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ControlClassService
    }, {
      type: NgControlService
    }, {
      type: IfControlStateService
    }];
  }, {
    checkboxes: [{
      type: ContentChildren,
      args: [ClrCheckbox, {
        descendants: true
      }]
    }],
    clrInline: [{
      type: Input
    }]
  });
})();
var ClrCheckboxModule = class {
  constructor() {
    r24.addIcons(e30, l7);
  }
};
ClrCheckboxModule.ɵfac = function ClrCheckboxModule_Factory(t161) {
  return new (t161 || ClrCheckboxModule)();
};
ClrCheckboxModule.ɵmod = ɵɵdefineNgModule({
  type: ClrCheckboxModule,
  declarations: [ClrCheckbox, ClrCheckboxContainer, ClrCheckboxWrapper],
  imports: [CommonModule, ClrIconModule, ClrCommonFormsModule, ClrHostWrappingModule],
  exports: [ClrCommonFormsModule, ClrCheckbox, ClrCheckboxContainer, ClrCheckboxWrapper]
});
ClrCheckboxModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrIconModule, ClrCommonFormsModule, ClrHostWrappingModule, ClrCommonFormsModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrCheckboxModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrIconModule, ClrCommonFormsModule, ClrHostWrappingModule],
      declarations: [ClrCheckbox, ClrCheckboxContainer, ClrCheckboxWrapper],
      exports: [ClrCommonFormsModule, ClrCheckbox, ClrCheckboxContainer, ClrCheckboxWrapper]
    }]
  }], function() {
    return [];
  }, null);
})();
function isBooleanAttributeSet(value) {
  if (value === null) {
    return false;
  }
  if (typeof value === "string") {
    return value.length >= 0;
  }
  return typeof value === "boolean" ? value : false;
}
var ClrSpinner = class {
  /**
   * Default class for all spinners. This class is always true
   */
  get spinnerClass() {
    return true;
  }
  get inlineClass() {
    return this._inline;
  }
  set clrInline(value) {
    this._inline = isBooleanAttributeSet(value);
  }
  get inverseClass() {
    return this._inverse;
  }
  set clrInverse(value) {
    this._inverse = isBooleanAttributeSet(value);
  }
  get smallClass() {
    return this._small;
  }
  set clrSmall(value) {
    this._small = isBooleanAttributeSet(value);
  }
  /**
   * When clrSmall & clrMedium are set both to true.
   * The CSS with high priority will be small - so medium size will be ignored.
   *
   * For this reason if clrSmall is set we won't add clrMedium class.
   *
   * NOTE: This is dictated by the CSS rules.
   * DON'T USE clrSmall & clrMedium to toggle classes. This could change without notice.
   *
   * Also there is no logical need to have both of them set to TRUE or FALSE.
   */
  get mediumClass() {
    if (this._small) {
      return false;
    }
    return this._medium;
  }
  set clrMedium(value) {
    this._medium = isBooleanAttributeSet(value);
  }
};
ClrSpinner.ɵfac = function ClrSpinner_Factory(t161) {
  return new (t161 || ClrSpinner)();
};
ClrSpinner.ɵcmp = ɵɵdefineComponent({
  type: ClrSpinner,
  selectors: [["clr-spinner"]],
  hostVars: 11,
  hostBindings: function ClrSpinner_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("aria-busy", true);
      ɵɵclassProp("spinner", ctx.spinnerClass)("spinner-inline", ctx.inlineClass)("spinner-inverse", ctx.inverseClass)("spinner-sm", ctx.smallClass)("spinner-md", ctx.mediumClass);
    }
  },
  inputs: {
    clrInline: "clrInline",
    clrInverse: "clrInverse",
    clrSmall: "clrSmall",
    clrMedium: "clrMedium"
  },
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrSpinner_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrSpinner, [{
    type: Component,
    args: [{
      selector: "clr-spinner",
      template: `<ng-content></ng-content>`,
      host: {
        "[attr.aria-busy]": "true"
      }
    }]
  }], null, {
    spinnerClass: [{
      type: HostBinding,
      args: ["class.spinner"]
    }],
    inlineClass: [{
      type: HostBinding,
      args: ["class.spinner-inline"]
    }],
    clrInline: [{
      type: Input,
      args: ["clrInline"]
    }],
    inverseClass: [{
      type: HostBinding,
      args: ["class.spinner-inverse"]
    }],
    clrInverse: [{
      type: Input,
      args: ["clrInverse"]
    }],
    smallClass: [{
      type: HostBinding,
      args: ["class.spinner-sm"]
    }],
    clrSmall: [{
      type: Input,
      args: ["clrSmall"]
    }],
    mediumClass: [{
      type: HostBinding,
      args: ["class.spinner-md"]
    }],
    clrMedium: [{
      type: Input,
      args: ["clrMedium"]
    }]
  });
})();
var CLR_SPINNER_DIRECTIVES = [ClrSpinner];
var ClrSpinnerModule = class {
};
ClrSpinnerModule.ɵfac = function ClrSpinnerModule_Factory(t161) {
  return new (t161 || ClrSpinnerModule)();
};
ClrSpinnerModule.ɵmod = ɵɵdefineNgModule({
  type: ClrSpinnerModule,
  declarations: [ClrSpinner],
  imports: [CommonModule],
  exports: [ClrSpinner]
});
ClrSpinnerModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrSpinnerModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [CLR_SPINNER_DIRECTIVES],
      exports: [CLR_SPINNER_DIRECTIVES]
    }]
  }], null, null);
})();
var ClrFocusDirection;
(function(ClrFocusDirection2) {
  ClrFocusDirection2["VERTICAL"] = "vertical";
  ClrFocusDirection2["HORIZONTAL"] = "horizontal";
  ClrFocusDirection2["BOTH"] = "both";
})(ClrFocusDirection || (ClrFocusDirection = {}));
var ClrKeyFocusItem = class {
  constructor(elementRef, platformId) {
    this.elementRef = elementRef;
    this.platformId = platformId;
  }
  get nativeElement() {
    return this.elementRef.nativeElement;
  }
  focus() {
    if (isPlatformBrowser(this.platformId)) {
      this.elementRef.nativeElement.focus();
    }
  }
};
ClrKeyFocusItem.ɵfac = function ClrKeyFocusItem_Factory(t161) {
  return new (t161 || ClrKeyFocusItem)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(PLATFORM_ID));
};
ClrKeyFocusItem.ɵdir = ɵɵdefineDirective({
  type: ClrKeyFocusItem,
  selectors: [["", "clrKeyFocusItem", ""]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrKeyFocusItem, [{
    type: Directive,
    args: [{
      selector: "[clrKeyFocusItem]"
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }];
  }, null);
})();
var ClrKeyFocus = class {
  constructor(elementRef) {
    this.elementRef = elementRef;
    this.direction = ClrFocusDirection.VERTICAL;
    this.focusOnLoad = false;
    this.subscriptions = [];
    this.focusChange = new EventEmitter();
    this._current = 0;
  }
  /**
   * Here we use `any` cause any other type require reworking all methods below and a lot of more ifs.
   * this method will only work with array with FocusableItems anyway so any other value will be ignored.
   */
  get focusableItems() {
    if (this._focusableItems) {
      return this._focusableItems;
    } else if (this.clrKeyFocusItems) {
      return this.clrKeyFocusItems.toArray();
    }
    return [];
  }
  set focusableItems(elements) {
    if (Array.isArray(elements) && elements.length) {
      this._focusableItems = elements;
      this.initializeFocus();
    }
  }
  get nativeElement() {
    return this.elementRef.nativeElement;
  }
  get current() {
    return this._current;
  }
  set current(value) {
    if (this._current !== value) {
      this._current = value;
    }
  }
  get currentItem() {
    return this.focusableItems[this._current];
  }
  get currentItemElement() {
    return this.currentItem.nativeElement ? this.currentItem.nativeElement : this.currentItem;
  }
  ngAfterContentInit() {
    this.subscriptions.push(this.listenForItemUpdates());
    this.initializeFocus();
  }
  ngOnDestroy() {
    this.subscriptions.forEach((s27) => s27.unsubscribe());
  }
  handleKeyboardEvent(event) {
    if (this.currentItemElement !== event.target) {
      const position = this.getItemPosition(event.target);
      if (this.positionInRange(position)) {
        this.current = position;
      }
    }
    if (this.prevKeyPressed(event) && this.currentFocusIsNotFirstItem()) {
      this.moveTo(this.current - 1);
    } else if (this.nextKeyPressed(event) && this.currentFocusIsNotLastItem()) {
      this.moveTo(this.current + 1);
    } else if (event.code === Keys.Home) {
      this.moveTo(0);
    } else if (event.code === Keys.End) {
      this.moveTo(this.focusableItems.length - 1);
    }
    preventArrowKeyScroll(event);
  }
  setClickedItemCurrent(event) {
    const position = this.getItemPosition(event.target);
    if (position > -1) {
      this.moveTo(position);
    }
  }
  focusCurrent() {
    this.currentItem.focus();
    this.focusChange.next(this._current);
  }
  moveTo(position) {
    if (this.positionInRange(position)) {
      this.current = position;
      this.focusCurrent();
    }
  }
  positionInRange(position) {
    return position >= 0 && position < this.focusableItems.length;
  }
  currentFocusIsNotFirstItem() {
    return this._current - 1 >= 0;
  }
  currentFocusIsNotLastItem() {
    return this._current + 1 < this.focusableItems.length;
  }
  initializeFocus() {
    if (this.focusableItems && this.focusableItems.length) {
      if (this._current >= this.focusableItems.length) {
        this._current = this.focusableItems.length - 1;
      }
      if (this.focusOnLoad) {
        this.currentItem.focus();
        this.focusChange.emit();
      }
    }
  }
  nextKeyPressed(event) {
    const key = normalizeKey(event.key);
    switch (this.direction) {
      case ClrFocusDirection.VERTICAL:
        return key === Keys.ArrowDown;
      case ClrFocusDirection.HORIZONTAL:
        return key === Keys.ArrowRight;
      case ClrFocusDirection.BOTH:
        return key === Keys.ArrowDown || key === Keys.ArrowRight;
      default:
        return false;
    }
  }
  prevKeyPressed(event) {
    const key = normalizeKey(event.key);
    switch (this.direction) {
      case ClrFocusDirection.VERTICAL:
        return key === Keys.ArrowUp;
      case ClrFocusDirection.HORIZONTAL:
        return key === Keys.ArrowLeft;
      case ClrFocusDirection.BOTH:
        return key === Keys.ArrowUp || key === Keys.ArrowLeft;
      default:
        return false;
    }
  }
  getItemPosition(item) {
    if (this._focusableItems) {
      return this.focusableItems.indexOf(item);
    } else {
      return this.focusableItems.map((_item) => _item.nativeElement).indexOf(item);
    }
  }
  listenForItemUpdates() {
    return this.clrKeyFocusItems.changes.subscribe(() => {
      this.initializeFocus();
    });
  }
};
ClrKeyFocus.ɵfac = function ClrKeyFocus_Factory(t161) {
  return new (t161 || ClrKeyFocus)(ɵɵdirectiveInject(ElementRef));
};
ClrKeyFocus.ɵcmp = ɵɵdefineComponent({
  type: ClrKeyFocus,
  selectors: [["", "clrKeyFocus", ""]],
  contentQueries: function ClrKeyFocus_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrKeyFocusItem, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.clrKeyFocusItems = _t);
    }
  },
  hostBindings: function ClrKeyFocus_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("keydown", function ClrKeyFocus_keydown_HostBindingHandler($event) {
        return ctx.handleKeyboardEvent($event);
      })("click", function ClrKeyFocus_click_HostBindingHandler($event) {
        return ctx.setClickedItemCurrent($event);
      });
    }
  },
  inputs: {
    direction: [InputFlags.None, "clrDirection", "direction"],
    focusOnLoad: [InputFlags.None, "clrFocusOnLoad", "focusOnLoad"],
    focusableItems: [InputFlags.None, "clrKeyFocus", "focusableItems"]
  },
  outputs: {
    focusChange: "clrFocusChange"
  },
  attrs: _c15,
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrKeyFocus_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrKeyFocus, [{
    type: Component,
    args: [{
      selector: "[clrKeyFocus]",
      template: "<ng-content></ng-content>"
    }]
  }], function() {
    return [{
      type: ElementRef
    }];
  }, {
    direction: [{
      type: Input,
      args: ["clrDirection"]
    }],
    focusOnLoad: [{
      type: Input,
      args: ["clrFocusOnLoad"]
    }],
    clrKeyFocusItems: [{
      type: ContentChildren,
      args: [ClrKeyFocusItem, {
        descendants: true
      }]
    }],
    focusChange: [{
      type: Output,
      args: ["clrFocusChange"]
    }],
    focusableItems: [{
      type: Input,
      args: ["clrKeyFocus"]
    }],
    handleKeyboardEvent: [{
      type: HostListener,
      args: ["keydown", ["$event"]]
    }],
    setClickedItemCurrent: [{
      type: HostListener,
      args: ["click", ["$event"]]
    }]
  });
})();
var ClrRovingTabindex = class extends ClrKeyFocus {
  constructor(elementRef, renderer) {
    super(elementRef);
    this.renderer = renderer;
    this.disabled = false;
  }
  // Proxy the input, as the selector name from parent class will still be "clrKeyFocus".
  get rovingIndexItems() {
    return this.focusableItems;
  }
  set rovingIndexItems(elements) {
    this.focusableItems = elements;
  }
  set rovingTabindexDisabled(disabled) {
    this.disabled = disabled;
    if (this.currentItem) {
      this.setTabindex(this.currentItem, disabled ? -1 : 0);
    }
  }
  handleKeyboardEvent(event) {
    if (this.prevKeyPressed(event) && this.currentFocusIsNotFirstItem()) {
      this.updateTabindex(this.current - 1);
    } else if (this.nextKeyPressed(event) && this.currentFocusIsNotLastItem()) {
      this.updateTabindex(this.current + 1);
    } else if (event.code === Keys.Home) {
      this.updateTabindex(0);
    } else if (event.code === Keys.End) {
      this.updateTabindex(this.focusableItems.length - 1);
    }
    super.handleKeyboardEvent(event);
  }
  setClickedItemCurrent(event) {
    let position;
    if (this.focusableItems[0].nativeElement) {
      position = this.focusableItems.map((item) => item.nativeElement).indexOf(event.target);
    } else {
      position = this.focusableItems.indexOf(event.target);
    }
    if (position > -1) {
      this.updateTabindex(position);
    }
    super.setClickedItemCurrent(event);
  }
  initializeFocus() {
    if (this.focusableItems && this.focusableItems.length) {
      this.focusableItems.forEach((item) => {
        this.setTabindex(item, -1);
      });
      if (this.current >= this.focusableItems.length) {
        this.current = this.focusableItems.length - 1;
      }
      if (!this.disabled && this.currentItem) {
        this.setTabindex(this.currentItem, 0);
      }
    }
    super.initializeFocus();
  }
  updateTabindex(newIndex) {
    this.setTabindex(this.currentItem, -1);
    this.setTabindex(this.focusableItems[newIndex], 0);
  }
  setTabindex(item, value) {
    if (item instanceof HTMLElement) {
      this.renderer.setAttribute(item, "tabindex", value.toString());
    } else {
      this.renderer.setAttribute(item.nativeElement, "tabindex", value.toString());
    }
  }
};
ClrRovingTabindex.ɵfac = function ClrRovingTabindex_Factory(t161) {
  return new (t161 || ClrRovingTabindex)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2));
};
ClrRovingTabindex.ɵcmp = ɵɵdefineComponent({
  type: ClrRovingTabindex,
  selectors: [["", "clrRovingTabindex", ""]],
  inputs: {
    rovingIndexItems: [InputFlags.None, "clrRovingTabindex", "rovingIndexItems"],
    rovingTabindexDisabled: [InputFlags.None, "clrRovingTabindexDisabled", "rovingTabindexDisabled"]
  },
  features: [ɵɵInheritDefinitionFeature],
  attrs: _c16,
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrRovingTabindex_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrRovingTabindex, [{
    type: Component,
    args: [{
      selector: "[clrRovingTabindex]",
      template: "<ng-content></ng-content>"
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: Renderer2
    }];
  }, {
    rovingIndexItems: [{
      type: Input,
      args: ["clrRovingTabindex"]
    }],
    rovingTabindexDisabled: [{
      type: Input,
      args: ["clrRovingTabindexDisabled"]
    }]
  });
})();
var KEY_FOCUS_DIRECTIVES = [ClrKeyFocus, ClrRovingTabindex, ClrKeyFocusItem];
var ClrKeyFocusModule = class {
};
ClrKeyFocusModule.ɵfac = function ClrKeyFocusModule_Factory(t161) {
  return new (t161 || ClrKeyFocusModule)();
};
ClrKeyFocusModule.ɵmod = ɵɵdefineNgModule({
  type: ClrKeyFocusModule,
  declarations: [ClrKeyFocus, ClrRovingTabindex, ClrKeyFocusItem],
  imports: [CommonModule],
  exports: [ClrKeyFocus, ClrRovingTabindex, ClrKeyFocusItem]
});
ClrKeyFocusModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrKeyFocusModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [KEY_FOCUS_DIRECTIVES],
      exports: [KEY_FOCUS_DIRECTIVES]
    }]
  }], null, null);
})();
var ComboboxContainerService = class {
  constructor() {
    this.labelOffset = 0;
  }
};
ComboboxContainerService.ɵfac = function ComboboxContainerService_Factory(t161) {
  return new (t161 || ComboboxContainerService)();
};
ComboboxContainerService.ɵprov = ɵɵdefineInjectable({
  token: ComboboxContainerService,
  factory: ComboboxContainerService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ComboboxContainerService, [{
    type: Injectable
  }], null, null);
})();
var ClrComboboxContainer = class extends ClrAbstractContainer {
  constructor(ifControlStateService, layoutService, controlClassService, ngControlService, containerService, el) {
    super(ifControlStateService, layoutService, controlClassService, ngControlService);
    this.containerService = containerService;
    this.el = el;
  }
  ngAfterContentInit() {
    if (this.label) {
      this.containerService.labelText = this.label.labelText;
    }
  }
  ngAfterViewInit() {
    this.containerService.labelOffset = this.controlContainer.nativeElement.offsetHeight - this.el.nativeElement.offsetHeight;
  }
};
ClrComboboxContainer.ɵfac = function ClrComboboxContainer_Factory(t161) {
  return new (t161 || ClrComboboxContainer)(ɵɵdirectiveInject(IfControlStateService), ɵɵdirectiveInject(LayoutService, 8), ɵɵdirectiveInject(ControlClassService), ɵɵdirectiveInject(NgControlService), ɵɵdirectiveInject(ComboboxContainerService), ɵɵdirectiveInject(ElementRef));
};
ClrComboboxContainer.ɵcmp = ɵɵdefineComponent({
  type: ClrComboboxContainer,
  selectors: [["clr-combobox-container"]],
  viewQuery: function ClrComboboxContainer_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c17, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.controlContainer = _t.first);
    }
  },
  hostVars: 8,
  hostBindings: function ClrComboboxContainer_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-form-control", true)("clr-combobox-form-control", true)("clr-form-control-disabled", ctx.control == null ? null : ctx.control.disabled)("clr-row", ctx.addGrid());
    }
  },
  features: [ɵɵProvidersFeature([IfControlStateService, NgControlService, ControlIdService, ControlClassService, ComboboxContainerService]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c19,
  decls: 10,
  vars: 7,
  consts: [["controlContainer", ""], [4, "ngIf"], [1, "clr-control-container", 3, "ngClass"], ["class", "clr-validate-icon", "shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 4, "ngIf"], ["class", "clr-validate-icon", "shape", "check-circle", "status", "success", "aria-hidden", "true", 4, "ngIf"], ["shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 1, "clr-validate-icon"], ["shape", "check-circle", "status", "success", "aria-hidden", "true", 1, "clr-validate-icon"]],
  template: function ClrComboboxContainer_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c18);
      ɵɵprojection(0);
      ɵɵtemplate(1, ClrComboboxContainer_label_1_Template, 1, 0, "label", 1);
      ɵɵelementStart(2, "div", 2, 0);
      ɵɵprojection(4, 1);
      ɵɵtemplate(5, ClrComboboxContainer_cds_icon_5_Template, 1, 0, "cds-icon", 3)(6, ClrComboboxContainer_cds_icon_6_Template, 1, 0, "cds-icon", 4)(7, ClrComboboxContainer_ng_content_7_Template, 1, 0, "ng-content", 1)(8, ClrComboboxContainer_ng_content_8_Template, 1, 0, "ng-content", 1)(9, ClrComboboxContainer_ng_content_9_Template, 1, 0, "ng-content", 1);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.label && ctx.addGrid());
      ɵɵadvance();
      ɵɵproperty("ngClass", ctx.controlClass());
      ɵɵadvance(3);
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showHelper);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
    }
  },
  dependencies: [NgClass, NgIf, CdsIconCustomTag, ClrLabel],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrComboboxContainer, [{
    type: Component,
    args: [{
      selector: "clr-combobox-container",
      template: `
    <ng-content select="label"></ng-content>
    <label *ngIf="!label && addGrid()"></label>
    <div class="clr-control-container" [ngClass]="controlClass()" #controlContainer>
      <ng-content select="clr-combobox"></ng-content>
      <cds-icon
        *ngIf="showInvalid"
        class="clr-validate-icon"
        shape="exclamation-circle"
        status="danger"
        aria-hidden="true"
      ></cds-icon>
      <cds-icon
        *ngIf="showValid"
        class="clr-validate-icon"
        shape="check-circle"
        status="success"
        aria-hidden="true"
      ></cds-icon>
      <ng-content select="clr-control-helper" *ngIf="showHelper"></ng-content>
      <ng-content select="clr-control-error" *ngIf="showInvalid"></ng-content>
      <ng-content select="clr-control-success" *ngIf="showValid"></ng-content>
    </div>
  `,
      host: {
        "[class.clr-form-control]": "true",
        "[class.clr-combobox-form-control]": "true",
        "[class.clr-form-control-disabled]": "control?.disabled",
        "[class.clr-row]": "addGrid()"
      },
      providers: [IfControlStateService, NgControlService, ControlIdService, ControlClassService, ComboboxContainerService]
    }]
  }], function() {
    return [{
      type: IfControlStateService
    }, {
      type: LayoutService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ControlClassService
    }, {
      type: NgControlService
    }, {
      type: ComboboxContainerService
    }, {
      type: ElementRef
    }];
  }, {
    controlContainer: [{
      type: ViewChild,
      args: ["controlContainer"]
    }]
  });
})();
var MultiSelectComboboxModel = class {
  containsItem(item) {
    return this.model ? this.model.includes(item) : false;
  }
  select(item) {
    this.addItem(item);
  }
  unselect(item) {
    this.removeItem(item);
  }
  isEmpty() {
    return !(this.model && this.model.length > 0);
  }
  pop() {
    let item;
    if (this.model && this.model.length > 0) {
      item = this.model[this.model.length - 1];
      this.removeItem(item);
    }
    return item;
  }
  toString(displayField, index = -1) {
    let displayString = "";
    if (this.model) {
      if (index > -1) {
        if (this.model[index]) {
          if (displayField && this.model[index][displayField]) {
            displayString += this.model[index][displayField];
          } else {
            displayString += this.model[index].toString();
          }
        }
      } else {
        this.model.forEach((model) => {
          if (displayField && model[displayField]) {
            displayString += model[displayField];
          } else {
            displayString += model.toString();
          }
          displayString += " ";
        });
      }
    }
    return displayString.trim();
  }
  addItem(item) {
    if (!this.containsItem(item)) {
      this.model = this.model || [];
      this.model.push(item);
    }
  }
  removeItem(item) {
    if (this.model === null || this.model === void 0) {
      return;
    }
    const index = this.model.indexOf(item);
    if (index > -1) {
      this.model.splice(index, 1);
    }
    if (this.model.length === 0) {
      this.model = null;
    }
  }
};
var SingleSelectComboboxModel = class {
  containsItem(item) {
    return this.model === item;
  }
  select(item) {
    this.model = item;
  }
  unselect(item) {
    if (this.containsItem(item)) {
      this.model = null;
    }
  }
  isEmpty() {
    return !this.model;
  }
  pop() {
    const item = this.model;
    this.model = null;
    return item;
  }
  toString(displayField) {
    if (!this.model) {
      return "";
    }
    if (displayField && this.model[displayField]) {
      return this.model[displayField];
    } else {
      return this.model.toString();
    }
  }
};
var ClrOptionSelected = class {
  constructor(template) {
    this.template = template;
  }
};
ClrOptionSelected.ɵfac = function ClrOptionSelected_Factory(t161) {
  return new (t161 || ClrOptionSelected)(ɵɵdirectiveInject(TemplateRef));
};
ClrOptionSelected.ɵdir = ɵɵdefineDirective({
  type: ClrOptionSelected,
  selectors: [["", "clrOptionSelected", ""]],
  inputs: {
    selected: [InputFlags.None, "clrOptionSelected", "selected"]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrOptionSelected, [{
    type: Directive,
    args: [{
      selector: "[clrOptionSelected]"
    }]
  }], function() {
    return [{
      type: TemplateRef
    }];
  }, {
    selected: [{
      type: Input,
      args: ["clrOptionSelected"]
    }]
  });
})();
var FocusableItem = class {
};
function customFocusableItemProvider(implementation) {
  return [implementation, {
    provide: FocusableItem,
    useExisting: implementation
  }];
}
var PseudoFocusModel = class extends SingleSelectComboboxModel {
  constructor() {
    super(...arguments);
    this._focusChanged = new BehaviorSubject(null);
  }
  get focusChanged() {
    return this._focusChanged.asObservable();
  }
  select(item) {
    if (this.model !== item) {
      this.model = item;
      this._focusChanged.next(item);
    }
  }
};
var OptionSelectionService = class {
  constructor() {
    this.loading = false;
    this.showAllOptions = true;
    this._currentInput = "";
    this._inputChanged = new BehaviorSubject("");
    this._selectionChanged = new ReplaySubject(1);
    this.inputChanged = this._inputChanged.asObservable();
  }
  get currentInput() {
    return this._currentInput;
  }
  set currentInput(input) {
    if (input === "" && !this.multiselectable) {
      this.setSelectionValue(null);
    }
    this._currentInput = input;
    this._inputChanged.next(input);
  }
  // This observable is for notifying the ClrOption to update its
  // selection by comparing the value
  get selectionChanged() {
    return this._selectionChanged.asObservable();
  }
  get multiselectable() {
    return this.selectionModel instanceof MultiSelectComboboxModel;
  }
  select(item) {
    if (item === null || item === void 0 || this.selectionModel.containsItem(item)) {
      return;
    }
    this.selectionModel.select(item);
    this._selectionChanged.next(this.selectionModel);
  }
  toggle(item) {
    if (item === null || item === void 0) {
      return;
    }
    if (this.selectionModel.containsItem(item)) {
      this.selectionModel.unselect(item);
    } else {
      this.selectionModel.select(item);
    }
    this._selectionChanged.next(this.selectionModel);
  }
  unselect(item) {
    if (item === null || item === void 0 || !this.selectionModel.containsItem(item)) {
      return;
    }
    this.selectionModel.unselect(item);
    this._selectionChanged.next(this.selectionModel);
  }
  // TODO: Add support for trackBy and compareFn
  setSelectionValue(value) {
    if (!this.selectionModel || this.selectionModel.model === value || !this.selectionModel.model && !value) {
      return;
    }
    this.selectionModel.model = value;
    this._selectionChanged.next(this.selectionModel);
  }
};
OptionSelectionService.ɵfac = function OptionSelectionService_Factory(t161) {
  return new (t161 || OptionSelectionService)();
};
OptionSelectionService.ɵprov = ɵɵdefineInjectable({
  token: OptionSelectionService,
  factory: OptionSelectionService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(OptionSelectionService, [{
    type: Injectable
  }], function() {
    return [];
  }, null);
})();
var ComboboxFocusHandler = class {
  constructor(rendererFactory, toggleService, selectionService, platformId) {
    this.toggleService = toggleService;
    this.selectionService = selectionService;
    this.platformId = platformId;
    this.pseudoFocus = new PseudoFocusModel();
    this.optionData = [];
    this.handleFocusSubscription();
    this.renderer = rendererFactory.createRenderer(null, null);
  }
  get trigger() {
    return this._trigger;
  }
  set trigger(el) {
    this._trigger = el;
    this.addFocusOnBlurListener(el);
  }
  get listbox() {
    return this._listbox;
  }
  set listbox(el) {
    this._listbox = el;
    this.addFocusOnBlurListener(el);
  }
  get textInput() {
    return this._textInput;
  }
  set textInput(el) {
    this._textInput = el;
    this.renderer.listen(el, "keydown", (event) => !this.handleTextInput(event));
    this.addFocusOnBlurListener(el);
  }
  focusInput() {
    if (this.textInput && isPlatformBrowser(this.platformId)) {
      this.textInput.focus();
    }
  }
  focusFirstActive() {
    if (this.optionData.length > 0) {
      if (this.selectionService.selectionModel.isEmpty()) {
        this.pseudoFocus.select(this.optionData[0]);
      } else {
        let firstActive;
        if (this.selectionService.multiselectable) {
          firstActive = this.selectionService.selectionModel.model[0];
        } else {
          firstActive = this.selectionService.selectionModel.model;
        }
        const activeProxy = this.optionData.find((option) => option.value === firstActive);
        if (activeProxy) {
          this.pseudoFocus.select(activeProxy);
        } else {
          this.pseudoFocus.select(this.optionData[0]);
        }
        this.scrollIntoSelectedModel("auto");
      }
    }
  }
  addOptionValues(options) {
    this.optionData = options;
  }
  handleFocusSubscription() {
    this.toggleService.openChange.subscribe((open) => {
      if (!open) {
        this.pseudoFocus.model = null;
      }
    });
  }
  moveFocusTo(direction) {
    let index = this.optionData.findIndex((option) => option.equals(this.pseudoFocus.model));
    if (direction === ArrowKeyDirection.UP) {
      if (index === -1 || index === 0) {
        index = this.optionData.length - 1;
      } else {
        index--;
      }
    } else if (direction === ArrowKeyDirection.DOWN) {
      if (index === -1 || index === this.optionData.length - 1) {
        index = 0;
      } else {
        index++;
      }
    }
    this.pseudoFocus.select(this.optionData[index]);
    this.scrollIntoSelectedModel();
  }
  openAndMoveTo(direction) {
    if (!this.toggleService.open) {
      this.toggleService.openChange.pipe(take(1)).subscribe((open) => {
        if (open) {
          this.moveFocusTo(direction);
        }
      });
      this.toggleService.open = true;
    } else {
      this.moveFocusTo(direction);
    }
  }
  // this service is only interested in keys that may move the focus
  handleTextInput(event) {
    let preventDefault = false;
    const key = normalizeKey(event.key);
    if (event) {
      switch (key) {
        case Keys.Enter:
          if (this.toggleService.open && this.pseudoFocus.model) {
            if (this.selectionService.multiselectable) {
              this.selectionService.toggle(this.pseudoFocus.model.value);
            } else {
              this.selectionService.select(this.pseudoFocus.model.value);
            }
            preventDefault = true;
          }
          break;
        case Keys.Space:
          if (!this.toggleService.open) {
            this.toggleService.open = true;
            preventDefault = true;
          }
          break;
        case Keys.ArrowUp:
          this.preventViewportScrolling(event);
          this.openAndMoveTo(ArrowKeyDirection.UP);
          preventDefault = true;
          break;
        case Keys.ArrowDown:
          this.preventViewportScrolling(event);
          this.openAndMoveTo(ArrowKeyDirection.DOWN);
          preventDefault = true;
          break;
        default:
          if (event.key !== Keys.Tab && !(this.selectionService.multiselectable && event.key === Keys.Backspace) && !(event.key === Keys.Escape) && !this.toggleService.open) {
            this.toggleService.open = true;
          }
          break;
      }
    }
    return preventDefault;
  }
  scrollIntoSelectedModel(behavior = "smooth") {
    if (this.pseudoFocus.model && this.pseudoFocus.model.el) {
      this.pseudoFocus.model.el.scrollIntoView({
        behavior,
        block: "center",
        inline: "nearest"
      });
    }
  }
  preventViewportScrolling(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
  }
  addFocusOnBlurListener(el) {
    if (isPlatformBrowser(this.platformId)) {
      this.renderer.listen(el, "blur", (event) => {
        if (this.focusOutOfComponent(event)) {
          this.toggleService.open = false;
          if (this.componentCdRef) {
            this.componentCdRef.detectChanges();
          }
        }
      });
    }
  }
  focusOutOfComponent(event) {
    const target = event.relatedTarget || document.activeElement;
    return !(this.textInput.contains(target) || this.trigger.contains(target) || this.listbox.contains(target));
  }
};
ComboboxFocusHandler.ɵfac = function ComboboxFocusHandler_Factory(t161) {
  return new (t161 || ComboboxFocusHandler)(ɵɵinject(RendererFactory2), ɵɵinject(ClrPopoverToggleService), ɵɵinject(OptionSelectionService), ɵɵinject(PLATFORM_ID));
};
ComboboxFocusHandler.ɵprov = ɵɵdefineInjectable({
  token: ComboboxFocusHandler,
  factory: ComboboxFocusHandler.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ComboboxFocusHandler, [{
    type: Injectable
  }], function() {
    return [{
      type: RendererFactory2
    }, {
      type: ClrPopoverToggleService
    }, {
      type: OptionSelectionService
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }];
  }, null);
})();
var COMBOBOX_FOCUS_HANDLER_PROVIDER = customFocusableItemProvider(ComboboxFocusHandler);
var OptionData = class {
  constructor(id, value) {
    this.id = id;
    this.value = value;
  }
  equals(other) {
    if (!other) {
      return false;
    }
    return this.id === other.id && this.value === other.value;
  }
};
var ClrOption = class {
  constructor(elRef, commonStrings, focusHandler, optionSelectionService) {
    this.elRef = elRef;
    this.commonStrings = commonStrings;
    this.focusHandler = focusHandler;
    this.optionSelectionService = optionSelectionService;
    this.optionProxy = new OptionData(null, null);
    this.optionProxy.el = this.elRef.nativeElement;
  }
  get optionId() {
    return this._id;
  }
  set optionId(id) {
    this._id = id;
    this.optionProxy.id = this._id;
  }
  get value() {
    return this._value;
  }
  set value(value) {
    this._value = value;
    this.optionProxy.value = value;
  }
  get selected() {
    return this.optionSelectionService.selectionModel && this.optionSelectionService.selectionModel.containsItem(this.value);
  }
  get focusClass() {
    return this.focusHandler.pseudoFocus.containsItem(this.optionProxy);
  }
  ngOnInit() {
    if (!this._id) {
      this._id = "clr-option-" + uniqueIdFactory();
      this.optionProxy.id = this._id;
    }
  }
  onClick() {
    if (this.optionSelectionService.multiselectable) {
      this.optionSelectionService.toggle(this.value);
    } else {
      this.optionSelectionService.select(this.value);
    }
    this.focusHandler.focusInput();
  }
};
ClrOption.ɵfac = function ClrOption_Factory(t161) {
  return new (t161 || ClrOption)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(ComboboxFocusHandler), ɵɵdirectiveInject(OptionSelectionService));
};
ClrOption.ɵcmp = ɵɵdefineComponent({
  type: ClrOption,
  selectors: [["clr-option"]],
  hostVars: 9,
  hostBindings: function ClrOption_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("click", function ClrOption_click_HostBindingHandler() {
        return ctx.onClick();
      });
    }
    if (rf & 2) {
      ɵɵattribute("role", "option")("tabindex", -1)("id", ctx.optionId);
      ɵɵclassProp("clr-combobox-option", true)("active", ctx.selected)("clr-focus", ctx.focusClass);
    }
  },
  inputs: {
    optionId: [InputFlags.None, "id", "optionId"],
    value: [InputFlags.None, "clrValue", "value"]
  },
  ngContentSelectors: _c02,
  decls: 2,
  vars: 1,
  consts: [["class", "clr-sr-only", 4, "ngIf"], [1, "clr-sr-only"]],
  template: function ClrOption_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
      ɵɵtemplate(1, ClrOption_span_1_Template, 2, 1, "span", 0);
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.selected);
    }
  },
  dependencies: [NgIf],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrOption, [{
    type: Component,
    args: [{
      selector: "clr-option",
      template: `
    <ng-content></ng-content>
    <span *ngIf="selected" class="clr-sr-only">{{ commonStrings.keys.comboboxSelected }}</span>
  `,
      host: {
        "[class.clr-combobox-option]": "true",
        "[attr.role]": '"option"',
        // Do not remove. Or click-selection will not work.
        "[attr.tabindex]": "-1",
        "[attr.id]": "optionId"
      }
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: ClrCommonStringsService
    }, {
      type: ComboboxFocusHandler
    }, {
      type: OptionSelectionService
    }];
  }, {
    optionId: [{
      type: Input,
      args: ["id"]
    }],
    value: [{
      type: Input,
      args: ["clrValue"]
    }],
    selected: [{
      type: HostBinding,
      args: ["class.active"]
    }],
    focusClass: [{
      type: HostBinding,
      args: ["class.clr-focus"]
    }],
    onClick: [{
      type: HostListener,
      args: ["click"]
    }]
  });
})();
var nbOptionsComponents = 0;
var ClrOptions = class {
  constructor(optionSelectionService, id, el, commonStrings, focusHandler, toggleService, parentHost, document2) {
    this.optionSelectionService = optionSelectionService;
    this.id = id;
    this.el = el;
    this.commonStrings = commonStrings;
    this.focusHandler = focusHandler;
    this.toggleService = toggleService;
    this.document = document2;
    this.loading = false;
    this.subscriptions = [];
    if (!parentHost) {
      throw new Error("clr-options should only be used inside of a clr-combobox");
    }
    if (!this.optionsId) {
      this.optionsId = "clr-options-" + nbOptionsComponents++;
    }
  }
  get items() {
    return this._items;
  }
  set items(items) {
    this._items = items;
    this.focusHandler.addOptionValues(this._items.map((option) => option.optionProxy));
  }
  /**
   * Tests if the list of options is empty, meaning it doesn't contain any items
   */
  get emptyOptions() {
    return !this.optionSelectionService.loading && this.items.length === 0;
  }
  ngAfterViewInit() {
    this.focusHandler.listbox = this.el.nativeElement;
    this.subscriptions.push(fromEvent(this.document, "scroll", {
      capture: true
    }).subscribe((event) => {
      if (this.toggleService.open && event.target !== this.el.nativeElement && event.target !== this.focusHandler.textInput) {
        this.toggleService.open = false;
      }
    }), this.items.changes.subscribe((items) => {
      if (items.length) {
        setTimeout(() => {
          this.focusHandler.focusFirstActive();
        });
      } else {
        this.focusHandler.pseudoFocus.pop();
      }
    }));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  searchText(input) {
    return this.commonStrings.parse(this.commonStrings.keys.comboboxSearching, {
      INPUT: input
    });
  }
  loadingStateChange(state2) {
    this.loading = state2 === ClrLoadingState.LOADING;
  }
};
ClrOptions.ɵfac = function ClrOptions_Factory(t161) {
  return new (t161 || ClrOptions)(ɵɵdirectiveInject(OptionSelectionService), ɵɵdirectiveInject(IF_ACTIVE_ID), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(ComboboxFocusHandler), ɵɵdirectiveInject(ClrPopoverToggleService), ɵɵdirectiveInject(POPOVER_HOST_ANCHOR, 8), ɵɵdirectiveInject(DOCUMENT));
};
ClrOptions.ɵcmp = ɵɵdefineComponent({
  type: ClrOptions,
  selectors: [["clr-options"]],
  contentQueries: function ClrOptions_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrOption, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.items = _t);
    }
  },
  hostVars: 4,
  hostBindings: function ClrOptions_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵhostProperty("id", ctx.optionsId);
      ɵɵattribute("role", "listbox");
      ɵɵclassProp("clr-combobox-options", true);
    }
  },
  inputs: {
    optionsId: [InputFlags.None, "id", "optionsId"]
  },
  features: [ɵɵProvidersFeature([{
    provide: LoadingListener,
    useExisting: ClrOptions
  }])],
  ngContentSelectors: _c02,
  decls: 3,
  vars: 2,
  consts: [["class", "clr-combobox-options-loading", 4, "ngIf"], [4, "ngIf"], [1, "clr-combobox-options-loading"], ["clrInline", ""], [1, "clr-combobox-options-text"], [1, "clr-combobox-options-empty-text"]],
  template: function ClrOptions_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, ClrOptions_div_0_Template, 5, 2, "div", 0)(1, ClrOptions_div_1_Template, 3, 1, "div", 1);
      ɵɵprojection(2);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.optionSelectionService.loading);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.emptyOptions);
    }
  },
  dependencies: [NgIf, ClrSpinner],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrOptions, [{
    type: Component,
    args: [{
      selector: "clr-options",
      template: `
    <div *ngIf="optionSelectionService.loading" class="clr-combobox-options-loading">
      <clr-spinner clrInline>
        {{ commonStrings.keys.loading }}
      </clr-spinner>
      <span class="clr-combobox-options-text">
        {{ searchText(optionSelectionService.currentInput) }}
      </span>
    </div>

    <!-- Rendered if data set is empty -->
    <div *ngIf="emptyOptions">
      <span class="clr-combobox-options-empty-text">
        {{ commonStrings.keys.comboboxNoResults }}
      </span>
    </div>

    <!--Option Groups and Options will be projected here-->
    <ng-content></ng-content>
  `,
      providers: [{
        provide: LoadingListener,
        useExisting: ClrOptions
      }],
      host: {
        "[class.clr-combobox-options]": "true",
        "[attr.role]": '"listbox"',
        "[id]": "optionsId"
      }
    }]
  }], function() {
    return [{
      type: OptionSelectionService
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [IF_ACTIVE_ID]
      }]
    }, {
      type: ElementRef
    }, {
      type: ClrCommonStringsService
    }, {
      type: ComboboxFocusHandler
    }, {
      type: ClrPopoverToggleService
    }, {
      type: ElementRef,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [POPOVER_HOST_ANCHOR]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }];
  }, {
    optionsId: [{
      type: Input,
      args: ["id"]
    }],
    items: [{
      type: ContentChildren,
      args: [ClrOption]
    }]
  });
})();
var ClrCombobox = class extends WrappedFormControl {
  constructor(vcr, injector, control, renderer, el, optionSelectionService, commonStrings, toggleService, positionService, controlStateService, containerService, platformId, focusHandler, cdr) {
    super(vcr, ClrComboboxContainer, injector, control, renderer, el);
    this.control = control;
    this.renderer = renderer;
    this.el = el;
    this.optionSelectionService = optionSelectionService;
    this.commonStrings = commonStrings;
    this.toggleService = toggleService;
    this.positionService = positionService;
    this.controlStateService = controlStateService;
    this.containerService = containerService;
    this.platformId = platformId;
    this.focusHandler = focusHandler;
    this.cdr = cdr;
    this.placeholder = "";
    this.clrInputChange = new EventEmitter(false);
    this.clrOpenChange = this.toggleService.openChange;
    this.clrSelectionChange = this.optionSelectionService.selectionChanged;
    this.invalid = false;
    this.focused = false;
    this.smartPosition = {
      axis: ClrAxis.VERTICAL,
      side: ClrSide.AFTER,
      anchor: ClrAlignment.START,
      content: ClrAlignment.START
    };
    this.index = 1;
    this._searchText = "";
    if (control) {
      control.valueAccessor = this;
    }
    this.optionSelectionService.selectionModel = new SingleSelectComboboxModel();
    this.updateControlValue();
  }
  get multiSelect() {
    return this.optionSelectionService.multiselectable;
  }
  set multiSelect(value) {
    if (value) {
      this.optionSelectionService.selectionModel = new MultiSelectComboboxModel();
    } else {
      this.optionSelectionService.selectionModel = new SingleSelectComboboxModel();
    }
    this.updateControlValue();
  }
  // Override the id of WrappedFormControl, as we want to move it to the embedded input.
  // Otherwise the label/component connection does not work and screen readers do not read the label.
  get id() {
    return this.controlIdService.id + "-combobox";
  }
  set id(id) {
    super.id = id;
  }
  get searchText() {
    return this._searchText;
  }
  set searchText(text) {
    if (text !== this._searchText) {
      if (this.toggleService.open) {
        this.optionSelectionService.showAllOptions = false;
      }
      this._searchText = text;
      this.clrInputChange.emit(this.searchText);
    }
    this.optionSelectionService.currentInput = this.searchText;
  }
  get openState() {
    return this.toggleService.open;
  }
  get multiSelectModel() {
    if (!this.multiSelect) {
      throw Error("multiSelectModel is not available in single selection context");
    }
    return this.optionSelectionService.selectionModel.model;
  }
  get ariaControls() {
    return this.options?.optionsId;
  }
  get ariaOwns() {
    return this.options?.optionsId;
  }
  get ariaDescribedBySelection() {
    return "selection-" + this.id;
  }
  get displayField() {
    return this.optionSelectionService.displayField;
  }
  get disabled() {
    return this.control && this.control.disabled;
  }
  ngAfterContentInit() {
    this.initializeSubscriptions();
    if (!this.optionSelectionService.selectionModel.isEmpty()) {
      this.updateInputValue(this.optionSelectionService.selectionModel);
    }
  }
  ngAfterViewInit() {
    this.focusHandler.componentCdRef = this.cdr;
    this.focusHandler.textInput = this.textbox.nativeElement;
    this.focusHandler.trigger = this.trigger.nativeElement;
    this.el = this.textbox;
  }
  onKeyUp(event) {
    if (event.key === Keys.Backspace && this.multiSelect && this._searchText.length === 0) {
      const multiModel = this.optionSelectionService.selectionModel.model;
      if (multiModel && multiModel.length > 0) {
        const lastItem = multiModel[multiModel.length - 1];
        this.control.control.markAsTouched();
        this.optionSelectionService.unselect(lastItem);
      }
    }
  }
  inputId() {
    return this.controlIdService.id;
  }
  loadingStateChange(state2) {
    this.optionSelectionService.loading = state2 === ClrLoadingState.LOADING;
    this.positionService.realign();
    if (state2 !== ClrLoadingState.LOADING && isPlatformBrowser(this.platformId)) {
      this.focusFirstActive();
    }
  }
  unselect(item) {
    if (!this.disabled) {
      this.optionSelectionService.unselect(item);
    }
  }
  onBlur() {
    this.onTouchedCallback();
    if (this.control.control.updateOn === "blur") {
      this.control.control.updateValueAndValidity();
    }
    this.focused = false;
  }
  onFocus() {
    this.focused = true;
    this.cdr.detectChanges();
  }
  getSelectionAriaLabel() {
    if (this.containerService && this.containerService.labelText) {
      return `${this.containerService.labelText} ${this.commonStrings.keys.comboboxSelection}`;
    }
    return this.commonStrings.keys.comboboxSelection;
  }
  focusFirstActive() {
    setTimeout(() => {
      this.focusHandler.focusFirstActive();
    });
  }
  writeValue(value) {
    this.optionSelectionService.selectionModel.model = value;
    this.updateInputValue(this.optionSelectionService.selectionModel);
  }
  registerOnTouched(onTouched) {
    this.onTouchedCallback = onTouched;
  }
  registerOnChange(onChange) {
    this.onChangeCallback = onChange;
  }
  getActiveDescendant() {
    const model = this.focusHandler.pseudoFocus.model;
    return model ? model.id : null;
  }
  setDisabledState() {
  }
  focusInput() {
    this.focusHandler.focusInput();
  }
  initializeSubscriptions() {
    this.subscriptions.push(this.optionSelectionService.selectionChanged.subscribe((newSelection) => {
      this.updateInputValue(newSelection);
      if (this.multiSelect) {
        this.positionService.realign();
      }
      if (!this.multiSelect && newSelection && !newSelection.isEmpty()) {
        this.toggleService.open = false;
      }
      this.updateControlValue();
    }));
    this.subscriptions.push(this.toggleService.openChange.subscribe((open) => {
      if (open) {
        this.focusFirstActive();
      } else {
        this.optionSelectionService.showAllOptions = true;
      }
      if (this.multiSelect) {
        this.searchText = "";
      } else {
        this.searchText = this.getDisplayNames(this.optionSelectionService.selectionModel.model)[0] || "";
      }
    }));
    this.subscriptions.push(this.toggleService.popoverAligned.subscribe((popoverNode) => {
      if (!this.containerService) {
        return;
      }
      const popover = popoverNode;
      if (popover.getBoundingClientRect().top < this.el.nativeElement.getBoundingClientRect().top) {
        this.renderer.setStyle(popoverNode, "top", `${popover.offsetTop + this.containerService.labelOffset}px`);
      }
    }));
    if (this.controlStateService) {
      this.subscriptions.push(this.controlStateService.statusChanges.subscribe((invalid) => {
        this.invalid = this.control.control.touched && invalid === CONTROL_STATE.INVALID;
      }));
    }
  }
  updateInputValue(model) {
    if (!this.multiSelect) {
      this.searchText = model.model ? this.getDisplayNames(model.model)[0] : "";
      if (this.searchText) {
        this.optionSelectionService.currentInput = this.searchText;
      }
    }
  }
  updateControlValue() {
    if (this.onChangeCallback) {
      this.onChangeCallback(this.optionSelectionService.selectionModel.model);
    }
  }
  getDisplayNames(model) {
    if (this.displayField) {
      if (!Array.isArray(model)) {
        model = [model];
      }
      return model.map((item) => item ? item[this.displayField] : null);
    }
    return [this.optionSelectionService.selectionModel.model];
  }
};
ClrCombobox.ɵfac = function ClrCombobox_Factory(t161) {
  return new (t161 || ClrCombobox)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(OptionSelectionService), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(ClrPopoverToggleService), ɵɵdirectiveInject(ClrPopoverPositionService), ɵɵdirectiveInject(IfControlStateService, 8), ɵɵdirectiveInject(ComboboxContainerService, 8), ɵɵdirectiveInject(PLATFORM_ID), ɵɵdirectiveInject(ComboboxFocusHandler), ɵɵdirectiveInject(ChangeDetectorRef));
};
ClrCombobox.ɵcmp = ɵɵdefineComponent({
  type: ClrCombobox,
  selectors: [["clr-combobox"]],
  contentQueries: function ClrCombobox_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrOptionSelected, 5);
      ɵɵcontentQuery(dirIndex, ClrOptions, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.optionSelected = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.options = _t.first);
    }
  },
  viewQuery: function ClrCombobox_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c20, 5);
      ɵɵviewQuery(_c21, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textbox = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.trigger = _t.first);
    }
  },
  hostVars: 6,
  hostBindings: function ClrCombobox_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("keydown", function ClrCombobox_keydown_HostBindingHandler($event) {
        return ctx.onKeyUp($event);
      });
    }
    if (rf & 2) {
      ɵɵclassProp("aria-required", true)("clr-combobox", true)("clr-combobox-disabled", ctx.control == null ? null : ctx.control.disabled);
    }
  },
  inputs: {
    placeholder: "placeholder",
    multiSelect: [InputFlags.None, "clrMulti", "multiSelect"]
  },
  outputs: {
    clrInputChange: "clrInputChange",
    clrOpenChange: "clrOpenChange",
    clrSelectionChange: "clrSelectionChange"
  },
  features: [ɵɵProvidersFeature([OptionSelectionService, {
    provide: LoadingListener,
    useExisting: ClrCombobox
  }, IF_ACTIVE_ID_PROVIDER, FOCUS_SERVICE_PROVIDER, COMBOBOX_FOCUS_HANDLER_PROVIDER]), ɵɵHostDirectivesFeature([ClrPopoverHostDirective]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c02,
  decls: 10,
  vars: 23,
  consts: [["textboxInput", ""], ["trigger", ""], ["clrPopoverAnchor", "", 1, "clr-combobox-wrapper", 3, "click"], ["role", "grid", "clrRovingTabindex", "", "clrDirection", "both", 3, "clrRovingTabindexDisabled", 4, "ngIf"], [1, "clr-combobox-input-wrapper"], ["type", "text", "role", "combobox", "aria-haspopup", "listbox", "aria-autocomplete", "list", "autocomplete", "off", 1, "clr-input", "clr-combobox-input", 3, "ngModelChange", "blur", "focus", "id", "ngModel", "disabled"], ["clrPopoverOpenCloseButton", "", "type", "button", "tabindex", "-1", 1, "clr-combobox-trigger", 3, "disabled"], ["shape", "angle", "direction", "down"], [1, "clr-focus-indicator"], ["role", "dialog", 4, "clrPopoverContent", "clrPopoverContentAt", "clrPopoverContentOutsideClickToClose", "clrPopoverContentScrollToClose"], ["role", "grid", "clrRovingTabindex", "", "clrDirection", "both", 3, "clrRovingTabindexDisabled"], ["class", "label label-combobox-pill", "role", "row", 4, "ngFor", "ngForOf"], ["role", "row", 1, "label", "label-combobox-pill"], ["role", "gridcell"], ["clrKeyFocusItem", "", 1, "clr-combobox-pill-content"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], ["clrKeyFocusItem", "", "type", "button", 1, "clr-combobox-remove-btn", 3, "click", "disabled"], ["shape", "window-close", "size", "12"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["role", "dialog"]],
  template: function ClrCombobox_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = ɵɵgetCurrentView();
      ɵɵprojectionDef();
      ɵɵelementStart(0, "div", 2);
      ɵɵlistener("click", function ClrCombobox_Template_div_click_0_listener() {
        ɵɵrestoreView(_r1);
        return ɵɵresetView(ctx.focusInput());
      });
      ɵɵtemplate(1, ClrCombobox_span_1_Template, 2, 4, "span", 3);
      ɵɵelementStart(2, "span", 4)(3, "input", 5, 0);
      ɵɵtwoWayListener("ngModelChange", function ClrCombobox_Template_input_ngModelChange_3_listener($event) {
        ɵɵrestoreView(_r1);
        ɵɵtwoWayBindingSet(ctx.searchText, $event) || (ctx.searchText = $event);
        return ɵɵresetView($event);
      });
      ɵɵlistener("blur", function ClrCombobox_Template_input_blur_3_listener() {
        ɵɵrestoreView(_r1);
        return ɵɵresetView(ctx.onBlur());
      })("focus", function ClrCombobox_Template_input_focus_3_listener() {
        ɵɵrestoreView(_r1);
        return ɵɵresetView(ctx.onFocus());
      });
      ɵɵelementEnd()();
      ɵɵelementStart(5, "button", 6, 1);
      ɵɵelement(7, "cds-icon", 7);
      ɵɵelementEnd();
      ɵɵelement(8, "div", 8);
      ɵɵelementEnd();
      ɵɵtemplate(9, ClrCombobox_div_9_Template, 2, 0, "div", 9);
    }
    if (rf & 2) {
      ɵɵclassProp("multi", ctx.multiSelect)("invalid", ctx.invalid)("disabled", (ctx.control == null ? null : ctx.control.disabled) ? true : null);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.multiSelect && ctx.optionSelectionService.selectionModel.model);
      ɵɵadvance(2);
      ɵɵproperty("id", ctx.inputId());
      ɵɵtwoWayProperty("ngModel", ctx.searchText);
      ɵɵproperty("disabled", (ctx.control == null ? null : ctx.control.disabled) ? true : null);
      ɵɵattribute("aria-expanded", ctx.openState)("aria-owns", ctx.ariaOwns)("aria-invalid", (ctx.control == null ? null : ctx.control.invalid) ? true : null)("aria-activedescendant", ctx.getActiveDescendant())("placeholder", ctx.placeholder);
      ɵɵadvance(2);
      ɵɵproperty("disabled", (ctx.control == null ? null : ctx.control.disabled) || null);
      ɵɵattribute("aria-label", ctx.commonStrings.keys.comboboxOpen);
      ɵɵadvance(3);
      ɵɵclassProp("clr-focus", ctx.focused);
      ɵɵadvance();
      ɵɵproperty("clrPopoverContent", ctx.openState)("clrPopoverContentAt", ctx.smartPosition)("clrPopoverContentOutsideClickToClose", false)("clrPopoverContentScrollToClose", false);
    }
  },
  dependencies: [NgForOf, NgIf, NgTemplateOutlet, DefaultValueAccessor, NgControlStatus, NgModel, CdsIconCustomTag, ClrRovingTabindex, ClrKeyFocusItem, ClrPopoverAnchor, ClrPopoverOpenCloseButton, ClrPopoverContent],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrCombobox, [{
    type: Component,
    args: [{
      selector: "clr-combobox",
      providers: [OptionSelectionService, {
        provide: LoadingListener,
        useExisting: ClrCombobox
      }, IF_ACTIVE_ID_PROVIDER, FOCUS_SERVICE_PROVIDER, COMBOBOX_FOCUS_HANDLER_PROVIDER],
      hostDirectives: [ClrPopoverHostDirective],
      host: {
        "[class.aria-required]": "true",
        "[class.clr-combobox]": "true",
        "[class.clr-combobox-disabled]": "control?.disabled"
      },
      template: `<!--
* Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
* This software is released under MIT license.
* The full license information can be found in LICENSE in the root directory of this project.
-->

<!-- The (click) handler is needed to auto-focus on input field which can not currently occupy the whole
     width of the component, after being wrapped to a new line -->
<div
  class="clr-combobox-wrapper"
  clrPopoverAnchor
  (click)="focusInput()"
  [class.multi]="multiSelect"
  [class.invalid]="invalid"
  [class.disabled]="control?.disabled? true: null"
>
  <span
    *ngIf="multiSelect && optionSelectionService.selectionModel.model"
    role="grid"
    clrRovingTabindex
    [clrRovingTabindexDisabled]="control?.disabled"
    clrDirection="both"
    [attr.aria-label]="getSelectionAriaLabel()"
    [attr.aria-disabled]="control?.disabled? true: null"
  >
    <span *ngFor="let item of multiSelectModel; let i = index" class="label label-combobox-pill" role="row">
      <span role="gridcell">
        <span class="clr-combobox-pill-content" clrKeyFocusItem>
          <ng-container
            *ngIf="optionSelected"
            [ngTemplateOutlet]="optionSelected.template"
            [ngTemplateOutletContext]="{$implicit: optionSelectionService.selectionModel.model[i]}"
          ></ng-container>
        </span>
      </span>
      <span role="gridcell">
        <button
          clrKeyFocusItem
          type="button"
          class="clr-combobox-remove-btn"
          [disabled]="control?.disabled? true: null"
          [attr.aria-label]="commonStrings.keys.comboboxDelete + ' ' + optionSelectionService.selectionModel.toString(displayField, i)"
          (click)="unselect(item)"
        >
          <cds-icon shape="window-close" size="12"></cds-icon>
        </button>
      </span>
    </span>
  </span>

  <span class="clr-combobox-input-wrapper">
    <input
      #textboxInput
      type="text"
      role="combobox"
      [id]="inputId()"
      class="clr-input clr-combobox-input"
      [(ngModel)]="searchText"
      (blur)="onBlur()"
      (focus)="onFocus()"
      [attr.aria-expanded]="openState"
      [attr.aria-owns]="ariaOwns"
      aria-haspopup="listbox"
      aria-autocomplete="list"
      autocomplete="off"
      [attr.aria-invalid]="control?.invalid? true: null"
      [disabled]="control?.disabled? true: null"
      [attr.aria-activedescendant]="getActiveDescendant()"
      [attr.placeholder]="placeholder"
    />
  </span>

  <!-- No click handler, as it uses the handler on the .clr-combobox-wrapper -->
  <button
    clrPopoverOpenCloseButton
    #trigger
    type="button"
    class="clr-combobox-trigger"
    tabindex="-1"
    [disabled]="control?.disabled || null"
    [attr.aria-label]="commonStrings.keys.comboboxOpen"
  >
    <cds-icon shape="angle" direction="down"></cds-icon>
  </button>

  <div class="clr-focus-indicator" [class.clr-focus]="focused"></div>
</div>

<!-- Both close handlers are handled manually due to issues in Edge browser.
     Additionally 'outsideClickToClose' has complex handling that's necessary
     to be manual due to the component architecture -->
<div role="dialog" *clrPopoverContent="openState at smartPosition; outsideClickToClose: false; scrollToClose: false">
  <ng-content></ng-content>
</div>
`
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }, {
      type: Injector
    }, {
      type: NgControl,
      decorators: [{
        type: Self
      }, {
        type: Optional
      }]
    }, {
      type: Renderer2
    }, {
      type: ElementRef
    }, {
      type: OptionSelectionService
    }, {
      type: ClrCommonStringsService
    }, {
      type: ClrPopoverToggleService
    }, {
      type: ClrPopoverPositionService
    }, {
      type: IfControlStateService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ComboboxContainerService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }, {
      type: ComboboxFocusHandler
    }, {
      type: ChangeDetectorRef
    }];
  }, {
    placeholder: [{
      type: Input,
      args: ["placeholder"]
    }],
    clrInputChange: [{
      type: Output,
      args: ["clrInputChange"]
    }],
    clrOpenChange: [{
      type: Output,
      args: ["clrOpenChange"]
    }],
    clrSelectionChange: [{
      type: Output,
      args: ["clrSelectionChange"]
    }],
    textbox: [{
      type: ViewChild,
      args: ["textboxInput"]
    }],
    trigger: [{
      type: ViewChild,
      args: ["trigger"]
    }],
    optionSelected: [{
      type: ContentChild,
      args: [ClrOptionSelected]
    }],
    options: [{
      type: ContentChild,
      args: [ClrOptions]
    }],
    multiSelect: [{
      type: Input,
      args: ["clrMulti"]
    }],
    onKeyUp: [{
      type: HostListener,
      args: ["keydown", ["$event"]]
    }]
  });
})();
var ClrOptionItems = class {
  constructor(template, differs, optionService, positionService, vcr) {
    this.template = template;
    this.differs = differs;
    this.optionService = optionService;
    this.positionService = positionService;
    this.vcr = vcr;
    this.subscriptions = [];
    this.filter = "";
    this.differ = null;
    this.iterableProxy = new NgForOf(this.vcr, this.template, this.differs);
    this.subscriptions.push(optionService.inputChanged.subscribe((filter3) => {
      this.filter = filter3;
      this.updateItems();
    }));
  }
  set rawItems(items) {
    this._rawItems = items ? items : [];
    this.updateItems();
  }
  set trackBy(value) {
    this.iterableProxy.ngForTrackBy = value;
  }
  set field(field) {
    this._filterField = field;
    this.optionService.displayField = field;
  }
  ngDoCheck() {
    if (!this.differ) {
      this.differ = this.differs.find(this.filteredItems).create(this.iterableProxy.ngForTrackBy);
    }
    if (this.differ) {
      const changes = this.differ.diff(this.filteredItems);
      if (changes) {
        this.iterableProxy.ngDoCheck();
        this.positionService.realign();
      }
    }
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  updateItems() {
    if (!this._rawItems || this.filter === void 0 || this.filter === null) {
      return;
    }
    const normalizedFilterValue = normalizeValue(this.filter);
    if (this.optionService.showAllOptions) {
      this.filteredItems = this._rawItems;
    } else if (this._filterField) {
      this.filteredItems = this._rawItems.filter((item) => {
        const objValue = item[this._filterField];
        return objValue ? normalizeValue(objValue).includes(normalizedFilterValue) : false;
      });
    } else {
      this.filteredItems = this._rawItems.filter((item) => {
        if (typeof item !== "object") {
          return normalizeValue(item).includes(normalizedFilterValue);
        }
        const objValues = Object.values(item).filter((value) => {
          return value !== null && value !== void 0 ? normalizeValue(value).includes(normalizedFilterValue) : false;
        });
        return objValues.length > 0;
      });
    }
    this.iterableProxy.ngForOf = this.filteredItems;
  }
};
ClrOptionItems.ɵfac = function ClrOptionItems_Factory(t161) {
  return new (t161 || ClrOptionItems)(ɵɵdirectiveInject(TemplateRef), ɵɵdirectiveInject(IterableDiffers), ɵɵdirectiveInject(OptionSelectionService), ɵɵdirectiveInject(ClrPopoverPositionService), ɵɵdirectiveInject(ViewContainerRef));
};
ClrOptionItems.ɵdir = ɵɵdefineDirective({
  type: ClrOptionItems,
  selectors: [["", "clrOptionItems", "", "clrOptionItemsOf", ""]],
  inputs: {
    rawItems: [InputFlags.None, "clrOptionItemsOf", "rawItems"],
    trackBy: [InputFlags.None, "clrOptionItemsTrackBy", "trackBy"],
    field: [InputFlags.None, "clrOptionItemsField", "field"]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrOptionItems, [{
    type: Directive,
    args: [{
      selector: "[clrOptionItems][clrOptionItemsOf]"
    }]
  }], function() {
    return [{
      type: TemplateRef
    }, {
      type: IterableDiffers
    }, {
      type: OptionSelectionService
    }, {
      type: ClrPopoverPositionService
    }, {
      type: ViewContainerRef
    }];
  }, {
    rawItems: [{
      type: Input,
      args: ["clrOptionItemsOf"]
    }],
    trackBy: [{
      type: Input,
      args: ["clrOptionItemsTrackBy"]
    }],
    field: [{
      type: Input,
      args: ["clrOptionItemsField"]
    }]
  });
})();
function normalizeValue(value) {
  return value.toString().normalize("NFD").replace(new RegExp("\\p{Diacritic}", "gu"), "").toLowerCase();
}
var ClrComboboxModule = class {
  constructor() {
    r24.addIcons(e30, l7, o28, n30);
  }
};
ClrComboboxModule.ɵfac = function ClrComboboxModule_Factory(t161) {
  return new (t161 || ClrComboboxModule)();
};
ClrComboboxModule.ɵmod = ɵɵdefineNgModule({
  type: ClrComboboxModule,
  declarations: [ClrCombobox, ClrComboboxContainer, ClrOptions, ClrOption, ClrOptionSelected, ClrOptionItems],
  imports: [CommonModule, FormsModule, ClrIconModule, ClrKeyFocusModule, ClrCommonFormsModule, ClrConditionalModule, ClrPopoverModuleNext, ClrSpinnerModule],
  exports: [ClrCommonFormsModule, ClrCombobox, ClrComboboxContainer, ClrOptions, ClrOption, ClrOptionSelected, ClrConditionalModule, ClrOptionItems]
});
ClrComboboxModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, FormsModule, ClrIconModule, ClrKeyFocusModule, ClrCommonFormsModule, ClrConditionalModule, ClrPopoverModuleNext, ClrSpinnerModule, ClrCommonFormsModule, ClrConditionalModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrComboboxModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, ClrIconModule, ClrKeyFocusModule, ClrCommonFormsModule, ClrConditionalModule, ClrPopoverModuleNext, ClrSpinnerModule],
      declarations: [ClrCombobox, ClrComboboxContainer, ClrOptions, ClrOption, ClrOptionSelected, ClrOptionItems],
      exports: [ClrCommonFormsModule, ClrCombobox, ClrComboboxContainer, ClrOptions, ClrOption, ClrOptionSelected, ClrConditionalModule, ClrOptionItems]
    }]
  }], function() {
    return [];
  }, null);
})();
var ClrInputContainer = class extends ClrAbstractContainer {
};
ClrInputContainer.ɵfac = /* @__PURE__ */ (() => {
  let ɵClrInputContainer_BaseFactory;
  return function ClrInputContainer_Factory(t161) {
    return (ɵClrInputContainer_BaseFactory || (ɵClrInputContainer_BaseFactory = ɵɵgetInheritedFactory(ClrInputContainer)))(t161 || ClrInputContainer);
  };
})();
ClrInputContainer.ɵcmp = ɵɵdefineComponent({
  type: ClrInputContainer,
  selectors: [["clr-input-container"]],
  hostVars: 6,
  hostBindings: function ClrInputContainer_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-form-control", true)("clr-form-control-disabled", ctx.control == null ? null : ctx.control.disabled)("clr-row", ctx.addGrid());
    }
  },
  features: [ɵɵProvidersFeature([IfControlStateService, NgControlService, ControlIdService, ControlClassService]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c24,
  decls: 10,
  vars: 7,
  consts: [[4, "ngIf"], [1, "clr-control-container", 3, "ngClass"], [1, "clr-input-wrapper"], ["class", "clr-validate-icon", "shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 4, "ngIf"], ["class", "clr-validate-icon", "shape", "check-circle", "status", "success", "aria-hidden", "true", 4, "ngIf"], ["shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 1, "clr-validate-icon"], ["shape", "check-circle", "status", "success", "aria-hidden", "true", 1, "clr-validate-icon"]],
  template: function ClrInputContainer_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c23);
      ɵɵprojection(0);
      ɵɵtemplate(1, ClrInputContainer_label_1_Template, 1, 0, "label", 0);
      ɵɵelementStart(2, "div", 1)(3, "div", 2);
      ɵɵprojection(4, 1);
      ɵɵtemplate(5, ClrInputContainer_cds_icon_5_Template, 1, 0, "cds-icon", 3)(6, ClrInputContainer_cds_icon_6_Template, 1, 0, "cds-icon", 4);
      ɵɵelementEnd();
      ɵɵtemplate(7, ClrInputContainer_ng_content_7_Template, 1, 0, "ng-content", 0)(8, ClrInputContainer_ng_content_8_Template, 1, 0, "ng-content", 0)(9, ClrInputContainer_ng_content_9_Template, 1, 0, "ng-content", 0);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.label && ctx.addGrid());
      ɵɵadvance();
      ɵɵproperty("ngClass", ctx.controlClass());
      ɵɵadvance(3);
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showHelper);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
    }
  },
  dependencies: [NgClass, NgIf, CdsIconCustomTag, ClrLabel],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrInputContainer, [{
    type: Component,
    args: [{
      selector: "clr-input-container",
      template: `
    <ng-content select="label"></ng-content>
    <label *ngIf="!label && addGrid()"></label>
    <div class="clr-control-container" [ngClass]="controlClass()">
      <div class="clr-input-wrapper">
        <ng-content select="[clrInput]"></ng-content>
        <cds-icon
          *ngIf="showInvalid"
          class="clr-validate-icon"
          shape="exclamation-circle"
          status="danger"
          aria-hidden="true"
        ></cds-icon>
        <cds-icon
          *ngIf="showValid"
          class="clr-validate-icon"
          shape="check-circle"
          status="success"
          aria-hidden="true"
        ></cds-icon>
      </div>
      <ng-content select="clr-control-helper" *ngIf="showHelper"></ng-content>
      <ng-content select="clr-control-error" *ngIf="showInvalid"></ng-content>
      <ng-content select="clr-control-success" *ngIf="showValid"></ng-content>
    </div>
  `,
      host: {
        "[class.clr-form-control]": "true",
        "[class.clr-form-control-disabled]": "control?.disabled",
        "[class.clr-row]": "addGrid()"
      },
      providers: [IfControlStateService, NgControlService, ControlIdService, ControlClassService]
    }]
  }], null, null);
})();
var ClrInput = class extends WrappedFormControl {
  constructor(vcr, injector, control, renderer, el) {
    super(vcr, ClrInputContainer, injector, control, renderer, el);
    this.index = 1;
  }
};
ClrInput.ɵfac = function ClrInput_Factory(t161) {
  return new (t161 || ClrInput)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef));
};
ClrInput.ɵdir = ɵɵdefineDirective({
  type: ClrInput,
  selectors: [["", "clrInput", ""]],
  hostVars: 2,
  hostBindings: function ClrInput_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-input", true);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrInput, [{
    type: Directive,
    args: [{
      selector: "[clrInput]",
      host: {
        "[class.clr-input]": "true"
      }
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }, {
      type: Injector
    }, {
      type: NgControl,
      decorators: [{
        type: Self
      }, {
        type: Optional
      }]
    }, {
      type: Renderer2
    }, {
      type: ElementRef
    }];
  }, null);
})();
var ClrInputModule = class {
  constructor() {
    r24.addIcons(
      e30,
      l7
      // caret
    );
  }
};
ClrInputModule.ɵfac = function ClrInputModule_Factory(t161) {
  return new (t161 || ClrInputModule)();
};
ClrInputModule.ɵmod = ɵɵdefineNgModule({
  type: ClrInputModule,
  declarations: [ClrInput, ClrInputContainer],
  imports: [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule],
  exports: [ClrCommonFormsModule, ClrInput, ClrInputContainer]
});
ClrInputModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule, ClrCommonFormsModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrInputModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule],
      declarations: [ClrInput, ClrInputContainer],
      exports: [ClrCommonFormsModule, ClrInput, ClrInputContainer]
    }]
  }], function() {
    return [];
  }, null);
})();
var counter = 0;
var DatalistIdService = class {
  constructor() {
    this._id = "clr-datalist-" + ++counter;
    this._idChange = new BehaviorSubject(this._id);
  }
  get id() {
    return this._id;
  }
  set id(value) {
    this._id = value;
    this._idChange.next(value);
  }
  get idChange() {
    return this._idChange.asObservable();
  }
};
DatalistIdService.ɵfac = function DatalistIdService_Factory(t161) {
  return new (t161 || DatalistIdService)();
};
DatalistIdService.ɵprov = ɵɵdefineInjectable({
  token: DatalistIdService,
  factory: DatalistIdService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatalistIdService, [{
    type: Injectable
  }], null, null);
})();
var ClrDatalist = class {
  constructor(datalistIdService) {
    this.datalistIdService = datalistIdService;
    this.subscriptions = [];
  }
  set id(idValue) {
    if (!!idValue && this.datalistIdService) {
      this.datalistId = idValue;
      this.datalistIdService.id = idValue;
    } else if (idValue) {
      this.datalistId = idValue;
    }
  }
  ngAfterContentInit() {
    if (!this.datalistIdService) {
      return;
    }
    this.subscriptions.push(this.datalistIdService.idChange.subscribe((id) => this.datalistId = id));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
};
ClrDatalist.ɵfac = function ClrDatalist_Factory(t161) {
  return new (t161 || ClrDatalist)(ɵɵdirectiveInject(DatalistIdService, 8));
};
ClrDatalist.ɵdir = ɵɵdefineDirective({
  type: ClrDatalist,
  selectors: [["datalist"]],
  hostVars: 1,
  hostBindings: function ClrDatalist_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵhostProperty("id", ctx.datalistId);
    }
  },
  inputs: {
    id: "id"
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatalist, [{
    type: Directive,
    args: [{
      selector: "datalist",
      host: {
        "[id]": "datalistId"
      }
    }]
  }], function() {
    return [{
      type: DatalistIdService,
      decorators: [{
        type: Optional
      }]
    }];
  }, {
    id: [{
      type: Input
    }]
  });
})();
var FocusService2 = class {
  constructor() {
    this._focused = new BehaviorSubject(false);
  }
  get focusChange() {
    return this._focused.asObservable();
  }
  set focused(state2) {
    this._focused.next(state2);
  }
};
FocusService2.ɵfac = function FocusService_Factory(t161) {
  return new (t161 || FocusService2)();
};
FocusService2.ɵprov = ɵɵdefineInjectable({
  token: FocusService2,
  factory: FocusService2.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FocusService2, [{
    type: Injectable
  }], null, null);
})();
var ClrDatalistContainer = class extends ClrAbstractContainer {
  constructor(controlClassService, layoutService, ngControlService, focusService, ifControlStateService) {
    super(ifControlStateService, layoutService, controlClassService, ngControlService);
    this.focusService = focusService;
    this.ifControlStateService = ifControlStateService;
    this.focus = false;
    this.subscriptions.push(this.focusService.focusChange.subscribe((state2) => this.focus = state2));
  }
};
ClrDatalistContainer.ɵfac = function ClrDatalistContainer_Factory(t161) {
  return new (t161 || ClrDatalistContainer)(ɵɵdirectiveInject(ControlClassService), ɵɵdirectiveInject(LayoutService, 8), ɵɵdirectiveInject(NgControlService), ɵɵdirectiveInject(FocusService2), ɵɵdirectiveInject(IfControlStateService));
};
ClrDatalistContainer.ɵcmp = ɵɵdefineComponent({
  type: ClrDatalistContainer,
  selectors: [["clr-datalist-container"]],
  hostVars: 6,
  hostBindings: function ClrDatalistContainer_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-form-control", true)("clr-form-control-disabled", ctx.control == null ? null : ctx.control.disabled)("clr-row", ctx.addGrid());
    }
  },
  features: [ɵɵProvidersFeature([ControlClassService, LayoutService, ControlIdService, FocusService2, NgControlService, DatalistIdService, IfControlStateService]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c26,
  decls: 13,
  vars: 9,
  consts: [[4, "ngIf"], [1, "clr-control-container", 3, "ngClass"], [1, "clr-input-wrapper"], [1, "clr-input-group"], ["shape", "angle", "direction", "down", 1, "clr-datalist-caret"], ["class", "clr-validate-icon", "shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 4, "ngIf"], ["class", "clr-validate-icon", "shape", "check-circle", "status", "success", "aria-hidden", "true", 4, "ngIf"], ["shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 1, "clr-validate-icon"], ["shape", "check-circle", "status", "success", "aria-hidden", "true", 1, "clr-validate-icon"]],
  template: function ClrDatalistContainer_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c25);
      ɵɵprojection(0);
      ɵɵtemplate(1, ClrDatalistContainer_label_1_Template, 1, 0, "label", 0);
      ɵɵelementStart(2, "div", 1)(3, "div", 2)(4, "div", 3);
      ɵɵprojection(5, 1);
      ɵɵprojection(6, 2);
      ɵɵelement(7, "cds-icon", 4);
      ɵɵelementEnd();
      ɵɵtemplate(8, ClrDatalistContainer_cds_icon_8_Template, 1, 0, "cds-icon", 5)(9, ClrDatalistContainer_cds_icon_9_Template, 1, 0, "cds-icon", 6);
      ɵɵelementEnd();
      ɵɵtemplate(10, ClrDatalistContainer_ng_content_10_Template, 1, 0, "ng-content", 0)(11, ClrDatalistContainer_ng_content_11_Template, 1, 0, "ng-content", 0)(12, ClrDatalistContainer_ng_content_12_Template, 1, 0, "ng-content", 0);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.label && ctx.addGrid());
      ɵɵadvance();
      ɵɵproperty("ngClass", ctx.controlClass());
      ɵɵadvance(2);
      ɵɵclassProp("clr-focus", ctx.focus);
      ɵɵadvance(4);
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showHelper);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
    }
  },
  dependencies: [NgClass, NgIf, ClrLabel, CdsIconCustomTag],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatalistContainer, [{
    type: Component,
    args: [{
      selector: "clr-datalist-container",
      template: `
    <ng-content select="label"></ng-content>
    <label *ngIf="!label && addGrid()"></label>
    <div class="clr-control-container" [ngClass]="controlClass()">
      <div class="clr-input-wrapper">
        <div class="clr-input-group" [class.clr-focus]="focus">
          <ng-content select="[clrDatalistInput]"></ng-content>
          <ng-content select="datalist"></ng-content>
          <cds-icon shape="angle" class="clr-datalist-caret" direction="down"></cds-icon>
        </div>
        <cds-icon
          *ngIf="showInvalid"
          class="clr-validate-icon"
          shape="exclamation-circle"
          status="danger"
          aria-hidden="true"
        ></cds-icon>
        <cds-icon
          *ngIf="showValid"
          class="clr-validate-icon"
          shape="check-circle"
          status="success"
          aria-hidden="true"
        ></cds-icon>
      </div>
      <ng-content select="clr-control-helper" *ngIf="showHelper"></ng-content>
      <ng-content select="clr-control-error" *ngIf="showInvalid"></ng-content>
      <ng-content select="clr-control-success" *ngIf="showValid"></ng-content>
    </div>
  `,
      host: {
        "[class.clr-form-control]": "true",
        "[class.clr-form-control-disabled]": "control?.disabled",
        "[class.clr-row]": "addGrid()"
      },
      providers: [ControlClassService, LayoutService, ControlIdService, FocusService2, NgControlService, DatalistIdService, IfControlStateService]
    }]
  }], function() {
    return [{
      type: ControlClassService
    }, {
      type: LayoutService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: NgControlService
    }, {
      type: FocusService2
    }, {
      type: IfControlStateService
    }];
  }, null);
})();
var ClrDatalistInput = class extends WrappedFormControl {
  constructor(focusService, vcr, injector, control, renderer, el, datalistIdService) {
    super(vcr, ClrDatalistContainer, injector, control, renderer, el);
    this.focusService = focusService;
    this.datalistIdService = datalistIdService;
    if (!this.focusService) {
      throw new Error("clrDatalist requires being wrapped in <clr-datalist-container>");
    }
  }
  ngAfterContentInit() {
    this.subscriptions.push(this.datalistIdService.idChange.subscribe((id) => this.listValue = id));
  }
  triggerFocus() {
    if (this.focusService) {
      this.focusService.focused = true;
    }
  }
  triggerValidation() {
    super.triggerValidation();
    if (this.focusService) {
      this.focusService.focused = false;
    }
  }
};
ClrDatalistInput.ɵfac = function ClrDatalistInput_Factory(t161) {
  return new (t161 || ClrDatalistInput)(ɵɵdirectiveInject(FocusService2, 8), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(DatalistIdService));
};
ClrDatalistInput.ɵdir = ɵɵdefineDirective({
  type: ClrDatalistInput,
  selectors: [["", "clrDatalistInput", ""]],
  hostVars: 3,
  hostBindings: function ClrDatalistInput_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("focus", function ClrDatalistInput_focus_HostBindingHandler() {
        return ctx.triggerFocus();
      })("blur", function ClrDatalistInput_blur_HostBindingHandler() {
        return ctx.triggerValidation();
      });
    }
    if (rf & 2) {
      ɵɵattribute("list", ctx.listValue);
      ɵɵclassProp("clr-input", true);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatalistInput, [{
    type: Directive,
    args: [{
      selector: "[clrDatalistInput]",
      host: {
        "[class.clr-input]": "true",
        "[attr.list]": "listValue"
      }
    }]
  }], function() {
    return [{
      type: FocusService2,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ViewContainerRef
    }, {
      type: Injector
    }, {
      type: NgControl,
      decorators: [{
        type: Self
      }, {
        type: Optional
      }]
    }, {
      type: Renderer2
    }, {
      type: ElementRef
    }, {
      type: DatalistIdService
    }];
  }, {
    triggerFocus: [{
      type: HostListener,
      args: ["focus"]
    }],
    triggerValidation: [{
      type: HostListener,
      args: ["blur"]
    }]
  });
})();
var ClrDatalistModule = class {
  constructor() {
    r24.addIcons(e30, l7);
  }
};
ClrDatalistModule.ɵfac = function ClrDatalistModule_Factory(t161) {
  return new (t161 || ClrDatalistModule)();
};
ClrDatalistModule.ɵmod = ɵɵdefineNgModule({
  type: ClrDatalistModule,
  declarations: [ClrDatalist, ClrDatalistInput, ClrDatalistContainer],
  imports: [CommonModule, ClrInputModule, ClrIconModule],
  exports: [ClrDatalist, ClrDatalistInput, ClrDatalistContainer]
});
ClrDatalistModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrInputModule, ClrIconModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatalistModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrInputModule, ClrIconModule],
      declarations: [ClrDatalist, ClrDatalistInput, ClrDatalistContainer],
      exports: [ClrDatalist, ClrDatalistInput, ClrDatalistContainer]
    }]
  }], function() {
    return [];
  }, null);
})();
var CdkTrapFocusModule_CdkTrapFocus = class extends CdkTrapFocus {
};
CdkTrapFocusModule_CdkTrapFocus.ɵfac = /* @__PURE__ */ (() => {
  let ɵCdkTrapFocusModule_CdkTrapFocus_BaseFactory;
  return function CdkTrapFocusModule_CdkTrapFocus_Factory(t161) {
    return (ɵCdkTrapFocusModule_CdkTrapFocus_BaseFactory || (ɵCdkTrapFocusModule_CdkTrapFocus_BaseFactory = ɵɵgetInheritedFactory(CdkTrapFocusModule_CdkTrapFocus)))(t161 || CdkTrapFocusModule_CdkTrapFocus);
  };
})();
CdkTrapFocusModule_CdkTrapFocus.ɵdir = ɵɵdefineDirective({
  type: CdkTrapFocusModule_CdkTrapFocus,
  selectors: [["", "cdkTrapFocus", ""]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkTrapFocusModule_CdkTrapFocus, [{
    type: Directive,
    args: [{
      selector: "[cdkTrapFocus]"
    }]
  }], null, null);
})();
var CdkTrapFocusModule = class {
};
CdkTrapFocusModule.ɵfac = function CdkTrapFocusModule_Factory(t161) {
  return new (t161 || CdkTrapFocusModule)();
};
CdkTrapFocusModule.ɵmod = ɵɵdefineNgModule({
  type: CdkTrapFocusModule,
  declarations: [CdkTrapFocusModule_CdkTrapFocus],
  exports: [CdkTrapFocusModule_CdkTrapFocus]
});
CdkTrapFocusModule.ɵinj = ɵɵdefineInjector({});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkTrapFocusModule, [{
    type: NgModule,
    args: [{
      declarations: [CdkTrapFocusModule_CdkTrapFocus],
      exports: [CdkTrapFocusModule_CdkTrapFocus]
    }]
  }], null, null);
})();
var DEFAULT_LOCALE_FORMAT = "dd/MM/y";
var LITTLE_ENDIAN_REGEX = /d+.+m+.+y+/i;
var MIDDLE_ENDIAN_REGEX = /m+.+d+.+y+/i;
var DELIMITER_REGEX = /d+|m+|y+/i;
var USER_INPUT_REGEX = /\d+/g;
var MOBILE_USERAGENT_REGEX = /Mobi/i;
var RTL_REGEX = /\u200f/g;
var YEAR = "YYYY";
var MONTH = "MM";
var DATE = "DD";
var LITTLE_ENDIAN = {
  name: "LITTLE_ENDIAN",
  format: [DATE, MONTH, YEAR]
};
var MIDDLE_ENDIAN = {
  name: "MIDDLE_ENDIAN",
  format: [MONTH, DATE, YEAR]
};
var BIG_ENDIAN = {
  name: "BIG_ENDIAN",
  format: [YEAR, MONTH, DATE]
};
var NO_OF_DAYS_IN_A_WEEK = 7;
var NO_OF_ROWS_IN_CALENDAR_VIEW = 6;
var TOTAL_DAYS_IN_DAYS_VIEW = NO_OF_DAYS_IN_A_WEEK * NO_OF_ROWS_IN_CALENDAR_VIEW;
function getNumberOfDaysInTheMonth(year, month) {
  return new Date(year, month + 1, 0).getDate();
}
function getDay(year, month, date) {
  return new Date(year, month, date).getDay();
}
function parseToFourDigitYear(year) {
  if (year > 9999 || year > 100 && year < 999 || year < 10) {
    return -1;
  }
  if (year > 999) {
    return year;
  }
  const currYear = (/* @__PURE__ */ new Date()).getFullYear();
  const century = Math.floor(currYear / 100) * 100;
  let result = year + century;
  if (result > currYear + 20) {
    result = result - 100;
  }
  return result;
}
function datesAreEqual(date1, date2) {
  if (date1 instanceof Date && date2 instanceof Date) {
    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();
  } else {
    return false;
  }
}
var DayViewModel = class {
  constructor(dayModel, isTodaysDate = false, isExcluded = false, isDisabled = false, isSelected = false, isFocusable = false) {
    this.dayModel = dayModel;
    this.isTodaysDate = isTodaysDate;
    this.isExcluded = isExcluded;
    this.isDisabled = isDisabled;
    this.isSelected = isSelected;
    this.isFocusable = isFocusable;
  }
  /**
   * Gets the tab index based on the isFocusable flag.
   */
  get tabIndex() {
    return this.isFocusable ? 0 : -1;
  }
};
var DayModel = class _DayModel {
  constructor(year, month, date) {
    this.year = year;
    this.month = month;
    this.date = date;
  }
  /**
   * Checks if the passed CalendarDate is equal to itself.
   */
  isEqual(day) {
    if (day) {
      return this.year === day.year && this.month === day.month && this.date === day.date;
    }
    return false;
  }
  toDate() {
    return new Date(this.year, this.month, this.date);
  }
  /**
   * Returns a new DayModel which is incremented based on the value passed.
   */
  incrementBy(value) {
    const date = new Date(this.year, this.month, this.date + value);
    return new _DayModel(date.getFullYear(), date.getMonth(), date.getDate());
  }
  /**
   * Clones the current day model.
   */
  clone() {
    return new _DayModel(this.year, this.month, this.date);
  }
  toComparisonString() {
    return `${this.year}${this.pad(this.month)}${this.pad(this.date)}`;
  }
  toDateString() {
    return this.toDate().toLocaleDateString(void 0, {
      weekday: "long",
      month: "long",
      day: "numeric",
      year: "numeric"
    });
  }
  pad(num) {
    return num < 10 ? `0${num}` : `${num}`;
  }
};
var CalendarViewModel = class {
  constructor(calendar, selectedDay, focusableDay, today, firstDayOfWeek, excludedDates) {
    this.calendar = calendar;
    this.selectedDay = selectedDay;
    this.focusableDay = focusableDay;
    this.today = today;
    this.firstDayOfWeek = firstDayOfWeek;
    this.excludedDates = excludedDates;
    this.currMonthDayViews = [];
    this.initializeCalendarView();
  }
  /**
   * DayViewModel matrix. Size 6x7
   */
  get calendarView() {
    return this._calendarView;
  }
  /**
   * Updates the focusable day in the calendar.
   */
  updateFocusableDay(day) {
    this.setFocusableFlag(this.focusableDay, false);
    this.setFocusableFlag(day, true);
    this.focusableDay = day;
  }
  /**
   * Generates a 6x7 matrix of DayViewModel based on the Calendar.
   * The 6x7 matrix is structured according to the first day of the week.
   * 6 rows to accommodate months which might have dates spanning over 6 weeks.
   * 7 columns because there are 7 days in a week :P :D
   */
  initializeCalendarView() {
    const prevMonthCalendar = this.calendar.previousMonth();
    const nextMonthCalendar = this.calendar.nextMonth();
    const daysFromPrevMonthInCalView = this.numDaysFromPrevMonthInCalView(this.calendar.year, this.calendar.month);
    const daysFromNextMonthInCalView = TOTAL_DAYS_IN_DAYS_VIEW - (this.calendar.days.length + daysFromPrevMonthInCalView);
    let prevMonthDayViews = [];
    let nextMonthDayViews = [];
    if (daysFromPrevMonthInCalView > 0) {
      prevMonthDayViews = this.generateDayViewModels(prevMonthCalendar.days.slice(-1 * daysFromPrevMonthInCalView), true, false);
    }
    this.currMonthDayViews = this.generateDayViewModels(this.calendar.days, false, true);
    if (daysFromNextMonthInCalView > 0) {
      nextMonthDayViews = this.generateDayViewModels(nextMonthCalendar.days.slice(0, daysFromNextMonthInCalView), true, false);
    }
    this._calendarView = this.generateCalendarView(prevMonthDayViews, this.currMonthDayViews, nextMonthDayViews);
    this.initializeSelectedDay();
    this.initializeFocusableDay();
  }
  isDateExcluded(date) {
    const {
      minDate,
      maxDate
    } = this.excludedDates;
    const from2 = minDate.toComparisonString();
    const to = maxDate.toComparisonString();
    const today = date.toComparisonString();
    return !(today >= from2 && today <= to);
  }
  /**
   * Generates a DayViewModel array based on the DayModel passed
   */
  generateDayViewModels(days, isExcluded, isCurrentCalendar) {
    const dayViews = days.map((day) => {
      return new DayViewModel(day, false, isExcluded, this.isDateExcluded(day), false, false);
    });
    if (isCurrentCalendar && this.calendar.isDayInCalendar(this.today)) {
      dayViews[this.today.date - 1].isTodaysDate = true;
    }
    return dayViews;
  }
  /**
   * Gets the first day of the current month to figure out how many dates of previous month
   * are needed to complete the Calendar View based on the first day of the week.
   * eg: Assuming locale en-US, the first day of the week is Sunday,
   * if first day of the current month lands on Wednesday, then
   * (this.getDay function would return 3 since
   * first day of the week is 0), we need the 3 days from the previous month.
   */
  numDaysFromPrevMonthInCalView(currentYear, currentMonth) {
    const firstDayOfCurrMonth = getDay(currentYear, currentMonth, 1);
    if (firstDayOfCurrMonth >= this.firstDayOfWeek) {
      return firstDayOfCurrMonth - this.firstDayOfWeek;
    } else {
      return NO_OF_DAYS_IN_A_WEEK + firstDayOfCurrMonth - this.firstDayOfWeek;
    }
  }
  /**
   * Checks if the Day passed is in the CalendarView.
   */
  isDayInCalendarView(day) {
    if (!this.calendar.isDayInCalendar(day)) {
      return false;
    }
    return true;
  }
  /**
   * Using the DayViewModels from the previous, current and next month, this function
   * generates the CalendarView.
   */
  generateCalendarView(prev, curr, next) {
    const combinationArr = [...prev, ...curr, ...next];
    const calendarView = [];
    for (let i35 = 0; i35 < NO_OF_ROWS_IN_CALENDAR_VIEW; i35++) {
      calendarView[i35] = combinationArr.slice(i35 * NO_OF_DAYS_IN_A_WEEK, (i35 + 1) * NO_OF_DAYS_IN_A_WEEK);
    }
    return calendarView;
  }
  /**
   * Initialize the selected day if the day is in the calendar.
   */
  initializeSelectedDay() {
    if (this.selectedDay && this.isDayInCalendarView(this.selectedDay)) {
      this.currMonthDayViews[this.selectedDay.date - 1].isSelected = true;
    }
  }
  /**
   * Initializes the focusable day if the day is in the calendar. If focusable day is not set, then
   * we check for the selected day. If selected day is not set then check if today is in the current
   * calendar. If not then just set the 15th of the current calendar month.
   */
  initializeFocusableDay() {
    if (this.focusableDay && this.isDayInCalendarView(this.focusableDay)) {
      this.setFocusableFlag(this.focusableDay, true);
    } else if (this.selectedDay && this.isDayInCalendarView(this.selectedDay)) {
      this.setFocusableFlag(this.selectedDay, true);
      this.focusableDay = this.selectedDay.clone();
    } else if (this.isDayInCalendarView(this.today)) {
      this.setFocusableFlag(this.today, true);
      this.focusableDay = this.today.clone();
    } else {
      this.focusableDay = new DayModel(this.calendar.year, this.calendar.month, 15);
      this.setFocusableFlag(this.focusableDay, true);
    }
  }
  setFocusableFlag(day, flag) {
    if (day) {
      this.currMonthDayViews[day.date - 1].isFocusable = flag;
    }
  }
};
var LocaleHelperService = class {
  constructor(locale) {
    this.locale = locale;
    this._firstDayOfWeek = 0;
    this.initializeLocaleData();
  }
  get firstDayOfWeek() {
    return this._firstDayOfWeek;
  }
  get localeDays() {
    return this._localeDays;
  }
  // leave for backward compatibility
  get localeDaysNarrow() {
    return this._localeDays.map((day) => day.narrow);
  }
  get localeMonthsAbbreviated() {
    return this._localeMonthsAbbreviated;
  }
  get localeMonthsWide() {
    return this._localeMonthsWide;
  }
  get localeDateFormat() {
    return this._localeDateFormat;
  }
  /**
   * Initializes the locale data.
   */
  initializeLocaleData() {
    this.initializeFirstDayOfWeek();
    this.initializeLocaleDateFormat();
    this.initializeLocaleMonthsAbbreviated();
    this.initializeLocaleMonthsWide();
    this.initializeLocaleDays();
  }
  /**
   * Initialize day names based on the locale.
   * eg: [{day: Sunday, narrow: S}, {day: Monday, narrow: M}...] for en-US.
   */
  initializeLocaleDays() {
    const tempArr = [];
    const tempWideArr = getLocaleDayNames(this.locale, FormStyle.Standalone, TranslationWidth.Wide).slice();
    const tempNarrowArr = getLocaleDayNames(this.locale, FormStyle.Standalone, TranslationWidth.Narrow).slice();
    const firstDayOfWeek = this.firstDayOfWeek;
    for (let i35 = 0; i35 < 7; i35++) {
      tempArr.push({
        day: tempWideArr[i35],
        narrow: tempNarrowArr[i35]
      });
    }
    if (firstDayOfWeek > 0) {
      const prevDays = tempArr.splice(0, firstDayOfWeek);
      tempArr.push(...prevDays);
    }
    this._localeDays = tempArr;
  }
  /**
   * Initializes the array of month names in the TranslationWidth.Abbreviated format.
   * e.g. `[Jan, Feb, ...]` for en-US
   */
  initializeLocaleMonthsAbbreviated() {
    this._localeMonthsAbbreviated = getLocaleMonthNames(this.locale, FormStyle.Standalone, TranslationWidth.Abbreviated).slice();
  }
  /**
   * Initializes the array of month names in the TranslationWidth.Wide format.
   * e.g. `[January, February, ...]` for en-US
   */
  initializeLocaleMonthsWide() {
    this._localeMonthsWide = getLocaleMonthNames(this.locale, FormStyle.Standalone, TranslationWidth.Wide).slice();
  }
  /**
   * Initializes the first day of the week based on the locale.
   */
  initializeFirstDayOfWeek() {
    this._firstDayOfWeek = getLocaleFirstDayOfWeek(this.locale);
  }
  initializeLocaleDateFormat() {
    this._localeDateFormat = getLocaleDateFormat(this.locale, FormatWidth.Short);
  }
};
LocaleHelperService.ɵfac = function LocaleHelperService_Factory(t161) {
  return new (t161 || LocaleHelperService)(ɵɵinject(LOCALE_ID));
};
LocaleHelperService.ɵprov = ɵɵdefineInjectable({
  token: LocaleHelperService,
  factory: LocaleHelperService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LocaleHelperService, [{
    type: Injectable
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [LOCALE_ID]
      }]
    }];
  }, null);
})();
var CalendarModel = class _CalendarModel {
  constructor(year, month) {
    this.year = year;
    this.month = month;
    this.initializeDaysInCalendar();
  }
  /**
   * Checks if the calendar passed is equal to the current calendar.
   */
  isEqual(calendar) {
    if (calendar) {
      return this.year === calendar.year && this.month === calendar.month;
    }
    return false;
  }
  /**
   * Checks if a DayModel is in the Calendar
   */
  isDayInCalendar(day) {
    if (day) {
      return this.year === day.year && this.month === day.month;
    }
    return false;
  }
  /**
   * Returns CalendarModel of the previous month.
   */
  previousMonth() {
    if (this.month === 0) {
      return new _CalendarModel(this.year - 1, 11);
    } else {
      return new _CalendarModel(this.year, this.month - 1);
    }
  }
  /**
   * Returns CalendarModel of the next month.
   */
  nextMonth() {
    if (this.month === 11) {
      return new _CalendarModel(this.year + 1, 0);
    } else {
      return new _CalendarModel(this.year, this.month + 1);
    }
  }
  /**
   * Populates the days array with the DayModels in the current Calendar.
   */
  initializeDaysInCalendar() {
    const noOfDaysInCalendar = getNumberOfDaysInTheMonth(this.year, this.month);
    this.days = Array(noOfDaysInCalendar).fill(null).map((_date, index) => {
      return new DayModel(this.year, this.month, index + 1);
    });
  }
};
var DateNavigationService = class {
  constructor() {
    this._todaysFullDate = /* @__PURE__ */ new Date();
    this._selectedDayChange = new Subject();
    this._displayedCalendarChange = new Subject();
    this._focusOnCalendarChange = new Subject();
    this._focusedDayChange = new Subject();
  }
  get today() {
    return this._today;
  }
  get displayedCalendar() {
    return this._displayedCalendar;
  }
  get selectedDayChange() {
    return this._selectedDayChange.asObservable();
  }
  /**
   * This observable lets the subscriber know that the displayed calendar has changed.
   */
  get displayedCalendarChange() {
    return this._displayedCalendarChange.asObservable();
  }
  /**
   * This observable lets the subscriber know that the focus should be applied on the calendar.
   */
  get focusOnCalendarChange() {
    return this._focusOnCalendarChange.asObservable();
  }
  /**
   * This observable lets the subscriber know that the focused day in the displayed calendar has changed.
   */
  get focusedDayChange() {
    return this._focusedDayChange.asObservable();
  }
  /**
   * Notifies that the selected day has changed so that the date can be emitted to the user.
   * Note: Only to be called from day.ts
   */
  notifySelectedDayChanged(dayModel) {
    this.selectedDay = dayModel;
    this._selectedDayChange.next(dayModel);
  }
  /**
   * Initializes the calendar based on the selected day.
   */
  initializeCalendar() {
    this.focusedDay = null;
    this.initializeTodaysDate();
    if (this.selectedDay) {
      this._displayedCalendar = new CalendarModel(this.selectedDay.year, this.selectedDay.month);
    } else {
      this._displayedCalendar = new CalendarModel(this.today.year, this.today.month);
    }
  }
  changeMonth(month) {
    this.setDisplayedCalendar(new CalendarModel(this._displayedCalendar.year, month));
  }
  changeYear(year) {
    this.setDisplayedCalendar(new CalendarModel(year, this._displayedCalendar.month));
  }
  /**
   * Moves the displayed calendar to the next month.
   */
  moveToNextMonth() {
    this.setDisplayedCalendar(this._displayedCalendar.nextMonth());
  }
  /**
   * Moves the displayed calendar to the previous month.
   */
  moveToPreviousMonth() {
    this.setDisplayedCalendar(this._displayedCalendar.previousMonth());
  }
  /**
   * Moves the displayed calendar to the current month and year.
   */
  moveToCurrentMonth() {
    if (!this.displayedCalendar.isDayInCalendar(this.today)) {
      this.setDisplayedCalendar(new CalendarModel(this.today.year, this.today.month));
    }
    this._focusOnCalendarChange.next();
  }
  incrementFocusDay(value) {
    this.focusedDay = this.focusedDay.incrementBy(value);
    if (this._displayedCalendar.isDayInCalendar(this.focusedDay)) {
      this._focusedDayChange.next(this.focusedDay);
    } else {
      this.setDisplayedCalendar(new CalendarModel(this.focusedDay.year, this.focusedDay.month));
    }
    this._focusOnCalendarChange.next();
  }
  // not a setter because i want this to remain private
  setDisplayedCalendar(value) {
    if (!this._displayedCalendar.isEqual(value)) {
      this._displayedCalendar = value;
      this._displayedCalendarChange.next();
    }
  }
  initializeTodaysDate() {
    this._todaysFullDate = /* @__PURE__ */ new Date();
    this._today = new DayModel(this._todaysFullDate.getFullYear(), this._todaysFullDate.getMonth(), this._todaysFullDate.getDate());
  }
};
DateNavigationService.ɵfac = function DateNavigationService_Factory(t161) {
  return new (t161 || DateNavigationService)();
};
DateNavigationService.ɵprov = ɵɵdefineInjectable({
  token: DateNavigationService,
  factory: DateNavigationService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DateNavigationService, [{
    type: Injectable
  }], null, null);
})();
var DatepickerFocusService = class {
  constructor(_ngZone, platformId) {
    this._ngZone = _ngZone;
    this.platformId = platformId;
  }
  focusCell(elRef) {
    this._ngZone.runOutsideAngular(() => {
      this.ngZoneIsStableInBrowser().subscribe(() => {
        const focusEl = elRef.nativeElement.querySelector('[tabindex="0"]');
        if (focusEl) {
          focusEl.focus();
        }
      });
    });
  }
  focusInput(element) {
    this._ngZone.runOutsideAngular(() => this.ngZoneIsStableInBrowser().subscribe(() => element.focus()));
  }
  elementIsFocused(element) {
    return isPlatformBrowser(this.platformId) && document.activeElement === element;
  }
  ngZoneIsStableInBrowser() {
    return this._ngZone.onStable.asObservable().pipe(first(), filter(() => isPlatformBrowser(this.platformId)));
  }
};
DatepickerFocusService.ɵfac = function DatepickerFocusService_Factory(t161) {
  return new (t161 || DatepickerFocusService)(ɵɵinject(NgZone), ɵɵinject(PLATFORM_ID));
};
DatepickerFocusService.ɵprov = ɵɵdefineInjectable({
  token: DatepickerFocusService,
  factory: DatepickerFocusService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatepickerFocusService, [{
    type: Injectable
  }], function() {
    return [{
      type: NgZone
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }];
  }, null);
})();
var DateIOService = class {
  constructor(_localeHelperService) {
    this._localeHelperService = _localeHelperService;
    this.disabledDates = {
      // This is the default range. It approximates the beginning of time to the end of time.
      // Unless a minDate or maxDate is set with the native HTML5 api the range is all dates
      // TODO: turn this into an Array of min/max ranges that allow configuration of multiple ranges.
      minDate: new DayModel(0, 0, 1),
      maxDate: new DayModel(9999, 11, 31)
    };
    this.cldrLocaleDateFormat = DEFAULT_LOCALE_FORMAT;
    this.localeDisplayFormat = LITTLE_ENDIAN;
    this.delimiters = ["/", "/"];
    this.cldrLocaleDateFormat = this._localeHelperService.localeDateFormat;
    this.initializeLocaleDisplayFormat();
  }
  get placeholderText() {
    const format = this.localeDisplayFormat.format;
    return format[0] + this.delimiters[0] + format[1] + this.delimiters[1] + format[2];
  }
  setMinDate(date) {
    if (!date) {
      this.disabledDates.minDate = new DayModel(0, 0, 1);
    } else {
      const [year, month, day] = date.split("-").map((n40) => parseInt(n40, 10));
      this.disabledDates.minDate = new DayModel(year, month - 1, day);
    }
  }
  setMaxDate(date) {
    if (!date) {
      this.disabledDates.maxDate = new DayModel(9999, 11, 31);
    } else {
      const [year, month, day] = date.split("-").map((n40) => parseInt(n40, 10));
      this.disabledDates.maxDate = new DayModel(year, month - 1, day);
    }
  }
  toLocaleDisplayFormatString(date) {
    if (date) {
      if (isNaN(date.getTime())) {
        return "";
      }
      const dateNo = date.getDate();
      const monthNo = date.getMonth() + 1;
      const dateStr = dateNo > 9 ? dateNo.toString() : "0" + dateNo;
      const monthStr = monthNo > 9 ? monthNo.toString() : "0" + monthNo;
      if (this.localeDisplayFormat === LITTLE_ENDIAN) {
        return dateStr + this.delimiters[0] + monthStr + this.delimiters[1] + date.getFullYear();
      } else if (this.localeDisplayFormat === MIDDLE_ENDIAN) {
        return monthStr + this.delimiters[0] + dateStr + this.delimiters[1] + date.getFullYear();
      } else {
        return date.getFullYear() + this.delimiters[0] + monthStr + this.delimiters[1] + dateStr;
      }
    }
    return "";
  }
  getDateValueFromDateString(date) {
    if (!date || typeof date !== "string") {
      return null;
    }
    const dateParts = date.match(USER_INPUT_REGEX);
    if (!dateParts || dateParts.length !== 3) {
      return null;
    }
    const [firstPart, secondPart, thirdPart] = dateParts;
    if (this.localeDisplayFormat === LITTLE_ENDIAN) {
      return this.validateAndGetDate(thirdPart, secondPart, firstPart);
    } else if (this.localeDisplayFormat === MIDDLE_ENDIAN) {
      return this.validateAndGetDate(thirdPart, firstPart, secondPart);
    } else {
      return this.validateAndGetDate(firstPart, secondPart, thirdPart);
    }
  }
  initializeLocaleDisplayFormat() {
    const format = this.cldrLocaleDateFormat.toLocaleLowerCase();
    if (LITTLE_ENDIAN_REGEX.test(format)) {
      this.localeDisplayFormat = LITTLE_ENDIAN;
    } else if (MIDDLE_ENDIAN_REGEX.test(format)) {
      this.localeDisplayFormat = MIDDLE_ENDIAN;
    } else {
      this.localeDisplayFormat = BIG_ENDIAN;
    }
    this.extractDelimiters();
  }
  extractDelimiters() {
    if (this.cldrLocaleDateFormat) {
      const localeFormat = this.cldrLocaleDateFormat.replace(RTL_REGEX, "");
      const delimiters = localeFormat.split(DELIMITER_REGEX);
      if (delimiters && delimiters.length === 4) {
        this.delimiters = [delimiters[1], delimiters[2]];
      } else {
        console.error("Unexpected date format received. Delimiters extracted: ", delimiters);
      }
    }
  }
  /**
   * Checks if the month entered by the user is valid or not.
   * Note: Month is 0 based.
   */
  isValidMonth(month) {
    return month > -1 && month < 12;
  }
  /**
   * Checks if the date is valid depending on the year and month provided.
   */
  isValidDate(year, month, date) {
    return date > 0 && date <= getNumberOfDaysInTheMonth(year, month);
  }
  /**
   * Validates the parameters provided and returns the date.
   * If the parameters are not
   * valid then return null.
   * NOTE: (Month here is 1 based since the user has provided that as an input)
   */
  validateAndGetDate(year, month, date) {
    const y6 = +year;
    const m8 = +month - 1;
    const d39 = +date;
    if (!this.isValidMonth(m8) || !this.isValidDate(y6, m8, d39)) {
      return null;
    }
    const result = parseToFourDigitYear(y6);
    return result !== -1 ? new Date(result, m8, d39) : null;
  }
};
DateIOService.ɵfac = function DateIOService_Factory(t161) {
  return new (t161 || DateIOService)(ɵɵinject(LocaleHelperService));
};
DateIOService.ɵprov = ɵɵdefineInjectable({
  token: DateIOService,
  factory: DateIOService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DateIOService, [{
    type: Injectable
  }], function() {
    return [{
      type: LocaleHelperService
    }];
  }, null);
})();
var DateFormControlService = class {
  constructor() {
    this._touchedChange = new Subject();
    this._dirtyChange = new Subject();
  }
  get touchedChange() {
    return this._touchedChange.asObservable();
  }
  get dirtyChange() {
    return this._dirtyChange.asObservable();
  }
  markAsTouched() {
    this._touchedChange.next();
  }
  markAsDirty() {
    this._dirtyChange.next();
  }
  // friendly wrapper
  setDisabled(state2) {
    this.disabled = state2;
  }
};
DateFormControlService.ɵfac = function DateFormControlService_Factory(t161) {
  return new (t161 || DateFormControlService)();
};
DateFormControlService.ɵprov = ɵɵdefineInjectable({
  token: DateFormControlService,
  factory: DateFormControlService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DateFormControlService, [{
    type: Injectable
  }], null, null);
})();
var ClrDay = class {
  constructor(_dateNavigationService, _toggleService, dateFormControlService, commonStrings) {
    this._dateNavigationService = _dateNavigationService;
    this._toggleService = _toggleService;
    this.dateFormControlService = dateFormControlService;
    this.commonStrings = commonStrings;
  }
  /**
   * DayViewModel input which is used to build the Day View.
   */
  get dayView() {
    return this._dayView;
  }
  set dayView(day) {
    this._dayView = day;
  }
  get dayString() {
    return this.dayView.isSelected ? this.commonStrings.parse(this.commonStrings.keys.datepickerSelectedLabel, {
      FULL_DATE: this._dayView.dayModel.toDateString()
    }) : this._dayView.dayModel.toDateString();
  }
  /**
   * Updates the focusedDay in the DateNavigationService when the ClrDay is focused.
   */
  onDayViewFocus() {
    this._dateNavigationService.focusedDay = this.dayView.dayModel;
  }
  /**
   * Updates the selectedDay when the ClrDay is selected and closes the datepicker popover.
   */
  selectDay() {
    const day = this.dayView.dayModel;
    this._dateNavigationService.notifySelectedDayChanged(day);
    this.dateFormControlService.markAsDirty();
    this._toggleService.open = false;
  }
};
ClrDay.ɵfac = function ClrDay_Factory(t161) {
  return new (t161 || ClrDay)(ɵɵdirectiveInject(DateNavigationService), ɵɵdirectiveInject(ClrPopoverToggleService), ɵɵdirectiveInject(DateFormControlService), ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrDay.ɵcmp = ɵɵdefineComponent({
  type: ClrDay,
  selectors: [["clr-day"]],
  hostVars: 2,
  hostBindings: function ClrDay_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("day", true);
    }
  },
  inputs: {
    dayView: [InputFlags.None, "clrDayView", "dayView"]
  },
  decls: 2,
  vars: 13,
  consts: [["type", "button", 1, "day-btn", 3, "click", "focus"]],
  template: function ClrDay_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "button", 0);
      ɵɵlistener("click", function ClrDay_Template_button_click_0_listener() {
        return ctx.selectDay();
      })("focus", function ClrDay_Template_button_focus_0_listener() {
        return ctx.onDayViewFocus();
      });
      ɵɵtext(1);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵclassProp("is-today", ctx.dayView.isTodaysDate)("is-excluded", ctx.dayView.isExcluded)("is-disabled", ctx.dayView.isDisabled)("is-selected", ctx.dayView.isSelected);
      ɵɵattribute("tabindex", ctx.dayView.tabIndex)("aria-current", ctx.dayView.isTodaysDate ? "date" : "false")("aria-label", ctx.dayString)("aria-selected", ctx.dayView.isSelected);
      ɵɵadvance();
      ɵɵtextInterpolate1(" ", ctx.dayView.dayModel.date, " ");
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDay, [{
    type: Component,
    args: [{
      selector: "clr-day",
      template: `
    <button
      class="day-btn"
      type="button"
      [class.is-today]="dayView.isTodaysDate"
      [class.is-excluded]="dayView.isExcluded"
      [class.is-disabled]="dayView.isDisabled"
      [class.is-selected]="dayView.isSelected"
      [attr.tabindex]="dayView.tabIndex"
      (click)="selectDay()"
      (focus)="onDayViewFocus()"
      [attr.aria-current]="dayView.isTodaysDate ? 'date' : 'false'"
      [attr.aria-label]="dayString"
      [attr.aria-selected]="dayView.isSelected"
    >
      {{ dayView.dayModel.date }}
    </button>
  `,
      host: {
        "[class.day]": "true"
      }
    }]
  }], function() {
    return [{
      type: DateNavigationService
    }, {
      type: ClrPopoverToggleService
    }, {
      type: DateFormControlService
    }, {
      type: ClrCommonStringsService
    }];
  }, {
    dayView: [{
      type: Input,
      args: ["clrDayView"]
    }]
  });
})();
var ClrCalendar = class {
  constructor(_localeHelperService, _dateNavigationService, _datepickerFocusService, _dateIOService, _elRef) {
    this._localeHelperService = _localeHelperService;
    this._dateNavigationService = _dateNavigationService;
    this._datepickerFocusService = _datepickerFocusService;
    this._dateIOService = _dateIOService;
    this._elRef = _elRef;
    this._subs = [];
    this.generateCalendarView();
    this.initializeSubscriptions();
  }
  /**
   * Gets the locale days according to the TranslationWidth.Narrow format.
   */
  get localeDays() {
    return this._localeHelperService.localeDays;
  }
  get calendar() {
    return this._dateNavigationService.displayedCalendar;
  }
  get selectedDay() {
    return this._dateNavigationService.selectedDay;
  }
  get focusedDay() {
    return this._dateNavigationService.focusedDay;
  }
  get today() {
    return this._dateNavigationService.today;
  }
  /**
   * Focuses on the focusable day when the Calendar View is initialized.
   */
  ngAfterViewInit() {
    this._datepickerFocusService.focusCell(this._elRef);
  }
  /**
   * Unsubscribe from subscriptions.
   */
  ngOnDestroy() {
    this._subs.forEach((sub) => sub.unsubscribe());
  }
  /**
   * Delegates Keyboard arrow navigation to the DateNavigationService.
   */
  onKeyDown(event) {
    if (event && this.focusedDay) {
      switch (normalizeKey(event.key)) {
        case Keys.ArrowUp:
          event.preventDefault();
          this._dateNavigationService.incrementFocusDay(-1 * NO_OF_DAYS_IN_A_WEEK);
          break;
        case Keys.ArrowDown:
          event.preventDefault();
          this._dateNavigationService.incrementFocusDay(NO_OF_DAYS_IN_A_WEEK);
          break;
        case Keys.ArrowLeft:
          event.preventDefault();
          this._dateNavigationService.incrementFocusDay(-1);
          break;
        case Keys.ArrowRight:
          event.preventDefault();
          this._dateNavigationService.incrementFocusDay(1);
          break;
        default:
          break;
      }
    }
  }
  /**
   * Initialize subscriptions to:
   * 1. update the calendar view model.
   * 2. update the focusable day in the calendar view model.
   * 3. focus on the focusable day in the calendar.
   */
  initializeSubscriptions() {
    this._subs.push(this._dateNavigationService.displayedCalendarChange.subscribe(() => {
      this.generateCalendarView();
    }));
    this._subs.push(this._dateNavigationService.focusedDayChange.subscribe((focusedDay) => {
      this.calendarViewModel.updateFocusableDay(focusedDay);
    }));
    this._subs.push(this._dateNavigationService.focusOnCalendarChange.subscribe(() => {
      this._datepickerFocusService.focusCell(this._elRef);
    }));
  }
  /**
   * Generates the Calendar View based on the calendar retrieved from the DateNavigationService.
   */
  generateCalendarView() {
    this.calendarViewModel = new CalendarViewModel(this.calendar, this.selectedDay, this.focusedDay, this.today, this._localeHelperService.firstDayOfWeek, this._dateIOService.disabledDates);
  }
};
ClrCalendar.ɵfac = function ClrCalendar_Factory(t161) {
  return new (t161 || ClrCalendar)(ɵɵdirectiveInject(LocaleHelperService), ɵɵdirectiveInject(DateNavigationService), ɵɵdirectiveInject(DatepickerFocusService), ɵɵdirectiveInject(DateIOService), ɵɵdirectiveInject(ElementRef));
};
ClrCalendar.ɵcmp = ɵɵdefineComponent({
  type: ClrCalendar,
  selectors: [["clr-calendar"]],
  hostBindings: function ClrCalendar_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("keydown", function ClrCalendar_keydown_HostBindingHandler($event) {
        return ctx.onKeyDown($event);
      });
    }
  },
  decls: 4,
  vars: 2,
  consts: [["role", "presentation", 1, "calendar-table"], [1, "calendar-row", "weekdays"], ["class", "calendar-cell weekday", 4, "ngFor", "ngForOf"], ["class", "calendar-row", 4, "ngFor", "ngForOf"], [1, "calendar-cell", "weekday"], [1, "calendar-row"], ["class", "calendar-cell", 4, "ngFor", "ngForOf"], [1, "calendar-cell"], ["aria-hidden", "true", 3, "clrDayView"]],
  template: function ClrCalendar_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "table", 0)(1, "tr", 1);
      ɵɵtemplate(2, ClrCalendar_th_2_Template, 3, 2, "th", 2);
      ɵɵelementEnd();
      ɵɵtemplate(3, ClrCalendar_tr_3_Template, 2, 1, "tr", 3);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance(2);
      ɵɵproperty("ngForOf", ctx.localeDays);
      ɵɵadvance();
      ɵɵproperty("ngForOf", ctx.calendarViewModel.calendarView);
    }
  },
  dependencies: [NgForOf, ClrDay],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrCalendar, [{
    type: Component,
    args: [{
      selector: "clr-calendar",
      template: '<table class="calendar-table" role="presentation">\n  <tr class="calendar-row weekdays">\n    <th *ngFor="let day of localeDays" class="calendar-cell weekday">\n      <span [attr.aria-label]="day.day">{{day.narrow}}</span>\n    </th>\n  </tr>\n  <tr class="calendar-row" *ngFor="let row of calendarViewModel.calendarView">\n    <td *ngFor="let dayView of row" class="calendar-cell">\n      <clr-day [clrDayView]="dayView" aria-hidden="true"></clr-day>\n    </td>\n  </tr>\n</table>\n'
    }]
  }], function() {
    return [{
      type: LocaleHelperService
    }, {
      type: DateNavigationService
    }, {
      type: DatepickerFocusService
    }, {
      type: DateIOService
    }, {
      type: ElementRef
    }];
  }, {
    onKeyDown: [{
      type: HostListener,
      args: ["keydown", ["$event"]]
    }]
  });
})();
var DATEPICKER_ENABLE_BREAKPOINT = 768;
var LARGE_BREAKPOINT = 992;
var DatepickerEnabledService = class {
  constructor(_document) {
    this._document = _document;
    this._isUserAgentMobile = false;
    if (this._document) {
      this._isUserAgentMobile = MOBILE_USERAGENT_REGEX.test(_document.defaultView.navigator.userAgent);
      this._innerWidth = _document.defaultView.innerWidth;
    }
  }
  /**
   * Returns if the calendar should be active or not.
   * If the user agent is mobile and the screen width is less than DATEPICKER_ACTIVE_BREAKPOINT
   * then the calendar is inactive.
   */
  get isEnabled() {
    if (this._document) {
      if (this._innerWidth < DATEPICKER_ENABLE_BREAKPOINT && this._isUserAgentMobile) {
        return false;
      }
    }
    return true;
  }
};
DatepickerEnabledService.ɵfac = function DatepickerEnabledService_Factory(t161) {
  return new (t161 || DatepickerEnabledService)(ɵɵinject(DOCUMENT));
};
DatepickerEnabledService.ɵprov = ɵɵdefineInjectable({
  token: DatepickerEnabledService,
  factory: DatepickerEnabledService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatepickerEnabledService, [{
    type: Injectable
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }];
  }, null);
})();
var ViewManagerService = class {
  constructor() {
    this.position = ClrPopoverPositions["bottom-left"];
    this._currentView = "DAYVIEW";
  }
  get isDayView() {
    return this._currentView === "DAYVIEW";
  }
  get isYearView() {
    return this._currentView === "YEARVIEW";
  }
  get isMonthView() {
    return this._currentView === "MONTHVIEW";
  }
  changeToMonthView() {
    this._currentView = "MONTHVIEW";
  }
  changeToYearView() {
    this._currentView = "YEARVIEW";
  }
  changeToDayView() {
    this._currentView = "DAYVIEW";
  }
};
ViewManagerService.ɵfac = function ViewManagerService_Factory(t161) {
  return new (t161 || ViewManagerService)();
};
ViewManagerService.ɵprov = ɵɵdefineInjectable({
  token: ViewManagerService,
  factory: ViewManagerService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ViewManagerService, [{
    type: Injectable
  }], null, null);
})();
var ClrMonthpicker = class {
  constructor(_viewManagerService, _localeHelperService, _dateNavigationService, _datepickerFocusService, _elRef) {
    this._viewManagerService = _viewManagerService;
    this._localeHelperService = _localeHelperService;
    this._dateNavigationService = _dateNavigationService;
    this._datepickerFocusService = _datepickerFocusService;
    this._elRef = _elRef;
    this._focusedMonthIndex = this.calendarMonthIndex;
  }
  /**
   * Gets the months array which is used to rendered the monthpicker view.
   * Months are in the TranslationWidth.Wide format.
   */
  get monthNames() {
    return this._localeHelperService.localeMonthsWide;
  }
  /**
   * Gets the month value of the Calendar.
   */
  get calendarMonthIndex() {
    return this._dateNavigationService.displayedCalendar.month;
  }
  /**
   * Focuses on the current calendar month when the View is initialized.
   */
  ngAfterViewInit() {
    this._datepickerFocusService.focusCell(this._elRef);
  }
  /**
   * Handles the Keyboard arrow navigation for the monthpicker.
   */
  onKeyDown(event) {
    if (event) {
      const key = normalizeKey(event.key);
      if (key === Keys.ArrowUp && this._focusedMonthIndex > 0) {
        event.preventDefault();
        this._focusedMonthIndex--;
        this._datepickerFocusService.focusCell(this._elRef);
      } else if (key === Keys.ArrowDown && this._focusedMonthIndex < 11) {
        event.preventDefault();
        this._focusedMonthIndex++;
        this._datepickerFocusService.focusCell(this._elRef);
      } else if (key === Keys.ArrowRight && this._focusedMonthIndex < 6) {
        event.preventDefault();
        this._focusedMonthIndex = this._focusedMonthIndex + 6;
        this._datepickerFocusService.focusCell(this._elRef);
      } else if (key === Keys.ArrowLeft && this._focusedMonthIndex > 5) {
        event.preventDefault();
        this._focusedMonthIndex = this._focusedMonthIndex - 6;
        this._datepickerFocusService.focusCell(this._elRef);
      }
    }
  }
  /**
   * Calls the DateNavigationService to update the month value of the calendar.
   * Also changes the view to the daypicker.
   */
  changeMonth(monthIndex) {
    this._dateNavigationService.changeMonth(monthIndex);
    this._viewManagerService.changeToDayView();
  }
  /**
   * Compares the month passed to the focused month and returns the tab index.
   */
  getTabIndex(monthIndex) {
    return monthIndex === this._focusedMonthIndex ? 0 : -1;
  }
};
ClrMonthpicker.ɵfac = function ClrMonthpicker_Factory(t161) {
  return new (t161 || ClrMonthpicker)(ɵɵdirectiveInject(ViewManagerService), ɵɵdirectiveInject(LocaleHelperService), ɵɵdirectiveInject(DateNavigationService), ɵɵdirectiveInject(DatepickerFocusService), ɵɵdirectiveInject(ElementRef));
};
ClrMonthpicker.ɵcmp = ɵɵdefineComponent({
  type: ClrMonthpicker,
  selectors: [["clr-monthpicker"]],
  hostVars: 2,
  hostBindings: function ClrMonthpicker_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("keydown", function ClrMonthpicker_keydown_HostBindingHandler($event) {
        return ctx.onKeyDown($event);
      });
    }
    if (rf & 2) {
      ɵɵclassProp("monthpicker", true);
    }
  },
  decls: 1,
  vars: 1,
  consts: [["type", "button", "class", "calendar-btn month", 3, "is-selected", "click", 4, "ngFor", "ngForOf"], ["type", "button", 1, "calendar-btn", "month", 3, "click"]],
  template: function ClrMonthpicker_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, ClrMonthpicker_button_0_Template, 2, 4, "button", 0);
    }
    if (rf & 2) {
      ɵɵproperty("ngForOf", ctx.monthNames);
    }
  },
  dependencies: [NgForOf],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrMonthpicker, [{
    type: Component,
    args: [{
      selector: "clr-monthpicker",
      template: `
    <button
      type="button"
      class="calendar-btn month"
      *ngFor="let month of monthNames; let monthIndex = index"
      (click)="changeMonth(monthIndex)"
      [class.is-selected]="monthIndex === calendarMonthIndex"
      [attr.tabindex]="getTabIndex(monthIndex)"
    >
      {{ month }}
    </button>
  `,
      host: {
        "[class.monthpicker]": "true"
      }
    }]
  }], function() {
    return [{
      type: ViewManagerService
    }, {
      type: LocaleHelperService
    }, {
      type: DateNavigationService
    }, {
      type: DatepickerFocusService
    }, {
      type: ElementRef
    }];
  }, {
    onKeyDown: [{
      type: HostListener,
      args: ["keydown", ["$event"]]
    }]
  });
})();
var YEARS_TO_DISPLAY = 10;
var YearRangeModel = class _YearRangeModel {
  constructor(year) {
    this.year = year;
    this.yearRange = [];
    this.generateYearRange();
  }
  /**
   * Gets the number in the middle of the range.
   */
  get middleYear() {
    return this.yearRange[Math.floor(this.yearRange.length / 2)];
  }
  /**
   * Generates the YearRangeModel for the next decade.
   */
  nextDecade() {
    return new _YearRangeModel(this.year + 10);
  }
  /**
   * Generates the YearRangeModel for the previous decade.
   */
  previousDecade() {
    return new _YearRangeModel(this.year - 10);
  }
  /**
   * Generates the YearRangeModel for the current decade.
   */
  currentDecade() {
    return new _YearRangeModel((/* @__PURE__ */ new Date()).getFullYear());
  }
  /**
   * Checks if the value is in the YearRangeModel.
   */
  inRange(value) {
    return this.yearRange.indexOf(value) > -1;
  }
  /**
   * Generates the year range based on the year parameter.
   * eg: If 2018 is passed the output will be [2010, 2011, ..., 2019]
   */
  generateYearRange() {
    const remainder = this.year % YEARS_TO_DISPLAY;
    const floor = this.year - remainder;
    const ceil = floor + YEARS_TO_DISPLAY;
    this.yearRange = this.generateRange(floor, ceil);
  }
  /**
   * Function which generate a range of numbers from floor to ceil.
   */
  generateRange(floor, ceil) {
    return Array.from({
      length: ceil - floor
    }, (_v, k4) => k4 + floor);
  }
};
var ClrYearpicker = class {
  constructor(_dateNavigationService, _viewManagerService, _datepickerFocusService, _elRef, commonStrings) {
    this._dateNavigationService = _dateNavigationService;
    this._viewManagerService = _viewManagerService;
    this._datepickerFocusService = _datepickerFocusService;
    this._elRef = _elRef;
    this.commonStrings = commonStrings;
    this.yearRangeModel = new YearRangeModel(this.calendarYear);
    this._focusedYear = this.calendarYear;
  }
  /**
   * Gets the year which the user is currently on.
   */
  get calendarYear() {
    return this._dateNavigationService.displayedCalendar.year;
  }
  /**
   * Focuses on the current calendar year when the View is initialized.
   */
  ngAfterViewInit() {
    this._datepickerFocusService.focusCell(this._elRef);
  }
  /**
   * Handles the Keyboard arrow navigation for the yearpicker.
   */
  onKeyDown(event) {
    if (event) {
      const key = normalizeKey(event.key);
      if (key === Keys.ArrowUp) {
        event.preventDefault();
        this.incrementFocusYearBy(-1);
      } else if (key === Keys.ArrowDown) {
        event.preventDefault();
        this.incrementFocusYearBy(1);
      } else if (key === Keys.ArrowRight) {
        event.preventDefault();
        this.incrementFocusYearBy(5);
      } else if (key === Keys.ArrowLeft) {
        event.preventDefault();
        this.incrementFocusYearBy(-5);
      }
    }
  }
  /**
   * Calls the DateNavigationService to update the year value of the calendar.
   * Also changes the view to the daypicker.
   */
  changeYear(year) {
    this._dateNavigationService.changeYear(year);
    this._viewManagerService.changeToDayView();
  }
  /**
   * Updates the YearRangeModel to the previous decade.
   */
  previousDecade() {
    this.yearRangeModel = this.yearRangeModel.previousDecade();
  }
  /**
   * Updates the YearRangeModel to the current decade.
   */
  currentDecade() {
    if (!this.yearRangeModel.inRange(this._dateNavigationService.today.year)) {
      this.yearRangeModel = this.yearRangeModel.currentDecade();
    }
    this._datepickerFocusService.focusCell(this._elRef);
  }
  /**
   * Updates the YearRangeModel to the next decade.
   */
  nextDecade() {
    this.yearRangeModel = this.yearRangeModel.nextDecade();
  }
  /**
   * Compares the year passed to the focused year and returns the tab index.
   */
  getTabIndex(year) {
    if (!this.yearRangeModel.inRange(this._focusedYear)) {
      if (this.yearRangeModel.inRange(this.calendarYear)) {
        this._focusedYear = this.calendarYear;
      } else {
        this._focusedYear = this.yearRangeModel.middleYear;
      }
    }
    return this._focusedYear === year ? 0 : -1;
  }
  /**
   * Increments the focus year by the value passed. Updates the YearRangeModel if the
   * new value is not in the current decade.
   */
  incrementFocusYearBy(value) {
    this._focusedYear = this._focusedYear + value;
    if (!this.yearRangeModel.inRange(this._focusedYear)) {
      if (value > 0) {
        this.yearRangeModel = this.yearRangeModel.nextDecade();
      } else {
        this.yearRangeModel = this.yearRangeModel.previousDecade();
      }
    }
    this._datepickerFocusService.focusCell(this._elRef);
  }
};
ClrYearpicker.ɵfac = function ClrYearpicker_Factory(t161) {
  return new (t161 || ClrYearpicker)(ɵɵdirectiveInject(DateNavigationService), ɵɵdirectiveInject(ViewManagerService), ɵɵdirectiveInject(DatepickerFocusService), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrYearpicker.ɵcmp = ɵɵdefineComponent({
  type: ClrYearpicker,
  selectors: [["clr-yearpicker"]],
  hostVars: 2,
  hostBindings: function ClrYearpicker_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("keydown", function ClrYearpicker_keydown_HostBindingHandler($event) {
        return ctx.onKeyDown($event);
      });
    }
    if (rf & 2) {
      ɵɵclassProp("yearpicker", true);
    }
  },
  decls: 9,
  vars: 7,
  consts: [[1, "year-switchers"], ["type", "button", 1, "calendar-btn", "switcher", 3, "click"], ["shape", "angle", "direction", "left"], ["shape", "event"], ["shape", "angle", "direction", "right"], [1, "years"], ["type", "button", "class", "calendar-btn year", 3, "is-selected", "click", 4, "ngFor", "ngForOf"], ["type", "button", 1, "calendar-btn", "year", 3, "click"]],
  template: function ClrYearpicker_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "div", 0)(1, "button", 1);
      ɵɵlistener("click", function ClrYearpicker_Template_button_click_1_listener() {
        return ctx.previousDecade();
      });
      ɵɵelement(2, "cds-icon", 2);
      ɵɵelementEnd();
      ɵɵelementStart(3, "button", 1);
      ɵɵlistener("click", function ClrYearpicker_Template_button_click_3_listener() {
        return ctx.currentDecade();
      });
      ɵɵelement(4, "cds-icon", 3);
      ɵɵelementEnd();
      ɵɵelementStart(5, "button", 1);
      ɵɵlistener("click", function ClrYearpicker_Template_button_click_5_listener() {
        return ctx.nextDecade();
      });
      ɵɵelement(6, "cds-icon", 4);
      ɵɵelementEnd()();
      ɵɵelementStart(7, "div", 5);
      ɵɵtemplate(8, ClrYearpicker_button_8_Template, 2, 4, "button", 6);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵattribute("aria-label", ctx.commonStrings.keys.datepickerPreviousDecade);
      ɵɵadvance();
      ɵɵattribute("title", ctx.commonStrings.keys.datepickerPreviousDecade);
      ɵɵadvance();
      ɵɵattribute("aria-label", ctx.commonStrings.keys.datepickerCurrentDecade);
      ɵɵadvance();
      ɵɵattribute("title", ctx.commonStrings.keys.datepickerCurrentDecade);
      ɵɵadvance();
      ɵɵattribute("aria-label", ctx.commonStrings.keys.datepickerNextDecade);
      ɵɵadvance();
      ɵɵattribute("title", ctx.commonStrings.keys.datepickerNextDecade);
      ɵɵadvance(2);
      ɵɵproperty("ngForOf", ctx.yearRangeModel.yearRange);
    }
  },
  dependencies: [NgForOf, CdsIconCustomTag],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrYearpicker, [{
    type: Component,
    args: [{
      selector: "clr-yearpicker",
      template: `
    <div class="year-switchers">
      <button
        class="calendar-btn switcher"
        type="button"
        (click)="previousDecade()"
        [attr.aria-label]="commonStrings.keys.datepickerPreviousDecade"
      >
        <cds-icon shape="angle" direction="left" [attr.title]="commonStrings.keys.datepickerPreviousDecade"></cds-icon>
      </button>
      <button
        class="calendar-btn switcher"
        type="button"
        (click)="currentDecade()"
        [attr.aria-label]="commonStrings.keys.datepickerCurrentDecade"
      >
        <cds-icon shape="event" [attr.title]="commonStrings.keys.datepickerCurrentDecade"></cds-icon>
      </button>
      <button
        class="calendar-btn switcher"
        type="button"
        (click)="nextDecade()"
        [attr.aria-label]="commonStrings.keys.datepickerNextDecade"
      >
        <cds-icon shape="angle" direction="right" [attr.title]="commonStrings.keys.datepickerNextDecade"></cds-icon>
      </button>
    </div>
    <div class="years">
      <button
        *ngFor="let year of yearRangeModel.yearRange"
        type="button"
        class="calendar-btn year"
        [attr.tabindex]="getTabIndex(year)"
        [class.is-selected]="year === calendarYear"
        (click)="changeYear(year)"
      >
        {{ year }}
      </button>
    </div>
  `,
      host: {
        "[class.yearpicker]": "true"
      }
    }]
  }], function() {
    return [{
      type: DateNavigationService
    }, {
      type: ViewManagerService
    }, {
      type: DatepickerFocusService
    }, {
      type: ElementRef
    }, {
      type: ClrCommonStringsService
    }];
  }, {
    onKeyDown: [{
      type: HostListener,
      args: ["keydown", ["$event"]]
    }]
  });
})();
var ClrDaypicker = class {
  constructor(_viewManagerService, _dateNavigationService, _localeHelperService, commonStrings) {
    this._viewManagerService = _viewManagerService;
    this._dateNavigationService = _dateNavigationService;
    this._localeHelperService = _localeHelperService;
    this.commonStrings = commonStrings;
  }
  get monthAttrString() {
    return this.commonStrings.parse(this.commonStrings.keys.datepickerSelectMonthText, {
      CALENDAR_MONTH: this.calendarMonth
    });
  }
  get yearAttrString() {
    return this.commonStrings.parse(this.commonStrings.keys.datepickerSelectYearText, {
      CALENDAR_YEAR: this.calendarYear.toString()
    });
  }
  /**
   * Returns the month value of the calendar in the TranslationWidth.Abbreviated format.
   */
  get calendarMonth() {
    return this._localeHelperService.localeMonthsAbbreviated[this._dateNavigationService.displayedCalendar.month];
  }
  /**
   * Returns the year value of the calendar.
   */
  get calendarYear() {
    return this._dateNavigationService.displayedCalendar.year;
  }
  /**
   * Calls the ViewManagerService to change to the monthpicker view.
   */
  changeToMonthView() {
    this._viewManagerService.changeToMonthView();
  }
  /**
   * Calls the ViewManagerService to change to the yearpicker view.
   */
  changeToYearView() {
    this._viewManagerService.changeToYearView();
  }
  /**
   * Calls the DateNavigationService to move to the next month.
   */
  nextMonth() {
    this._dateNavigationService.moveToNextMonth();
  }
  /**
   * Calls the DateNavigationService to move to the previous month.
   */
  previousMonth() {
    this._dateNavigationService.moveToPreviousMonth();
  }
  /**
   * Calls the DateNavigationService to move to the current month.
   */
  currentMonth() {
    this._dateNavigationService.moveToCurrentMonth();
  }
};
ClrDaypicker.ɵfac = function ClrDaypicker_Factory(t161) {
  return new (t161 || ClrDaypicker)(ɵɵdirectiveInject(ViewManagerService), ɵɵdirectiveInject(DateNavigationService), ɵɵdirectiveInject(LocaleHelperService), ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrDaypicker.ɵcmp = ɵɵdefineComponent({
  type: ClrDaypicker,
  selectors: [["clr-daypicker"]],
  hostVars: 2,
  hostBindings: function ClrDaypicker_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("daypicker", true);
    }
  },
  decls: 18,
  vars: 14,
  consts: [[1, "clr-sr-only"], [1, "calendar-header"], [1, "calendar-pickers"], ["type", "button", 1, "calendar-btn", "monthpicker-trigger", 3, "click"], ["type", "button", 1, "calendar-btn", "yearpicker-trigger", 3, "click"], [1, "calendar-switchers"], ["type", "button", 1, "calendar-btn", "switcher", 3, "click"], ["shape", "angle", "direction", "left"], ["shape", "event"], ["shape", "angle", "direction", "right"]],
  template: function ClrDaypicker_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "div", 0);
      ɵɵtext(1);
      ɵɵelementEnd();
      ɵɵelementStart(2, "div", 1)(3, "div", 2)(4, "button", 3);
      ɵɵlistener("click", function ClrDaypicker_Template_button_click_4_listener() {
        return ctx.changeToMonthView();
      });
      ɵɵtext(5);
      ɵɵelementEnd();
      ɵɵelementStart(6, "button", 4);
      ɵɵlistener("click", function ClrDaypicker_Template_button_click_6_listener() {
        return ctx.changeToYearView();
      });
      ɵɵtext(7);
      ɵɵelementEnd()();
      ɵɵelementStart(8, "div", 5)(9, "button", 6);
      ɵɵlistener("click", function ClrDaypicker_Template_button_click_9_listener() {
        return ctx.previousMonth();
      });
      ɵɵelement(10, "cds-icon", 7);
      ɵɵelementEnd();
      ɵɵelementStart(11, "button", 6);
      ɵɵlistener("click", function ClrDaypicker_Template_button_click_11_listener() {
        return ctx.currentMonth();
      });
      ɵɵelement(12, "cds-icon", 8);
      ɵɵelementEnd();
      ɵɵelementStart(13, "button", 6);
      ɵɵlistener("click", function ClrDaypicker_Template_button_click_13_listener() {
        return ctx.nextMonth();
      });
      ɵɵelement(14, "cds-icon", 9);
      ɵɵelementEnd()()();
      ɵɵelement(15, "clr-calendar");
      ɵɵelementStart(16, "div", 0);
      ɵɵtext(17);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵtextInterpolate(ctx.commonStrings.keys.modalContentStart);
      ɵɵadvance(3);
      ɵɵattribute("aria-label", ctx.monthAttrString)("title", ctx.monthAttrString);
      ɵɵadvance();
      ɵɵtextInterpolate1(" ", ctx.calendarMonth, " ");
      ɵɵadvance();
      ɵɵattribute("aria-label", ctx.yearAttrString)("title", ctx.yearAttrString);
      ɵɵadvance();
      ɵɵtextInterpolate1(" ", ctx.calendarYear, " ");
      ɵɵadvance(2);
      ɵɵattribute("aria-label", ctx.commonStrings.keys.datepickerPreviousMonth);
      ɵɵadvance();
      ɵɵattribute("title", ctx.commonStrings.keys.datepickerPreviousMonth);
      ɵɵadvance();
      ɵɵattribute("aria-label", ctx.commonStrings.keys.datepickerCurrentMonth);
      ɵɵadvance();
      ɵɵattribute("title", ctx.commonStrings.keys.datepickerCurrentMonth);
      ɵɵadvance();
      ɵɵattribute("aria-label", ctx.commonStrings.keys.datepickerNextMonth);
      ɵɵadvance();
      ɵɵattribute("title", ctx.commonStrings.keys.datepickerNextMonth);
      ɵɵadvance(3);
      ɵɵtextInterpolate(ctx.commonStrings.keys.modalContentEnd);
    }
  },
  dependencies: [CdsIconCustomTag, ClrCalendar],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDaypicker, [{
    type: Component,
    args: [{
      selector: "clr-daypicker",
      host: {
        "[class.daypicker]": "true"
      },
      template: '<div class="clr-sr-only">{{commonStrings.keys.modalContentStart}}</div>\n<div class="calendar-header">\n  <div class="calendar-pickers">\n    <button\n      class="calendar-btn monthpicker-trigger"\n      type="button"\n      (click)="changeToMonthView()"\n      [attr.aria-label]="monthAttrString"\n      [attr.title]="monthAttrString"\n    >\n      {{calendarMonth}}\n    </button>\n    <button\n      class="calendar-btn yearpicker-trigger"\n      type="button"\n      (click)="changeToYearView()"\n      [attr.aria-label]="yearAttrString"\n      [attr.title]="yearAttrString"\n    >\n      {{calendarYear}}\n    </button>\n  </div>\n  <div class="calendar-switchers">\n    <button\n      class="calendar-btn switcher"\n      type="button"\n      (click)="previousMonth()"\n      [attr.aria-label]="commonStrings.keys.datepickerPreviousMonth"\n    >\n      <cds-icon shape="angle" direction="left" [attr.title]="commonStrings.keys.datepickerPreviousMonth"></cds-icon>\n    </button>\n    <button\n      class="calendar-btn switcher"\n      type="button"\n      (click)="currentMonth()"\n      [attr.aria-label]="commonStrings.keys.datepickerCurrentMonth"\n    >\n      <cds-icon shape="event" [attr.title]="commonStrings.keys.datepickerCurrentMonth"></cds-icon>\n    </button>\n    <button\n      class="calendar-btn switcher"\n      type="button"\n      (click)="nextMonth()"\n      [attr.aria-label]="commonStrings.keys.datepickerNextMonth"\n    >\n      <cds-icon shape="angle" direction="right" [attr.title]="commonStrings.keys.datepickerNextMonth"></cds-icon>\n    </button>\n  </div>\n</div>\n<clr-calendar></clr-calendar>\n<div class="clr-sr-only">{{commonStrings.keys.modalContentEnd}}</div>\n'
    }]
  }], function() {
    return [{
      type: ViewManagerService
    }, {
      type: DateNavigationService
    }, {
      type: LocaleHelperService
    }, {
      type: ClrCommonStringsService
    }];
  }, null);
})();
var ClrDatepickerViewManager = class {
  constructor(commonStrings, viewManagerService) {
    this.commonStrings = commonStrings;
    this.viewManagerService = viewManagerService;
  }
  /**
   * Returns if the current view is the monthpicker.
   */
  get isMonthView() {
    return this.viewManagerService.isMonthView;
  }
  /**
   * Returns if the current view is the yearpicker.
   */
  get isYearView() {
    return this.viewManagerService.isYearView;
  }
  /**
   * Returns if the current view is the daypicker.
   */
  get isDayView() {
    return this.viewManagerService.isDayView;
  }
};
ClrDatepickerViewManager.ɵfac = function ClrDatepickerViewManager_Factory(t161) {
  return new (t161 || ClrDatepickerViewManager)(ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(ViewManagerService));
};
ClrDatepickerViewManager.ɵcmp = ɵɵdefineComponent({
  type: ClrDatepickerViewManager,
  selectors: [["clr-datepicker-view-manager"]],
  hostAttrs: ["role", "dialog"],
  hostVars: 4,
  hostBindings: function ClrDatepickerViewManager_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("aria-modal", true)("aria-label", ctx.commonStrings.keys.datepickerDialogLabel);
      ɵɵclassProp("datepicker", true);
    }
  },
  features: [ɵɵProvidersFeature([DatepickerFocusService])],
  decls: 3,
  vars: 3,
  consts: [[4, "ngIf"]],
  template: function ClrDatepickerViewManager_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, ClrDatepickerViewManager_clr_monthpicker_0_Template, 1, 0, "clr-monthpicker", 0)(1, ClrDatepickerViewManager_clr_yearpicker_1_Template, 1, 0, "clr-yearpicker", 0)(2, ClrDatepickerViewManager_clr_daypicker_2_Template, 1, 0, "clr-daypicker", 0);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.isMonthView);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.isYearView);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.isDayView);
    }
  },
  dependencies: [NgIf, ClrMonthpicker, ClrYearpicker, ClrDaypicker],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatepickerViewManager, [{
    type: Component,
    args: [{
      selector: "clr-datepicker-view-manager",
      providers: [DatepickerFocusService],
      host: {
        "[class.datepicker]": "true",
        "[attr.aria-modal]": "true",
        "[attr.aria-label]": "commonStrings.keys.datepickerDialogLabel",
        role: "dialog"
      },
      template: '<!--\n* Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n* This software is released under MIT license.\n* The full license information can be found in LICENSE in the root directory of this project.\n-->\n\n<clr-monthpicker *ngIf="isMonthView"></clr-monthpicker>\n<clr-yearpicker *ngIf="isYearView"></clr-yearpicker>\n<clr-daypicker *ngIf="isDayView"></clr-daypicker>\n'
    }]
  }], function() {
    return [{
      type: ClrCommonStringsService
    }, {
      type: ViewManagerService
    }];
  }, null);
})();
var ClrDateContainer = class extends ClrAbstractContainer {
  constructor(renderer, toggleService, dateNavigationService, datepickerEnabledService, dateFormControlService, dateIOService, commonStrings, focusService, viewManagerService, controlClassService, layoutService, ngControlService, ifControlStateService) {
    super(ifControlStateService, layoutService, controlClassService, ngControlService);
    this.renderer = renderer;
    this.toggleService = toggleService;
    this.dateNavigationService = dateNavigationService;
    this.datepickerEnabledService = datepickerEnabledService;
    this.dateFormControlService = dateFormControlService;
    this.dateIOService = dateIOService;
    this.commonStrings = commonStrings;
    this.focusService = focusService;
    this.viewManagerService = viewManagerService;
    this.controlClassService = controlClassService;
    this.layoutService = layoutService;
    this.ngControlService = ngControlService;
    this.ifControlStateService = ifControlStateService;
    this.focus = false;
    this.subscriptions.push(this.focusService.focusChange.subscribe((state2) => {
      this.focus = state2;
    }));
    this.subscriptions.push(this.toggleService.openChange.subscribe(() => {
      this.dateFormControlService.markAsTouched();
    }));
  }
  set clrPosition(position) {
    if (position && ClrPopoverPositions[position]) {
      this.viewManagerService.position = ClrPopoverPositions[position];
    }
  }
  set actionButton(button) {
    this.toggleButton = button;
  }
  get popoverPosition() {
    return this.viewManagerService.position;
  }
  get open() {
    return this.toggleService.open;
  }
  /**
   * Returns if the Datepicker is enabled or not. If disabled, hides the datepicker trigger.
   */
  get isEnabled() {
    return this.datepickerEnabledService.isEnabled;
  }
  /**
   * Return if Datepicker is diabled or not as Form Control
   */
  get isInputDateDisabled() {
    return this.control && this.control.disabled || this.dateFormControlService && this.dateFormControlService.disabled;
  }
  ngAfterViewInit() {
    this.subscriptions.push(this.toggleService.openChange.subscribe((open) => {
      if (open) {
        this.initializeCalendar();
      } else {
        this.toggleButton.nativeElement.focus();
      }
    }));
    this.subscriptions.push(this.listenForDateChanges());
  }
  /**
   * Return the label for the toggle button.
   * If there's a selected date, the date is included in the label.
   */
  getToggleButtonLabel(day) {
    if (day) {
      const formattedDate = this.dateIOService.toLocaleDisplayFormatString(day.toDate());
      return this.commonStrings.parse(this.commonStrings.keys.datepickerToggleChangeDateLabel, {
        SELECTED_DATE: formattedDate
      });
    }
    return this.commonStrings.keys.datepickerToggleChooseDateLabel;
  }
  listenForDateChanges() {
    return this.dateNavigationService.selectedDayChange.pipe(startWith(this.dateNavigationService.selectedDay)).subscribe((day) => {
      if (this.isEnabled) {
        const label = this.getToggleButtonLabel(day);
        const toggleEl = this.toggleButton.nativeElement;
        this.renderer.setAttribute(toggleEl, "aria-label", label);
        this.renderer.setAttribute(toggleEl, "title", label);
      }
    });
  }
  /**
   * Processes the user input and Initializes the Calendar everytime the datepicker popover is open.
   */
  initializeCalendar() {
    this.dateNavigationService.initializeCalendar();
  }
};
ClrDateContainer.ɵfac = function ClrDateContainer_Factory(t161) {
  return new (t161 || ClrDateContainer)(ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ClrPopoverToggleService), ɵɵdirectiveInject(DateNavigationService), ɵɵdirectiveInject(DatepickerEnabledService), ɵɵdirectiveInject(DateFormControlService), ɵɵdirectiveInject(DateIOService), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(FocusService2), ɵɵdirectiveInject(ViewManagerService), ɵɵdirectiveInject(ControlClassService), ɵɵdirectiveInject(LayoutService, 8), ɵɵdirectiveInject(NgControlService), ɵɵdirectiveInject(IfControlStateService));
};
ClrDateContainer.ɵcmp = ɵɵdefineComponent({
  type: ClrDateContainer,
  selectors: [["clr-date-container"]],
  viewQuery: function ClrDateContainer_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c27, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.actionButton = _t.first);
    }
  },
  hostVars: 8,
  hostBindings: function ClrDateContainer_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-date-container", true)("clr-form-control-disabled", ctx.isInputDateDisabled)("clr-form-control", true)("clr-row", ctx.addGrid());
    }
  },
  inputs: {
    clrPosition: "clrPosition"
  },
  features: [ɵɵProvidersFeature([ControlIdService, LocaleHelperService, ControlClassService, FocusService2, NgControlService, DateIOService, DateNavigationService, DatepickerEnabledService, DateFormControlService, ViewManagerService, IfControlStateService]), ɵɵHostDirectivesFeature([ClrPopoverHostDirective]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c29,
  decls: 13,
  vars: 14,
  consts: [["actionButton", ""], [4, "ngIf"], [1, "clr-control-container", 3, "ngClass"], ["clrPopoverAnchor", "", 1, "clr-input-wrapper"], [1, "clr-input-group"], ["type", "button", "clrPopoverOpenCloseButton", "", "class", "clr-input-group-icon-action", 3, "disabled", 4, "ngIf"], ["cdkTrapFocus", "", 4, "clrPopoverContent", "clrPopoverContentAt", "clrPopoverContentOutsideClickToClose", "clrPopoverContentScrollToClose"], ["class", "clr-validate-icon", "shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 4, "ngIf"], ["class", "clr-validate-icon", "shape", "check-circle", "status", "success", "aria-hidden", "true", 4, "ngIf"], ["type", "button", "clrPopoverOpenCloseButton", "", 1, "clr-input-group-icon-action", 3, "disabled"], ["status", "info", "shape", "calendar"], ["cdkTrapFocus", ""], ["shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 1, "clr-validate-icon"], ["shape", "check-circle", "status", "success", "aria-hidden", "true", 1, "clr-validate-icon"]],
  template: function ClrDateContainer_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c28);
      ɵɵprojection(0);
      ɵɵtemplate(1, ClrDateContainer_label_1_Template, 1, 0, "label", 1);
      ɵɵelementStart(2, "div", 2)(3, "div", 3)(4, "div", 4);
      ɵɵprojection(5, 1);
      ɵɵtemplate(6, ClrDateContainer_button_6_Template, 3, 1, "button", 5)(7, ClrDateContainer_clr_datepicker_view_manager_7_Template, 1, 0, "clr-datepicker-view-manager", 6);
      ɵɵelementEnd();
      ɵɵtemplate(8, ClrDateContainer_cds_icon_8_Template, 1, 0, "cds-icon", 7)(9, ClrDateContainer_cds_icon_9_Template, 1, 0, "cds-icon", 8);
      ɵɵelementEnd();
      ɵɵtemplate(10, ClrDateContainer_ng_content_10_Template, 1, 0, "ng-content", 1)(11, ClrDateContainer_ng_content_11_Template, 1, 0, "ng-content", 1)(12, ClrDateContainer_ng_content_12_Template, 1, 0, "ng-content", 1);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.label && ctx.addGrid());
      ɵɵadvance();
      ɵɵproperty("ngClass", ctx.controlClass());
      ɵɵadvance(2);
      ɵɵclassProp("clr-focus", ctx.focus);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.isEnabled);
      ɵɵadvance();
      ɵɵproperty("clrPopoverContent", ctx.open)("clrPopoverContentAt", ctx.popoverPosition)("clrPopoverContentOutsideClickToClose", true)("clrPopoverContentScrollToClose", true);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showHelper);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
    }
  },
  dependencies: [NgClass, NgIf, CdkTrapFocusModule_CdkTrapFocus, ClrPopoverAnchor, ClrPopoverOpenCloseButton, ClrPopoverContent, CdsIconCustomTag, ClrLabel, ClrDatepickerViewManager],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDateContainer, [{
    type: Component,
    args: [{
      selector: "clr-date-container",
      template: `
    <ng-content select="label"></ng-content>
    <label *ngIf="!label && addGrid()"></label>
    <div class="clr-control-container" [ngClass]="controlClass()">
      <div class="clr-input-wrapper" clrPopoverAnchor>
        <div class="clr-input-group" [class.clr-focus]="focus">
          <ng-content select="[clrDate]"></ng-content>
          <button
            #actionButton
            type="button"
            clrPopoverOpenCloseButton
            class="clr-input-group-icon-action"
            [disabled]="isInputDateDisabled"
            *ngIf="isEnabled"
          >
            <cds-icon status="info" shape="calendar"></cds-icon>
          </button>
          <clr-datepicker-view-manager
            *clrPopoverContent="open; at: popoverPosition; outsideClickToClose: true; scrollToClose: true"
            cdkTrapFocus
          ></clr-datepicker-view-manager>
        </div>
        <cds-icon
          *ngIf="showInvalid"
          class="clr-validate-icon"
          shape="exclamation-circle"
          status="danger"
          aria-hidden="true"
        ></cds-icon>
        <cds-icon
          *ngIf="showValid"
          class="clr-validate-icon"
          shape="check-circle"
          status="success"
          aria-hidden="true"
        ></cds-icon>
      </div>
      <ng-content select="clr-control-helper" *ngIf="showHelper"></ng-content>
      <ng-content select="clr-control-error" *ngIf="showInvalid"></ng-content>
      <ng-content select="clr-control-success" *ngIf="showValid"></ng-content>
    </div>
  `,
      providers: [ControlIdService, LocaleHelperService, ControlClassService, FocusService2, NgControlService, DateIOService, DateNavigationService, DatepickerEnabledService, DateFormControlService, ViewManagerService, IfControlStateService],
      hostDirectives: [ClrPopoverHostDirective],
      host: {
        "[class.clr-date-container]": "true",
        "[class.clr-form-control-disabled]": "isInputDateDisabled",
        "[class.clr-form-control]": "true",
        "[class.clr-row]": "addGrid()"
      }
    }]
  }], function() {
    return [{
      type: Renderer2
    }, {
      type: ClrPopoverToggleService
    }, {
      type: DateNavigationService
    }, {
      type: DatepickerEnabledService
    }, {
      type: DateFormControlService
    }, {
      type: DateIOService
    }, {
      type: ClrCommonStringsService
    }, {
      type: FocusService2
    }, {
      type: ViewManagerService
    }, {
      type: ControlClassService
    }, {
      type: LayoutService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: NgControlService
    }, {
      type: IfControlStateService
    }];
  }, {
    clrPosition: [{
      type: Input,
      args: ["clrPosition"]
    }],
    actionButton: [{
      type: ViewChild,
      args: ["actionButton"]
    }]
  });
})();
var ClrDateInput = class extends WrappedFormControl {
  constructor(viewContainerRef, injector, el, renderer, control, container, dateIOService, dateNavigationService, datepickerEnabledService, dateFormControlService, platformId, focusService, datepickerFocusService) {
    super(viewContainerRef, ClrDateContainer, injector, control, renderer, el);
    this.el = el;
    this.renderer = renderer;
    this.control = control;
    this.container = container;
    this.dateIOService = dateIOService;
    this.dateNavigationService = dateNavigationService;
    this.datepickerEnabledService = datepickerEnabledService;
    this.dateFormControlService = dateFormControlService;
    this.platformId = platformId;
    this.focusService = focusService;
    this.datepickerFocusService = datepickerFocusService;
    this.dateChange = new EventEmitter(false);
    this.index = 1;
  }
  set date(date) {
    if (this.previousDateChange !== date) {
      this.updateDate(this.getValidDateValueFromDate(date));
    }
    if (!this.initialClrDateInputValue) {
      this.initialClrDateInputValue = date;
    }
  }
  set min(dateString) {
    this.dateIOService.setMinDate(dateString);
    this.triggerControlValidation();
  }
  set max(dateString) {
    this.dateIOService.setMaxDate(dateString);
    this.triggerControlValidation();
  }
  get disabled() {
    if (this.dateFormControlService) {
      return this.dateFormControlService.disabled;
    }
    return null;
  }
  set disabled(value) {
    if (this.dateFormControlService) {
      this.dateFormControlService.setDisabled(isBooleanAttributeSet(value));
    }
  }
  get placeholderText() {
    return this.placeholder ? this.placeholder : this.dateIOService.placeholderText;
  }
  get inputType() {
    return isPlatformBrowser(this.platformId) && this.usingNativeDatepicker() ? "date" : "text";
  }
  ngOnInit() {
    super.ngOnInit();
    this.populateServicesFromContainerComponent();
    this.subscriptions.push(this.listenForUserSelectedDayChanges(), this.listenForControlValueChanges(), this.listenForTouchChanges(), this.listenForDirtyChanges(), this.listenForInputRefocus());
  }
  ngAfterViewInit() {
    this.processInitialInputs();
  }
  setFocusStates() {
    this.setFocus(true);
  }
  triggerValidation() {
    super.triggerValidation();
    this.setFocus(false);
  }
  onValueChange(target) {
    const validDateValue = this.dateIOService.getDateValueFromDateString(target.value);
    if (this.usingClarityDatepicker() && validDateValue) {
      this.updateDate(validDateValue, true);
    } else if (this.usingNativeDatepicker()) {
      const [year, month, day] = target.value.split("-");
      this.updateDate(new Date(+year, +month - 1, +day), true);
    } else {
      this.emitDateOutput(null);
    }
  }
  usingClarityDatepicker() {
    return this.datepickerEnabledService.isEnabled;
  }
  usingNativeDatepicker() {
    return !this.datepickerEnabledService.isEnabled;
  }
  setFocus(focus) {
    if (this.focusService) {
      this.focusService.focused = focus;
    }
  }
  triggerControlValidation() {
    if (this.datepickerHasFormControl()) {
      this.control.control?.updateValueAndValidity({
        emitEvent: false
      });
      this.control.control?.setErrors(this.control.control.errors);
    }
  }
  populateServicesFromContainerComponent() {
    if (!this.container) {
      this.dateIOService = this.getProviderFromContainer(DateIOService);
      this.dateNavigationService = this.getProviderFromContainer(DateNavigationService);
      this.datepickerEnabledService = this.getProviderFromContainer(DatepickerEnabledService);
      this.dateFormControlService = this.getProviderFromContainer(DateFormControlService);
    }
  }
  processInitialInputs() {
    if (this.datepickerHasFormControl()) {
      this.updateDate(this.dateIOService.getDateValueFromDateString(this.control.value));
    } else {
      this.updateDate(this.initialClrDateInputValue);
    }
  }
  updateDate(value, setByUserInteraction = false) {
    const date = this.getValidDateValueFromDate(value);
    if (setByUserInteraction) {
      this.emitDateOutput(date);
    } else {
      this.previousDateChange = date;
    }
    if (this.dateNavigationService) {
      this.dateNavigationService.selectedDay = date ? new DayModel(date.getFullYear(), date.getMonth(), date.getDate()) : null;
    }
    this.updateInput(date);
  }
  updateInput(date) {
    if (date) {
      const dateString = this.dateIOService.toLocaleDisplayFormatString(date);
      if (this.usingNativeDatepicker()) {
        date.setMinutes(date.getMinutes() - date.getTimezoneOffset());
        this.renderer.setProperty(this.el.nativeElement, "valueAsDate", date);
      } else if (this.datepickerHasFormControl() && dateString !== this.control.value) {
        this.control.control.setValue(dateString);
      } else {
        this.renderer.setProperty(this.el.nativeElement, "value", dateString);
      }
    } else {
      this.renderer.setProperty(this.el.nativeElement, "value", "");
    }
  }
  getValidDateValueFromDate(date) {
    if (this.dateIOService) {
      const dateString = this.dateIOService.toLocaleDisplayFormatString(date);
      return this.dateIOService.getDateValueFromDateString(dateString);
    } else {
      return null;
    }
  }
  emitDateOutput(date) {
    if (!datesAreEqual(date, this.previousDateChange)) {
      this.dateChange.emit(date);
      this.previousDateChange = date;
    } else if (!date && this.previousDateChange) {
      this.dateChange.emit(null);
      this.previousDateChange = null;
    }
  }
  datepickerHasFormControl() {
    return !!this.control;
  }
  listenForControlValueChanges() {
    return of(this.datepickerHasFormControl()).pipe(
      filter((hasControl) => hasControl),
      switchMap(() => this.control.valueChanges),
      // only update date value if not being set by user
      filter(() => !this.datepickerFocusService.elementIsFocused(this.el.nativeElement))
    ).subscribe((value) => this.updateDate(this.dateIOService.getDateValueFromDateString(value)));
  }
  listenForUserSelectedDayChanges() {
    return this.dateNavigationService.selectedDayChange.subscribe((dayModel) => this.updateDate(dayModel.toDate(), true));
  }
  listenForTouchChanges() {
    return this.dateFormControlService.touchedChange.pipe(filter(() => this.datepickerHasFormControl())).subscribe(() => this.control.control.markAsTouched());
  }
  listenForDirtyChanges() {
    return this.dateFormControlService.dirtyChange.pipe(filter(() => this.datepickerHasFormControl())).subscribe(() => this.control.control.markAsDirty());
  }
  listenForInputRefocus() {
    return this.dateNavigationService.selectedDayChange.pipe(filter((date) => !!date)).subscribe(() => this.datepickerFocusService.focusInput(this.el.nativeElement));
  }
};
ClrDateInput.ɵfac = function ClrDateInput_Factory(t161) {
  return new (t161 || ClrDateInput)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ClrDateContainer, 8), ɵɵdirectiveInject(DateIOService, 8), ɵɵdirectiveInject(DateNavigationService, 8), ɵɵdirectiveInject(DatepickerEnabledService, 8), ɵɵdirectiveInject(DateFormControlService, 8), ɵɵdirectiveInject(PLATFORM_ID), ɵɵdirectiveInject(FocusService2, 8), ɵɵdirectiveInject(DatepickerFocusService));
};
ClrDateInput.ɵdir = ɵɵdefineDirective({
  type: ClrDateInput,
  selectors: [["", "clrDate", ""]],
  hostVars: 5,
  hostBindings: function ClrDateInput_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("focus", function ClrDateInput_focus_HostBindingHandler() {
        return ctx.setFocusStates();
      })("blur", function ClrDateInput_blur_HostBindingHandler() {
        return ctx.triggerValidation();
      })("change", function ClrDateInput_change_HostBindingHandler($event) {
        return ctx.onValueChange($event.target);
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("disabled", ctx.disabled);
      ɵɵattribute("placeholder", ctx.placeholderText)("type", ctx.inputType);
      ɵɵclassProp("clr-input", true);
    }
  },
  inputs: {
    placeholder: "placeholder",
    date: [InputFlags.None, "clrDate", "date"],
    min: "min",
    max: "max",
    disabled: "disabled"
  },
  outputs: {
    dateChange: "clrDateChange"
  },
  features: [ɵɵProvidersFeature([DatepickerFocusService]), ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDateInput, [{
    type: Directive,
    args: [{
      selector: "[clrDate]",
      host: {
        "[class.clr-input]": "true"
      },
      providers: [DatepickerFocusService]
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }, {
      type: Injector
    }, {
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: NgControl,
      decorators: [{
        type: Self
      }, {
        type: Optional
      }]
    }, {
      type: ClrDateContainer,
      decorators: [{
        type: Optional
      }]
    }, {
      type: DateIOService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: DateNavigationService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: DatepickerEnabledService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: DateFormControlService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }, {
      type: FocusService2,
      decorators: [{
        type: Optional
      }]
    }, {
      type: DatepickerFocusService
    }];
  }, {
    placeholder: [{
      type: Input
    }],
    dateChange: [{
      type: Output,
      args: ["clrDateChange"]
    }],
    date: [{
      type: Input,
      args: ["clrDate"]
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    disabled: [{
      type: Input,
      args: ["disabled"]
    }, {
      type: HostBinding,
      args: ["disabled"]
    }],
    placeholderText: [{
      type: HostBinding,
      args: ["attr.placeholder"]
    }],
    inputType: [{
      type: HostBinding,
      args: ["attr.type"]
    }],
    setFocusStates: [{
      type: HostListener,
      args: ["focus"]
    }],
    triggerValidation: [{
      type: HostListener,
      args: ["blur"]
    }],
    onValueChange: [{
      type: HostListener,
      args: ["change", ["$event.target"]]
    }]
  });
})();
var ClrDateInputValidator = class {
  constructor(dateIOService) {
    this.dateIOService = dateIOService;
  }
  validate(control) {
    if (this.dateIOService) {
      const value = this.dateIOService.getDateValueFromDateString(control.value);
      const minDate = this.dateIOService.disabledDates.minDate.toDate();
      const maxDate = this.dateIOService.disabledDates.maxDate.toDate();
      if (value && value < this.dateIOService.disabledDates.minDate.toDate()) {
        return {
          min: {
            min: minDate.toLocaleDateString(),
            actual: value.toLocaleDateString()
          }
        };
      } else if (value && value > this.dateIOService.disabledDates.maxDate.toDate()) {
        return {
          max: {
            max: maxDate.toLocaleDateString(),
            actual: value.toLocaleDateString()
          }
        };
      }
    }
    return null;
  }
};
ClrDateInputValidator.ɵfac = function ClrDateInputValidator_Factory(t161) {
  return new (t161 || ClrDateInputValidator)(ɵɵdirectiveInject(DateIOService, 8));
};
ClrDateInputValidator.ɵdir = ɵɵdefineDirective({
  type: ClrDateInputValidator,
  selectors: [["", "clrDate", ""]],
  features: [ɵɵProvidersFeature([{
    provide: NG_VALIDATORS,
    useExisting: ClrDateInputValidator,
    multi: true
  }])]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDateInputValidator, [{
    type: Directive,
    args: [{
      selector: "[clrDate]",
      providers: [{
        provide: NG_VALIDATORS,
        useExisting: ClrDateInputValidator,
        multi: true
      }]
    }]
  }], function() {
    return [{
      type: DateIOService,
      decorators: [{
        type: Optional
      }]
    }];
  }, null);
})();
var CLR_DATEPICKER_DIRECTIVES = [ClrDay, ClrDateContainer, ClrDateInput, ClrDateInputValidator, ClrDatepickerViewManager, ClrMonthpicker, ClrYearpicker, ClrDaypicker, ClrCalendar];
var ClrDatepickerModule = class {
  constructor() {
    r24.addIcons(e30, l7, o28, a22, e28);
  }
};
ClrDatepickerModule.ɵfac = function ClrDatepickerModule_Factory(t161) {
  return new (t161 || ClrDatepickerModule)();
};
ClrDatepickerModule.ɵmod = ɵɵdefineNgModule({
  type: ClrDatepickerModule,
  declarations: [ClrDay, ClrDateContainer, ClrDateInput, ClrDateInputValidator, ClrDatepickerViewManager, ClrMonthpicker, ClrYearpicker, ClrDaypicker, ClrCalendar],
  imports: [CommonModule, CdkTrapFocusModule, ClrHostWrappingModule, ClrConditionalModule, ClrPopoverModuleNext, ClrIconModule, ClrCommonFormsModule],
  exports: [ClrDay, ClrDateContainer, ClrDateInput, ClrDateInputValidator, ClrDatepickerViewManager, ClrMonthpicker, ClrYearpicker, ClrDaypicker, ClrCalendar]
});
ClrDatepickerModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, CdkTrapFocusModule, ClrHostWrappingModule, ClrConditionalModule, ClrPopoverModuleNext, ClrIconModule, ClrCommonFormsModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatepickerModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, CdkTrapFocusModule, ClrHostWrappingModule, ClrConditionalModule, ClrPopoverModuleNext, ClrIconModule, ClrCommonFormsModule],
      declarations: [CLR_DATEPICKER_DIRECTIVES],
      exports: [CLR_DATEPICKER_DIRECTIVES]
    }]
  }], function() {
    return [];
  }, null);
})();
var TOGGLE_SERVICE = new InjectionToken(void 0);
function ToggleServiceFactory() {
  return new BehaviorSubject(false);
}
var TOGGLE_SERVICE_PROVIDER = {
  provide: TOGGLE_SERVICE,
  useFactory: ToggleServiceFactory
};
var ClrPasswordContainer = class extends ClrAbstractContainer {
  constructor(ifControlStateService, layoutService, controlClassService, ngControlService, focusService, toggleService, commonStrings) {
    super(ifControlStateService, layoutService, controlClassService, ngControlService);
    this.focusService = focusService;
    this.toggleService = toggleService;
    this.commonStrings = commonStrings;
    this.show = false;
    this.focus = false;
    this._toggle = true;
    this.subscriptions.push(this.focusService.focusChange.subscribe((state2) => {
      this.focus = state2;
    }));
  }
  get clrToggle() {
    return this._toggle;
  }
  set clrToggle(state2) {
    this._toggle = state2;
    if (!state2) {
      this.show = false;
    }
  }
  toggle() {
    this.show = !this.show;
    this.toggleService.next(this.show);
  }
  showPasswordText(label) {
    return this.commonStrings.parse(this.commonStrings.keys.passwordShow, {
      LABEL: label
    });
  }
  hidePasswordText(label) {
    return this.commonStrings.parse(this.commonStrings.keys.passwordHide, {
      LABEL: label
    });
  }
};
ClrPasswordContainer.ɵfac = function ClrPasswordContainer_Factory(t161) {
  return new (t161 || ClrPasswordContainer)(ɵɵdirectiveInject(IfControlStateService), ɵɵdirectiveInject(LayoutService, 8), ɵɵdirectiveInject(ControlClassService), ɵɵdirectiveInject(NgControlService), ɵɵdirectiveInject(FocusService2), ɵɵdirectiveInject(TOGGLE_SERVICE), ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrPasswordContainer.ɵcmp = ɵɵdefineComponent({
  type: ClrPasswordContainer,
  selectors: [["clr-password-container"]],
  hostVars: 6,
  hostBindings: function ClrPasswordContainer_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-form-control", true)("clr-form-control-disabled", ctx.control == null ? null : ctx.control.disabled)("clr-row", ctx.addGrid());
    }
  },
  inputs: {
    clrToggle: "clrToggle"
  },
  features: [ɵɵProvidersFeature([NgControlService, ControlIdService, ControlClassService, FocusService2, TOGGLE_SERVICE_PROVIDER, IfControlStateService]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c31,
  decls: 12,
  vars: 10,
  consts: [[4, "ngIf"], [1, "clr-control-container", 3, "ngClass"], [1, "clr-input-wrapper"], [1, "clr-input-group"], ["class", "clr-input-group-icon-action", "type", "button", 3, "disabled", "click", 4, "ngIf"], ["class", "clr-validate-icon", "shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 4, "ngIf"], ["class", "clr-validate-icon", "shape", "check-circle", "status", "success", "aria-hidden", "true", 4, "ngIf"], ["type", "button", 1, "clr-input-group-icon-action", 3, "click", "disabled"], [1, "clr-password-eye-icon"], [1, "clr-sr-only"], ["shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 1, "clr-validate-icon"], ["shape", "check-circle", "status", "success", "aria-hidden", "true", 1, "clr-validate-icon"]],
  template: function ClrPasswordContainer_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c30);
      ɵɵprojection(0);
      ɵɵtemplate(1, ClrPasswordContainer_label_1_Template, 1, 0, "label", 0);
      ɵɵelementStart(2, "div", 1)(3, "div", 2)(4, "div", 3);
      ɵɵprojection(5, 1);
      ɵɵtemplate(6, ClrPasswordContainer_button_6_Template, 4, 3, "button", 4);
      ɵɵelementEnd();
      ɵɵtemplate(7, ClrPasswordContainer_cds_icon_7_Template, 1, 0, "cds-icon", 5)(8, ClrPasswordContainer_cds_icon_8_Template, 1, 0, "cds-icon", 6);
      ɵɵelementEnd();
      ɵɵtemplate(9, ClrPasswordContainer_ng_content_9_Template, 1, 0, "ng-content", 0)(10, ClrPasswordContainer_ng_content_10_Template, 1, 0, "ng-content", 0)(11, ClrPasswordContainer_ng_content_11_Template, 1, 0, "ng-content", 0);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.label && ctx.addGrid());
      ɵɵadvance();
      ɵɵproperty("ngClass", ctx.controlClass());
      ɵɵadvance(2);
      ɵɵclassProp("clr-focus", ctx.focus);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.clrToggle);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showHelper);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
    }
  },
  dependencies: [NgClass, NgIf, CdsIconCustomTag, ClrLabel],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrPasswordContainer, [{
    type: Component,
    args: [{
      selector: "clr-password-container",
      template: `
    <ng-content select="label"></ng-content>
    <label *ngIf="!label && addGrid()"></label>
    <div class="clr-control-container" [ngClass]="controlClass()">
      <div class="clr-input-wrapper">
        <div class="clr-input-group" [class.clr-focus]="focus">
          <ng-content select="[clrPassword]"></ng-content>
          <button
            *ngIf="clrToggle"
            (click)="toggle()"
            [disabled]="control?.disabled"
            class="clr-input-group-icon-action"
            type="button"
          >
            <cds-icon class="clr-password-eye-icon" [attr.shape]="show ? 'eye-hide' : 'eye'"></cds-icon>
            <span class="clr-sr-only">
              {{ show ? hidePasswordText(label?.labelText) : showPasswordText(label?.labelText) }}
            </span>
          </button>
        </div>
        <cds-icon
          *ngIf="showInvalid"
          class="clr-validate-icon"
          shape="exclamation-circle"
          status="danger"
          aria-hidden="true"
        ></cds-icon>
        <cds-icon
          *ngIf="showValid"
          class="clr-validate-icon"
          shape="check-circle"
          status="success"
          aria-hidden="true"
        ></cds-icon>
      </div>
      <ng-content select="clr-control-helper" *ngIf="showHelper"></ng-content>
      <ng-content select="clr-control-error" *ngIf="showInvalid"></ng-content>
      <ng-content select="clr-control-success" *ngIf="showValid"></ng-content>
    </div>
  `,
      host: {
        "[class.clr-form-control]": "true",
        "[class.clr-form-control-disabled]": "control?.disabled",
        "[class.clr-row]": "addGrid()"
      },
      providers: [NgControlService, ControlIdService, ControlClassService, FocusService2, TOGGLE_SERVICE_PROVIDER, IfControlStateService]
    }]
  }], function() {
    return [{
      type: IfControlStateService
    }, {
      type: LayoutService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ControlClassService
    }, {
      type: NgControlService
    }, {
      type: FocusService2
    }, {
      type: BehaviorSubject,
      decorators: [{
        type: Inject,
        args: [TOGGLE_SERVICE]
      }]
    }, {
      type: ClrCommonStringsService
    }];
  }, {
    clrToggle: [{
      type: Input,
      args: ["clrToggle"]
    }]
  });
})();
var ClrPassword = class extends WrappedFormControl {
  constructor(vcr, injector, control, renderer, el, focusService, toggleService) {
    super(vcr, ClrPasswordContainer, injector, control, renderer, el);
    this.focusService = focusService;
    this.toggleService = toggleService;
    this.index = 1;
    if (!this.focusService) {
      throw new Error("clrPassword requires being wrapped in <clr-password-container>");
    }
    this.subscriptions.push(this.toggleService.subscribe((toggle) => {
      renderer.setProperty(el.nativeElement, "type", toggle ? "text" : "password");
    }));
  }
  triggerFocus() {
    if (this.focusService) {
      this.focusService.focused = true;
    }
  }
  triggerValidation() {
    super.triggerValidation();
    if (this.focusService) {
      this.focusService.focused = false;
    }
  }
};
ClrPassword.ɵfac = function ClrPassword_Factory(t161) {
  return new (t161 || ClrPassword)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(FocusService2, 8), ɵɵdirectiveInject(TOGGLE_SERVICE, 8));
};
ClrPassword.ɵdir = ɵɵdefineDirective({
  type: ClrPassword,
  selectors: [["", "clrPassword", ""]],
  hostVars: 2,
  hostBindings: function ClrPassword_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("focus", function ClrPassword_focus_HostBindingHandler() {
        return ctx.triggerFocus();
      })("blur", function ClrPassword_blur_HostBindingHandler() {
        return ctx.triggerValidation();
      });
    }
    if (rf & 2) {
      ɵɵclassProp("clr-input", true);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrPassword, [{
    type: Directive,
    args: [{
      selector: "[clrPassword]",
      host: {
        "[class.clr-input]": "true"
      }
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }, {
      type: Injector
    }, {
      type: NgControl,
      decorators: [{
        type: Self
      }, {
        type: Optional
      }]
    }, {
      type: Renderer2
    }, {
      type: ElementRef
    }, {
      type: FocusService2,
      decorators: [{
        type: Optional
      }]
    }, {
      type: BehaviorSubject,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TOGGLE_SERVICE]
      }]
    }];
  }, {
    triggerFocus: [{
      type: HostListener,
      args: ["focus"]
    }],
    triggerValidation: [{
      type: HostListener,
      args: ["blur"]
    }]
  });
})();
var ClrPasswordModule = class {
  constructor() {
    r24.addIcons(e32, r26, e30, l7);
  }
};
ClrPasswordModule.ɵfac = function ClrPasswordModule_Factory(t161) {
  return new (t161 || ClrPasswordModule)();
};
ClrPasswordModule.ɵmod = ɵɵdefineNgModule({
  type: ClrPasswordModule,
  declarations: [ClrPassword, ClrPasswordContainer],
  imports: [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule],
  exports: [ClrCommonFormsModule, ClrPassword, ClrPasswordContainer]
});
ClrPasswordModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule, ClrCommonFormsModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrPasswordModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule],
      declarations: [ClrPassword, ClrPasswordContainer],
      exports: [ClrCommonFormsModule, ClrPassword, ClrPasswordContainer]
    }]
  }], function() {
    return [];
  }, null);
})();
var ClrRadioWrapper = class {
  constructor() {
    this._dynamic = false;
  }
  ngOnInit() {
    if (this.label) {
      this.label.disableGrid();
    }
  }
};
ClrRadioWrapper.ɵfac = function ClrRadioWrapper_Factory(t161) {
  return new (t161 || ClrRadioWrapper)();
};
ClrRadioWrapper.ɵcmp = ɵɵdefineComponent({
  type: ClrRadioWrapper,
  selectors: [["clr-radio-wrapper"]],
  contentQueries: function ClrRadioWrapper_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrLabel, 7);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.label = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function ClrRadioWrapper_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-radio-wrapper", true);
    }
  },
  features: [ɵɵProvidersFeature([ControlIdService])],
  ngContentSelectors: _c33,
  decls: 3,
  vars: 1,
  consts: [[4, "ngIf"]],
  template: function ClrRadioWrapper_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c322);
      ɵɵprojection(0);
      ɵɵprojection(1, 1);
      ɵɵtemplate(2, ClrRadioWrapper_label_2_Template, 1, 0, "label", 0);
    }
    if (rf & 2) {
      ɵɵadvance(2);
      ɵɵproperty("ngIf", !ctx.label);
    }
  },
  dependencies: [NgIf, ClrLabel],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrRadioWrapper, [{
    type: Component,
    args: [{
      selector: "clr-radio-wrapper",
      template: `
    <ng-content select="[clrRadio]"></ng-content>
    <ng-content select="label"></ng-content>
    <label *ngIf="!label"></label>
  `,
      host: {
        "[class.clr-radio-wrapper]": "true"
      },
      providers: [ControlIdService]
    }]
  }], null, {
    label: [{
      type: ContentChild,
      args: [ClrLabel, {
        static: true
      }]
    }]
  });
})();
var ClrRadio = class extends WrappedFormControl {
  constructor(vcr, injector, control, renderer, el) {
    super(vcr, ClrRadioWrapper, injector, control, renderer, el);
  }
};
ClrRadio.ɵfac = function ClrRadio_Factory(t161) {
  return new (t161 || ClrRadio)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef));
};
ClrRadio.ɵdir = ɵɵdefineDirective({
  type: ClrRadio,
  selectors: [["", "clrRadio", ""]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrRadio, [{
    type: Directive,
    args: [{
      selector: "[clrRadio]"
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }, {
      type: Injector
    }, {
      type: NgControl,
      decorators: [{
        type: Self
      }, {
        type: Optional
      }]
    }, {
      type: Renderer2
    }, {
      type: ElementRef
    }];
  }, null);
})();
var ClrRadioContainer = class extends ClrAbstractContainer {
  constructor(layoutService, controlClassService, ngControlService, ifControlStateService) {
    super(ifControlStateService, layoutService, controlClassService, ngControlService);
    this.layoutService = layoutService;
    this.controlClassService = controlClassService;
    this.ngControlService = ngControlService;
    this.ifControlStateService = ifControlStateService;
    this.inline = false;
  }
  /*
   * Here we want to support the following cases
   * clrInline - true by presence
   * clrInline="true|false" - unless it is explicitly false, strings are considered true
   * [clrInline]="true|false" - expect a boolean
   */
  get clrInline() {
    return this.inline;
  }
  set clrInline(value) {
    if (typeof value === "string") {
      this.inline = value === "false" ? false : true;
    } else {
      this.inline = !!value;
    }
  }
  ngAfterContentInit() {
    this.setAriaRoles();
  }
  setAriaRoles() {
    this.role = this.radios.length ? "group" : null;
  }
};
ClrRadioContainer.ɵfac = function ClrRadioContainer_Factory(t161) {
  return new (t161 || ClrRadioContainer)(ɵɵdirectiveInject(LayoutService, 8), ɵɵdirectiveInject(ControlClassService), ɵɵdirectiveInject(NgControlService), ɵɵdirectiveInject(IfControlStateService));
};
ClrRadioContainer.ɵcmp = ɵɵdefineComponent({
  type: ClrRadioContainer,
  selectors: [["clr-radio-container"]],
  contentQueries: function ClrRadioContainer_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrRadio, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.radios = _t);
    }
  },
  hostVars: 7,
  hostBindings: function ClrRadioContainer_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("role", ctx.role);
      ɵɵclassProp("clr-form-control", true)("clr-form-control-disabled", ctx.control == null ? null : ctx.control.disabled)("clr-row", ctx.addGrid());
    }
  },
  inputs: {
    clrInline: "clrInline"
  },
  features: [ɵɵProvidersFeature([NgControlService, IfControlStateService, ControlClassService, ContainerIdService]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c35,
  decls: 10,
  vars: 9,
  consts: [[4, "ngIf"], [1, "clr-control-container", 3, "ngClass"], [1, "clr-subtext-wrapper"], ["class", "clr-validate-icon", "shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 4, "ngIf"], ["class", "clr-validate-icon", "shape", "check-circle", "status", "success", "aria-hidden", "true", 4, "ngIf"], ["shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 1, "clr-validate-icon"], ["shape", "check-circle", "status", "success", "aria-hidden", "true", 1, "clr-validate-icon"]],
  template: function ClrRadioContainer_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c34);
      ɵɵprojection(0);
      ɵɵtemplate(1, ClrRadioContainer_label_1_Template, 1, 0, "label", 0);
      ɵɵelementStart(2, "div", 1);
      ɵɵprojection(3, 1);
      ɵɵelementStart(4, "div", 2);
      ɵɵtemplate(5, ClrRadioContainer_ng_content_5_Template, 1, 0, "ng-content", 0)(6, ClrRadioContainer_cds_icon_6_Template, 1, 0, "cds-icon", 3)(7, ClrRadioContainer_cds_icon_7_Template, 1, 0, "cds-icon", 4)(8, ClrRadioContainer_ng_content_8_Template, 1, 0, "ng-content", 0)(9, ClrRadioContainer_ng_content_9_Template, 1, 0, "ng-content", 0);
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.label && ctx.addGrid());
      ɵɵadvance();
      ɵɵclassProp("clr-control-inline", ctx.clrInline);
      ɵɵproperty("ngClass", ctx.controlClass());
      ɵɵadvance(3);
      ɵɵproperty("ngIf", ctx.showHelper);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
    }
  },
  dependencies: [NgClass, NgIf, ClrLabel, CdsIconCustomTag],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrRadioContainer, [{
    type: Component,
    args: [{
      selector: "clr-radio-container",
      template: `
    <ng-content select="label"></ng-content>
    <label *ngIf="!label && addGrid()"></label>
    <div class="clr-control-container" [class.clr-control-inline]="clrInline" [ngClass]="controlClass()">
      <ng-content select="clr-radio-wrapper"></ng-content>
      <div class="clr-subtext-wrapper">
        <ng-content select="clr-control-helper" *ngIf="showHelper"></ng-content>
        <cds-icon
          *ngIf="showInvalid"
          class="clr-validate-icon"
          shape="exclamation-circle"
          status="danger"
          aria-hidden="true"
        ></cds-icon>
        <cds-icon
          *ngIf="showValid"
          class="clr-validate-icon"
          shape="check-circle"
          status="success"
          aria-hidden="true"
        ></cds-icon>
        <ng-content select="clr-control-error" *ngIf="showInvalid"></ng-content>
        <ng-content select="clr-control-success" *ngIf="showValid"></ng-content>
      </div>
    </div>
  `,
      host: {
        "[class.clr-form-control]": "true",
        "[class.clr-form-control-disabled]": "control?.disabled",
        "[class.clr-row]": "addGrid()",
        "[attr.role]": "role"
      },
      providers: [NgControlService, IfControlStateService, ControlClassService, ContainerIdService]
    }]
  }], function() {
    return [{
      type: LayoutService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ControlClassService
    }, {
      type: NgControlService
    }, {
      type: IfControlStateService
    }];
  }, {
    radios: [{
      type: ContentChildren,
      args: [ClrRadio, {
        descendants: true
      }]
    }],
    clrInline: [{
      type: Input
    }]
  });
})();
var ClrRadioModule = class {
  constructor() {
    r24.addIcons(e30, l7);
  }
};
ClrRadioModule.ɵfac = function ClrRadioModule_Factory(t161) {
  return new (t161 || ClrRadioModule)();
};
ClrRadioModule.ɵmod = ɵɵdefineNgModule({
  type: ClrRadioModule,
  declarations: [ClrRadio, ClrRadioContainer, ClrRadioWrapper],
  imports: [CommonModule, ClrCommonFormsModule, ClrHostWrappingModule, ClrIconModule],
  exports: [ClrCommonFormsModule, ClrRadio, ClrRadioContainer, ClrRadioWrapper]
});
ClrRadioModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrCommonFormsModule, ClrHostWrappingModule, ClrIconModule, ClrCommonFormsModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrRadioModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrCommonFormsModule, ClrHostWrappingModule, ClrIconModule],
      declarations: [ClrRadio, ClrRadioContainer, ClrRadioWrapper],
      exports: [ClrCommonFormsModule, ClrRadio, ClrRadioContainer, ClrRadioWrapper]
    }]
  }], function() {
    return [];
  }, null);
})();
var ClrRangeContainer = class extends ClrAbstractContainer {
  constructor(layoutService, controlClassService, ngControlService, renderer, idService, ifControlStateService) {
    super(ifControlStateService, layoutService, controlClassService, ngControlService);
    this.renderer = renderer;
    this.idService = idService;
    this.ifControlStateService = ifControlStateService;
    this._hasProgress = false;
  }
  get hasProgress() {
    return this._hasProgress;
  }
  set hasProgress(val) {
    const valBool = !!val;
    if (valBool !== this._hasProgress) {
      this._hasProgress = valBool;
    }
  }
  getRangeProgressFillWidth() {
    const input = this.selectRangeElement();
    if (!input) {
      return this.lastRangeProgressFillWidth;
    }
    const inputWidth = input.offsetWidth;
    const inputMinValue = +input.min;
    let inputMaxValue = +input.max;
    if (inputMinValue === 0 && inputMaxValue === 0) {
      inputMaxValue = 100;
    }
    const inputMiddle = (inputMinValue + inputMaxValue) / 2;
    const inputValue = !!this.control && this.control.value !== void 0 ? this.control.value : inputMiddle;
    const valueAsPercent = (inputValue - inputMinValue) * 100 / (inputMaxValue - inputMinValue);
    this.lastRangeProgressFillWidth = valueAsPercent * inputWidth / 100 + "px";
    return this.lastRangeProgressFillWidth;
  }
  selectRangeElement() {
    try {
      return this.renderer.selectRootElement("[clrRange]#" + this.idService.id);
    } catch {
      return void 0;
    }
  }
};
ClrRangeContainer.ɵfac = function ClrRangeContainer_Factory(t161) {
  return new (t161 || ClrRangeContainer)(ɵɵdirectiveInject(LayoutService, 8), ɵɵdirectiveInject(ControlClassService), ɵɵdirectiveInject(NgControlService), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ControlIdService), ɵɵdirectiveInject(IfControlStateService));
};
ClrRangeContainer.ɵcmp = ɵɵdefineComponent({
  type: ClrRangeContainer,
  selectors: [["clr-range-container"]],
  hostVars: 6,
  hostBindings: function ClrRangeContainer_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-form-control", true)("clr-form-control-disabled", ctx.control == null ? null : ctx.control.disabled)("clr-row", ctx.addGrid());
    }
  },
  inputs: {
    hasProgress: [InputFlags.None, "clrRangeHasProgress", "hasProgress"]
  },
  features: [ɵɵProvidersFeature([IfControlStateService, NgControlService, ControlIdService, ControlClassService]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c37,
  decls: 11,
  vars: 10,
  consts: [[4, "ngIf"], [1, "clr-control-container", 3, "ngClass"], [1, "clr-range-wrapper"], ["class", "fill-input", 3, "width", 4, "ngIf"], ["class", "clr-validate-icon", "shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 4, "ngIf"], ["class", "clr-validate-icon", "shape", "check-circle", "status", "success", "aria-hidden", "true", 4, "ngIf"], [1, "fill-input"], ["shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 1, "clr-validate-icon"], ["shape", "check-circle", "status", "success", "aria-hidden", "true", 1, "clr-validate-icon"]],
  template: function ClrRangeContainer_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c36);
      ɵɵprojection(0);
      ɵɵtemplate(1, ClrRangeContainer_label_1_Template, 1, 0, "label", 0);
      ɵɵelementStart(2, "div", 1)(3, "div", 2);
      ɵɵprojection(4, 1);
      ɵɵtemplate(5, ClrRangeContainer_span_5_Template, 1, 2, "span", 3)(6, ClrRangeContainer_cds_icon_6_Template, 1, 0, "cds-icon", 4)(7, ClrRangeContainer_cds_icon_7_Template, 1, 0, "cds-icon", 5);
      ɵɵelementEnd();
      ɵɵtemplate(8, ClrRangeContainer_ng_content_8_Template, 1, 0, "ng-content", 0)(9, ClrRangeContainer_ng_content_9_Template, 1, 0, "ng-content", 0)(10, ClrRangeContainer_ng_content_10_Template, 1, 0, "ng-content", 0);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.label && ctx.addGrid());
      ɵɵadvance();
      ɵɵproperty("ngClass", ctx.controlClass());
      ɵɵadvance();
      ɵɵclassProp("progress-fill", ctx.hasProgress);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.hasProgress);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showHelper);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
    }
  },
  dependencies: [NgClass, NgIf, ClrLabel, CdsIconCustomTag],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrRangeContainer, [{
    type: Component,
    args: [{
      selector: "clr-range-container",
      template: `
    <ng-content select="label"></ng-content>
    <label *ngIf="!label && addGrid()"></label>
    <div class="clr-control-container" [ngClass]="controlClass()">
      <div class="clr-range-wrapper" [class.progress-fill]="hasProgress">
        <ng-content select="[clrRange]"></ng-content>
        <span *ngIf="hasProgress" class="fill-input" [style.width]="getRangeProgressFillWidth()"></span>
        <cds-icon
          *ngIf="showInvalid"
          class="clr-validate-icon"
          shape="exclamation-circle"
          status="danger"
          aria-hidden="true"
        ></cds-icon>
        <cds-icon
          *ngIf="showValid"
          class="clr-validate-icon"
          shape="check-circle"
          status="success"
          aria-hidden="true"
        ></cds-icon>
      </div>
      <ng-content select="clr-control-helper" *ngIf="showHelper"></ng-content>
      <ng-content select="clr-control-error" *ngIf="showInvalid"></ng-content>
      <ng-content select="clr-control-success" *ngIf="showValid"></ng-content>
    </div>
  `,
      host: {
        "[class.clr-form-control]": "true",
        "[class.clr-form-control-disabled]": "control?.disabled",
        "[class.clr-row]": "addGrid()"
      },
      providers: [IfControlStateService, NgControlService, ControlIdService, ControlClassService]
    }]
  }], function() {
    return [{
      type: LayoutService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ControlClassService
    }, {
      type: NgControlService
    }, {
      type: Renderer2
    }, {
      type: ControlIdService
    }, {
      type: IfControlStateService
    }];
  }, {
    hasProgress: [{
      type: Input,
      args: ["clrRangeHasProgress"]
    }]
  });
})();
var ClrRange = class extends WrappedFormControl {
  constructor(vcr, injector, control, renderer, el) {
    super(vcr, ClrRangeContainer, injector, control, renderer, el);
  }
};
ClrRange.ɵfac = function ClrRange_Factory(t161) {
  return new (t161 || ClrRange)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef));
};
ClrRange.ɵdir = ɵɵdefineDirective({
  type: ClrRange,
  selectors: [["", "clrRange", ""]],
  hostVars: 2,
  hostBindings: function ClrRange_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-range", true);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrRange, [{
    type: Directive,
    args: [{
      selector: "[clrRange]",
      host: {
        "[class.clr-range]": "true"
      }
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }, {
      type: Injector
    }, {
      type: NgControl,
      decorators: [{
        type: Self
      }, {
        type: Optional
      }]
    }, {
      type: Renderer2
    }, {
      type: ElementRef
    }];
  }, null);
})();
var ClrRangeModule = class {
  constructor() {
    r24.addIcons(e30, l7);
  }
};
ClrRangeModule.ɵfac = function ClrRangeModule_Factory(t161) {
  return new (t161 || ClrRangeModule)();
};
ClrRangeModule.ɵmod = ɵɵdefineNgModule({
  type: ClrRangeModule,
  declarations: [ClrRange, ClrRangeContainer],
  imports: [CommonModule, ClrCommonFormsModule, ClrHostWrappingModule, ClrIconModule],
  exports: [ClrCommonFormsModule, ClrRange, ClrRangeContainer]
});
ClrRangeModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrCommonFormsModule, ClrHostWrappingModule, ClrIconModule, ClrCommonFormsModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrRangeModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrCommonFormsModule, ClrHostWrappingModule, ClrIconModule],
      declarations: [ClrRange, ClrRangeContainer],
      exports: [ClrCommonFormsModule, ClrRange, ClrRangeContainer]
    }]
  }], function() {
    return [];
  }, null);
})();
var ClrSelectContainer = class extends ClrAbstractContainer {
  constructor(layoutService, controlClassService, ngControlService, ifControlStateService) {
    super(ifControlStateService, layoutService, controlClassService, ngControlService);
    this.layoutService = layoutService;
    this.controlClassService = controlClassService;
    this.ngControlService = ngControlService;
    this.ifControlStateService = ifControlStateService;
    this.multi = false;
  }
  ngOnInit() {
    this.subscriptions.push(this.ngControlService.controlChanges.subscribe((control) => {
      if (control) {
        this.multi = control.valueAccessor instanceof SelectMultipleControlValueAccessor;
        this.control = control;
      }
    }));
  }
  wrapperClass() {
    return this.multi ? "clr-multiselect-wrapper" : "clr-select-wrapper";
  }
};
ClrSelectContainer.ɵfac = function ClrSelectContainer_Factory(t161) {
  return new (t161 || ClrSelectContainer)(ɵɵdirectiveInject(LayoutService, 8), ɵɵdirectiveInject(ControlClassService), ɵɵdirectiveInject(NgControlService), ɵɵdirectiveInject(IfControlStateService));
};
ClrSelectContainer.ɵcmp = ɵɵdefineComponent({
  type: ClrSelectContainer,
  selectors: [["clr-select-container"]],
  contentQueries: function ClrSelectContainer_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, SelectMultipleControlValueAccessor, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.multiple = _t.first);
    }
  },
  hostVars: 6,
  hostBindings: function ClrSelectContainer_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-form-control", true)("clr-form-control-disabled", ctx.control == null ? null : ctx.control.disabled)("clr-row", ctx.addGrid());
    }
  },
  features: [ɵɵProvidersFeature([IfControlStateService, NgControlService, ControlIdService, ControlClassService]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c39,
  decls: 10,
  vars: 8,
  consts: [[4, "ngIf"], [1, "clr-control-container", 3, "ngClass"], [3, "ngClass"], ["class", "clr-validate-icon", "shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 4, "ngIf"], ["class", "clr-validate-icon", "shape", "check-circle", "status", "success", "aria-hidden", "true", 4, "ngIf"], ["shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 1, "clr-validate-icon"], ["shape", "check-circle", "status", "success", "aria-hidden", "true", 1, "clr-validate-icon"]],
  template: function ClrSelectContainer_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c38);
      ɵɵprojection(0);
      ɵɵtemplate(1, ClrSelectContainer_label_1_Template, 1, 0, "label", 0);
      ɵɵelementStart(2, "div", 1)(3, "div", 2);
      ɵɵprojection(4, 1);
      ɵɵtemplate(5, ClrSelectContainer_cds_icon_5_Template, 1, 0, "cds-icon", 3)(6, ClrSelectContainer_cds_icon_6_Template, 1, 0, "cds-icon", 4);
      ɵɵelementEnd();
      ɵɵtemplate(7, ClrSelectContainer_ng_content_7_Template, 1, 0, "ng-content", 0)(8, ClrSelectContainer_ng_content_8_Template, 1, 0, "ng-content", 0)(9, ClrSelectContainer_ng_content_9_Template, 1, 0, "ng-content", 0);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.label && ctx.addGrid());
      ɵɵadvance();
      ɵɵproperty("ngClass", ctx.controlClass());
      ɵɵadvance();
      ɵɵproperty("ngClass", ctx.wrapperClass());
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showHelper);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
    }
  },
  dependencies: [NgClass, NgIf, CdsIconCustomTag, ClrLabel],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrSelectContainer, [{
    type: Component,
    args: [{
      selector: "clr-select-container",
      template: `
    <ng-content select="label"></ng-content>
    <label *ngIf="!label && addGrid()"></label>
    <div class="clr-control-container" [ngClass]="controlClass()">
      <div [ngClass]="wrapperClass()">
        <ng-content select="[clrSelect]"></ng-content>
        <cds-icon
          *ngIf="showInvalid"
          class="clr-validate-icon"
          shape="exclamation-circle"
          status="danger"
          aria-hidden="true"
        ></cds-icon>
        <cds-icon
          *ngIf="showValid"
          class="clr-validate-icon"
          shape="check-circle"
          status="success"
          aria-hidden="true"
        ></cds-icon>
      </div>
      <ng-content select="clr-control-helper" *ngIf="showHelper"></ng-content>
      <ng-content select="clr-control-error" *ngIf="showInvalid"></ng-content>
      <ng-content select="clr-control-success" *ngIf="showValid"></ng-content>
    </div>
  `,
      host: {
        "[class.clr-form-control]": "true",
        "[class.clr-form-control-disabled]": "control?.disabled",
        "[class.clr-row]": "addGrid()"
      },
      providers: [IfControlStateService, NgControlService, ControlIdService, ControlClassService]
    }]
  }], function() {
    return [{
      type: LayoutService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ControlClassService
    }, {
      type: NgControlService
    }, {
      type: IfControlStateService
    }];
  }, {
    multiple: [{
      type: ContentChild,
      args: [SelectMultipleControlValueAccessor, {
        static: false
      }]
    }]
  });
})();
var ClrSelect = class extends WrappedFormControl {
  constructor(vcr, injector, control, renderer, el) {
    super(vcr, ClrSelectContainer, injector, control, renderer, el);
    this.index = 1;
  }
};
ClrSelect.ɵfac = function ClrSelect_Factory(t161) {
  return new (t161 || ClrSelect)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef));
};
ClrSelect.ɵdir = ɵɵdefineDirective({
  type: ClrSelect,
  selectors: [["", "clrSelect", ""]],
  hostVars: 2,
  hostBindings: function ClrSelect_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-select", true);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrSelect, [{
    type: Directive,
    args: [{
      selector: "[clrSelect]",
      host: {
        "[class.clr-select]": "true"
      }
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }, {
      type: Injector
    }, {
      type: NgControl,
      decorators: [{
        type: Self
      }, {
        type: Optional
      }]
    }, {
      type: Renderer2
    }, {
      type: ElementRef
    }];
  }, null);
})();
var ClrSelectModule = class {
  constructor() {
    r24.addIcons(e30, l7);
  }
};
ClrSelectModule.ɵfac = function ClrSelectModule_Factory(t161) {
  return new (t161 || ClrSelectModule)();
};
ClrSelectModule.ɵmod = ɵɵdefineNgModule({
  type: ClrSelectModule,
  declarations: [ClrSelect, ClrSelectContainer],
  imports: [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule],
  exports: [ClrCommonFormsModule, ClrSelect, ClrSelectContainer]
});
ClrSelectModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule, ClrCommonFormsModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrSelectModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule],
      declarations: [ClrSelect, ClrSelectContainer],
      exports: [ClrCommonFormsModule, ClrSelect, ClrSelectContainer]
    }]
  }], function() {
    return [];
  }, null);
})();
var ClrTextareaContainer = class extends ClrAbstractContainer {
};
ClrTextareaContainer.ɵfac = /* @__PURE__ */ (() => {
  let ɵClrTextareaContainer_BaseFactory;
  return function ClrTextareaContainer_Factory(t161) {
    return (ɵClrTextareaContainer_BaseFactory || (ɵClrTextareaContainer_BaseFactory = ɵɵgetInheritedFactory(ClrTextareaContainer)))(t161 || ClrTextareaContainer);
  };
})();
ClrTextareaContainer.ɵcmp = ɵɵdefineComponent({
  type: ClrTextareaContainer,
  selectors: [["clr-textarea-container"]],
  hostVars: 6,
  hostBindings: function ClrTextareaContainer_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-form-control", true)("clr-form-control-disabled", ctx.control == null ? null : ctx.control.disabled)("clr-row", ctx.addGrid());
    }
  },
  features: [ɵɵProvidersFeature([IfControlStateService, NgControlService, ControlIdService, ControlClassService]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c41,
  decls: 10,
  vars: 7,
  consts: [[4, "ngIf"], [1, "clr-control-container", 3, "ngClass"], [1, "clr-textarea-wrapper"], ["class", "clr-validate-icon", "shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 4, "ngIf"], ["class", "clr-validate-icon", "shape", "check-circle", "status", "success", "aria-hidden", "true", 4, "ngIf"], ["shape", "exclamation-circle", "status", "danger", "aria-hidden", "true", 1, "clr-validate-icon"], ["shape", "check-circle", "status", "success", "aria-hidden", "true", 1, "clr-validate-icon"]],
  template: function ClrTextareaContainer_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c40);
      ɵɵprojection(0);
      ɵɵtemplate(1, ClrTextareaContainer_label_1_Template, 1, 0, "label", 0);
      ɵɵelementStart(2, "div", 1)(3, "div", 2);
      ɵɵprojection(4, 1);
      ɵɵtemplate(5, ClrTextareaContainer_cds_icon_5_Template, 1, 0, "cds-icon", 3)(6, ClrTextareaContainer_cds_icon_6_Template, 1, 0, "cds-icon", 4);
      ɵɵelementEnd();
      ɵɵtemplate(7, ClrTextareaContainer_ng_content_7_Template, 1, 0, "ng-content", 0)(8, ClrTextareaContainer_ng_content_8_Template, 1, 0, "ng-content", 0)(9, ClrTextareaContainer_ng_content_9_Template, 1, 0, "ng-content", 0);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.label && ctx.addGrid());
      ɵɵadvance();
      ɵɵproperty("ngClass", ctx.controlClass());
      ɵɵadvance(3);
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showHelper);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showInvalid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showValid);
    }
  },
  dependencies: [NgClass, NgIf, CdsIconCustomTag, ClrLabel],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTextareaContainer, [{
    type: Component,
    args: [{
      selector: "clr-textarea-container",
      template: `
    <ng-content select="label"></ng-content>
    <label *ngIf="!label && addGrid()"></label>
    <div class="clr-control-container" [ngClass]="controlClass()">
      <div class="clr-textarea-wrapper">
        <ng-content select="[clrTextarea]"></ng-content>
        <cds-icon
          *ngIf="showInvalid"
          class="clr-validate-icon"
          shape="exclamation-circle"
          status="danger"
          aria-hidden="true"
        ></cds-icon>
        <cds-icon
          *ngIf="showValid"
          class="clr-validate-icon"
          shape="check-circle"
          status="success"
          aria-hidden="true"
        ></cds-icon>
      </div>
      <ng-content select="clr-control-helper" *ngIf="showHelper"></ng-content>
      <ng-content select="clr-control-error" *ngIf="showInvalid"></ng-content>
      <ng-content select="clr-control-success" *ngIf="showValid"></ng-content>
    </div>
  `,
      host: {
        "[class.clr-form-control]": "true",
        "[class.clr-form-control-disabled]": "control?.disabled",
        "[class.clr-row]": "addGrid()"
      },
      providers: [IfControlStateService, NgControlService, ControlIdService, ControlClassService]
    }]
  }], null, null);
})();
var ClrTextarea = class extends WrappedFormControl {
  constructor(vcr, injector, control, renderer, el) {
    super(vcr, ClrTextareaContainer, injector, control, renderer, el);
    this.index = 1;
  }
};
ClrTextarea.ɵfac = function ClrTextarea_Factory(t161) {
  return new (t161 || ClrTextarea)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef));
};
ClrTextarea.ɵdir = ɵɵdefineDirective({
  type: ClrTextarea,
  selectors: [["", "clrTextarea", ""]],
  hostVars: 2,
  hostBindings: function ClrTextarea_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-textarea", true);
    }
  },
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTextarea, [{
    type: Directive,
    args: [{
      selector: "[clrTextarea]",
      host: {
        "[class.clr-textarea]": "true"
      }
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }, {
      type: Injector
    }, {
      type: NgControl,
      decorators: [{
        type: Self
      }, {
        type: Optional
      }]
    }, {
      type: Renderer2
    }, {
      type: ElementRef
    }];
  }, null);
})();
var ClrTextareaModule = class {
  constructor() {
    r24.addIcons(e30, l7);
  }
};
ClrTextareaModule.ɵfac = function ClrTextareaModule_Factory(t161) {
  return new (t161 || ClrTextareaModule)();
};
ClrTextareaModule.ɵmod = ɵɵdefineNgModule({
  type: ClrTextareaModule,
  declarations: [ClrTextarea, ClrTextareaContainer],
  imports: [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule],
  exports: [ClrCommonFormsModule, ClrTextarea, ClrTextareaContainer]
});
ClrTextareaModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule, ClrCommonFormsModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTextareaModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule],
      declarations: [ClrTextarea, ClrTextareaContainer],
      exports: [ClrCommonFormsModule, ClrTextarea, ClrTextareaContainer]
    }]
  }], function() {
    return [];
  }, null);
})();
var ClrFormsModule = class {
};
ClrFormsModule.ɵfac = function ClrFormsModule_Factory(t161) {
  return new (t161 || ClrFormsModule)();
};
ClrFormsModule.ɵmod = ɵɵdefineNgModule({
  type: ClrFormsModule,
  imports: [CommonModule],
  exports: [ClrCommonFormsModule, ClrCheckboxModule, ClrComboboxModule, ClrDatepickerModule, ClrInputModule, ClrPasswordModule, ClrRadioModule, ClrSelectModule, ClrTextareaModule, ClrRangeModule, ClrDatalistModule]
});
ClrFormsModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrCommonFormsModule, ClrCheckboxModule, ClrComboboxModule, ClrDatepickerModule, ClrInputModule, ClrPasswordModule, ClrRadioModule, ClrSelectModule, ClrTextareaModule, ClrRangeModule, ClrDatalistModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrFormsModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      exports: [ClrCommonFormsModule, ClrCheckboxModule, ClrComboboxModule, ClrDatepickerModule, ClrInputModule, ClrPasswordModule, ClrRadioModule, ClrSelectModule, ClrTextareaModule, ClrRangeModule, ClrDatalistModule]
    }]
  }], null, null);
})();
var ClrExpandableAnimationModule = class {
};
ClrExpandableAnimationModule.ɵfac = function ClrExpandableAnimationModule_Factory(t161) {
  return new (t161 || ClrExpandableAnimationModule)();
};
ClrExpandableAnimationModule.ɵmod = ɵɵdefineNgModule({
  type: ClrExpandableAnimationModule,
  declarations: [ClrExpandableAnimation],
  imports: [CommonModule],
  exports: [ClrExpandableAnimation]
});
ClrExpandableAnimationModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrExpandableAnimationModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [EXPANDABLE_ANIMATION_DIRECTIVES],
      exports: [EXPANDABLE_ANIMATION_DIRECTIVES]
    }]
  }], null, null);
})();
var CdkDragModule_CdkDrag = class extends CdkDrag {
};
CdkDragModule_CdkDrag.ɵfac = /* @__PURE__ */ (() => {
  let ɵCdkDragModule_CdkDrag_BaseFactory;
  return function CdkDragModule_CdkDrag_Factory(t161) {
    return (ɵCdkDragModule_CdkDrag_BaseFactory || (ɵCdkDragModule_CdkDrag_BaseFactory = ɵɵgetInheritedFactory(CdkDragModule_CdkDrag)))(t161 || CdkDragModule_CdkDrag);
  };
})();
CdkDragModule_CdkDrag.ɵdir = ɵɵdefineDirective({
  type: CdkDragModule_CdkDrag,
  selectors: [["", "cdkDrag", ""]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkDragModule_CdkDrag, [{
    type: Directive,
    args: [{
      selector: "[cdkDrag]"
    }]
  }], null, null);
})();
var CdkDragModule = class {
};
CdkDragModule.ɵfac = function CdkDragModule_Factory(t161) {
  return new (t161 || CdkDragModule)();
};
CdkDragModule.ɵmod = ɵɵdefineNgModule({
  type: CdkDragModule,
  declarations: [CdkDragModule_CdkDrag],
  exports: [CdkDragModule_CdkDrag]
});
CdkDragModule.ɵinj = ɵɵdefineInjector({});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkDragModule, [{
    type: NgModule,
    args: [{
      declarations: [CdkDragModule_CdkDrag],
      exports: [CdkDragModule_CdkDrag]
    }]
  }], null, null);
})();
var OutsideClick = class {
  constructor(host, renderer, ngZone) {
    this.strict = false;
    this.outsideClick = new EventEmitter(false);
    ngZone.runOutsideAngular(() => {
      this.documentClickListener = renderer.listen("document", "click", (event) => {
        if (host.nativeElement === event.target) {
          return;
        }
        if (!this.strict && host.nativeElement.contains(event.target)) {
          return;
        }
        ngZone.run(() => {
          this.outsideClick.emit(event);
        });
      });
    });
  }
  ngOnDestroy() {
    this.documentClickListener();
  }
};
OutsideClick.ɵfac = function OutsideClick_Factory(t161) {
  return new (t161 || OutsideClick)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NgZone));
};
OutsideClick.ɵdir = ɵɵdefineDirective({
  type: OutsideClick,
  selectors: [["", "clrOutsideClick", ""]],
  inputs: {
    strict: [InputFlags.None, "clrStrict", "strict"]
  },
  outputs: {
    outsideClick: "clrOutsideClick"
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(OutsideClick, [{
    type: Directive,
    args: [{
      selector: "[clrOutsideClick]"
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: NgZone
    }];
  }, {
    strict: [{
      type: Input,
      args: ["clrStrict"]
    }],
    outsideClick: [{
      type: Output,
      args: ["clrOutsideClick"]
    }]
  });
})();
var OUSTIDE_CLICK_DIRECTIVES = [OutsideClick];
var ClrOutsideClickModule = class {
};
ClrOutsideClickModule.ɵfac = function ClrOutsideClickModule_Factory(t161) {
  return new (t161 || ClrOutsideClickModule)();
};
ClrOutsideClickModule.ɵmod = ɵɵdefineNgModule({
  type: ClrOutsideClickModule,
  declarations: [OutsideClick],
  imports: [CommonModule],
  exports: [OutsideClick]
});
ClrOutsideClickModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrOutsideClickModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [OUSTIDE_CLICK_DIRECTIVES],
      exports: [OUSTIDE_CLICK_DIRECTIVES]
    }]
  }], null, null);
})();
var CustomFilter = class {
};
var StateDebouncer = class {
  constructor() {
    this.nbChanges = 0;
    this._change = new Subject();
  }
  // We do not want to expose the Subject itself, but the Observable which is read-only
  get change() {
    return this._change.asObservable();
  }
  changeStart() {
    this.nbChanges++;
  }
  changeDone() {
    if (--this.nbChanges === 0) {
      this._change.next();
    }
  }
};
StateDebouncer.ɵfac = function StateDebouncer_Factory(t161) {
  return new (t161 || StateDebouncer)();
};
StateDebouncer.ɵprov = ɵɵdefineInjectable({
  token: StateDebouncer,
  factory: StateDebouncer.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StateDebouncer, [{
    type: Injectable
  }], null, null);
})();
var Page = class {
  constructor(stateDebouncer) {
    this.stateDebouncer = stateDebouncer;
    this.activated = false;
    this._size = 0;
    this._current = 1;
    this._change = new Subject();
    this.preventEmit = false;
    this._sizeChange = new Subject();
  }
  get size() {
    return this._size;
  }
  set size(size) {
    const oldSize = this._size;
    if (size !== oldSize) {
      if (!this.preventEmit) {
        this.stateDebouncer.changeStart();
      }
      this._size = size;
      if (size === 0) {
        this._current = 1;
      } else {
        this._current = Math.floor(oldSize / size * (this._current - 1)) + 1;
      }
      if (!this.preventEmit) {
        this._change.next(this._current);
        this._sizeChange.next(this._size);
        this.stateDebouncer.changeDone();
      }
    }
    this.preventEmit = false;
  }
  get totalItems() {
    return this._totalItems || 0;
  }
  set totalItems(total) {
    this._totalItems = total;
    if (this.current > this.last) {
      this.current = this.last;
    }
  }
  get last() {
    if (this._last) {
      return this._last;
    }
    if (this.size > 0 && this.totalItems) {
      return Math.ceil(this.totalItems / this.size);
    }
    return 1;
  }
  set last(page) {
    this._last = page;
  }
  // We do not want to expose the Subject itself, but the Observable which is read-only
  get change() {
    return this._change.asObservable();
  }
  get sizeChange() {
    return this._sizeChange.asObservable();
  }
  get current() {
    return this._current;
  }
  set current(page) {
    if (page !== this._current) {
      this.stateDebouncer.changeStart();
      this._current = page;
      this._change.next(page);
      this.stateDebouncer.changeDone();
    }
  }
  /**
   * Index of the first item displayed on the current page, starting at 0, -1 if none displayed
   */
  get firstItem() {
    if (this._totalItems === 0) {
      return -1;
    }
    if (this.size === 0) {
      return 0;
    }
    return (this.current - 1) * this.size;
  }
  /**
   * Index of the last item displayed on the current page, starting at 0, -1 if none displayed
   */
  get lastItem() {
    if (this._totalItems === 0) {
      return -1;
    }
    if (this.size === 0) {
      return this.totalItems - 1;
    }
    let lastInPage = this.current * this.size - 1;
    if (this.totalItems) {
      lastInPage = Math.min(lastInPage, this.totalItems - 1);
    }
    return lastInPage;
  }
  /**
   * Moves to the previous page if it exists
   */
  previous() {
    if (this.current > 1) {
      this.current--;
    }
  }
  /**
   * Moves to the next page if it exists
   */
  next() {
    if (this.current < this.last) {
      this.current++;
    }
  }
  /**
   * Resets the page size to 0
   */
  resetPageSize(preventEmit = false) {
    this.preventEmit = preventEmit;
    this.size = 0;
  }
};
Page.ɵfac = function Page_Factory(t161) {
  return new (t161 || Page)(ɵɵinject(StateDebouncer));
};
Page.ɵprov = ɵɵdefineInjectable({
  token: Page,
  factory: Page.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Page, [{
    type: Injectable
  }], function() {
    return [{
      type: StateDebouncer
    }];
  }, null);
})();
var FiltersProvider = class {
  constructor(_page, stateDebouncer) {
    this._page = _page;
    this.stateDebouncer = stateDebouncer;
    this._change = new Subject();
    this._all = [];
  }
  // We do not want to expose the Subject itself, but the Observable which is read-only
  get change() {
    return this._change.asObservable();
  }
  /**
   * Tests if at least one filter is currently active
   */
  hasActiveFilters() {
    for (const {
      filter: filter3
    } of this._all) {
      if (filter3 && filter3.isActive()) {
        return true;
      }
    }
    return false;
  }
  /**
   * Returns a list of all currently active filters
   */
  getActiveFilters() {
    const ret = [];
    for (const {
      filter: filter3
    } of this._all) {
      if (filter3 && filter3.isActive()) {
        ret.push(filter3);
      }
    }
    return ret;
  }
  /**
   * Registers a filter, and returns a deregistration function
   */
  add(filter3) {
    const subscription = filter3.changes.subscribe(() => this.resetPageAndEmitFilterChange([filter3]));
    let hasUnregistered = false;
    const registered = new RegisteredFilter(filter3, () => {
      if (hasUnregistered) {
        return;
      }
      subscription.unsubscribe();
      const matchIndex = this._all.findIndex((item) => item.filter === filter3);
      if (matchIndex >= 0) {
        this._all.splice(matchIndex, 1);
      }
      if (filter3.isActive()) {
        this.resetPageAndEmitFilterChange([]);
      }
      hasUnregistered = true;
    });
    this._all.push(registered);
    if (filter3.isActive()) {
      this.resetPageAndEmitFilterChange([filter3]);
    }
    return registered;
  }
  /**
   * Accepts an item if it is accepted by all currently active filters
   */
  accepts(item) {
    for (const {
      filter: filter3
    } of this._all) {
      if (filter3 && filter3.isActive() && !filter3.accepts(item)) {
        return false;
      }
    }
    return true;
  }
  resetPageAndEmitFilterChange(filters) {
    this.stateDebouncer.changeStart();
    this._page.current = 1;
    this._change.next(filters);
    this.stateDebouncer.changeDone();
  }
};
FiltersProvider.ɵfac = function FiltersProvider_Factory(t161) {
  return new (t161 || FiltersProvider)(ɵɵinject(Page), ɵɵinject(StateDebouncer));
};
FiltersProvider.ɵprov = ɵɵdefineInjectable({
  token: FiltersProvider,
  factory: FiltersProvider.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FiltersProvider, [{
    type: Injectable
  }], function() {
    return [{
      type: Page
    }, {
      type: StateDebouncer
    }];
  }, null);
})();
var RegisteredFilter = class {
  constructor(filter3, unregister) {
    this.filter = filter3;
    this.unregister = unregister;
  }
};
var DatagridFilterRegistrar = class {
  constructor(filters) {
    this.filters = filters;
  }
  get filter() {
    return this.registered && this.registered.filter;
  }
  ngOnDestroy() {
    this.deleteFilter();
  }
  setFilter(filter3) {
    this.deleteFilter();
    if (filter3 instanceof RegisteredFilter) {
      this.registered = filter3;
    } else if (filter3) {
      this.registered = this.filters.add(filter3);
    }
  }
  deleteFilter() {
    if (this.registered) {
      this.registered.unregister();
      delete this.registered;
    }
  }
};
DatagridFilterRegistrar.ɵfac = function DatagridFilterRegistrar_Factory(t161) {
  return new (t161 || DatagridFilterRegistrar)(ɵɵdirectiveInject(FiltersProvider));
};
DatagridFilterRegistrar.ɵdir = ɵɵdefineDirective({
  type: DatagridFilterRegistrar
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatagridFilterRegistrar, [{
    type: Directive
  }], function() {
    return [{
      type: FiltersProvider
    }];
  }, null);
})();
var ClrDatagridFilter = class extends DatagridFilterRegistrar {
  constructor(_filters, commonStrings, smartToggleService, platformId, elementRef) {
    super(_filters);
    this.commonStrings = commonStrings;
    this.smartToggleService = smartToggleService;
    this.platformId = platformId;
    this.elementRef = elementRef;
    this.openChange = new EventEmitter(false);
    this.ariaExpanded = false;
    this.popoverId = uniqueIdFactory();
    this.smartPosition = {
      axis: ClrAxis.VERTICAL,
      side: ClrSide.AFTER,
      anchor: ClrAlignment.END,
      content: ClrAlignment.END
    };
    this._open = false;
    this.subs = [];
    this.subs.push(smartToggleService.openChange.subscribe((change) => {
      this.open = change;
      this.ariaExpanded = change;
    }));
  }
  get open() {
    return this._open;
  }
  set open(open) {
    open = !!open;
    if (this.open !== open) {
      this.smartToggleService.open = open;
      this.openChange.emit(open);
      if (!open && isPlatformBrowser(this.platformId)) {
        this.anchor.nativeElement.focus();
      }
      this._open = open;
    }
  }
  set customFilter(filter3) {
    this.setFilter(filter3);
  }
  /**
   * Indicates if the filter is currently active
   */
  get active() {
    return !!this.filter && this.filter.isActive();
  }
  ngOnChanges() {
    this.setToggleButtonAriaLabel();
  }
  ngOnDestroy() {
    super.ngOnDestroy();
    this.subs.forEach((sub) => sub.unsubscribe());
  }
  /**
   * This is not in a getter to prevent "expression has changed after it was checked" errors.
   * And it's more performant this way since it only runs on change.
   */
  setToggleButtonAriaLabel() {
    const columnElement = this.elementRef.nativeElement?.closest("clr-dg-column");
    const columnTitleElement = columnElement?.querySelector(".datagrid-column-title");
    const columnTitle = columnTitleElement?.textContent.trim().toLocaleLowerCase();
    this.toggleButtonAriaLabel = this.commonStrings.parse(this.commonStrings.keys.datagridFilterAriaLabel, {
      COLUMN: columnTitle || ""
    });
  }
};
ClrDatagridFilter.ɵfac = function ClrDatagridFilter_Factory(t161) {
  return new (t161 || ClrDatagridFilter)(ɵɵdirectiveInject(FiltersProvider), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(ClrPopoverToggleService), ɵɵdirectiveInject(PLATFORM_ID), ɵɵdirectiveInject(ElementRef));
};
ClrDatagridFilter.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridFilter,
  selectors: [["clr-dg-filter"]],
  viewQuery: function ClrDatagridFilter_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c42, 5, ElementRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.anchor = _t.first);
    }
  },
  inputs: {
    open: [InputFlags.None, "clrDgFilterOpen", "open"],
    customFilter: [InputFlags.None, "clrDgFilter", "customFilter"]
  },
  outputs: {
    openChange: "clrDgFilterOpenChange"
  },
  features: [ɵɵProvidersFeature([{
    provide: CustomFilter,
    useExisting: ClrDatagridFilter
  }]), ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature],
  ngContentSelectors: _c02,
  decls: 4,
  vars: 13,
  consts: [["anchor", ""], ["type", "button", "clrPopoverAnchor", "", "clrPopoverOpenCloseButton", "", 1, "datagrid-filter-toggle"], ["solid", ""], ["class", "datagrid-filter", "cdkTrapFocus", "", "role", "dialog", 3, "id", 4, "clrPopoverContent", "clrPopoverContentAt", "clrPopoverContentOutsideClickToClose", "clrPopoverContentScrollToClose"], ["cdkTrapFocus", "", "role", "dialog", 1, "datagrid-filter", 3, "id"], [1, "datagrid-filter-close-wrapper"], ["type", "button", "clrPopoverCloseButton", "", 1, "close"], ["shape", "window-close"]],
  template: function ClrDatagridFilter_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "button", 1, 0);
      ɵɵelement(2, "cds-icon", 2);
      ɵɵelementEnd();
      ɵɵtemplate(3, ClrDatagridFilter_div_3_Template, 5, 3, "div", 3);
    }
    if (rf & 2) {
      ɵɵclassProp("datagrid-filter-open", ctx.open)("datagrid-filtered", ctx.active);
      ɵɵattribute("aria-label", ctx.toggleButtonAriaLabel)("aria-expanded", ctx.ariaExpanded)("aria-controls", ctx.popoverId);
      ɵɵadvance(2);
      ɵɵattribute("status", ctx.active ? "info" : null)("shape", ctx.active ? "filter-grid-circle" : "filter-grid");
      ɵɵadvance();
      ɵɵproperty("clrPopoverContent", ctx.open)("clrPopoverContentAt", ctx.smartPosition)("clrPopoverContentOutsideClickToClose", true)("clrPopoverContentScrollToClose", true);
    }
  },
  dependencies: [CdkTrapFocusModule_CdkTrapFocus, CdsIconCustomTag, ClrPopoverAnchor, ClrPopoverCloseButton, ClrPopoverOpenCloseButton, ClrPopoverContent],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridFilter, [{
    type: Component,
    args: [{
      selector: "clr-dg-filter",
      // We register this component as a CustomFilter, for the parent column to detect it.
      providers: [{
        provide: CustomFilter,
        useExisting: ClrDatagridFilter
      }],
      template: `
    <button
      class="datagrid-filter-toggle"
      type="button"
      #anchor
      [attr.aria-label]="toggleButtonAriaLabel"
      [attr.aria-expanded]="ariaExpanded"
      [attr.aria-controls]="popoverId"
      clrPopoverAnchor
      clrPopoverOpenCloseButton
      [class.datagrid-filter-open]="open"
      [class.datagrid-filtered]="active"
    >
      <cds-icon
        [attr.status]="active ? 'info' : null"
        [attr.shape]="active ? 'filter-grid-circle' : 'filter-grid'"
        solid
      ></cds-icon>
    </button>

    <div
      class="datagrid-filter"
      [id]="popoverId"
      cdkTrapFocus
      *clrPopoverContent="open; at: smartPosition; outsideClickToClose: true; scrollToClose: true"
      role="dialog"
      [attr.aria-label]="commonStrings.keys.datagridFilterDialogAriaLabel"
    >
      <div class="datagrid-filter-close-wrapper">
        <button type="button" class="close" clrPopoverCloseButton>
          <cds-icon shape="window-close" [attr.title]="commonStrings.keys.close"></cds-icon>
        </button>
      </div>

      <ng-content></ng-content>
    </div>
  `
    }]
  }], function() {
    return [{
      type: FiltersProvider
    }, {
      type: ClrCommonStringsService
    }, {
      type: ClrPopoverToggleService
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }, {
      type: ElementRef
    }];
  }, {
    openChange: [{
      type: Output,
      args: ["clrDgFilterOpenChange"]
    }],
    anchor: [{
      type: ViewChild,
      args: ["anchor", {
        read: ElementRef
      }]
    }],
    open: [{
      type: Input,
      args: ["clrDgFilterOpen"]
    }],
    customFilter: [{
      type: Input,
      args: ["clrDgFilter"]
    }]
  });
})();
var NestedProperty = class {
  constructor(prop) {
    this.prop = prop;
    if (prop.indexOf(".") >= 0) {
      this.splitProp = prop.split(".");
    }
  }
  // Safe getter for a deep object property, will not throw an error but return
  // undefined if one of the intermediate properties is null or undefined.
  getPropValue(item) {
    if (this.splitProp) {
      let value = item;
      for (const nestedProp of this.splitProp) {
        if (value === null || typeof value === "undefined" || typeof value[nestedProp] === "undefined") {
          return void 0;
        }
        value = value[nestedProp];
      }
      return value;
    } else {
      return item[this.prop];
    }
  }
};
var DatagridPropertyNumericFilter = class {
  constructor(prop, exact = false) {
    this.prop = prop;
    this.exact = exact;
    this.nestedProp = new NestedProperty(prop);
  }
  accepts(item, low, high) {
    const propValue = this.nestedProp.getPropValue(item);
    if (propValue === void 0) {
      return false;
    }
    if (low !== null && (typeof propValue !== "number" || propValue < low)) {
      return false;
    }
    if (high !== null && (typeof propValue !== "number" || propValue > high)) {
      return false;
    }
    return true;
  }
};
var DatagridNumericFilterImpl = class _DatagridNumericFilterImpl {
  constructor(filterFn) {
    this.filterFn = filterFn;
    this._changes = new Subject();
    this._low = null;
    this._high = null;
  }
  // We do not want to expose the Subject itself, but the Observable which is read-only
  get changes() {
    return this._changes.asObservable();
  }
  get value() {
    return [this._low, this._high];
  }
  set value(vals) {
    const low = vals[0];
    const high = vals[1];
    if (low !== this._low || high !== this._high) {
      this._low = low;
      this._high = high;
      this._changes.next([this._low, this._high]);
    }
  }
  get low() {
    return this._low;
  }
  set low(low) {
    if (low !== this._low) {
      this._low = low;
      this._changes.next([this._low, this._high]);
    }
  }
  get high() {
    return this._high;
  }
  set high(high) {
    if (high !== this._high) {
      this._high = high;
      this._changes.next([this._low, this._high]);
    }
  }
  get state() {
    if (this.filterFn instanceof DatagridPropertyNumericFilter) {
      return {
        property: this.filterFn.prop,
        low: this._low,
        high: this._high
      };
    }
    return this;
  }
  /**
   * Indicates if the filter is currently active, (at least one input is set)
   */
  isActive() {
    return this._low !== null || this.high !== null;
  }
  /**
   * Tests if an item matches a search text
   */
  accepts(item) {
    return this.filterFn.accepts(item, this._low, this._high);
  }
  equals(other) {
    if (other instanceof _DatagridNumericFilterImpl) {
      if (other.filterFn instanceof DatagridPropertyNumericFilter) {
        return this.filterFn instanceof DatagridPropertyNumericFilter && other.filterFn.prop === this.filterFn.prop && other.low === this._low && other.high === this._high;
      }
      return other === this;
    }
    return false;
  }
};
var DatagridNumericFilter = class extends DatagridFilterRegistrar {
  constructor(filters, domAdapter, commonStrings, popoverToggleService, ngZone) {
    super(filters);
    this.domAdapter = domAdapter;
    this.commonStrings = commonStrings;
    this.popoverToggleService = popoverToggleService;
    this.ngZone = ngZone;
    this.filterValueChange = new EventEmitter();
    this.open = false;
    this.subscriptions = [];
  }
  /**
   * Common setter for the input values
   */
  get value() {
    return [this.filter.low, this.filter.high];
  }
  set value(values) {
    if (this.filter && Array.isArray(values)) {
      if (values && (values[0] !== this.filter.low || values[1] !== this.filter.high)) {
        if (typeof values[0] === "number") {
          this.filter.low = values[0];
        } else {
          this.filter.low = null;
        }
        if (typeof values[1] === "number") {
          this.filter.high = values[1];
        } else {
          this.filter.high = null;
        }
        this.filterValueChange.emit(values);
      }
    } else {
      this.initFilterValues = values;
    }
  }
  /**
   * Customizable filter logic based on high and low values
   */
  set customNumericFilter(value) {
    if (value instanceof RegisteredFilter) {
      this.setFilter(value);
    } else {
      this.setFilter(new DatagridNumericFilterImpl(value));
    }
    if (this.initFilterValues) {
      this.value = this.initFilterValues;
      delete this.initFilterValues;
    }
  }
  get maxPlaceholderValue() {
    return this.maxPlaceholder || this.commonStrings.keys.maxValue;
  }
  get minPlaceholderValue() {
    return this.minPlaceholder || this.commonStrings.keys.minValue;
  }
  get low() {
    if (typeof this.filter.low === "number" && isFinite(this.filter.low)) {
      return this.filter.low;
    } else {
      return null;
    }
  }
  set low(low) {
    if (typeof low === "number" && low !== this.filter.low) {
      this.filter.low = low;
      this.filterValueChange.emit([this.filter.low, this.filter.high]);
    } else if (typeof low !== "number") {
      this.filter.low = null;
      this.filterValueChange.emit([this.filter.low, this.filter.high]);
    }
  }
  get high() {
    if (typeof this.filter.high === "number" && isFinite(this.filter.high)) {
      return this.filter.high;
    } else {
      return null;
    }
  }
  set high(high) {
    if (typeof high === "number" && high !== this.filter.high) {
      this.filter.high = high;
      this.filterValueChange.emit([this.filter.low, this.filter.high]);
    } else if (typeof high !== "number") {
      this.filter.high = null;
      this.filterValueChange.emit([this.filter.low, this.filter.high]);
    }
  }
  ngAfterViewInit() {
    this.subscriptions.push(this.popoverToggleService.openChange.subscribe((openChange) => {
      this.open = openChange;
      this.ngZone.runOutsideAngular(() => {
        requestAnimationFrame(() => {
          this.domAdapter.focus(this.input.nativeElement);
        });
      });
    }));
  }
  ngOnDestroy() {
    super.ngOnDestroy();
    this.subscriptions.forEach((sub) => {
      sub.unsubscribe();
    });
  }
};
DatagridNumericFilter.ɵfac = function DatagridNumericFilter_Factory(t161) {
  return new (t161 || DatagridNumericFilter)(ɵɵdirectiveInject(FiltersProvider), ɵɵdirectiveInject(DomAdapter), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(ClrPopoverToggleService), ɵɵdirectiveInject(NgZone));
};
DatagridNumericFilter.ɵcmp = ɵɵdefineComponent({
  type: DatagridNumericFilter,
  selectors: [["clr-dg-numeric-filter"]],
  viewQuery: function DatagridNumericFilter_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c43, 5);
      ɵɵviewQuery(ClrDatagridFilter, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.input = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.filterContainer = _t.first);
    }
  },
  inputs: {
    minPlaceholder: [InputFlags.None, "clrFilterMinPlaceholder", "minPlaceholder"],
    maxPlaceholder: [InputFlags.None, "clrFilterMaxPlaceholder", "maxPlaceholder"],
    value: [InputFlags.None, "clrFilterValue", "value"],
    customNumericFilter: [InputFlags.None, "clrDgNumericFilter", "customNumericFilter"]
  },
  outputs: {
    filterValueChange: "clrFilterValueChange"
  },
  features: [ɵɵProvidersFeature([{
    provide: CustomFilter,
    useExisting: DatagridNumericFilter
  }]), ɵɵInheritDefinitionFeature],
  decls: 6,
  vars: 8,
  consts: [["input_low", ""], ["input_high", ""], [3, "clrDgFilterOpenChange", "clrDgFilter", "clrDgFilterOpen"], ["type", "number", "autocomplete", "off", "name", "low", 1, "datagrid-numeric-filter-input", 3, "ngModelChange", "ngModel", "placeholder"], [1, "datagrid-filter-input-spacer"], ["type", "number", "autocomplete", "off", "name", "high", 1, "datagrid-numeric-filter-input", 3, "ngModelChange", "ngModel", "placeholder"]],
  template: function DatagridNumericFilter_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = ɵɵgetCurrentView();
      ɵɵelementStart(0, "clr-dg-filter", 2);
      ɵɵtwoWayListener("clrDgFilterOpenChange", function DatagridNumericFilter_Template_clr_dg_filter_clrDgFilterOpenChange_0_listener($event) {
        ɵɵrestoreView(_r1);
        ɵɵtwoWayBindingSet(ctx.open, $event) || (ctx.open = $event);
        return ɵɵresetView($event);
      });
      ɵɵelementStart(1, "input", 3, 0);
      ɵɵtwoWayListener("ngModelChange", function DatagridNumericFilter_Template_input_ngModelChange_1_listener($event) {
        ɵɵrestoreView(_r1);
        ɵɵtwoWayBindingSet(ctx.low, $event) || (ctx.low = $event);
        return ɵɵresetView($event);
      });
      ɵɵelementEnd();
      ɵɵelement(3, "span", 4);
      ɵɵelementStart(4, "input", 5, 1);
      ɵɵtwoWayListener("ngModelChange", function DatagridNumericFilter_Template_input_ngModelChange_4_listener($event) {
        ɵɵrestoreView(_r1);
        ɵɵtwoWayBindingSet(ctx.high, $event) || (ctx.high = $event);
        return ɵɵresetView($event);
      });
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵproperty("clrDgFilter", ctx.registered);
      ɵɵtwoWayProperty("clrDgFilterOpen", ctx.open);
      ɵɵadvance();
      ɵɵtwoWayProperty("ngModel", ctx.low);
      ɵɵproperty("placeholder", ctx.minPlaceholderValue);
      ɵɵattribute("aria-label", ctx.minPlaceholderValue);
      ɵɵadvance(3);
      ɵɵtwoWayProperty("ngModel", ctx.high);
      ɵɵproperty("placeholder", ctx.maxPlaceholderValue);
      ɵɵattribute("aria-label", ctx.maxPlaceholderValue);
    }
  },
  dependencies: [DefaultValueAccessor, NumberValueAccessor, NgControlStatus, NgModel, ClrDatagridFilter],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatagridNumericFilter, [{
    type: Component,
    args: [{
      selector: "clr-dg-numeric-filter",
      providers: [{
        provide: CustomFilter,
        useExisting: DatagridNumericFilter
      }],
      template: `
    <clr-dg-filter [clrDgFilter]="registered" [(clrDgFilterOpen)]="open">
      <input
        class="datagrid-numeric-filter-input"
        #input_low
        type="number"
        autocomplete="off"
        name="low"
        [(ngModel)]="low"
        [placeholder]="minPlaceholderValue"
        [attr.aria-label]="minPlaceholderValue"
      />
      <span class="datagrid-filter-input-spacer"></span>
      <input
        class="datagrid-numeric-filter-input"
        #input_high
        type="number"
        autocomplete="off"
        name="high"
        [(ngModel)]="high"
        [placeholder]="maxPlaceholderValue"
        [attr.aria-label]="maxPlaceholderValue"
      />
    </clr-dg-filter>
  `
    }]
  }], function() {
    return [{
      type: FiltersProvider
    }, {
      type: DomAdapter
    }, {
      type: ClrCommonStringsService
    }, {
      type: ClrPopoverToggleService
    }, {
      type: NgZone
    }];
  }, {
    minPlaceholder: [{
      type: Input,
      args: ["clrFilterMinPlaceholder"]
    }],
    maxPlaceholder: [{
      type: Input,
      args: ["clrFilterMaxPlaceholder"]
    }],
    filterValueChange: [{
      type: Output,
      args: ["clrFilterValueChange"]
    }],
    input: [{
      type: ViewChild,
      args: ["input_low"]
    }],
    filterContainer: [{
      type: ViewChild,
      args: [ClrDatagridFilter]
    }],
    value: [{
      type: Input,
      args: ["clrFilterValue"]
    }],
    customNumericFilter: [{
      type: Input,
      args: ["clrDgNumericFilter"]
    }]
  });
})();
var DatagridPropertyStringFilter = class {
  constructor(prop, exact = false) {
    this.prop = prop;
    this.exact = exact;
    this.nestedProp = new NestedProperty(prop);
  }
  accepts(item, search) {
    const propValue = this.nestedProp.getPropValue(item);
    if (typeof propValue === "undefined") {
      return false;
    } else if (this.exact) {
      return ("" + propValue).toLowerCase() === search;
    } else {
      return ("" + propValue).toLowerCase().indexOf(search) >= 0;
    }
  }
};
var DatagridStringFilterImpl = class _DatagridStringFilterImpl {
  constructor(filterFn) {
    this.filterFn = filterFn;
    this._changes = new Subject();
    this._lowerCaseValue = "";
    this._rawValue = "";
  }
  // We do not want to expose the Subject itself, but the Observable which is read-only
  get changes() {
    return this._changes.asObservable();
  }
  get lowerCaseValue() {
    return this._lowerCaseValue;
  }
  get state() {
    if (this.filterFn instanceof DatagridPropertyStringFilter) {
      return {
        property: this.filterFn.prop,
        value: this.value
      };
    }
    return this;
  }
  get value() {
    return this._rawValue;
  }
  /**
   * Common setter for the input value
   */
  set value(value) {
    if (!value) {
      value = "";
    }
    if (value !== this._rawValue) {
      this._rawValue = value;
      this._lowerCaseValue = value.toLowerCase().trim();
      this._changes.next(value);
    }
  }
  /**
   * Indicates if the filter is currently active, meaning the input is not empty
   */
  isActive() {
    return !!this.value;
  }
  /**
   * Tests if an item matches a search text
   */
  accepts(item) {
    return this.filterFn.accepts(item, this.lowerCaseValue);
  }
  equals(other) {
    if (other instanceof _DatagridStringFilterImpl) {
      if (other.filterFn instanceof DatagridPropertyStringFilter) {
        return this.filterFn instanceof DatagridPropertyStringFilter && other.filterFn.prop === this.filterFn.prop && other.value === this.value;
      }
      return other === this;
    }
    return false;
  }
};
var DatagridStringFilter = class extends DatagridFilterRegistrar {
  constructor(filters, domAdapter, commonStrings, smartToggleService, ngZone) {
    super(filters);
    this.domAdapter = domAdapter;
    this.commonStrings = commonStrings;
    this.smartToggleService = smartToggleService;
    this.ngZone = ngZone;
    this.filterValueChange = new EventEmitter();
    this.open = false;
    this.subs = [];
  }
  /**
   * Customizable filter logic based on a search text
   */
  set customStringFilter(value) {
    if (value instanceof RegisteredFilter) {
      this.setFilter(value);
    } else {
      this.setFilter(new DatagridStringFilterImpl(value));
    }
    if (this.initFilterValue) {
      this.value = this.initFilterValue;
      delete this.initFilterValue;
    }
  }
  /**
   * Common setter for the input value
   */
  get value() {
    return this.filter.value;
  }
  set value(value) {
    if (this.filter && typeof value === "string") {
      if (!value) {
        value = "";
      }
      if (value !== this.filter.value) {
        this.filter.value = value;
        this.filterValueChange.emit(value);
      }
    } else {
      this.initFilterValue = value;
    }
  }
  get placeholderValue() {
    return this.placeholder || this.commonStrings.keys.filterItems;
  }
  ngAfterViewInit() {
    this.subs.push(this.smartToggleService.openChange.subscribe((openChange) => {
      this.open = openChange;
      this.ngZone.runOutsideAngular(() => {
        requestAnimationFrame(() => {
          this.domAdapter.focus(this.input.nativeElement);
        });
      });
    }));
  }
  ngOnDestroy() {
    super.ngOnDestroy();
    this.subs.forEach((sub) => sub.unsubscribe());
  }
};
DatagridStringFilter.ɵfac = function DatagridStringFilter_Factory(t161) {
  return new (t161 || DatagridStringFilter)(ɵɵdirectiveInject(FiltersProvider), ɵɵdirectiveInject(DomAdapter), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(ClrPopoverToggleService), ɵɵdirectiveInject(NgZone));
};
DatagridStringFilter.ɵcmp = ɵɵdefineComponent({
  type: DatagridStringFilter,
  selectors: [["clr-dg-string-filter"]],
  viewQuery: function DatagridStringFilter_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c44, 5);
      ɵɵviewQuery(ClrDatagridFilter, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.input = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.filterContainer = _t.first);
    }
  },
  inputs: {
    placeholder: [InputFlags.None, "clrFilterPlaceholder", "placeholder"],
    customStringFilter: [InputFlags.None, "clrDgStringFilter", "customStringFilter"],
    value: [InputFlags.None, "clrFilterValue", "value"]
  },
  outputs: {
    filterValueChange: "clrFilterValueChange"
  },
  features: [ɵɵProvidersFeature([{
    provide: CustomFilter,
    useExisting: DatagridStringFilter
  }]), ɵɵInheritDefinitionFeature],
  decls: 3,
  vars: 5,
  consts: [["input", ""], [3, "clrDgFilterOpenChange", "clrDgFilter", "clrDgFilterOpen"], ["type", "text", "autocomplete", "off", "name", "search", 1, "clr-input", 3, "ngModelChange", "ngModel", "placeholder"]],
  template: function DatagridStringFilter_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = ɵɵgetCurrentView();
      ɵɵelementStart(0, "clr-dg-filter", 1);
      ɵɵtwoWayListener("clrDgFilterOpenChange", function DatagridStringFilter_Template_clr_dg_filter_clrDgFilterOpenChange_0_listener($event) {
        ɵɵrestoreView(_r1);
        ɵɵtwoWayBindingSet(ctx.open, $event) || (ctx.open = $event);
        return ɵɵresetView($event);
      });
      ɵɵelementStart(1, "input", 2, 0);
      ɵɵtwoWayListener("ngModelChange", function DatagridStringFilter_Template_input_ngModelChange_1_listener($event) {
        ɵɵrestoreView(_r1);
        ɵɵtwoWayBindingSet(ctx.value, $event) || (ctx.value = $event);
        return ɵɵresetView($event);
      });
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵproperty("clrDgFilter", ctx.registered);
      ɵɵtwoWayProperty("clrDgFilterOpen", ctx.open);
      ɵɵadvance();
      ɵɵtwoWayProperty("ngModel", ctx.value);
      ɵɵproperty("placeholder", ctx.placeholderValue);
      ɵɵattribute("aria-label", ctx.placeholderValue);
    }
  },
  dependencies: [DefaultValueAccessor, NgControlStatus, NgModel, ClrDatagridFilter],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatagridStringFilter, [{
    type: Component,
    args: [{
      selector: "clr-dg-string-filter",
      providers: [{
        provide: CustomFilter,
        useExisting: DatagridStringFilter
      }],
      template: `
    <clr-dg-filter [clrDgFilter]="registered" [(clrDgFilterOpen)]="open">
      <input
        #input
        type="text"
        autocomplete="off"
        name="search"
        [(ngModel)]="value"
        class="clr-input"
        [attr.aria-label]="placeholderValue"
        [placeholder]="placeholderValue"
      />
    </clr-dg-filter>
  `
    }]
  }], function() {
    return [{
      type: FiltersProvider
    }, {
      type: DomAdapter
    }, {
      type: ClrCommonStringsService
    }, {
      type: ClrPopoverToggleService
    }, {
      type: NgZone
    }];
  }, {
    placeholder: [{
      type: Input,
      args: ["clrFilterPlaceholder"]
    }],
    filterValueChange: [{
      type: Output,
      args: ["clrFilterValueChange"]
    }],
    input: [{
      type: ViewChild,
      args: ["input"]
    }],
    filterContainer: [{
      type: ViewChild,
      args: [ClrDatagridFilter]
    }],
    customStringFilter: [{
      type: Input,
      args: ["clrDgStringFilter"]
    }],
    value: [{
      type: Input,
      args: ["clrFilterValue"]
    }]
  });
})();
var DatagridWillyWonka = class extends WillyWonka {
};
DatagridWillyWonka.ɵfac = /* @__PURE__ */ (() => {
  let ɵDatagridWillyWonka_BaseFactory;
  return function DatagridWillyWonka_Factory(t161) {
    return (ɵDatagridWillyWonka_BaseFactory || (ɵDatagridWillyWonka_BaseFactory = ɵɵgetInheritedFactory(DatagridWillyWonka)))(t161 || DatagridWillyWonka);
  };
})();
DatagridWillyWonka.ɵdir = ɵɵdefineDirective({
  type: DatagridWillyWonka,
  selectors: [["clr-datagrid"]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatagridWillyWonka, [{
    type: Directive,
    args: [{
      selector: "clr-datagrid"
    }]
  }], null, null);
})();
var RowActionService = class {
  constructor() {
    this.actionableCount = 0;
  }
  /**
   * false means no rows with action
   */
  get hasActionableRow() {
    return this.actionableCount > 0;
  }
  register() {
    this.actionableCount++;
  }
  unregister() {
    this.actionableCount--;
  }
};
RowActionService.ɵfac = function RowActionService_Factory(t161) {
  return new (t161 || RowActionService)();
};
RowActionService.ɵprov = ɵɵdefineInjectable({
  token: RowActionService,
  factory: RowActionService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RowActionService, [{
    type: Injectable
  }], null, null);
})();
var ActionableOompaLoompa = class extends OompaLoompa {
  constructor(cdr, willyWonka, rowActions) {
    if (!willyWonka) {
      throw new Error("clr-dg-row should only be used inside of a clr-datagrid");
    }
    super(cdr, willyWonka);
    this.rowActions = rowActions;
  }
  get flavor() {
    return this.rowActions.hasActionableRow;
  }
};
ActionableOompaLoompa.ɵfac = function ActionableOompaLoompa_Factory(t161) {
  return new (t161 || ActionableOompaLoompa)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(DatagridWillyWonka, 8), ɵɵdirectiveInject(RowActionService));
};
ActionableOompaLoompa.ɵdir = ɵɵdefineDirective({
  type: ActionableOompaLoompa,
  selectors: [["clr-datagrid"], ["clr-dg-row"]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ActionableOompaLoompa, [{
    type: Directive,
    args: [{
      selector: "clr-datagrid, clr-dg-row"
    }]
  }], function() {
    return [{
      type: ChangeDetectorRef
    }, {
      type: DatagridWillyWonka,
      decorators: [{
        type: Optional
      }]
    }, {
      type: RowActionService
    }];
  }, null);
})();
var ModalStackService = class {
  constructor(platformId) {
    this.platformId = platformId;
    this.modalStack = [];
    this.keyUpEventListener = this.onKeyUp.bind(this);
  }
  trackModalOpen(openedModal) {
    if (this.modalStack.includes(openedModal) === false) {
      this.modalStack.unshift(openedModal);
    }
    if (isPlatformBrowser(this.platformId)) {
      document.body.addEventListener("keyup", this.keyUpEventListener);
    }
  }
  trackModalClose(closedModal) {
    const closedModalIndex = this.modalStack.indexOf(closedModal);
    if (closedModalIndex > -1) {
      this.modalStack.splice(closedModalIndex, 1);
    }
    if (this.modalStack.length === 0 && isPlatformBrowser(this.platformId)) {
      document.body.removeEventListener("keyup", this.keyUpEventListener);
    }
  }
  onKeyUp(event) {
    if (this.modalStack.length && normalizeKey(event.key) === Keys.Escape) {
      document.activeElement.blur();
      this.modalStack[0].close();
    }
  }
};
ModalStackService.ɵfac = function ModalStackService_Factory(t161) {
  return new (t161 || ModalStackService)(ɵɵinject(PLATFORM_ID));
};
ModalStackService.ɵprov = ɵɵdefineInjectable({
  token: ModalStackService,
  factory: ModalStackService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ModalStackService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }];
  }, null);
})();
var DetailService = class {
  constructor(modalStackService) {
    this.modalStackService = modalStackService;
    this.toggleState = false;
    this._enabled = false;
    this._state = new BehaviorSubject(this.toggleState);
  }
  get enabled() {
    return this._enabled;
  }
  set enabled(state2) {
    this._enabled = state2;
  }
  get state() {
    return this.cache;
  }
  get stateChange() {
    return this._state.asObservable();
  }
  get isOpen() {
    return this.toggleState === true;
  }
  open(item, button) {
    this.cache = item;
    this.button = button;
    this.toggleState = true;
    this._state.next(this.toggleState);
    this.modalStackService.trackModalOpen(this);
  }
  close() {
    this.toggleState = false;
    this._state.next(this.toggleState);
    this.modalStackService.trackModalClose(this);
    if (this.button) {
      this.button.focus();
      this.button = null;
    }
  }
  toggle(item, button) {
    if (this.isRowOpen(item) || !item) {
      this.close();
    } else {
      this.open(item, button);
    }
  }
  isRowOpen(item) {
    return !!(this.toggleState && this.cache === item);
  }
};
DetailService.ɵfac = function DetailService_Factory(t161) {
  return new (t161 || DetailService)(ɵɵinject(ModalStackService));
};
DetailService.ɵprov = ɵɵdefineInjectable({
  token: DetailService,
  factory: DetailService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DetailService, [{
    type: Injectable
  }], function() {
    return [{
      type: ModalStackService
    }];
  }, null);
})();
var ExpandableRowsCount = class {
  constructor(detailService) {
    this.detailService = detailService;
    this.expandableCount = 0;
  }
  /**
   * false means no rows with action
   * check if details are on, and disable rows entirely
   */
  get hasExpandableRow() {
    return !this.detailService.enabled && this.expandableCount > 0;
  }
  register() {
    this.expandableCount++;
  }
  unregister() {
    this.expandableCount--;
  }
};
ExpandableRowsCount.ɵfac = function ExpandableRowsCount_Factory(t161) {
  return new (t161 || ExpandableRowsCount)(ɵɵinject(DetailService));
};
ExpandableRowsCount.ɵprov = ɵɵdefineInjectable({
  token: ExpandableRowsCount,
  factory: ExpandableRowsCount.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ExpandableRowsCount, [{
    type: Injectable
  }], function() {
    return [{
      type: DetailService
    }];
  }, null);
})();
var ExpandableOompaLoompa = class extends OompaLoompa {
  constructor(cdr, willyWonka, expandableCount) {
    if (!willyWonka) {
      throw new Error("clr-dg-row should only be used inside of a clr-datagrid");
    }
    super(cdr, willyWonka);
    this.expandableCount = expandableCount;
  }
  get flavor() {
    return this.expandableCount.hasExpandableRow;
  }
};
ExpandableOompaLoompa.ɵfac = function ExpandableOompaLoompa_Factory(t161) {
  return new (t161 || ExpandableOompaLoompa)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(DatagridWillyWonka, 8), ɵɵdirectiveInject(ExpandableRowsCount));
};
ExpandableOompaLoompa.ɵdir = ɵɵdefineDirective({
  type: ExpandableOompaLoompa,
  selectors: [["clr-datagrid"], ["clr-dg-row"]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ExpandableOompaLoompa, [{
    type: Directive,
    args: [{
      selector: "clr-datagrid, clr-dg-row"
    }]
  }], function() {
    return [{
      type: ChangeDetectorRef
    }, {
      type: DatagridWillyWonka,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ExpandableRowsCount
    }];
  }, null);
})();
var DatagridPropertyComparator = class {
  constructor(prop) {
    this.prop = prop;
    this.nestedProp = new NestedProperty(prop);
  }
  compare(a103, b8) {
    let propA = this.nestedProp.getPropValue(a103);
    let propB = this.nestedProp.getPropValue(b8);
    if (typeof propA === "string") {
      propA = propA.toLowerCase();
    }
    if (typeof propB === "string") {
      propB = propB.toLowerCase();
    }
    if (typeof propA === "undefined" || propA === null) {
      if (typeof propB === "undefined" || propB === null) {
        return 0;
      } else {
        return 1;
      }
    } else {
      if (typeof propB === "undefined" || propB === null) {
        return -1;
      } else if (propA < propB) {
        return -1;
      } else if (propA > propB) {
        return 1;
      } else {
        return 0;
      }
    }
  }
};
var ClrDatagridSortOrder;
(function(ClrDatagridSortOrder2) {
  ClrDatagridSortOrder2[ClrDatagridSortOrder2["UNSORTED"] = 0] = "UNSORTED";
  ClrDatagridSortOrder2[ClrDatagridSortOrder2["ASC"] = 1] = "ASC";
  ClrDatagridSortOrder2[ClrDatagridSortOrder2["DESC"] = -1] = "DESC";
})(ClrDatagridSortOrder || (ClrDatagridSortOrder = {}));
var WrappedColumn = class {
  constructor() {
    this._dynamic = false;
  }
  ngAfterViewInit() {
    this.columnView = this.templateRef.createEmbeddedView(null);
  }
  ngOnDestroy() {
    this.columnView.destroy();
  }
};
WrappedColumn.ɵfac = function WrappedColumn_Factory(t161) {
  return new (t161 || WrappedColumn)();
};
WrappedColumn.ɵcmp = ɵɵdefineComponent({
  type: WrappedColumn,
  selectors: [["dg-wrapped-column"]],
  viewQuery: function WrappedColumn_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c45, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.templateRef = _t.first);
    }
  },
  ngContentSelectors: _c02,
  decls: 2,
  vars: 0,
  consts: [["columnPortal", ""]],
  template: function WrappedColumn_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, WrappedColumn_ng_template_0_Template, 1, 0, "ng-template", null, 0, ɵɵtemplateRefExtractor);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(WrappedColumn, [{
    type: Component,
    args: [{
      selector: "dg-wrapped-column",
      template: `
    <ng-template #columnPortal>
      <ng-content></ng-content>
    </ng-template>
  `
    }]
  }], null, {
    templateRef: [{
      type: ViewChild,
      args: ["columnPortal"]
    }]
  });
})();
var Sort = class {
  constructor(stateDebouncer) {
    this.stateDebouncer = stateDebouncer;
    this._reverse = false;
    this._change = new Subject();
  }
  get comparator() {
    return this._comparator;
  }
  set comparator(value) {
    this.stateDebouncer.changeStart();
    this._comparator = value;
    this.emitChange();
    this.stateDebouncer.changeDone();
  }
  get reverse() {
    return this._reverse;
  }
  set reverse(value) {
    this.stateDebouncer.changeStart();
    this._reverse = value;
    this.emitChange();
    this.stateDebouncer.changeDone();
  }
  // We do not want to expose the Subject itself, but the Observable which is read-only
  get change() {
    return this._change.asObservable();
  }
  /**
   * Sets a comparator as the current one, or toggles reverse if the comparator is already used. The
   * optional forceReverse input parameter allows to override that toggling behavior by sorting in
   * reverse order if `true`.
   *
   * @memberof Sort
   */
  toggle(sortBy, forceReverse) {
    this.stateDebouncer.changeStart();
    if (this.comparator === sortBy) {
      this._reverse = typeof forceReverse !== "undefined" ? forceReverse || !this._reverse : !this._reverse;
    } else {
      this._comparator = sortBy;
      this._reverse = typeof forceReverse !== "undefined" ? forceReverse : false;
    }
    this.emitChange();
    this.stateDebouncer.changeDone();
  }
  /**
   * Clears the current sorting order
   */
  clear() {
    this.comparator = null;
  }
  /**
   * Compares two objects according to the current comparator
   */
  compare(a103, b8) {
    return (this.reverse ? -1 : 1) * this.comparator.compare(a103, b8);
  }
  emitChange() {
    this._change.next(this);
  }
};
Sort.ɵfac = function Sort_Factory(t161) {
  return new (t161 || Sort)(ɵɵinject(StateDebouncer));
};
Sort.ɵprov = ɵɵdefineInjectable({
  token: Sort,
  factory: Sort.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Sort, [{
    type: Injectable
  }], function() {
    return [{
      type: StateDebouncer
    }];
  }, null);
})();
var DatagridRenderStep;
(function(DatagridRenderStep2) {
  DatagridRenderStep2[DatagridRenderStep2["ALIGN_COLUMNS"] = 0] = "ALIGN_COLUMNS";
  DatagridRenderStep2[DatagridRenderStep2["CALCULATE_MODE_ON"] = 1] = "CALCULATE_MODE_ON";
  DatagridRenderStep2[DatagridRenderStep2["CALCULATE_MODE_OFF"] = 2] = "CALCULATE_MODE_OFF";
  DatagridRenderStep2[DatagridRenderStep2["CLEAR_WIDTHS"] = 3] = "CLEAR_WIDTHS";
  DatagridRenderStep2[DatagridRenderStep2["COMPUTE_COLUMN_WIDTHS"] = 4] = "COMPUTE_COLUMN_WIDTHS";
})(DatagridRenderStep || (DatagridRenderStep = {}));
var DatagridRenderOrganizer = class {
  constructor() {
    this._renderStep = new Subject();
    this.alreadySized = false;
  }
  get renderStep() {
    return this._renderStep.asObservable();
  }
  filterRenderSteps(step) {
    return this.renderStep.pipe(filter((testStep) => step === testStep));
  }
  resize() {
    this._renderStep.next(DatagridRenderStep.CALCULATE_MODE_ON);
    if (this.alreadySized) {
      this._renderStep.next(DatagridRenderStep.CLEAR_WIDTHS);
    }
    this._renderStep.next(DatagridRenderStep.COMPUTE_COLUMN_WIDTHS);
    this._renderStep.next(DatagridRenderStep.ALIGN_COLUMNS);
    this.alreadySized = true;
    this._renderStep.next(DatagridRenderStep.CALCULATE_MODE_OFF);
  }
};
DatagridRenderOrganizer.ɵfac = function DatagridRenderOrganizer_Factory(t161) {
  return new (t161 || DatagridRenderOrganizer)();
};
DatagridRenderOrganizer.ɵprov = ɵɵdefineInjectable({
  token: DatagridRenderOrganizer,
  factory: DatagridRenderOrganizer.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatagridRenderOrganizer, [{
    type: Injectable
  }], null, null);
})();
var MIN_COLUMN_WIDTH = 96;
var ColumnResizerService = class {
  constructor(el, domAdapter, organizer) {
    this.el = el;
    this.domAdapter = domAdapter;
    this.organizer = organizer;
    this._resizedBy = 0;
  }
  get resizedBy() {
    return this._resizedBy;
  }
  get minColumnWidth() {
    return this.domAdapter.minWidth(this.el.nativeElement) || MIN_COLUMN_WIDTH;
  }
  get maxResizeRange() {
    return this.widthBeforeResize - this.minColumnWidth;
  }
  get widthAfterResize() {
    return this.widthBeforeResize + this._resizedBy;
  }
  startResize() {
    this._resizedBy = 0;
    this.isWithinMaxResizeRange = true;
    this.widthBeforeResize = this.domAdapter.clientRect(this.el.nativeElement).width;
  }
  endResize() {
    this.organizer.resize();
  }
  calculateResize(resizedBy) {
    if (resizedBy < -this.maxResizeRange) {
      this._resizedBy = -this.maxResizeRange;
      this.isWithinMaxResizeRange = false;
    } else {
      this._resizedBy = resizedBy;
      this.isWithinMaxResizeRange = true;
    }
  }
};
ColumnResizerService.ɵfac = function ColumnResizerService_Factory(t161) {
  return new (t161 || ColumnResizerService)(ɵɵinject(ElementRef), ɵɵinject(DomAdapter), ɵɵinject(DatagridRenderOrganizer));
};
ColumnResizerService.ɵprov = ɵɵdefineInjectable({
  token: ColumnResizerService,
  factory: ColumnResizerService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ColumnResizerService, [{
    type: Injectable
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: DomAdapter
    }, {
      type: DatagridRenderOrganizer
    }];
  }, null);
})();
var TableSizeService = class {
  constructor(platformId) {
    this.platformId = platformId;
  }
  get tableRef() {
    return this._tableRef;
  }
  set tableRef(element) {
    this._tableRef = element;
  }
  set table(table) {
    if (isPlatformBrowser(this.platformId) && table.nativeElement) {
      this.tableRef = table.nativeElement.querySelector(".datagrid-table");
    }
  }
  // Used when resizing columns to show the column border being dragged.
  getColumnDragHeight() {
    if (!this.tableRef) {
      return null;
    }
    return `${this.tableRef.clientHeight}px`;
  }
};
TableSizeService.ɵfac = function TableSizeService_Factory(t161) {
  return new (t161 || TableSizeService)(ɵɵinject(PLATFORM_ID));
};
TableSizeService.ɵprov = ɵɵdefineInjectable({
  token: TableSizeService,
  factory: TableSizeService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TableSizeService, [{
    type: Injectable
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }];
  }, null);
})();
var KEYBOARD_RESIZE_LENGTH = 12;
var ClrDatagridColumnSeparator = class {
  constructor(columnResizerService, renderer, ngZone, tableSizeService, commonString, document2) {
    this.columnResizerService = columnResizerService;
    this.renderer = renderer;
    this.ngZone = ngZone;
    this.tableSizeService = tableSizeService;
    this.commonString = commonString;
    this.document = document2;
    this.columnSeparatorId = uniqueIdFactory();
    this.resizeStartedOnKeyDown = false;
    this.unlisteners = [];
  }
  get descriptionId() {
    return `${this.columnSeparatorId}-aria-describedby`;
  }
  get resizeTrackerEl() {
    return this.resizeTrackerRef.nativeElement;
  }
  get columnHandleEl() {
    return this.columnHandleRef.nativeElement;
  }
  ngAfterViewInit() {
    this.ngZone.runOutsideAngular(() => {
      this.unlisteners.push(this.renderer.listen(this.columnHandleEl, "keydown", (event) => {
        this.showTrackerOnFirstKeyDown(event);
        this.moveTrackerOnKeyDown(event);
      }));
      this.unlisteners.push(this.renderer.listen(this.columnHandleEl, "keyup", (event) => {
        this.hideTrackerOnKeyUp(event);
      }));
    });
  }
  ngOnDestroy() {
    this.unlisteners.forEach((unlistener) => unlistener());
  }
  showTracker() {
    this.columnResizerService.startResize();
    const tableHeight = this.tableSizeService.getColumnDragHeight();
    this.renderer.setStyle(this.resizeTrackerEl, "height", tableHeight);
    this.renderer.setStyle(this.resizeTrackerEl, "display", "block");
  }
  moveTracker(movedBy) {
    this.columnResizerService.calculateResize(movedBy);
    this.renderer.setStyle(this.resizeTrackerEl, "transform", `translateX(${this.columnResizerService.resizedBy}px)`);
    this.renderer.setStyle(this.document.body, "cursor", "col-resize");
    this.redFlagTracker();
  }
  hideTracker() {
    this.columnResizerService.endResize();
    this.renderer.setStyle(this.resizeTrackerEl, "display", "none");
    this.renderer.setStyle(this.resizeTrackerEl, "transform", `translateX(0px)`);
    this.renderer.setStyle(this.columnHandleEl, "transform", `translateX(0px)`);
    this.renderer.setStyle(this.document.body, "cursor", "auto");
  }
  showTrackerOnFirstKeyDown(event) {
    if (!this.resizeStartedOnKeyDown && (this.isArrowLeftKeyEvent(event) || this.isArrowRightKeyEvent(event))) {
      this.resizeStartedOnKeyDown = true;
      this.renderer.addClass(this.resizeTrackerEl, "on-arrow-key-resize");
      this.showTracker();
    }
  }
  moveTrackerOnKeyDown(event) {
    if (this.isArrowLeftKeyEvent(event)) {
      event.stopPropagation();
      this.moveTracker(this.columnResizerService.resizedBy - KEYBOARD_RESIZE_LENGTH);
    } else if (this.isArrowRightKeyEvent(event)) {
      event.stopPropagation();
      this.moveTracker(this.columnResizerService.resizedBy + KEYBOARD_RESIZE_LENGTH);
    }
  }
  hideTrackerOnKeyUp(event) {
    if (this.resizeStartedOnKeyDown && (this.isArrowLeftKeyEvent(event) || this.isArrowRightKeyEvent(event))) {
      this.resizeStartedOnKeyDown = false;
      this.renderer.removeClass(this.resizeTrackerEl, "on-arrow-key-resize");
      this.hideTracker();
      this.columnHandleEl.focus();
    }
  }
  redFlagTracker() {
    if (this.isWithinMaxResizeRange !== this.columnResizerService.isWithinMaxResizeRange) {
      this.isWithinMaxResizeRange = this.columnResizerService.isWithinMaxResizeRange;
      if (!this.isWithinMaxResizeRange) {
        this.renderer.addClass(this.resizeTrackerEl, "exceeded-max");
      } else {
        this.renderer.removeClass(this.resizeTrackerEl, "exceeded-max");
      }
    }
  }
  isArrowLeftKeyEvent(event) {
    return normalizeKey(event.key) === Keys.ArrowLeft;
  }
  isArrowRightKeyEvent(event) {
    return normalizeKey(event.key) === Keys.ArrowRight;
  }
};
ClrDatagridColumnSeparator.ɵfac = function ClrDatagridColumnSeparator_Factory(t161) {
  return new (t161 || ClrDatagridColumnSeparator)(ɵɵdirectiveInject(ColumnResizerService), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(TableSizeService), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(DOCUMENT));
};
ClrDatagridColumnSeparator.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridColumnSeparator,
  selectors: [["clr-dg-column-separator"]],
  viewQuery: function ClrDatagridColumnSeparator_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c46, 5);
      ɵɵviewQuery(_c47, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.resizeTrackerRef = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.columnHandleRef = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function ClrDatagridColumnSeparator_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("datagrid-column-separator", true);
    }
  },
  decls: 6,
  vars: 4,
  consts: [["columnHandle", ""], ["resizeTracker", ""], ["type", "button", "cdkDrag", "", "cdkDragLockAxis", "x", 1, "datagrid-column-handle", 3, "cdkDragStarted", "cdkDragMoved", "cdkDragEnded"], [1, "clr-sr-only"], [1, "datagrid-column-resize-tracker"]],
  template: function ClrDatagridColumnSeparator_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = ɵɵgetCurrentView();
      ɵɵelementStart(0, "button", 2, 0);
      ɵɵlistener("cdkDragStarted", function ClrDatagridColumnSeparator_Template_button_cdkDragStarted_0_listener() {
        ɵɵrestoreView(_r1);
        return ɵɵresetView(ctx.showTracker());
      })("cdkDragMoved", function ClrDatagridColumnSeparator_Template_button_cdkDragMoved_0_listener($event) {
        ɵɵrestoreView(_r1);
        return ɵɵresetView(ctx.moveTracker($event.distance.x));
      })("cdkDragEnded", function ClrDatagridColumnSeparator_Template_button_cdkDragEnded_0_listener($event) {
        ɵɵrestoreView(_r1);
        ctx.hideTracker();
        return ɵɵresetView($event.source._dragRef.reset());
      });
      ɵɵelementEnd();
      ɵɵelementStart(2, "span", 3);
      ɵɵtext(3);
      ɵɵelementEnd();
      ɵɵelement(4, "div", 4, 1);
    }
    if (rf & 2) {
      ɵɵattribute("aria-label", ctx.commonString.keys.columnSeparatorAriaLabel)("aria-describedby", ctx.descriptionId);
      ɵɵadvance(2);
      ɵɵattribute("id", ctx.descriptionId);
      ɵɵadvance();
      ɵɵtextInterpolate1(" ", ctx.commonString.keys.columnSeparatorDescription, " ");
    }
  },
  dependencies: [CdkDragModule_CdkDrag],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridColumnSeparator, [{
    type: Component,
    args: [{
      selector: "clr-dg-column-separator",
      template: `
    <button
      type="button"
      class="datagrid-column-handle"
      [attr.aria-label]="commonString.keys.columnSeparatorAriaLabel"
      [attr.aria-describedby]="descriptionId"
      cdkDrag
      cdkDragLockAxis="x"
      (cdkDragStarted)="showTracker()"
      (cdkDragMoved)="moveTracker($event.distance.x)"
      (cdkDragEnded)="hideTracker(); $event.source._dragRef.reset()"
      #columnHandle
    ></button>
    <span class="clr-sr-only" [attr.id]="descriptionId">
      {{ commonString.keys.columnSeparatorDescription }}
    </span>
    <div class="datagrid-column-resize-tracker" #resizeTracker></div>
  `,
      host: {
        "[class.datagrid-column-separator]": "true"
      }
    }]
  }], function() {
    return [{
      type: ColumnResizerService
    }, {
      type: Renderer2
    }, {
      type: NgZone
    }, {
      type: TableSizeService
    }, {
      type: ClrCommonStringsService
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }];
  }, {
    resizeTrackerRef: [{
      type: ViewChild,
      args: ["resizeTracker"]
    }],
    columnHandleRef: [{
      type: ViewChild,
      args: ["columnHandle"]
    }]
  });
})();
var ClrDatagridColumn = class extends DatagridFilterRegistrar {
  constructor(_sort, filters, vcr, detailService, changeDetectorRef) {
    super(filters);
    this._sort = _sort;
    this.vcr = vcr;
    this.detailService = detailService;
    this.changeDetectorRef = changeDetectorRef;
    this.sortOrderChange = new EventEmitter();
    this.filterValueChange = new EventEmitter();
    this.showSeparator = true;
    this.customFilter = false;
    this._colType = "string";
    this._sortOrder = ClrDatagridSortOrder.UNSORTED;
    this.subscriptions = [];
    this.subscriptions.push(this.listenForSortingChanges());
    this.subscriptions.push(this.listenForDetailPaneChanges());
  }
  // TODO: We might want to make this an enum in the future
  get colType() {
    return this._colType;
  }
  set colType(value) {
    this._colType = value;
  }
  get field() {
    return this._field;
  }
  set field(field) {
    if (typeof field === "string") {
      this._field = field;
      if (!this._sortBy) {
        this._sortBy = new DatagridPropertyComparator(field);
      }
    }
  }
  get sortBy() {
    return this._sortBy;
  }
  set sortBy(comparator) {
    if (typeof comparator === "string") {
      this._sortBy = new DatagridPropertyComparator(comparator);
    } else {
      if (comparator) {
        this._sortBy = comparator;
      } else {
        if (this.field) {
          this._sortBy = new DatagridPropertyComparator(this.field);
        } else {
          delete this._sortBy;
        }
      }
    }
  }
  get sortOrder() {
    return this._sortOrder;
  }
  set sortOrder(value) {
    if (typeof value === "undefined") {
      return;
    }
    if (this._sortOrder === value) {
      return;
    }
    switch (value) {
      default:
      case ClrDatagridSortOrder.UNSORTED:
        this._sort.clear();
        break;
      case ClrDatagridSortOrder.ASC:
        this.sort(false);
        break;
      case ClrDatagridSortOrder.DESC:
        this.sort(true);
        break;
    }
  }
  set updateFilterValue(newValue) {
    if (this.filter) {
      if (this.filter instanceof DatagridStringFilterImpl) {
        if (!newValue || typeof newValue !== "string") {
          newValue = "";
        }
        if (newValue !== this.filter.value) {
          this.filter.value = newValue;
        }
      } else if (this.filter instanceof DatagridNumericFilterImpl) {
        if (!newValue || !(newValue instanceof Array)) {
          newValue = [null, null];
        }
        if (newValue.length === 2 && (newValue[0] !== this.filter.value[0] || newValue[1] !== this.filter.value[1])) {
          this.filter.value = newValue;
        }
      }
    } else {
      this.initFilterValue = newValue;
    }
  }
  set projectedFilter(custom) {
    if (custom) {
      this.deleteFilter();
      this.customFilter = true;
    }
  }
  /**
   * Indicates if the column is sortable
   */
  get sortable() {
    return !!this._sortBy;
  }
  get ariaSort() {
    switch (this._sortOrder) {
      default:
      case ClrDatagridSortOrder.UNSORTED:
        return "none";
      case ClrDatagridSortOrder.ASC:
        return "ascending";
      case ClrDatagridSortOrder.DESC:
        return "descending";
    }
  }
  get sortDirection() {
    return this._sortDirection;
  }
  /**
   * @NOTE type `any` here is to let us pass templateStrictMode, because in our code we try to handle
   * two types of filters String and Number with the same variable but both of them work with different
   * format we got an error for casting. We could not cast anything inside the template so to not mess the
   * casting, the last type is set to `any`
   *
   * Orignial types: string | [number, number]
   */
  get filterValue() {
    if (this.filter instanceof DatagridStringFilterImpl || this.filter instanceof DatagridNumericFilterImpl) {
      return this.filter.value;
    }
    return null;
  }
  set filterValue(newValue) {
    if (this.filter instanceof DatagridStringFilterImpl || this.filter instanceof DatagridNumericFilterImpl) {
      this.updateFilterValue = newValue;
      this.filterValueChange.emit(this.filter.value);
    }
  }
  get _view() {
    return this.wrappedInjector.get(WrappedColumn, this.vcr).columnView;
  }
  ngOnInit() {
    this.wrappedInjector = new HostWrapper(WrappedColumn, this.vcr);
  }
  ngOnChanges(changes) {
    if (changes.colType && changes.colType.currentValue && changes.colType.currentValue !== changes.colType.previousValue) {
      if (!this.customFilter && !this.filter && this.colType && this.field) {
        this.setupDefaultFilter(this.field, this.colType);
      }
    }
    if (changes.field && changes.field.currentValue && changes.field.currentValue !== changes.field.previousValue) {
      if (!this.customFilter && this.colType) {
        this.setupDefaultFilter(this.field, this.colType);
      }
    }
  }
  ngOnDestroy() {
    super.ngOnDestroy();
    this.subscriptions.forEach((s27) => s27.unsubscribe());
  }
  /**
   * Sorts the datagrid based on this column
   */
  sort(reverse) {
    if (!this.sortable) {
      return;
    }
    this._sort.toggle(this._sortBy, reverse);
    this._sortOrder = this._sort.reverse ? ClrDatagridSortOrder.DESC : ClrDatagridSortOrder.ASC;
    this._sortDirection = this._sortOrder === ClrDatagridSortOrder.DESC ? "down" : "up";
    this.sortOrderChange.emit(this._sortOrder);
  }
  listenForDetailPaneChanges() {
    return this.detailService.stateChange.subscribe((state2) => {
      if (this.showSeparator !== !state2) {
        this.showSeparator = !state2;
        this.changeDetectorRef.markForCheck();
      }
    });
  }
  listenForSortingChanges() {
    return this._sort.change.subscribe((sort) => {
      this.changeDetectorRef.markForCheck();
      if (this.sortOrder !== ClrDatagridSortOrder.UNSORTED && sort.comparator !== this._sortBy) {
        this._sortOrder = ClrDatagridSortOrder.UNSORTED;
        this.sortOrderChange.emit(this._sortOrder);
        this._sortDirection = null;
      }
    });
  }
  setupDefaultFilter(field, colType) {
    if (colType === "number") {
      this.setFilter(new DatagridNumericFilterImpl(new DatagridPropertyNumericFilter(field)));
    } else if (colType === "string") {
      this.setFilter(new DatagridStringFilterImpl(new DatagridPropertyStringFilter(field)));
    }
    if (this.filter && this.initFilterValue) {
      this.updateFilterValue = this.initFilterValue;
      delete this.initFilterValue;
    }
  }
};
ClrDatagridColumn.ɵfac = function ClrDatagridColumn_Factory(t161) {
  return new (t161 || ClrDatagridColumn)(ɵɵdirectiveInject(Sort), ɵɵdirectiveInject(FiltersProvider), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(DetailService), ɵɵdirectiveInject(ChangeDetectorRef));
};
ClrDatagridColumn.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridColumn,
  selectors: [["clr-dg-column"]],
  contentQueries: function ClrDatagridColumn_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, CustomFilter, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.projectedFilter = _t.first);
    }
  },
  hostAttrs: ["role", "columnheader"],
  hostVars: 3,
  hostBindings: function ClrDatagridColumn_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("aria-sort", ctx.ariaSort);
      ɵɵclassProp("datagrid-column", true);
    }
  },
  inputs: {
    filterStringPlaceholder: [InputFlags.None, "clrFilterStringPlaceholder", "filterStringPlaceholder"],
    filterNumberMaxPlaceholder: [InputFlags.None, "clrFilterNumberMaxPlaceholder", "filterNumberMaxPlaceholder"],
    filterNumberMinPlaceholder: [InputFlags.None, "clrFilterNumberMinPlaceholder", "filterNumberMinPlaceholder"],
    colType: [InputFlags.None, "clrDgColType", "colType"],
    field: [InputFlags.None, "clrDgField", "field"],
    sortBy: [InputFlags.None, "clrDgSortBy", "sortBy"],
    sortOrder: [InputFlags.None, "clrDgSortOrder", "sortOrder"],
    updateFilterValue: [InputFlags.None, "clrFilterValue", "updateFilterValue"]
  },
  outputs: {
    sortOrderChange: "clrDgSortOrderChange",
    filterValueChange: "clrFilterValueChange"
  },
  features: [ɵɵHostDirectivesFeature([ClrPopoverHostDirective]), ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature],
  ngContentSelectors: _c49,
  decls: 9,
  vars: 5,
  consts: [["columnTitle", ""], [1, "datagrid-column-flex"], ["class", "datagrid-column-title", "type", "button", 3, "click", 4, "ngIf"], [3, "clrFilterPlaceholder", "clrDgStringFilter", "clrFilterValue", "clrFilterValueChange", 4, "ngIf"], [3, "clrFilterMaxPlaceholder", "clrFilterMinPlaceholder", "clrDgNumericFilter", "clrFilterValue", "clrFilterValueChange", 4, "ngIf"], ["class", "datagrid-column-title", 4, "ngIf"], [4, "ngIf"], ["type", "button", 1, "datagrid-column-title", 3, "click"], [4, "ngTemplateOutlet"], ["shape", "arrow", "aria-hidden", "true", "class", "sort-icon", 4, "ngIf"], ["shape", "arrow", "aria-hidden", "true", 1, "sort-icon"], [3, "clrFilterValueChange", "clrFilterPlaceholder", "clrDgStringFilter", "clrFilterValue"], [3, "clrFilterValueChange", "clrFilterMaxPlaceholder", "clrFilterMinPlaceholder", "clrDgNumericFilter", "clrFilterValue"], [1, "datagrid-column-title"]],
  template: function ClrDatagridColumn_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c48);
      ɵɵelementStart(0, "div", 1);
      ɵɵtemplate(1, ClrDatagridColumn_button_1_Template, 3, 2, "button", 2);
      ɵɵprojection(2);
      ɵɵtemplate(3, ClrDatagridColumn_clr_dg_string_filter_3_Template, 1, 3, "clr-dg-string-filter", 3)(4, ClrDatagridColumn_clr_dg_numeric_filter_4_Template, 1, 4, "clr-dg-numeric-filter", 4)(5, ClrDatagridColumn_ng_template_5_Template, 1, 0, "ng-template", null, 0, ɵɵtemplateRefExtractor)(7, ClrDatagridColumn_span_7_Template, 2, 1, "span", 5)(8, ClrDatagridColumn_clr_dg_column_separator_8_Template, 1, 0, "clr-dg-column-separator", 6);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.sortable);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.field && !ctx.customFilter && ctx.colType == "string");
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.field && !ctx.customFilter && ctx.colType == "number");
      ɵɵadvance(3);
      ɵɵproperty("ngIf", !ctx.sortable);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.showSeparator);
    }
  },
  dependencies: [NgIf, NgTemplateOutlet, CdsIconCustomTag, ClrDatagridColumnSeparator, DatagridNumericFilter, DatagridStringFilter],
  encapsulation: 2,
  changeDetection: 0
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridColumn, [{
    type: Component,
    args: [{
      selector: "clr-dg-column",
      template: `
    <div class="datagrid-column-flex">
      <button class="datagrid-column-title" *ngIf="sortable" (click)="sort()" type="button">
        <ng-container *ngTemplateOutlet="columnTitle"></ng-container>
        <cds-icon
          *ngIf="sortDirection"
          shape="arrow"
          [attr.direction]="sortDirection"
          aria-hidden="true"
          class="sort-icon"
        ></cds-icon>
      </button>
      <!-- I'm really not happy with that select since it's not very scalable -->
      <ng-content select="clr-dg-filter, clr-dg-string-filter, clr-dg-numeric-filter"></ng-content>

      <clr-dg-string-filter
        *ngIf="field && !customFilter && colType == 'string'"
        [clrFilterPlaceholder]="filterStringPlaceholder"
        [clrDgStringFilter]="registered"
        [(clrFilterValue)]="filterValue"
      ></clr-dg-string-filter>

      <clr-dg-numeric-filter
        *ngIf="field && !customFilter && colType == 'number'"
        [clrFilterMaxPlaceholder]="filterNumberMaxPlaceholder"
        [clrFilterMinPlaceholder]="filterNumberMinPlaceholder"
        [clrDgNumericFilter]="registered"
        [(clrFilterValue)]="filterValue"
      ></clr-dg-numeric-filter>

      <ng-template #columnTitle>
        <ng-content></ng-content>
      </ng-template>

      <span class="datagrid-column-title" *ngIf="!sortable">
        <ng-container *ngTemplateOutlet="columnTitle"></ng-container>
      </span>

      <clr-dg-column-separator *ngIf="showSeparator"></clr-dg-column-separator>
    </div>
  `,
      hostDirectives: [ClrPopoverHostDirective],
      host: {
        "[class.datagrid-column]": "true",
        "[attr.aria-sort]": "ariaSort",
        role: "columnheader"
      },
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: Sort
    }, {
      type: FiltersProvider
    }, {
      type: ViewContainerRef
    }, {
      type: DetailService
    }, {
      type: ChangeDetectorRef
    }];
  }, {
    filterStringPlaceholder: [{
      type: Input,
      args: ["clrFilterStringPlaceholder"]
    }],
    filterNumberMaxPlaceholder: [{
      type: Input,
      args: ["clrFilterNumberMaxPlaceholder"]
    }],
    filterNumberMinPlaceholder: [{
      type: Input,
      args: ["clrFilterNumberMinPlaceholder"]
    }],
    sortOrderChange: [{
      type: Output,
      args: ["clrDgSortOrderChange"]
    }],
    filterValueChange: [{
      type: Output,
      args: ["clrFilterValueChange"]
    }],
    colType: [{
      type: Input,
      args: ["clrDgColType"]
    }],
    field: [{
      type: Input,
      args: ["clrDgField"]
    }],
    sortBy: [{
      type: Input,
      args: ["clrDgSortBy"]
    }],
    sortOrder: [{
      type: Input,
      args: ["clrDgSortOrder"]
    }],
    updateFilterValue: [{
      type: Input,
      args: ["clrFilterValue"]
    }],
    projectedFilter: [{
      type: ContentChild,
      args: [CustomFilter]
    }]
  });
})();
var Items = class {
  constructor(_filters, _sort, _page) {
    this._filters = _filters;
    this._sort = _sort;
    this._page = _page;
    this.loading = false;
    this._smart = false;
    this._displayed = [];
    this._change = new Subject();
    this._allChanges = new Subject();
    this.trackBy = (item) => item;
  }
  get smart() {
    return this._smart;
  }
  get all() {
    return this._all;
  }
  set all(items) {
    this._all = items;
    this.emitAllChanges(items);
    if (this.smart) {
      this._filterItems();
    } else {
      this._displayed = items;
      this.emitChange();
    }
  }
  get displayed() {
    return this._displayed;
  }
  // We do not want to expose the Subject itself, but the Observable which is read-only
  get change() {
    return this._change.asObservable();
  }
  get allChanges() {
    return this._allChanges.asObservable();
  }
  /**
   * Checks if we don't have data to process yet, to abort early operations
   */
  get uninitialized() {
    return !this._all;
  }
  /**
   * Cleans up our subscriptions to other providers
   */
  destroy() {
    if (this._filtersSub) {
      this._filtersSub.unsubscribe();
    }
    if (this._sortSub) {
      this._sortSub.unsubscribe();
    }
    if (this._pageSub) {
      this._pageSub.unsubscribe();
    }
  }
  smartenUp() {
    this._smart = true;
    this._filtersSub = this._filters.change.subscribe(() => this._filterItems());
    this._sortSub = this._sort.change.subscribe(() => {
      if (!this._sort.comparator) {
        this._filterItems();
      } else {
        this._sortItems();
      }
    });
    this._pageSub = this._page.change.subscribe(() => this._changePage());
  }
  /**
   * Manually recompute the list of displayed items
   */
  refresh() {
    if (this.smart) {
      this._filterItems();
    }
  }
  emitChange() {
    this._change.next(this.displayed);
  }
  emitAllChanges(items) {
    this._allChanges.next(items);
  }
  /**
   * FiltersProvider items from the raw list
   */
  _filterItems() {
    if (this.uninitialized) {
      return;
    }
    if (this._filters.hasActiveFilters()) {
      this._filtered = this._all.filter((item) => this._filters.accepts(item));
    } else {
      this._filtered = this._all.slice();
    }
    this._page.totalItems = this._filtered.length;
    this._sortItems();
  }
  /**
   * Sorts items in the filtered list
   */
  _sortItems() {
    if (this.uninitialized) {
      return;
    }
    if (this._sort.comparator) {
      this._filtered.sort((a103, b8) => this._sort.compare(a103, b8));
    }
    this._changePage();
  }
  /**
   * Extracts the current page from the sorted list
   */
  _changePage() {
    if (this.uninitialized || this._page.activated && this._page.size === 0) {
      return;
    }
    if (this._page.size > 0) {
      this._displayed = this._filtered.slice(this._page.firstItem, this._page.lastItem + 1);
    } else {
      this._displayed = this._filtered;
    }
    this.emitChange();
  }
};
Items.ɵfac = function Items_Factory(t161) {
  return new (t161 || Items)(ɵɵinject(FiltersProvider), ɵɵinject(Sort), ɵɵinject(Page));
};
Items.ɵprov = ɵɵdefineInjectable({
  token: Items,
  factory: Items.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Items, [{
    type: Injectable
  }], function() {
    return [{
      type: FiltersProvider
    }, {
      type: Sort
    }, {
      type: Page
    }];
  }, null);
})();
var ClrDatagridItems = class {
  constructor(template, differs, items, vcr) {
    this.template = template;
    this.differs = differs;
    this.items = items;
    this.vcr = vcr;
    this.differ = null;
    this.subscriptions = [];
    items.smartenUp();
    this.iterableProxy = new NgForOf(this.vcr, this.template, this.differs);
    this.subscriptions.push(items.change.subscribe((newItems) => {
      this.iterableProxy.ngForOf = newItems;
      this.iterableProxy.ngDoCheck();
    }));
  }
  set rawItems(items) {
    this._rawItems = items ? items : [];
  }
  set trackBy(value) {
    this.iterableProxy.ngForTrackBy = value;
  }
  /**
   * Asserts the correct type of the template context that the directive will render.
   * See https://angular.io/guide/structural-directives#typing-the-directives-context
   *
   * The presence of this method is a signal to the Ivy template type-check compiler that the
   * structural directive renders its template with a specific context type.
   */
  static ngTemplateContextGuard(_dir, _ctx) {
    return true;
  }
  ngDoCheck() {
    if (!this.differ) {
      this.differ = this.differs.find(this._rawItems).create(this.iterableProxy.ngForTrackBy);
    }
    if (this.differ) {
      const changes = this.differ.diff(this._rawItems);
      if (changes) {
        this.items.all = this._rawItems;
      }
    }
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
};
ClrDatagridItems.ɵfac = function ClrDatagridItems_Factory(t161) {
  return new (t161 || ClrDatagridItems)(ɵɵdirectiveInject(TemplateRef), ɵɵdirectiveInject(IterableDiffers), ɵɵdirectiveInject(Items), ɵɵdirectiveInject(ViewContainerRef));
};
ClrDatagridItems.ɵdir = ɵɵdefineDirective({
  type: ClrDatagridItems,
  selectors: [["", "clrDgItems", "", "clrDgItemsOf", ""]],
  inputs: {
    rawItems: [InputFlags.None, "clrDgItemsOf", "rawItems"],
    trackBy: [InputFlags.None, "clrDgItemsTrackBy", "trackBy"]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridItems, [{
    type: Directive,
    args: [{
      selector: "[clrDgItems][clrDgItemsOf]"
    }]
  }], function() {
    return [{
      type: TemplateRef
    }, {
      type: IterableDiffers
    }, {
      type: Items
    }, {
      type: ViewContainerRef
    }];
  }, {
    rawItems: [{
      type: Input,
      args: ["clrDgItemsOf"]
    }],
    trackBy: [{
      type: Input,
      args: ["clrDgItemsTrackBy"]
    }]
  });
})();
var ClrDatagridPlaceholder = class {
  constructor(items) {
    this.items = items;
  }
  /**
   * Tests if the datagrid is empty, meaning it doesn't contain any items
   */
  get emptyDatagrid() {
    return !this.items.loading && (!this.items.displayed || this.items.displayed.length === 0);
  }
};
ClrDatagridPlaceholder.ɵfac = function ClrDatagridPlaceholder_Factory(t161) {
  return new (t161 || ClrDatagridPlaceholder)(ɵɵdirectiveInject(Items));
};
ClrDatagridPlaceholder.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridPlaceholder,
  selectors: [["clr-dg-placeholder"]],
  hostVars: 2,
  hostBindings: function ClrDatagridPlaceholder_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("datagrid-placeholder-container", true);
    }
  },
  ngContentSelectors: _c02,
  decls: 4,
  vars: 4,
  consts: [["role", "row", 1, "datagrid-placeholder"], ["class", "datagrid-placeholder-image", 4, "ngIf"], ["role", "gridcell", 1, "datagrid-placeholder-content"], [4, "ngIf"], [1, "datagrid-placeholder-image"]],
  template: function ClrDatagridPlaceholder_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "div", 0);
      ɵɵtemplate(1, ClrDatagridPlaceholder_div_1_Template, 1, 0, "div", 1);
      ɵɵelementStart(2, "span", 2);
      ɵɵtemplate(3, ClrDatagridPlaceholder_ng_content_3_Template, 1, 0, "ng-content", 3);
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵclassProp("datagrid-empty", ctx.emptyDatagrid);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.emptyDatagrid);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.emptyDatagrid);
    }
  },
  dependencies: [NgIf],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridPlaceholder, [{
    type: Component,
    args: [{
      selector: "clr-dg-placeholder",
      template: `
    <div class="datagrid-placeholder" [class.datagrid-empty]="emptyDatagrid" role="row">
      <div class="datagrid-placeholder-image" *ngIf="emptyDatagrid"></div>
      <span role="gridcell" class="datagrid-placeholder-content"><ng-content *ngIf="emptyDatagrid"></ng-content></span>
    </div>
  `,
      host: {
        "[class.datagrid-placeholder-container]": "true"
      }
    }]
  }], function() {
    return [{
      type: Items
    }];
  }, null);
})();
var SignpostFocusManager = class {
  set triggerEl(value) {
    this._triggerEl = value;
  }
  focusTrigger() {
    if (this._triggerEl) {
      this._triggerEl.focus();
    }
  }
};
SignpostFocusManager.ɵfac = function SignpostFocusManager_Factory(t161) {
  return new (t161 || SignpostFocusManager)();
};
SignpostFocusManager.ɵprov = ɵɵdefineInjectable({
  token: SignpostFocusManager,
  factory: SignpostFocusManager.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SignpostFocusManager, [{
    type: Injectable
  }], null, null);
})();
var SignpostIdService = class {
  constructor() {
    this._id = new Subject();
  }
  get id() {
    return this._id.asObservable();
  }
  setId(id) {
    this._id.next(id);
  }
};
SignpostIdService.ɵfac = function SignpostIdService_Factory(t161) {
  return new (t161 || SignpostIdService)();
};
SignpostIdService.ɵprov = ɵɵdefineInjectable({
  token: SignpostIdService,
  factory: SignpostIdService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SignpostIdService, [{
    type: Injectable
  }], null, null);
})();
var ClrSignpostTrigger = class {
  constructor(toggleService, el, signpostIdService, signpostFocusManager, document2, platformId) {
    this.toggleService = toggleService;
    this.el = el;
    this.signpostIdService = signpostIdService;
    this.signpostFocusManager = signpostFocusManager;
    this.platformId = platformId;
    this.ariaExpanded = false;
    this.subscriptions = [];
    this.document = document2;
  }
  ngOnInit() {
    this.signpostFocusManager.triggerEl = this.el.nativeElement;
    this.subscriptions.push(this.toggleService.openChange.subscribe((isOpen) => {
      this.ariaExpanded = isOpen;
      const prevIsOpen = this.isOpen;
      this.isOpen = isOpen;
      if (!this.isOpen && prevIsOpen) {
        this.focusOnClose();
      }
    }), this.signpostIdService.id.subscribe((idChange) => this.ariaControl = idChange));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  /**********
   *
   * @description
   * click handler for the ClrSignpost trigger button used to hide/show ClrSignpostContent.
   */
  onSignpostTriggerClick(event) {
    this.toggleService.toggleWithEvent(event);
  }
  focusOnClose() {
    if (!isPlatformBrowser(this.platformId)) {
      return;
    }
    if (!this.isOpen && this.document.activeElement === this.document.body) {
      this.signpostFocusManager.focusTrigger();
    }
  }
};
ClrSignpostTrigger.ɵfac = function ClrSignpostTrigger_Factory(t161) {
  return new (t161 || ClrSignpostTrigger)(ɵɵdirectiveInject(ClrPopoverToggleService), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(SignpostIdService), ɵɵdirectiveInject(SignpostFocusManager), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(PLATFORM_ID));
};
ClrSignpostTrigger.ɵdir = ɵɵdefineDirective({
  type: ClrSignpostTrigger,
  selectors: [["", "clrSignpostTrigger", ""]],
  hostAttrs: [1, "signpost-trigger"],
  hostVars: 4,
  hostBindings: function ClrSignpostTrigger_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("click", function ClrSignpostTrigger_click_HostBindingHandler($event) {
        return ctx.onSignpostTriggerClick($event);
      });
    }
    if (rf & 2) {
      ɵɵattribute("aria-expanded", ctx.ariaExpanded)("aria-controls", ctx.ariaControl);
      ɵɵclassProp("active", ctx.isOpen);
    }
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrSignpostTrigger, [{
    type: Directive,
    args: [{
      selector: "[clrSignpostTrigger]",
      host: {
        class: "signpost-trigger",
        "[attr.aria-expanded]": "ariaExpanded",
        "[attr.aria-controls]": "ariaControl",
        "[class.active]": "isOpen"
      }
    }]
  }], function() {
    return [{
      type: ClrPopoverToggleService
    }, {
      type: ElementRef
    }, {
      type: SignpostIdService
    }, {
      type: SignpostFocusManager
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }];
  }, {
    onSignpostTriggerClick: [{
      type: HostListener,
      args: ["click", ["$event"]]
    }]
  });
})();
var ClrSignpost = class {
  constructor(commonStrings) {
    this.commonStrings = commonStrings;
    this.useCustomTrigger = false;
  }
  /**********
   * @property signPostTrigger
   *
   * @description
   * Uses ContentChild to check for a user supplied element with the ClrSignpostTrigger on it.
   *
   */
  set customTrigger(trigger2) {
    this.useCustomTrigger = !!trigger2;
  }
};
ClrSignpost.ɵfac = function ClrSignpost_Factory(t161) {
  return new (t161 || ClrSignpost)(ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrSignpost.ɵcmp = ɵɵdefineComponent({
  type: ClrSignpost,
  selectors: [["clr-signpost"]],
  contentQueries: function ClrSignpost_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrSignpostTrigger, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.customTrigger = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function ClrSignpost_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("signpost", true);
    }
  },
  features: [ɵɵProvidersFeature([SignpostFocusManager, SignpostIdService]), ɵɵHostDirectivesFeature([ClrPopoverHostDirective])],
  ngContentSelectors: _c02,
  decls: 2,
  vars: 1,
  consts: [[4, "ngIf"], ["type", "button", "clrSignpostTrigger", "", 1, "signpost-action", "btn", "btn-sm", "btn-icon", "btn-link"], ["shape", "info-circle"]],
  template: function ClrSignpost_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, ClrSignpost_ng_container_0_Template, 3, 2, "ng-container", 0);
      ɵɵprojection(1);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", !ctx.useCustomTrigger);
    }
  },
  dependencies: [NgIf, CdsIconCustomTag, ClrSignpostTrigger],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrSignpost, [{
    type: Component,
    args: [{
      selector: "clr-signpost",
      template: `
    <ng-container *ngIf="!useCustomTrigger">
      <button
        type="button"
        class="signpost-action btn btn-sm btn-icon btn-link"
        clrSignpostTrigger
        [attr.aria-label]="commonStrings.keys.signpostToggle"
      >
        <cds-icon shape="info-circle" [attr.title]="commonStrings.keys.info"></cds-icon>
      </button>
    </ng-container>

    <ng-content></ng-content>
  `,
      host: {
        "[class.signpost]": "true"
      },
      providers: [SignpostFocusManager, SignpostIdService],
      hostDirectives: [ClrPopoverHostDirective]
    }]
  }], function() {
    return [{
      type: ClrCommonStringsService
    }];
  }, {
    customTrigger: [{
      type: ContentChild,
      args: [ClrSignpostTrigger]
    }]
  });
})();
var WrappedCell = class {
  constructor() {
    this._dynamic = false;
  }
  ngAfterViewInit() {
    this.cellView = this.templateRef.createEmbeddedView(null);
  }
  ngOnDestroy() {
    this.cellView.destroy();
  }
};
WrappedCell.ɵfac = function WrappedCell_Factory(t161) {
  return new (t161 || WrappedCell)();
};
WrappedCell.ɵcmp = ɵɵdefineComponent({
  type: WrappedCell,
  selectors: [["dg-wrapped-cell"]],
  viewQuery: function WrappedCell_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c50, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.templateRef = _t.first);
    }
  },
  ngContentSelectors: _c02,
  decls: 2,
  vars: 0,
  consts: [["cellPortal", ""]],
  template: function WrappedCell_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, WrappedCell_ng_template_0_Template, 1, 0, "ng-template", null, 0, ɵɵtemplateRefExtractor);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(WrappedCell, [{
    type: Component,
    args: [{
      selector: "dg-wrapped-cell",
      template: `
    <ng-template #cellPortal>
      <ng-content></ng-content>
    </ng-template>
  `
    }]
  }], null, {
    templateRef: [{
      type: ViewChild,
      args: ["cellPortal"]
    }]
  });
})();
var ClrDatagridCell = class {
  constructor(vcr) {
    this.vcr = vcr;
  }
  get _view() {
    return this.wrappedInjector.get(WrappedCell, this.vcr).cellView;
  }
  ngOnInit() {
    this.wrappedInjector = new HostWrapper(WrappedCell, this.vcr);
  }
};
ClrDatagridCell.ɵfac = function ClrDatagridCell_Factory(t161) {
  return new (t161 || ClrDatagridCell)(ɵɵdirectiveInject(ViewContainerRef));
};
ClrDatagridCell.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridCell,
  selectors: [["clr-dg-cell"]],
  contentQueries: function ClrDatagridCell_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrSignpost, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.signpost = _t);
    }
  },
  hostAttrs: ["role", "gridcell"],
  hostVars: 4,
  hostBindings: function ClrDatagridCell_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("datagrid-cell", true)("datagrid-signpost-trigger", ctx.signpost.length > 0);
    }
  },
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrDatagridCell_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridCell, [{
    type: Component,
    args: [{
      selector: "clr-dg-cell",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.datagrid-cell]": "true",
        "[class.datagrid-signpost-trigger]": "signpost.length > 0",
        role: "gridcell"
      }
    }]
  }], function() {
    return [{
      type: ViewContainerRef
    }];
  }, {
    signpost: [{
      type: ContentChildren,
      args: [ClrSignpost]
    }]
  });
})();
var nbRow$1 = 0;
var DatagridIfExpandService = class extends IfExpandService {
  constructor() {
    super();
    this.expandableId = "";
    this._replace = new BehaviorSubject(false);
    this._animate = new Subject();
    nbRow$1++;
    this.expandableId = "clr-dg-expandable-row-" + nbRow$1;
  }
  // due to the es5 spec if the set is overridden on base class the getter must also be overridden
  get expanded() {
    return this._expanded;
  }
  set expanded(value) {
    value = !!value;
    if (value !== this._expanded) {
      this._expanded = value;
      this._animate.next();
      this._expandChange.next(value);
    }
  }
  get replace() {
    return this._replace.asObservable();
  }
  get animate() {
    return this._animate.asObservable();
  }
  loadingStateChange(state2) {
    super.loadingStateChange(state2);
    if (state2 !== ClrLoadingState.LOADING) {
      this._animate.next();
    }
  }
  setReplace(replaceValue) {
    this._replace.next(replaceValue);
  }
};
DatagridIfExpandService.ɵfac = function DatagridIfExpandService_Factory(t161) {
  return new (t161 || DatagridIfExpandService)();
};
DatagridIfExpandService.ɵprov = ɵɵdefineInjectable({
  token: DatagridIfExpandService,
  factory: DatagridIfExpandService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatagridIfExpandService, [{
    type: Injectable
  }], function() {
    return [];
  }, null);
})();
var DatagridDisplayMode;
(function(DatagridDisplayMode2) {
  DatagridDisplayMode2[DatagridDisplayMode2["DISPLAY"] = 0] = "DISPLAY";
  DatagridDisplayMode2[DatagridDisplayMode2["CALCULATE"] = 1] = "CALCULATE";
})(DatagridDisplayMode || (DatagridDisplayMode = {}));
var SelectionType;
(function(SelectionType2) {
  SelectionType2[SelectionType2["None"] = 0] = "None";
  SelectionType2[SelectionType2["Single"] = 1] = "Single";
  SelectionType2[SelectionType2["Multi"] = 2] = "Multi";
})(SelectionType || (SelectionType = {}));
var WrappedRow = class {
  constructor() {
    this._dynamic = false;
  }
  ngAfterViewInit() {
    this.rowView = this.templateRef.createEmbeddedView(null);
  }
  ngOnDestroy() {
    this.rowView.destroy();
  }
};
WrappedRow.ɵfac = function WrappedRow_Factory(t161) {
  return new (t161 || WrappedRow)();
};
WrappedRow.ɵcmp = ɵɵdefineComponent({
  type: WrappedRow,
  selectors: [["dg-wrapped-row"]],
  viewQuery: function WrappedRow_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c51, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.templateRef = _t.first);
    }
  },
  ngContentSelectors: _c02,
  decls: 2,
  vars: 0,
  consts: [["rowPortal", ""]],
  template: function WrappedRow_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, WrappedRow_ng_template_0_Template, 1, 0, "ng-template", null, 0, ɵɵtemplateRefExtractor);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(WrappedRow, [{
    type: Component,
    args: [{
      selector: "dg-wrapped-row",
      template: `
    <ng-template #rowPortal>
      <ng-content></ng-content>
    </ng-template>
  `
    }]
  }], null, {
    templateRef: [{
      type: ViewChild,
      args: ["rowPortal"]
    }]
  });
})();
var nbSelection = 0;
var Selection = class {
  constructor(_items, _filters) {
    this._items = _items;
    this._filters = _filters;
    this.preserveSelection = false;
    this.shiftPressed = false;
    this.rowSelectionMode = false;
    this.prevSelectionRefs = [];
    this.lockedRefs = [];
    this.valueCollector = new Subject();
    this._selectionType = SelectionType.None;
    this._change = new Subject();
    this.subscriptions = [];
    this.id = "clr-dg-selection" + nbSelection++;
    this.subscriptions.push(this._filters.change.subscribe(() => {
      if (!this._selectable || this.preserveSelection) {
        return;
      }
      this.clearSelection();
    }));
    this.subscriptions.push(this._items.allChanges.subscribe((updatedItems) => {
      const updateLockedRef = [];
      switch (this.selectionType) {
        case SelectionType.None: {
          break;
        }
        case SelectionType.Single: {
          let newSingle;
          let selectionUpdated = false;
          if (this.currentSingle && !this.prevSingleSelectionRef) {
            this.prevSingleSelectionRef = this._items.trackBy(this.currentSingle);
          }
          updatedItems.forEach((item) => {
            const ref = this._items.trackBy(item);
            if (this.prevSingleSelectionRef === ref) {
              newSingle = item;
              selectionUpdated = true;
            }
            if (this.lockedRefs.indexOf(ref) > -1) {
              updateLockedRef.push(ref);
            }
          });
          if (this._items.smart && !newSingle) {
            selectionUpdated = true;
          }
          setTimeout(() => {
            if (selectionUpdated) {
              this.currentSingle = newSingle;
            }
          }, 0);
          break;
        }
        case SelectionType.Multi: {
          let leftOver = this.current.slice();
          let selectionUpdated = false;
          if (this.current.length > 0 && this.prevSelectionRefs.length !== this.current.length) {
            this.prevSelectionRefs = [];
            this.current.forEach((item) => {
              this.prevSelectionRefs.push(this._items.trackBy(item));
            });
          }
          updatedItems.forEach((item) => {
            const ref = this._items.trackBy(item);
            if (this.lockedRefs.indexOf(ref) > -1) {
              updateLockedRef.push(ref);
            }
          });
          if (leftOver.length > 0) {
            updatedItems.forEach((item) => {
              const ref = this._items.trackBy(item);
              const selectedIndex = this.prevSelectionRefs.indexOf(ref);
              if (selectedIndex > -1) {
                leftOver[selectedIndex] = item;
                selectionUpdated = true;
              }
            });
            if (this._items.smart) {
              leftOver = leftOver.filter((selected) => updatedItems.indexOf(selected) > -1);
              if (this.current.length !== leftOver.length) {
                selectionUpdated = true;
              }
            }
            setTimeout(() => {
              if (selectionUpdated) {
                this.current = leftOver;
              }
            }, 0);
          }
          break;
        }
        default: {
          break;
        }
      }
      this.lockedRefs = updateLockedRef;
    }));
    this.subscriptions.push(this.valueCollector.pipe(debounceTime(0)).subscribe(() => this.emitChange()));
  }
  get selectionType() {
    return this._selectionType;
  }
  set selectionType(value) {
    if (value === this.selectionType) {
      return;
    }
    this._selectionType = value;
    if (value === SelectionType.None) {
      delete this.current;
    } else {
      this.updateCurrent([], false);
    }
  }
  get current() {
    return this._current;
  }
  set current(value) {
    this.updateCurrent(value, true);
  }
  get currentSingle() {
    return this._currentSingle;
  }
  set currentSingle(value) {
    if (value === this._currentSingle) {
      return;
    }
    this._currentSingle = value;
    if (value) {
      this.prevSingleSelectionRef = this._items.trackBy(value);
    }
    this.emitChange();
  }
  // We do not want to expose the Subject itself, but the Observable which is read-only
  get change() {
    return this._change.asObservable();
  }
  get _selectable() {
    return this._selectionType === SelectionType.Multi || this._selectionType === SelectionType.Single;
  }
  clearSelection() {
    this._current = [];
    this.prevSelectionRefs = [];
    this.prevSingleSelectionRef = null;
    this._currentSingle = null;
    this.emitChange();
  }
  /**
   * Cleans up our subscriptions to other providers
   */
  destroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  updateCurrent(value, emit) {
    this._current = value;
    if (emit) {
      this.valueCollector.next(value);
    }
  }
  /**
   * Checks if an item is currently selected
   */
  isSelected(item) {
    if (this._selectionType === SelectionType.Single) {
      return this.currentSingle === item;
    } else if (this._selectionType === SelectionType.Multi) {
      return this.current.indexOf(item) >= 0;
    }
    return false;
  }
  /**
   * Selects or deselects an item
   */
  setSelected(item, selected) {
    const index = this.current ? this.current.indexOf(item) : -1;
    switch (this._selectionType) {
      case SelectionType.None:
        break;
      case SelectionType.Single:
        break;
      case SelectionType.Multi:
        if (index >= 0 && !selected) {
          this.deselectItem(index);
        } else if (index < 0 && selected) {
          this.selectItem(item);
        }
        break;
      default:
        break;
    }
  }
  /**
   * Checks if all currently displayed items are selected
   */
  isAllSelected() {
    if (this._selectionType !== SelectionType.Multi || !this._items.displayed) {
      return false;
    }
    const displayedItems = this._items.displayed.filter((item) => {
      return this.isLocked(item) === false;
    });
    const nbDisplayed = displayedItems.length;
    if (nbDisplayed < 1) {
      return false;
    }
    const temp = displayedItems.filter((item) => this.current.indexOf(item) > -1);
    return temp.length === displayedItems.length;
  }
  /**
   * Lock and unlock item
   */
  lockItem(item, lock) {
    if (this.canItBeLocked()) {
      const ref = this._items.trackBy(item);
      if (lock === true) {
        this.lockedRefs.push(ref);
      } else {
        this.lockedRefs = this.lockedRefs.filter((lockedItem) => ref !== lockedItem);
      }
    }
  }
  /**
   * Check is item locked or not by searching into lockedRefs for entry
   */
  isLocked(item) {
    if (this.canItBeLocked()) {
      const ref = this._items.trackBy(item);
      return this.lockedRefs.indexOf(ref) > -1;
    }
    return false;
  }
  /**
   * Selects or deselects all currently displayed items
   */
  toggleAll() {
    if (this._selectionType === SelectionType.None || this._selectionType === SelectionType.Single) {
      return;
    }
    if (this.isAllSelected()) {
      this._items.displayed.forEach((item) => {
        const currentIndex = this.current.indexOf(item);
        if (currentIndex > -1 && this.isLocked(item) === false) {
          this.deselectItem(currentIndex);
        }
      });
    } else {
      this._items.displayed.forEach((item) => {
        if (this.current.indexOf(item) < 0 && this.isLocked(item) === false) {
          this.selectItem(item);
        }
      });
    }
  }
  /**
   * Selects an item
   */
  selectItem(item) {
    this.current = this.current.concat(item);
    this.prevSelectionRefs.push(this._items.trackBy(item));
  }
  /**
   * Deselects an item
   */
  deselectItem(indexOfItem) {
    this.current = this.current.slice(0, indexOfItem).concat(this.current.slice(indexOfItem + 1));
    if (indexOfItem < this.prevSelectionRefs.length) {
      const removedItems = this.prevSelectionRefs.splice(indexOfItem, 1);
      this.lockedRefs = this.lockedRefs.filter((locked) => locked !== removedItems[0]);
    }
  }
  /**
   * Make sure that it could be locked
   */
  canItBeLocked() {
    return this._selectionType !== SelectionType.None;
  }
  emitChange() {
    if (this._selectionType === SelectionType.Single) {
      this._change.next(this.currentSingle);
    } else if (this._selectionType === SelectionType.Multi) {
      this._change.next(this.current);
    }
  }
};
Selection.ɵfac = function Selection_Factory(t161) {
  return new (t161 || Selection)(ɵɵinject(Items), ɵɵinject(FiltersProvider));
};
Selection.ɵprov = ɵɵdefineInjectable({
  token: Selection,
  factory: Selection.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Selection, [{
    type: Injectable
  }], function() {
    return [{
      type: Items
    }, {
      type: FiltersProvider
    }];
  }, null);
})();
var DisplayModeService = class {
  constructor(renderOrganizer) {
    this._view = new BehaviorSubject(DatagridDisplayMode.DISPLAY);
    this.subscriptions = [];
    this.subscriptions.push(renderOrganizer.filterRenderSteps(DatagridRenderStep.CALCULATE_MODE_ON).subscribe(() => this._view.next(DatagridDisplayMode.CALCULATE)));
    this.subscriptions.push(renderOrganizer.filterRenderSteps(DatagridRenderStep.CALCULATE_MODE_OFF).subscribe(() => this._view.next(DatagridDisplayMode.DISPLAY)));
  }
  get view() {
    return this._view.asObservable();
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
};
DisplayModeService.ɵfac = function DisplayModeService_Factory(t161) {
  return new (t161 || DisplayModeService)(ɵɵinject(DatagridRenderOrganizer));
};
DisplayModeService.ɵprov = ɵɵdefineInjectable({
  token: DisplayModeService,
  factory: DisplayModeService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DisplayModeService, [{
    type: Injectable
  }], function() {
    return [{
      type: DatagridRenderOrganizer
    }];
  }, null);
})();
var ClrDatagridSelectionCellDirective = class {
  constructor(selection) {
    this.selection = selection;
  }
  onSelectionCellClick(event) {
    if (this.selection.rowSelectionMode) {
      return;
    }
    if (event.target.tagName !== "LABEL" && event.target.tagName !== "INPUT") {
      event.target.querySelector("input").click();
    }
  }
};
ClrDatagridSelectionCellDirective.ɵfac = function ClrDatagridSelectionCellDirective_Factory(t161) {
  return new (t161 || ClrDatagridSelectionCellDirective)(ɵɵdirectiveInject(Selection));
};
ClrDatagridSelectionCellDirective.ɵdir = ɵɵdefineDirective({
  type: ClrDatagridSelectionCellDirective,
  selectors: [["", 8, "datagrid-select"]],
  hostBindings: function ClrDatagridSelectionCellDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("click", function ClrDatagridSelectionCellDirective_click_HostBindingHandler($event) {
        return ctx.onSelectionCellClick($event);
      });
    }
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridSelectionCellDirective, [{
    type: Directive,
    args: [{
      selector: ".datagrid-select"
    }]
  }], function() {
    return [{
      type: Selection
    }];
  }, {
    onSelectionCellClick: [{
      type: HostListener,
      args: ["click", ["$event"]]
    }]
  });
})();
var nbRow = 0;
var ClrDatagridRow = class {
  constructor(selection, rowActionService, globalExpandable, expand, detailService, displayMode, vcr, renderer, el, commonStrings, items, document2) {
    this.selection = selection;
    this.rowActionService = rowActionService;
    this.globalExpandable = globalExpandable;
    this.expand = expand;
    this.detailService = detailService;
    this.displayMode = displayMode;
    this.vcr = vcr;
    this.renderer = renderer;
    this.el = el;
    this.commonStrings = commonStrings;
    this.items = items;
    this.document = document2;
    this.selectedChanged = new EventEmitter(false);
    this.expandedChange = new EventEmitter(false);
    this.displayCells = false;
    this.expandAnimationTrigger = false;
    this.SELECTION_TYPE = SelectionType;
    this.itemChanges = new ReplaySubject(1);
    this._selected = false;
    this._detailOpenLabel = "";
    this._detailCloseLabel = "";
    this._rowSelectionLabel = "";
    this.subscriptions = [];
    this._selectable = true;
    nbRow++;
    this.id = "clr-dg-row" + nbRow;
    this.radioId = "clr-dg-row-rd" + nbRow;
    this.checkboxId = "clr-dg-row-cb" + nbRow;
    this.expandableId = expand.expandableId;
    this.subscriptions.push(combineLatest(this.expand.replace, this.expand.expandChange).subscribe(([expandReplaceValue, expandChangeValue]) => {
      if (expandReplaceValue && expandChangeValue) {
        this.replaced = true;
        this.renderer.addClass(this.el.nativeElement, "datagrid-row-replaced");
      } else {
        this.replaced = false;
        this.renderer.removeClass(this.el.nativeElement, "datagrid-row-replaced");
      }
    }));
  }
  /**
   * Model of the row, to use for selection
   */
  get item() {
    return this._item;
  }
  set item(item) {
    this._item = item;
    this.itemChanges.next(item);
    this.clrDgSelectable = this._selectable;
  }
  get clrDgSelectable() {
    return !this.selection.isLocked(this.item);
  }
  set clrDgSelectable(value) {
    if (this.item) {
      this.selection.lockItem(this.item, value === "false" || value === false);
    }
    this._selectable = value;
  }
  /**
   * Indicates if the row is selected
   */
  get selected() {
    if (this.selection.selectionType === SelectionType.None) {
      return this._selected;
    } else {
      return this.selection.isSelected(this.item);
    }
  }
  set selected(value) {
    if (this.selection.selectionType === SelectionType.None) {
      this._selected = value;
    } else {
      if (value && this.selection.selectionType === SelectionType.Multi) {
        this.rangeSelect();
      } else {
        this.selection.rangeStart = null;
      }
      this.selection.setSelected(this.item, value);
    }
  }
  get expanded() {
    return this.expand.expanded;
  }
  set expanded(value) {
    this.expand.expanded = value;
  }
  get clrDgDetailOpenLabel() {
    return this._detailOpenLabel ? this._detailOpenLabel : this.commonStrings.keys.open;
  }
  set clrDgDetailOpenLabel(label) {
    this._detailOpenLabel = label;
  }
  get clrDgDetailCloseLabel() {
    return this._detailCloseLabel ? this._detailCloseLabel : this.commonStrings.keys.close;
  }
  set clrDgDetailCloseLabel(label) {
    this._detailCloseLabel = label;
  }
  // CDE-151: Rename this field to clrDgRowSelectionLabel in v16
  get clrDgRowSelectionLabel() {
    return this._rowSelectionLabel ? this._rowSelectionLabel : this.commonStrings.keys.select;
  }
  set clrDgRowSelectionLabel(label) {
    this._rowSelectionLabel = label;
  }
  get _view() {
    return this.wrappedInjector.get(WrappedRow, this.vcr).rowView;
  }
  ngOnInit() {
    this.wrappedInjector = new HostWrapper(WrappedRow, this.vcr);
    this.selection.lockItem(this.item, this.clrDgSelectable === false);
  }
  ngAfterContentInit() {
    this.dgCells.changes.subscribe(() => {
      this.dgCells.forEach((cell) => {
        if (!cell._view.destroyed) {
          this._scrollableCells.insert(cell._view);
        }
      });
    });
  }
  ngAfterViewInit() {
    this.subscriptions.push(this.displayMode.view.subscribe((viewChange) => {
      for (let i35 = this._scrollableCells.length; i35 > 0; i35--) {
        this._scrollableCells.detach();
      }
      for (let i35 = this._calculatedCells.length; i35 > 0; i35--) {
        this._calculatedCells.detach();
      }
      if (viewChange === DatagridDisplayMode.CALCULATE) {
        this.displayCells = false;
        this.dgCells.forEach((cell) => {
          if (!cell._view.destroyed) {
            this._calculatedCells.insert(cell._view);
          }
        });
      } else {
        this.displayCells = true;
        this.dgCells.forEach((cell) => {
          if (!cell._view.destroyed) {
            this._scrollableCells.insert(cell._view);
          }
        });
      }
    }), this.expand.animate.subscribe(() => {
      this.expandAnimationTrigger = !this.expandAnimationTrigger;
    }));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  toggle(selected = !this.selected) {
    if (selected !== this.selected) {
      this.selected = selected;
      this.selectedChanged.emit(selected);
    }
  }
  toggleExpand() {
    if (this.expand.expandable) {
      this.expandAnimation.updateStartHeight();
      this.expanded = !this.expanded;
      this.expandedChange.emit(this.expanded);
    }
  }
  /**
   * The default behavior in Chrome and Firefox for shift-clicking on a label is to perform text-selection.
   * This prevents our intended range-selection, because this text-selection overrides our shift-click event.
   * We need to clear the stored selection range when shift-clicking. This will override the mostly unused shift-click
   * selection browser functionality, which is inconsistently implemented in browsers anyway.
   */
  clearRanges(event) {
    if (event.shiftKey) {
      this.document.getSelection().removeAllRanges();
      if (window.navigator.userAgent.indexOf("Firefox") !== -1) {
        event.preventDefault();
        this.toggle(true);
      }
    }
  }
  /**
   * @deprecated related to clrDgRowSelection, which is deprecated
   */
  selectRow(selected = !this.selected, $event) {
    if ($event.target.tagName === "LABEL") {
      return;
    }
    if (this.selection.selectionType === this.SELECTION_TYPE.Single) {
      this.selection.currentSingle = this.item;
    } else {
      this.toggle(selected);
    }
  }
  rangeSelect() {
    const items = this.items.displayed;
    if (!items) {
      return;
    }
    const startIx = items.indexOf(this.selection.rangeStart);
    if (this.selection.rangeStart && this.selection.current.includes(this.selection.rangeStart) && this.selection.shiftPressed && startIx !== -1) {
      const endIx = items.indexOf(this.item);
      const newSelection = new Set(this.selection.current.concat(items.slice(Math.min(startIx, endIx), Math.max(startIx, endIx) + 1)));
      this.selection.clearSelection();
      this.selection.current.push(...newSelection);
    } else {
      this.selection.rangeStart = this.item;
    }
  }
};
ClrDatagridRow.ɵfac = function ClrDatagridRow_Factory(t161) {
  return new (t161 || ClrDatagridRow)(ɵɵdirectiveInject(Selection), ɵɵdirectiveInject(RowActionService), ɵɵdirectiveInject(ExpandableRowsCount), ɵɵdirectiveInject(DatagridIfExpandService), ɵɵdirectiveInject(DetailService), ɵɵdirectiveInject(DisplayModeService), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(Items), ɵɵdirectiveInject(DOCUMENT));
};
ClrDatagridRow.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridRow,
  selectors: [["clr-dg-row"]],
  contentQueries: function ClrDatagridRow_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrDatagridCell, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dgCells = _t);
    }
  },
  viewQuery: function ClrDatagridRow_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(ClrExpandableAnimation, 5);
      ɵɵviewQuery(_c52, 5);
      ɵɵviewQuery(_c53, 5, ViewContainerRef);
      ɵɵviewQuery(_c54, 5, ViewContainerRef);
      ɵɵviewQuery(_c55, 5, ViewContainerRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.expandAnimation = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.detailButton = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._stickyCells = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._scrollableCells = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._calculatedCells = _t.first);
    }
  },
  hostAttrs: ["role", "rowgroup"],
  hostVars: 5,
  hostBindings: function ClrDatagridRow_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("aria-owns", ctx.id);
      ɵɵclassProp("datagrid-row", true)("datagrid-selected", ctx.selected);
    }
  },
  inputs: {
    item: [InputFlags.None, "clrDgItem", "item"],
    clrDgSelectable: "clrDgSelectable",
    selected: [InputFlags.None, "clrDgSelected", "selected"],
    expanded: [InputFlags.None, "clrDgExpanded", "expanded"],
    clrDgDetailOpenLabel: "clrDgDetailOpenLabel",
    clrDgDetailCloseLabel: "clrDgDetailCloseLabel",
    clrDgRowSelectionLabel: "clrDgRowSelectionLabel"
  },
  outputs: {
    selectedChanged: "clrDgSelectedChange",
    expandedChange: "clrDgExpandedChange"
  },
  features: [ɵɵProvidersFeature([DatagridIfExpandService, {
    provide: IfExpandService,
    useExisting: DatagridIfExpandService
  }, {
    provide: LoadingListener,
    useExisting: DatagridIfExpandService
  }])],
  ngContentSelectors: _c57,
  decls: 9,
  vars: 3,
  consts: [["detail", ""], ["rowContent", ""], ["calculatedCells", ""], ["stickyCells", ""], ["scrollableCells", ""], ["detailButton", ""], ["class", "datagrid-row-clickable", 3, "mousedown", "click", 4, "ngIf"], [3, "clrExpandTrigger", 4, "ngIf"], [4, "ngIf"], [1, "datagrid-row-clickable", 3, "mousedown", "click"], [3, "clrExpandTrigger"], [3, "ngTemplateOutlet"], ["role", "row", 1, "datagrid-row-master", "datagrid-row-flex", 3, "id"], [1, "datagrid-row-sticky"], ["class", "datagrid-select datagrid-fixed-column datagrid-cell", "role", "gridcell", 3, "ngClass", 4, "ngIf"], ["class", "datagrid-row-actions datagrid-fixed-column datagrid-cell", "role", "gridcell", 4, "ngIf"], ["class", "datagrid-expandable-caret datagrid-fixed-column datagrid-cell", "role", "gridcell", 4, "ngIf"], ["class", "datagrid-detail-caret datagrid-fixed-column datagrid-cell", 4, "ngIf"], [1, "datagrid-row-scrollable", 3, "ngClass"], [1, "datagrid-scrolling-cells"], ["role", "gridcell", 1, "datagrid-select", "datagrid-fixed-column", "datagrid-cell", 3, "ngClass"], ["type", "checkbox", "clrCheckbox", "", 3, "ngModelChange", "ngModel", "id", "disabled"], [1, "clr-control-label", "clr-col-null", 3, "click", "for"], [1, "clr-sr-only"], ["type", "radio", "clrRadio", "", 3, "ngModelChange", "id", "name", "value", "ngModel", "checked", "disabled"], [1, "clr-control-label", "clr-col-null", 3, "for"], ["role", "gridcell", 1, "datagrid-row-actions", "datagrid-fixed-column", "datagrid-cell"], ["role", "gridcell", 1, "datagrid-expandable-caret", "datagrid-fixed-column", "datagrid-cell"], ["type", "button", "class", "datagrid-expandable-caret-button", 3, "click", 4, "ngIf"], ["clrSmall", "", 4, "ngIf"], ["type", "button", 1, "datagrid-expandable-caret-button", 3, "click"], ["shape", "angle", 1, "datagrid-expandable-caret-icon"], ["clrSmall", ""], [1, "datagrid-detail-caret", "datagrid-fixed-column", "datagrid-cell"], ["type", "button", "aria-haspopup", "dialog", 1, "datagrid-detail-caret-button", 3, "click"], ["shape", "angle-double", 1, "datagrid-detail-caret-icon"]],
  template: function ClrDatagridRow_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c56);
      ɵɵtemplate(0, ClrDatagridRow_div_0_Template, 3, 2, "div", 6)(1, ClrDatagridRow_clr_expandable_animation_1_Template, 2, 2, "clr-expandable-animation", 7)(2, ClrDatagridRow_2_Template, 1, 1, null, 8)(3, ClrDatagridRow_ng_template_3_Template, 1, 0, "ng-template", null, 0, ɵɵtemplateRefExtractor)(5, ClrDatagridRow_ng_template_5_Template, 16, 13, "ng-template", null, 1, ɵɵtemplateRefExtractor);
      ɵɵelementContainer(7, null, 2);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.selection.rowSelectionMode);
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.selection.rowSelectionMode && ctx.expand.expandable);
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.selection.rowSelectionMode && !ctx.expand.expandable);
    }
  },
  dependencies: [NgClass, NgIf, NgTemplateOutlet, CdsIconCustomTag, ClrLabel, ClrCheckbox, ClrCheckboxWrapper, ClrRadio, ClrRadioWrapper, DefaultValueAccessor, CheckboxControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgModel, ClrExpandableAnimation, ClrSpinner, ClrDatagridSelectionCellDirective],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridRow, [{
    type: Component,
    args: [{
      selector: "clr-dg-row",
      host: {
        "[class.datagrid-row]": "true",
        "[class.datagrid-selected]": "selected",
        "[attr.aria-owns]": "id",
        role: "rowgroup"
      },
      providers: [DatagridIfExpandService, {
        provide: IfExpandService,
        useExisting: DatagridIfExpandService
      }, {
        provide: LoadingListener,
        useExisting: DatagridIfExpandService
      }],
      template: `<!--
  We need to wrap the #rowContent in label element if we are in rowSelectionMode.
  Clicking of that wrapper label will equate to clicking on the whole row, which triggers the checkbox to toggle.
-->
<div
  class="datagrid-row-clickable"
  *ngIf="selection.rowSelectionMode"
  (mousedown)="clearRanges($event)"
  (click)="selectRow(!selected, $event)"
>
  <clr-expandable-animation [clrExpandTrigger]="expandAnimationTrigger" *ngIf="expand.expandable">
    <ng-template [ngTemplateOutlet]="rowContent"></ng-template>
  </clr-expandable-animation>
  <ng-template [ngTemplateOutlet]="rowContent" *ngIf="!expand.expandable"></ng-template>
</div>

<clr-expandable-animation
  *ngIf="!selection.rowSelectionMode && expand.expandable"
  [clrExpandTrigger]="expandAnimationTrigger"
>
  <ng-template [ngTemplateOutlet]="rowContent"></ng-template>
</clr-expandable-animation>

<ng-template *ngIf="!selection.rowSelectionMode && !expand.expandable" [ngTemplateOutlet]="rowContent"></ng-template>

<!--
    We need the "project into template" hacks because we need this in 2 different places
    depending on whether the details replace the row or not.
-->
<ng-template #detail>
  <ng-content select="clr-dg-row-detail"></ng-content>
</ng-template>

<ng-template #rowContent>
  <div
    role="row"
    [id]="id"
    class="datagrid-row-master datagrid-row-flex"
    [class.datagrid-row-detail-open]="detailService.isRowOpen(item)"
  >
    <div class="datagrid-row-sticky">
      <!-- Sticky elements here -->
      <ng-container #stickyCells>
        <div
          *ngIf="selection.selectionType === SELECTION_TYPE.Multi"
          class="datagrid-select datagrid-fixed-column datagrid-cell"
          [ngClass]="{ 'clr-form-control-disabled': !clrDgSelectable }"
          role="gridcell"
        >
          <clr-checkbox-wrapper>
            <input
              type="checkbox"
              clrCheckbox
              [ngModel]="selected"
              (ngModelChange)="toggle($event)"
              [id]="checkboxId"
              [disabled]="clrDgSelectable ? null : true"
              [attr.aria-disabled]="clrDgSelectable ? null : true"
            />
            <!-- Usage of class clr-col-null here prevents clr-col-* classes from being added when a datagrid is wrapped inside clrForm -->
            <label [for]="checkboxId" class="clr-control-label clr-col-null" (click)="clearRanges($event)">
              <span class="clr-sr-only">{{clrDgRowSelectionLabel || commonStrings.keys.select}}</span>
            </label>
          </clr-checkbox-wrapper>
        </div>
        <div
          *ngIf="selection.selectionType === SELECTION_TYPE.Single"
          class="datagrid-select datagrid-fixed-column datagrid-cell"
          [ngClass]="{ 'clr-form-control-disabled': !clrDgSelectable }"
          role="gridcell"
        >
          <clr-radio-wrapper>
            <input
              type="radio"
              clrRadio
              [id]="radioId"
              [name]="selection.id + '-radio'"
              [value]="item"
              [(ngModel)]="selection.currentSingle"
              [checked]="selection.currentSingle === item"
              [disabled]="clrDgSelectable ? null : true"
              [attr.aria-disabled]="clrDgSelectable ? null : true"
            />
            <label class="clr-control-label clr-col-null" [for]="radioId">
              <span class="clr-sr-only">{{ clrDgRowSelectionLabel || commonStrings.keys.select }}</span>
            </label>
          </clr-radio-wrapper>
        </div>
        <div
          *ngIf="rowActionService.hasActionableRow"
          class="datagrid-row-actions datagrid-fixed-column datagrid-cell"
          role="gridcell"
        >
          <ng-content select="clr-dg-action-overflow"></ng-content>
        </div>
        <div
          *ngIf="globalExpandable.hasExpandableRow"
          class="datagrid-expandable-caret datagrid-fixed-column datagrid-cell"
          role="gridcell"
        >
          <ng-container *ngIf="expand.expandable">
            <button
              *ngIf="!expand.loading"
              (click)="toggleExpand()"
              type="button"
              class="datagrid-expandable-caret-button"
              [attr.aria-expanded]="expand.expanded"
              [attr.aria-label]="expand.expanded ? clrDgDetailCloseLabel : clrDgDetailOpenLabel"
              [attr.aria-controls]="expandableId"
            >
              <cds-icon
                shape="angle"
                class="datagrid-expandable-caret-icon"
                [attr.direction]="expand.expanded ? 'down' : 'right'"
                [attr.title]="expand.expanded ? commonStrings.keys.collapse : commonStrings.keys.expand"
              ></cds-icon>
            </button>
            <clr-spinner *ngIf="expand.loading" clrSmall>{{ commonStrings.keys.loading }}</clr-spinner>
          </ng-container>
        </div>
        <div *ngIf="detailService.enabled" class="datagrid-detail-caret datagrid-fixed-column datagrid-cell">
          <button
            (click)="detailService.toggle(item, detailButton)"
            type="button"
            #detailButton
            class="datagrid-detail-caret-button"
            [class.is-open]="detailService.isRowOpen(item)"
            [attr.aria-label]="detailService.isRowOpen(item) ? clrDgDetailCloseLabel : clrDgDetailOpenLabel"
            [attr.aria-expanded]="detailService.isOpen"
            [attr.aria-controls]="detailService.id"
            aria-haspopup="dialog"
          >
            <cds-icon
              shape="angle-double"
              [attr.direction]="detailService.isRowOpen(item) ? 'left' : 'right'"
              class="datagrid-detail-caret-icon"
              [attr.title]="detailService.isRowOpen(item) ? commonStrings.keys.close: commonStrings.keys.open"
            ></cds-icon>
          </button>
        </div>
      </ng-container>
      <!-- placeholder for projecting other sticky cells as pinned-->
    </div>
    <div class="datagrid-row-scrollable" [ngClass]="{'is-replaced': replaced && expanded}">
      <div class="datagrid-scrolling-cells">
        <ng-content select="clr-dg-cell"></ng-content>
        <ng-container #scrollableCells></ng-container>
      </div>
      <!-- details here when replace, re-visit when sticky container is used for pinned cells -->
      <ng-template *ngIf="replaced && !expand.loading" [ngTemplateOutlet]="detail"></ng-template>
      <ng-template *ngIf="!replaced && !expand.loading" [ngTemplateOutlet]="detail"></ng-template>
    </div>
  </div>
</ng-template>

<ng-container #calculatedCells></ng-container>
`
    }]
  }], function() {
    return [{
      type: Selection
    }, {
      type: RowActionService
    }, {
      type: ExpandableRowsCount
    }, {
      type: DatagridIfExpandService
    }, {
      type: DetailService
    }, {
      type: DisplayModeService
    }, {
      type: ViewContainerRef
    }, {
      type: Renderer2
    }, {
      type: ElementRef
    }, {
      type: ClrCommonStringsService
    }, {
      type: Items
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }];
  }, {
    selectedChanged: [{
      type: Output,
      args: ["clrDgSelectedChange"]
    }],
    expandedChange: [{
      type: Output,
      args: ["clrDgExpandedChange"]
    }],
    dgCells: [{
      type: ContentChildren,
      args: [ClrDatagridCell]
    }],
    expandAnimation: [{
      type: ViewChild,
      args: [ClrExpandableAnimation]
    }],
    detailButton: [{
      type: ViewChild,
      args: ["detailButton"]
    }],
    _stickyCells: [{
      type: ViewChild,
      args: ["stickyCells", {
        read: ViewContainerRef
      }]
    }],
    _scrollableCells: [{
      type: ViewChild,
      args: ["scrollableCells", {
        read: ViewContainerRef
      }]
    }],
    _calculatedCells: [{
      type: ViewChild,
      args: ["calculatedCells", {
        read: ViewContainerRef
      }]
    }],
    item: [{
      type: Input,
      args: ["clrDgItem"]
    }],
    clrDgSelectable: [{
      type: Input,
      args: ["clrDgSelectable"]
    }],
    selected: [{
      type: Input,
      args: ["clrDgSelected"]
    }],
    expanded: [{
      type: Input,
      args: ["clrDgExpanded"]
    }],
    clrDgDetailOpenLabel: [{
      type: Input
    }],
    clrDgDetailCloseLabel: [{
      type: Input
    }],
    clrDgRowSelectionLabel: [{
      type: Input
    }]
  });
})();
var DatagridColumnChanges;
(function(DatagridColumnChanges2) {
  DatagridColumnChanges2[DatagridColumnChanges2["WIDTH"] = 0] = "WIDTH";
  DatagridColumnChanges2[DatagridColumnChanges2["HIDDEN"] = 1] = "HIDDEN";
})(DatagridColumnChanges || (DatagridColumnChanges = {}));
var ALL_COLUMN_CHANGES = Object.keys(DatagridColumnChanges).map((key) => DatagridColumnChanges[key]).filter((key) => key === parseInt(key, 10));
var ColumnsService = class {
  constructor() {
    this.columns = [];
    this._cache = [];
  }
  get columnStates() {
    return this.columns.map((column) => column.value);
  }
  get hasHideableColumns() {
    return this.columnStates.filter((state2) => state2.hideable).length > 0;
  }
  cache() {
    this._cache = this.columns.map((subject) => {
      const value = __spreadValues({}, subject.value);
      delete value.changes;
      return value;
    });
  }
  hasCache() {
    return !!this._cache.length;
  }
  resetToLastCache() {
    this._cache.forEach((state2, index) => {
      this.columns[index].next(__spreadProps(__spreadValues({}, state2), {
        changes: ALL_COLUMN_CHANGES
      }));
    });
    this._cache = [];
  }
  // Helper method to emit a change to a column only when there is an actual diff to process for that column
  emitStateChangeAt(columnIndex, diff) {
    if (!this.columns[columnIndex]) {
      return;
    }
    this.emitStateChange(this.columns[columnIndex], diff);
  }
  emitStateChange(column, diff) {
    column.next(__spreadValues(__spreadValues({}, column.value), diff));
  }
};
ColumnsService.ɵfac = function ColumnsService_Factory(t161) {
  return new (t161 || ColumnsService)();
};
ColumnsService.ɵprov = ɵɵdefineInjectable({
  token: ColumnsService,
  factory: ColumnsService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ColumnsService, [{
    type: Injectable
  }], null, null);
})();
var StateProvider = class {
  constructor(filters, sort, page, debouncer) {
    this.filters = filters;
    this.sort = sort;
    this.page = page;
    this.debouncer = debouncer;
    this.change = this.debouncer.change.pipe(map(() => this.state));
  }
  /*
   * By making this a getter, we open the possibility for a setter in the future.
   * It's been requested a couple times.
   */
  get state() {
    const state2 = {};
    if (this.page.size > 0) {
      state2.page = {
        from: this.page.firstItem,
        to: this.page.lastItem,
        size: this.page.size,
        current: this.page.current
      };
    }
    if (this.sort.comparator) {
      if (this.sort.comparator instanceof DatagridPropertyComparator) {
        state2.sort = {
          by: this.sort.comparator.prop,
          reverse: this.sort.reverse
        };
      } else {
        state2.sort = {
          by: this.sort.comparator,
          reverse: this.sort.reverse
        };
      }
    }
    const activeFilters = this.filters.getActiveFilters();
    if (activeFilters.length > 0) {
      state2.filters = [];
      for (const filter3 of activeFilters) {
        if (filter3.state) {
          state2.filters.push(filter3.state);
        } else {
          state2.filters.push(filter3);
        }
      }
    }
    return state2;
  }
};
StateProvider.ɵfac = function StateProvider_Factory(t161) {
  return new (t161 || StateProvider)(ɵɵinject(FiltersProvider), ɵɵinject(Sort), ɵɵinject(Page), ɵɵinject(StateDebouncer));
};
StateProvider.ɵprov = ɵɵdefineInjectable({
  token: StateProvider,
  factory: StateProvider.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StateProvider, [{
    type: Injectable
  }], function() {
    return [{
      type: FiltersProvider
    }, {
      type: Sort
    }, {
      type: Page
    }, {
      type: StateDebouncer
    }];
  }, null);
})();
function getTabableItems(el) {
  const tabableSelector = ["a[href]", "area[href]", "input:not([disabled])", "button:not([disabled])", "select:not([disabled])", "textarea:not([disabled])", "iframe", "object", "embed", "*[tabindex]", "*[contenteditable=true]", "[role=button]:not([disabled])"].join(",");
  return Array.from(el.querySelectorAll(tabableSelector));
}
var KeyNavigationGridController = class {
  constructor(zone) {
    this.zone = zone;
    this.listenersAdded = false;
    this.destroy$ = new Subject();
    this.config = {
      keyGridRows: "[role=row]:not(.datagrid-placeholder)",
      keyGridCells: "[role=gridcell]:not(.datagrid-hidden-column):not(.datagrid-placeholder-content), [role=columnheader]:not(.datagrid-hidden-column):not(.datagrid-placeholder-content), .datagrid-detail-caret",
      keyGrid: "[role=grid]"
    };
  }
  get grid() {
    return this.host?.querySelector(this.config.keyGrid);
  }
  get rows() {
    return this.host?.querySelectorAll(this.config.keyGridRows);
  }
  get cells() {
    return this.host?.querySelectorAll(this.config.keyGridCells);
  }
  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }
  addListeners() {
    if (this.listenersAdded) {
      return;
    }
    this.zone.runOutsideAngular(() => {
      fromEvent(this.grid, "mousedown").pipe(takeUntil(this.destroy$)).subscribe((e83) => {
        if (e83.buttons === 1 && !e83.ctrlKey) {
          const activeCell = this.cells ? Array.from(this.cells).find((c45) => c45 === e83.target || c45 === e83.target.closest(this.config.keyGridCells)) : null;
          if (activeCell) {
            this.setActiveCell(activeCell);
          }
        }
      });
      fromEvent(this.grid, "keydown").pipe(takeUntil(this.destroy$)).subscribe((e83) => {
        if (e83.target.classList.contains("drag-handle") && (e83.code === "ArrowLeft" || e83.code === "ArrowRight")) {
          return;
        }
        if (e83.code === "ArrowUp" || e83.code === "ArrowDown" || e83.code === "ArrowLeft" || e83.code === "ArrowRight" || e83.code === "End" || e83.code === "Home" || e83.code === "PageUp" || e83.code === "PageDown") {
          const {
            x: x6,
            y: y6
          } = this.getNextItemCoordinate(e83);
          const activeItem = this.rows ? Array.from(this.rows[y6].querySelectorAll(this.config.keyGridCells))[x6] : null;
          if (activeItem) {
            this.setActiveCell(activeItem);
          }
          e83.preventDefault();
        }
      });
    });
    this.listenersAdded = true;
  }
  initializeKeyGrid(host) {
    this.host = host;
    this.addListeners();
    this.resetKeyGrid();
  }
  resetKeyGrid() {
    this.cells?.forEach((i35) => i35.setAttribute("tabindex", "-1"));
    const firstCell = this.cells ? this.cells[0] : null;
    firstCell?.setAttribute("tabindex", "0");
  }
  setActiveCell(activeCell) {
    const prior = this.cells ? Array.from(this.cells).find((c45) => c45.getAttribute("tabindex") === "0") : null;
    if (prior) {
      prior.setAttribute("tabindex", "-1");
    }
    activeCell.setAttribute("tabindex", "0");
    const items = getTabableItems(activeCell);
    const item = activeCell.getAttribute("role") !== "columnheader" && items[0] ? items[0] : activeCell;
    item.focus();
  }
  getNextItemCoordinate(e83) {
    let currentCell = this.cells ? Array.from(this.cells).find((i35) => i35.getAttribute("tabindex") === "0") : null;
    if (e83.code === "Tab") {
      currentCell = document.activeElement;
    }
    const currentRow = this.rows && currentCell ? Array.from(this.rows).find((r94) => r94.contains(currentCell)) : null;
    const numOfRows = this.rows ? this.rows.length - 1 : 0;
    const numOfColumns = this.cells ? this.cells.length / this.rows.length - 1 : 0;
    let x6 = currentRow && currentCell ? Array.from(currentRow.querySelectorAll(this.config.keyGridCells)).indexOf(currentCell) : 0;
    let y6 = currentRow && currentCell && this.rows ? Array.from(this.rows).indexOf(currentRow) : 0;
    const dir = this.host.dir;
    const inlineStart = dir === "rtl" ? "ArrowRight" : "ArrowLeft";
    const inlineEnd = dir === "rtl" ? "ArrowLeft" : "ArrowRight";
    const itemsPerPage = this.rows.length || 0;
    if (e83.code === "ArrowUp" && y6 !== 0) {
      y6 = y6 - 1;
    } else if (e83.code === "ArrowDown" && y6 < numOfRows) {
      y6 = y6 + 1;
    } else if (e83.code === inlineStart && x6 !== 0) {
      x6 = x6 - 1;
    } else if (e83.code === inlineEnd && x6 < numOfColumns) {
      x6 = x6 + 1;
    } else if (e83.code === "End") {
      x6 = numOfColumns;
      if (e83.ctrlKey) {
        y6 = numOfRows;
      }
    } else if (e83.code === "Home") {
      x6 = 0;
      if (e83.ctrlKey) {
        y6 = 0;
      }
    } else if (e83.code === "PageUp") {
      y6 = y6 - itemsPerPage > 0 ? y6 - itemsPerPage : 0;
    } else if (e83.code === "PageDown") {
      y6 = y6 + itemsPerPage < numOfRows ? y6 + itemsPerPage : numOfRows;
    }
    return {
      x: x6,
      y: y6
    };
  }
};
KeyNavigationGridController.ɵfac = function KeyNavigationGridController_Factory(t161) {
  return new (t161 || KeyNavigationGridController)(ɵɵinject(NgZone));
};
KeyNavigationGridController.ɵprov = ɵɵdefineInjectable({
  token: KeyNavigationGridController,
  factory: KeyNavigationGridController.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(KeyNavigationGridController, [{
    type: Injectable
  }], function() {
    return [{
      type: NgZone
    }];
  }, null);
})();
var ClrDatagrid = class {
  constructor(organizer, items, expandableRows, selection, rowActionService, stateProvider, displayMode, renderer, detailService, document2, el, page, commonStrings, columnsService, keyNavigation, zone) {
    this.organizer = organizer;
    this.items = items;
    this.expandableRows = expandableRows;
    this.selection = selection;
    this.rowActionService = rowActionService;
    this.stateProvider = stateProvider;
    this.displayMode = displayMode;
    this.renderer = renderer;
    this.detailService = detailService;
    this.document = document2;
    this.el = el;
    this.page = page;
    this.commonStrings = commonStrings;
    this.columnsService = columnsService;
    this.keyNavigation = keyNavigation;
    this.zone = zone;
    this.clrDgSingleSelectionAriaLabel = this.commonStrings.keys.singleSelectionAriaLabel;
    this.clrDgSingleActionableAriaLabel = this.commonStrings.keys.singleActionableAriaLabel;
    this.clrDetailExpandableAriaLabel = this.commonStrings.keys.detailExpandableAriaLabel;
    this.clrDgDisablePageFocus = false;
    this.selectedChanged = new EventEmitter(false);
    this.singleSelectedChanged = new EventEmitter(false);
    this.refresh = new EventEmitter(false);
    this.SELECTION_TYPE = SelectionType;
    this._subscriptions = [];
    const datagridId = uniqueIdFactory();
    this.selectAllId = "clr-dg-select-all-" + datagridId;
    this.detailService.id = datagridId;
  }
  /**
   * Freezes the datagrid while data is loading
   */
  get loading() {
    return this.items.loading;
  }
  set loading(value) {
    this.items.loading = value;
  }
  /**
   * Array of all selected items
   */
  set selected(value) {
    if (value) {
      this.selection.selectionType = SelectionType.Multi;
    } else {
      this.selection.selectionType = SelectionType.None;
    }
    this.selection.updateCurrent(value, false);
  }
  /**
   * Selected item in single-select mode
   */
  set singleSelected(value) {
    this.selection.selectionType = SelectionType.Single;
    if (value) {
      this.selection.currentSingle = value;
    } else if (this.selection.currentSingle) {
      this.selection.currentSingle = null;
    }
  }
  set clrDgPreserveSelection(state2) {
    this.selection.preserveSelection = state2;
  }
  /**
   * @deprecated since 2.0, remove in 3.0
   *
   * Selection/Deselection on row click mode
   */
  set rowSelectionMode(value) {
    this.selection.rowSelectionMode = value;
  }
  set trackBy(value) {
    this.items.trackBy = value;
  }
  /**
   * Indicates if all currently displayed items are selected
   */
  get allSelected() {
    return this.selection.isAllSelected();
  }
  set allSelected(_value) {
    this.selection.toggleAll();
  }
  ngAfterContentInit() {
    if (!this.items.smart) {
      this.items.all = this.rows.map((row) => row.item);
    }
    const rowItemsChanges = this.rows.changes.pipe(switchMap((rows) => merge(
      // immediate update
      of(rows.map((row) => row.item)),
      // subsequent updates once per tick
      combineLatest(rows.map((row) => row.itemChanges)).pipe(debounceTime(0))
    )));
    this._subscriptions.push(rowItemsChanges.subscribe((all) => {
      if (!this.items.smart) {
        this.items.all = all;
      }
    }), this.rows.changes.subscribe(() => {
      for (let i35 = this._displayedRows.length - 1; i35 >= 0; i35--) {
        if (this._displayedRows.get(i35).destroyed) {
          this._displayedRows.remove(i35);
        }
      }
      this.rows.forEach((row) => {
        this._displayedRows.insert(row._view);
      });
      if (this.detailService.state && this.detailService.isOpen) {
        const row = this.rows.find((row2) => this.items.trackBy(row2.item) === this.items.trackBy(this.detailService.state));
        row ? this.detailService.open(row.item, row.detailButton.nativeElement) : this.detailService.close();
      }
    }));
  }
  /**
   * Our setup happens in the view of some of our components, so we wait for it to be done before starting
   */
  ngAfterViewInit() {
    this.keyNavigation.initializeKeyGrid(this.el.nativeElement);
    this.refresh.emit(this.stateProvider.state);
    this._subscriptions.push(
      this.stateProvider.change.subscribe((state2) => this.refresh.emit(state2)),
      this.selection.change.subscribe((s27) => {
        if (this.selection.selectionType === SelectionType.Single) {
          this.singleSelectedChanged.emit(s27);
        } else if (this.selection.selectionType === SelectionType.Multi) {
          this.selectedChanged.emit(s27);
        }
      }),
      // Reinitialize arrow key navigation on page changes
      this.page.change.subscribe(() => {
        this.keyNavigation.resetKeyGrid();
        if (!this.clrDgDisablePageFocus) {
          this.datagridTable.nativeElement.focus();
        }
      }),
      // Reinitialize arrow key navigation on hide/unhide columns
      combineLatest(this.columnsService.columns).subscribe(() => this.keyNavigation?.resetKeyGrid()),
      // A subscription that listens for displayMode changes on the datagrid
      this.displayMode.view.subscribe((viewChange) => {
        for (let i35 = this._projectedDisplayColumns.length; i35 > 0; i35--) {
          this._projectedDisplayColumns.detach();
        }
        for (let i35 = this._projectedCalculationColumns.length; i35 > 0; i35--) {
          this._projectedCalculationColumns.detach();
        }
        for (let i35 = this._calculationRows.length; i35 > 0; i35--) {
          this._calculationRows.detach();
        }
        for (let i35 = this._displayedRows.length; i35 > 0; i35--) {
          this._displayedRows.detach();
        }
        if (viewChange === DatagridDisplayMode.DISPLAY) {
          this.renderer.removeClass(this.el.nativeElement, "datagrid-calculate-mode");
          this.columns.forEach((column) => {
            this._projectedDisplayColumns.insert(column._view);
          });
          this.rows.forEach((row) => {
            this._displayedRows.insert(row._view);
          });
        } else {
          this.renderer.addClass(this.el.nativeElement, "datagrid-calculate-mode");
          this.columns.forEach((column) => {
            this._projectedCalculationColumns.insert(column._view);
          });
          this.rows.forEach((row) => {
            this._calculationRows.insert(row._view);
          });
        }
      })
    );
    this.zone.runOutsideAngular(() => {
      this._subscriptions.push(fromEvent(this.document.body, "keydown").subscribe((event) => {
        if (event.key === "Shift") {
          this.selection.shiftPressed = true;
        }
      }), fromEvent(this.document.body, "keyup").subscribe((event) => {
        if (event.key === "Shift") {
          this.selection.shiftPressed = false;
        }
      }));
    });
  }
  ngOnDestroy() {
    this._subscriptions.forEach((sub) => sub.unsubscribe());
  }
  resize() {
    this.organizer.resize();
  }
  /**
   * Public method to re-trigger the computation of displayed items manually
   */
  dataChanged() {
    this.items.refresh();
  }
};
ClrDatagrid.ɵfac = function ClrDatagrid_Factory(t161) {
  return new (t161 || ClrDatagrid)(ɵɵdirectiveInject(DatagridRenderOrganizer), ɵɵdirectiveInject(Items), ɵɵdirectiveInject(ExpandableRowsCount), ɵɵdirectiveInject(Selection), ɵɵdirectiveInject(RowActionService), ɵɵdirectiveInject(StateProvider), ɵɵdirectiveInject(DisplayModeService), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(DetailService), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Page), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(ColumnsService), ɵɵdirectiveInject(KeyNavigationGridController), ɵɵdirectiveInject(NgZone));
};
ClrDatagrid.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagrid,
  selectors: [["clr-datagrid"]],
  contentQueries: function ClrDatagrid_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrDatagridItems, 5);
      ɵɵcontentQuery(dirIndex, ClrDatagridPlaceholder, 5);
      ɵɵcontentQuery(dirIndex, ClrDatagridColumn, 4);
      ɵɵcontentQuery(dirIndex, ClrDatagridRow, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.iterator = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.placeholder = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.columns = _t);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.rows = _t);
    }
  },
  viewQuery: function ClrDatagrid_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c60, 5, ElementRef);
      ɵɵviewQuery(_c61, 5, ViewContainerRef);
      ɵɵviewQuery(_c62, 5, ViewContainerRef);
      ɵɵviewQuery(_c63, 5, ViewContainerRef);
      ɵɵviewQuery(_c64, 5, ViewContainerRef);
      ɵɵviewQuery(_c65, 5, ViewContainerRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.datagridTable = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.scrollableColumns = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._projectedDisplayColumns = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._projectedCalculationColumns = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._displayedRows = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._calculationRows = _t.first);
    }
  },
  hostVars: 4,
  hostBindings: function ClrDatagrid_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("datagrid-host", true)("datagrid-detail-open", ctx.detailService.isOpen);
    }
  },
  inputs: {
    clrDgSingleSelectionAriaLabel: "clrDgSingleSelectionAriaLabel",
    clrDgSingleActionableAriaLabel: "clrDgSingleActionableAriaLabel",
    clrDetailExpandableAriaLabel: "clrDetailExpandableAriaLabel",
    clrDgDisablePageFocus: "clrDgDisablePageFocus",
    loading: [InputFlags.None, "clrDgLoading", "loading"],
    selected: [InputFlags.None, "clrDgSelected", "selected"],
    singleSelected: [InputFlags.None, "clrDgSingleSelected", "singleSelected"],
    clrDgPreserveSelection: "clrDgPreserveSelection",
    rowSelectionMode: [InputFlags.None, "clrDgRowSelection", "rowSelectionMode"],
    trackBy: [InputFlags.None, "clrDgItemsTrackBy", "trackBy"]
  },
  outputs: {
    selectedChanged: "clrDgSelectedChange",
    singleSelectedChanged: "clrDgSingleSelectedChange",
    refresh: "clrDgRefresh"
  },
  features: [ɵɵProvidersFeature([Selection, Sort, FiltersProvider, Page, Items, DatagridRenderOrganizer, RowActionService, ExpandableRowsCount, StateDebouncer, DetailService, StateProvider, TableSizeService, ColumnsService, DisplayModeService, KeyNavigationGridController])],
  ngContentSelectors: _c67,
  decls: 32,
  vars: 7,
  consts: [["datagrid", ""], ["datagridTable", ""], ["projectedDisplayColumns", ""], ["displayedRows", ""], ["projectedCalculationColumns", ""], ["calculationRows", ""], [1, "datagrid-outer-wrapper"], [1, "datagrid-inner-wrapper"], [1, "datagrid"], [1, "datagrid-table-wrapper"], ["role", "grid", "tabindex", "-1", 1, "datagrid-table"], ["role", "rowgroup", 1, "datagrid-header"], ["role", "row", 1, "datagrid-row"], [1, "datagrid-row-master", "datagrid-row-flex"], [1, "datagrid-row-sticky"], ["role", "columnheader", "class", "datagrid-column datagrid-select datagrid-fixed-column", 3, "keydown.space", 4, "ngIf"], ["role", "columnheader", "class", "datagrid-column datagrid-select datagrid-fixed-column", 4, "ngIf"], ["role", "columnheader", "class", "datagrid-column datagrid-row-actions datagrid-fixed-column", 4, "ngIf"], ["role", "columnheader", "class", "datagrid-column datagrid-expandable-caret datagrid-fixed-column", 4, "ngIf"], [1, "datagrid-row-scrollable"], [4, "ngIf"], ["class", "datagrid-spinner", 4, "ngIf"], [1, "datagrid-calculation-table"], [1, "datagrid-calculation-header"], ["role", "columnheader", 1, "datagrid-column", "datagrid-select", "datagrid-fixed-column", 3, "keydown.space"], [1, "clr-checkbox-wrapper"], ["type", "checkbox", "tabindex", "-1", 3, "ngModelChange", "id", "ngModel"], [1, "clr-control-label", "clr-col-null", 3, "for"], [1, "clr-sr-only"], [1, "datagrid-column-separator"], ["role", "columnheader", 1, "datagrid-column", "datagrid-select", "datagrid-fixed-column"], ["role", "columnheader", 1, "datagrid-column", "datagrid-row-actions", "datagrid-fixed-column"], ["role", "columnheader", 1, "datagrid-column", "datagrid-expandable-caret", "datagrid-fixed-column"], [1, "datagrid-spinner"], ["clrMedium", ""]],
  template: function ClrDatagrid_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c66);
      ɵɵprojection(0);
      ɵɵelementStart(1, "div", 6)(2, "div", 7)(3, "div", 8, 0)(5, "div", 9)(6, "div", 10, 1)(8, "div", 11)(9, "div", 12)(10, "div", 13)(11, "div", 14);
      ɵɵtemplate(12, ClrDatagrid_div_12_Template, 7, 5, "div", 15)(13, ClrDatagrid_div_13_Template, 2, 1, "div", 16)(14, ClrDatagrid_div_14_Template, 2, 1, "div", 17)(15, ClrDatagrid_div_15_Template, 2, 1, "div", 18);
      ɵɵelementEnd();
      ɵɵelementStart(16, "div", 19);
      ɵɵelementContainer(17, null, 2);
      ɵɵelementEnd()()()();
      ɵɵelementContainer(19, null, 3);
      ɵɵprojection(21, 1);
      ɵɵtemplate(22, ClrDatagrid_clr_dg_placeholder_22_Template, 1, 0, "clr-dg-placeholder", 20);
      ɵɵelementEnd()()();
      ɵɵprojection(23, 2);
      ɵɵtemplate(24, ClrDatagrid_div_24_Template, 3, 0, "div", 21);
      ɵɵelementEnd();
      ɵɵprojection(25, 3);
      ɵɵelementEnd();
      ɵɵelementStart(26, "div", 22)(27, "div", 23);
      ɵɵelementContainer(28, null, 4);
      ɵɵelementEnd();
      ɵɵelementContainer(30, null, 5);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance(3);
      ɵɵattribute("aria-hidden", ctx.detailService.isOpen ? true : null);
      ɵɵadvance(9);
      ɵɵproperty("ngIf", ctx.selection.selectionType === ctx.SELECTION_TYPE.Multi);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.selection.selectionType === ctx.SELECTION_TYPE.Single);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.rowActionService.hasActionableRow);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.expandableRows.hasExpandableRow || ctx.detailService.enabled);
      ɵɵadvance(7);
      ɵɵproperty("ngIf", !ctx.placeholder);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.loading);
    }
  },
  dependencies: [NgIf, ClrLabel, CheckboxControlValueAccessor, NgControlStatus, NgModel, ClrSpinner, ClrDatagridPlaceholder, ClrDatagridSelectionCellDirective],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagrid, [{
    type: Component,
    args: [{
      selector: "clr-datagrid",
      providers: [Selection, Sort, FiltersProvider, Page, Items, DatagridRenderOrganizer, RowActionService, ExpandableRowsCount, StateDebouncer, DetailService, StateProvider, TableSizeService, ColumnsService, DisplayModeService, KeyNavigationGridController],
      host: {
        "[class.datagrid-host]": "true",
        "[class.datagrid-detail-open]": "detailService.isOpen"
      },
      template: '<!--\n  ~ Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<ng-content select="clr-dg-action-bar"></ng-content>\n<div class="datagrid-outer-wrapper">\n  <div class="datagrid-inner-wrapper">\n    <div class="datagrid" #datagrid [attr.aria-hidden]="detailService.isOpen ? true : null">\n      <div class="datagrid-table-wrapper">\n        <div role="grid" class="datagrid-table" tabindex="-1" #datagridTable>\n          <div role="rowgroup" class="datagrid-header">\n            <div role="row" class="datagrid-row">\n              <div class="datagrid-row-master datagrid-row-flex">\n                <div class="datagrid-row-sticky">\n                  <!--header for datagrid where you can select multiple rows -->\n                  <div\n                    role="columnheader"\n                    class="datagrid-column datagrid-select datagrid-fixed-column"\n                    *ngIf="selection.selectionType === SELECTION_TYPE.Multi"\n                    (keydown.space)="allSelected = !allSelected; $event.preventDefault()"\n                  >\n                    <div class="clr-checkbox-wrapper">\n                      <!-- We need to move focus and space-key handling to the parent because of keyboard arrow key navigation,\n                           which is not able to transfer focus directly on the input when focused with the tab key -->\n                      <input\n                        type="checkbox"\n                        [id]="selectAllId"\n                        [(ngModel)]="allSelected"\n                        [attr.aria-label]="commonStrings.keys.selectAll"\n                        tabindex="-1"\n                      />\n                      <!-- Usage of class clr-col-null here prevents clr-col-* classes from being added when a datagrid is wrapped inside clrForm -->\n                      <label [for]="selectAllId" class="clr-control-label clr-col-null">\n                        <span class="clr-sr-only">{{commonStrings.keys.selectAll}}</span>\n                      </label>\n                    </div>\n\n                    <div class="datagrid-column-separator"></div>\n                  </div>\n                  <!-- header for datagrid where you can select one row only -->\n                  <div\n                    role="columnheader"\n                    class="datagrid-column datagrid-select datagrid-fixed-column"\n                    *ngIf="selection.selectionType === SELECTION_TYPE.Single"\n                    [attr.aria-label]="clrDgSingleSelectionAriaLabel"\n                  >\n                    <div class="datagrid-column-separator"></div>\n                  </div>\n                  <!-- header for single row action; only displayType if we have at least one actionable row in datagrid -->\n                  <div\n                    role="columnheader"\n                    class="datagrid-column datagrid-row-actions datagrid-fixed-column"\n                    *ngIf="rowActionService.hasActionableRow"\n                    [attr.aria-label]="clrDgSingleActionableAriaLabel"\n                  >\n                    <div class="datagrid-column-separator"></div>\n                  </div>\n                  <!-- header for carets; only displayType if we have at least one expandable row in datagrid -->\n                  <div\n                    role="columnheader"\n                    class="datagrid-column datagrid-expandable-caret datagrid-fixed-column"\n                    *ngIf="expandableRows.hasExpandableRow || detailService.enabled"\n                    [attr.aria-label]="clrDetailExpandableAriaLabel"\n                  >\n                    <div class="datagrid-column-separator"></div>\n                  </div>\n                </div>\n                <div class="datagrid-row-scrollable">\n                  <ng-container #projectedDisplayColumns></ng-container>\n                </div>\n              </div>\n            </div>\n          </div>\n          <ng-container #displayedRows></ng-container>\n          <!-- Custom placeholder overrides the default empty one -->\n          <ng-content select="clr-dg-placeholder"></ng-content>\n          <clr-dg-placeholder *ngIf="!placeholder"></clr-dg-placeholder>\n        </div>\n      </div>\n    </div>\n    <ng-content select="clr-dg-footer"></ng-content>\n    <div class="datagrid-spinner" *ngIf="loading">\n      <clr-spinner clrMedium>Loading</clr-spinner>\n    </div>\n  </div>\n  <ng-content select="[clrIfDetail],clr-dg-detail"></ng-content>\n</div>\n\n<div class="datagrid-calculation-table">\n  <div class="datagrid-calculation-header">\n    <ng-container #projectedCalculationColumns></ng-container>\n  </div>\n  <ng-container #calculationRows></ng-container>\n</div>\n'
    }]
  }], function() {
    return [{
      type: DatagridRenderOrganizer
    }, {
      type: Items
    }, {
      type: ExpandableRowsCount
    }, {
      type: Selection
    }, {
      type: RowActionService
    }, {
      type: StateProvider
    }, {
      type: DisplayModeService
    }, {
      type: Renderer2
    }, {
      type: DetailService
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }, {
      type: ElementRef
    }, {
      type: Page
    }, {
      type: ClrCommonStringsService
    }, {
      type: ColumnsService
    }, {
      type: KeyNavigationGridController
    }, {
      type: NgZone
    }];
  }, {
    clrDgSingleSelectionAriaLabel: [{
      type: Input
    }],
    clrDgSingleActionableAriaLabel: [{
      type: Input
    }],
    clrDetailExpandableAriaLabel: [{
      type: Input
    }],
    clrDgDisablePageFocus: [{
      type: Input
    }],
    selectedChanged: [{
      type: Output,
      args: ["clrDgSelectedChange"]
    }],
    singleSelectedChanged: [{
      type: Output,
      args: ["clrDgSingleSelectedChange"]
    }],
    refresh: [{
      type: Output,
      args: ["clrDgRefresh"]
    }],
    iterator: [{
      type: ContentChild,
      args: [ClrDatagridItems]
    }],
    placeholder: [{
      type: ContentChild,
      args: [ClrDatagridPlaceholder]
    }],
    columns: [{
      type: ContentChildren,
      args: [ClrDatagridColumn]
    }],
    rows: [{
      type: ContentChildren,
      args: [ClrDatagridRow]
    }],
    datagridTable: [{
      type: ViewChild,
      args: ["datagridTable", {
        read: ElementRef
      }]
    }],
    scrollableColumns: [{
      type: ViewChild,
      args: ["scrollableColumns", {
        read: ViewContainerRef
      }]
    }],
    _projectedDisplayColumns: [{
      type: ViewChild,
      args: ["projectedDisplayColumns", {
        read: ViewContainerRef
      }]
    }],
    _projectedCalculationColumns: [{
      type: ViewChild,
      args: ["projectedCalculationColumns", {
        read: ViewContainerRef
      }]
    }],
    _displayedRows: [{
      type: ViewChild,
      args: ["displayedRows", {
        read: ViewContainerRef
      }]
    }],
    _calculationRows: [{
      type: ViewChild,
      args: ["calculationRows", {
        read: ViewContainerRef
      }]
    }],
    loading: [{
      type: Input,
      args: ["clrDgLoading"]
    }],
    selected: [{
      type: Input,
      args: ["clrDgSelected"]
    }],
    singleSelected: [{
      type: Input,
      args: ["clrDgSingleSelected"]
    }],
    clrDgPreserveSelection: [{
      type: Input
    }],
    rowSelectionMode: [{
      type: Input,
      args: ["clrDgRowSelection"]
    }],
    trackBy: [{
      type: Input,
      args: ["clrDgItemsTrackBy"]
    }]
  });
})();
var ClrDatagridActionBar = class {
};
ClrDatagridActionBar.ɵfac = function ClrDatagridActionBar_Factory(t161) {
  return new (t161 || ClrDatagridActionBar)();
};
ClrDatagridActionBar.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridActionBar,
  selectors: [["clr-dg-action-bar"]],
  hostVars: 2,
  hostBindings: function ClrDatagridActionBar_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("datagrid-action-bar", true);
    }
  },
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrDatagridActionBar_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridActionBar, [{
    type: Component,
    args: [{
      selector: "clr-dg-action-bar",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.datagrid-action-bar]": "true"
      }
    }]
  }], null, null);
})();
var clrDgActionId = 0;
var ClrDatagridActionOverflow = class {
  constructor(rowActionService, commonStrings, platformId, zone, smartToggleService) {
    this.rowActionService = rowActionService;
    this.commonStrings = commonStrings;
    this.platformId = platformId;
    this.zone = zone;
    this.smartToggleService = smartToggleService;
    this.openChange = new EventEmitter(false);
    this.popoverId = uniqueIdFactory();
    this.smartPosition = {
      axis: ClrAxis.HORIZONTAL,
      side: ClrSide.AFTER,
      anchor: ClrAlignment.CENTER,
      content: ClrAlignment.CENTER
    };
    this._open = false;
    this.subscriptions = [];
    this.rowActionService.register();
    this.subscriptions.push(this.smartToggleService.openChange.subscribe((openState) => {
      this.open = openState;
    }), this.smartToggleService.popoverVisible.subscribe((visible) => {
      if (visible) {
        this.initializeFocus();
      }
    }));
    this.popoverId = "clr-action-menu" + clrDgActionId++;
  }
  get open() {
    return this._open;
  }
  set open(open) {
    const openState = !!open;
    if (!!openState !== this.open) {
      this.smartToggleService.open = openState;
      this.openChange.emit(openState);
      this._open = openState;
    }
  }
  ngOnDestroy() {
    this.rowActionService.unregister();
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  closeOverflowContent(event) {
    this.smartToggleService.toggleWithEvent(event);
  }
  initializeFocus() {
    if (isPlatformBrowser(this.platformId)) {
      const buttons = Array.from(document.querySelectorAll("button.action-item"));
      if (buttons.length) {
        this.keyFocus.current = 0;
        this.keyFocus.focusableItems = buttons;
        this.keyFocus.focusCurrent();
      }
    }
  }
};
ClrDatagridActionOverflow.ɵfac = function ClrDatagridActionOverflow_Factory(t161) {
  return new (t161 || ClrDatagridActionOverflow)(ɵɵdirectiveInject(RowActionService), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(PLATFORM_ID), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(ClrPopoverToggleService));
};
ClrDatagridActionOverflow.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridActionOverflow,
  selectors: [["clr-dg-action-overflow"]],
  viewQuery: function ClrDatagridActionOverflow_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(ClrKeyFocus, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.keyFocus = _t.first);
    }
  },
  inputs: {
    buttonLabel: [InputFlags.None, "clrDgActionOverflowButtonLabel", "buttonLabel"],
    open: [InputFlags.None, "clrDgActionOverflowOpen", "open"]
  },
  outputs: {
    openChange: "clrDgActionOverflowOpenChange"
  },
  features: [ɵɵHostDirectivesFeature([ClrPopoverHostDirective])],
  ngContentSelectors: _c02,
  decls: 4,
  vars: 8,
  consts: [["anchor", ""], ["type", "button", "role", "button", "aria-haspopup", "true", "clrPopoverAnchor", "", "clrPopoverOpenCloseButton", "", 1, "datagrid-action-toggle"], ["shape", "ellipsis-vertical"], ["class", "datagrid-action-overflow", "clrKeyFocus", "", "cdkTrapFocus", "", 3, "id", "click", 4, "clrPopoverContent", "clrPopoverContentAt", "clrPopoverContentOutsideClickToClose", "clrPopoverContentScrollToClose"], ["clrKeyFocus", "", "cdkTrapFocus", "", 1, "datagrid-action-overflow", 3, "click", "id"]],
  template: function ClrDatagridActionOverflow_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "button", 1, 0);
      ɵɵelement(2, "cds-icon", 2);
      ɵɵelementEnd();
      ɵɵtemplate(3, ClrDatagridActionOverflow_div_3_Template, 2, 3, "div", 3);
    }
    if (rf & 2) {
      ɵɵattribute("aria-controls", ctx.popoverId)("aria-expanded", ctx.open)("aria-label", ctx.buttonLabel || ctx.commonStrings.keys.rowActions);
      ɵɵadvance(2);
      ɵɵattribute("title", ctx.buttonLabel || ctx.commonStrings.keys.rowActions);
      ɵɵadvance();
      ɵɵproperty("clrPopoverContent", ctx.open)("clrPopoverContentAt", ctx.smartPosition)("clrPopoverContentOutsideClickToClose", true)("clrPopoverContentScrollToClose", true);
    }
  },
  dependencies: [CdkTrapFocusModule_CdkTrapFocus, CdsIconCustomTag, ClrPopoverAnchor, ClrPopoverOpenCloseButton, ClrPopoverContent, ClrKeyFocus],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridActionOverflow, [{
    type: Component,
    args: [{
      selector: "clr-dg-action-overflow",
      hostDirectives: [ClrPopoverHostDirective],
      template: `
    <button
      class="datagrid-action-toggle"
      type="button"
      role="button"
      aria-haspopup="true"
      #anchor
      [attr.aria-controls]="popoverId"
      [attr.aria-expanded]="open"
      [attr.aria-label]="buttonLabel || commonStrings.keys.rowActions"
      clrPopoverAnchor
      clrPopoverOpenCloseButton
    >
      <cds-icon shape="ellipsis-vertical" [attr.title]="buttonLabel || commonStrings.keys.rowActions"></cds-icon>
    </button>

    <div
      class="datagrid-action-overflow"
      [id]="popoverId"
      [attr.aria-hidden]="!open"
      [attr.id]="popoverId"
      clrKeyFocus
      cdkTrapFocus
      (click)="closeOverflowContent($event)"
      *clrPopoverContent="open; at: smartPosition; outsideClickToClose: true; scrollToClose: true"
    >
      <ng-content></ng-content>
    </div>
  `
    }]
  }], function() {
    return [{
      type: RowActionService
    }, {
      type: ClrCommonStringsService
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }, {
      type: NgZone
    }, {
      type: ClrPopoverToggleService
    }];
  }, {
    buttonLabel: [{
      type: Input,
      args: ["clrDgActionOverflowButtonLabel"]
    }],
    openChange: [{
      type: Output,
      args: ["clrDgActionOverflowOpenChange"]
    }],
    keyFocus: [{
      type: ViewChild,
      args: [ClrKeyFocus]
    }],
    open: [{
      type: Input,
      args: ["clrDgActionOverflowOpen"]
    }]
  });
})();
var columnToggleTrackByFn = (index) => index;
var ClrDatagridColumnToggleButton = class {
  constructor(commonStrings, columnsService) {
    this.commonStrings = commonStrings;
    this.columnsService = columnsService;
    this.allSelected = new EventEmitter();
  }
  get clrAllSelected() {
    return this.allSelected.asObservable();
  }
  get allHideablesVisible() {
    return this.hideableColumns().filter((column) => column.value.hidden).length === 0;
  }
  selectAll() {
    this.hideableColumns().forEach((hideableColumn) => this.columnsService.emitStateChange(hideableColumn, {
      hidden: false,
      changes: [DatagridColumnChanges.HIDDEN]
    }));
    this.allSelected.next(true);
  }
  hideableColumns() {
    return this.columnsService.columns.filter((column) => column.value.hideable);
  }
};
ClrDatagridColumnToggleButton.ɵfac = function ClrDatagridColumnToggleButton_Factory(t161) {
  return new (t161 || ClrDatagridColumnToggleButton)(ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(ColumnsService));
};
ClrDatagridColumnToggleButton.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridColumnToggleButton,
  selectors: [["clr-dg-column-toggle-button"]],
  outputs: {
    clrAllSelected: "clrAllSelected"
  },
  decls: 2,
  vars: 2,
  consts: [["type", "button", 1, "btn", "btn-sm", "btn-link", "switch-button", 3, "click", "disabled"]],
  template: function ClrDatagridColumnToggleButton_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "button", 0);
      ɵɵlistener("click", function ClrDatagridColumnToggleButton_Template_button_click_0_listener() {
        return ctx.selectAll();
      });
      ɵɵtext(1);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵproperty("disabled", ctx.allHideablesVisible);
      ɵɵadvance();
      ɵɵtextInterpolate1(" ", ctx.commonStrings.keys.selectAll, " ");
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridColumnToggleButton, [{
    type: Component,
    args: [{
      selector: "clr-dg-column-toggle-button",
      template: `
    <button
      class="btn btn-sm btn-link switch-button"
      (click)="selectAll()"
      [disabled]="allHideablesVisible"
      type="button"
    >
      {{ commonStrings.keys.selectAll }}
    </button>
  `
    }]
  }], function() {
    return [{
      type: ClrCommonStringsService
    }, {
      type: ColumnsService
    }];
  }, {
    clrAllSelected: [{
      type: Output,
      args: ["clrAllSelected"]
    }]
  });
})();
var ClrDatagridColumnToggle = class {
  constructor(commonStrings, columnsService, popoverToggleService) {
    this.commonStrings = commonStrings;
    this.columnsService = columnsService;
    this.popoverId = uniqueIdFactory();
    this.smartPosition = {
      axis: ClrAxis.VERTICAL,
      side: ClrSide.BEFORE,
      anchor: ClrAlignment.START,
      content: ClrAlignment.START
    };
    this.trackByFn = columnToggleTrackByFn;
    this.subscription = popoverToggleService.openChange.subscribe((change) => this.openState = change);
  }
  get allColumnsVisible() {
    return this._allColumnsVisible;
  }
  set allColumnsVisible(value) {
    this._allColumnsVisible = value;
  }
  get hideableColumnStates() {
    const hideables = this.columnsService.columns.filter((column) => column.value.hideable);
    return hideables.map((column) => column.value);
  }
  get hasOnlyOneVisibleColumn() {
    const nbNonHideableColumns = this.columnsService.columns.length - this.hideableColumnStates.length;
    return nbNonHideableColumns === 0 && this.hideableColumnStates.filter((columnState) => !columnState.hidden).length === 1;
  }
  ngOnDestroy() {
    this.subscription.unsubscribe();
  }
  toggleColumnState(columnState, event) {
    const columnToToggle = this.columnsService.columns.filter((column) => column.value === columnState)[0];
    this.columnsService.emitStateChange(columnToToggle, {
      hidden: event,
      changes: [DatagridColumnChanges.HIDDEN]
    });
  }
  toggleSwitchPanel() {
    this.openState = !this.openState;
  }
  allColumnsSelected() {
    this.allSelectedElement.nativeElement.focus();
  }
};
ClrDatagridColumnToggle.ɵfac = function ClrDatagridColumnToggle_Factory(t161) {
  return new (t161 || ClrDatagridColumnToggle)(ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(ColumnsService), ɵɵdirectiveInject(ClrPopoverToggleService));
};
ClrDatagridColumnToggle.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridColumnToggle,
  selectors: [["clr-dg-column-toggle"]],
  viewQuery: function ClrDatagridColumnToggle_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c68, 5, ElementRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.allSelectedElement = _t.first);
    }
  },
  hostVars: 4,
  hostBindings: function ClrDatagridColumnToggle_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("column-switch-wrapper", true)("active", ctx.openState);
    }
  },
  features: [ɵɵHostDirectivesFeature([ClrPopoverHostDirective])],
  decls: 3,
  vars: 8,
  consts: [["allSelected", ""], ["role", "button", "type", "button", "clrPopoverAnchor", "", "clrPopoverOpenCloseButton", "", 1, "btn", "btn-sm", "column-toggle--action"], ["class", "column-switch", "role", "dialog", "cdkTrapFocus", "", 3, "id", 4, "clrPopoverContent", "clrPopoverContentAt", "clrPopoverContentOutsideClickToClose", "clrPopoverContentScrollToClose"], ["role", "dialog", "cdkTrapFocus", "", 1, "column-switch", 3, "id"], [1, "switch-header"], ["tabindex", "-1", 1, "clr-sr-only"], ["clrPopoverCloseButton", "", "type", "button", 1, "btn", "btn-sm", "btn-link", "toggle-switch-close-button"], ["shape", "window-close", "aria-hidden", "true"], [1, "clr-sr-only"], [1, "switch-content", "list-unstyled"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "switch-footer"], [3, "clrAllSelected"], ["clrCheckbox", "", "type", "checkbox", 3, "ngModelChange", "disabled", "ngModel"], [3, "ngTemplateOutlet"]],
  template: function ClrDatagridColumnToggle_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "button", 1);
      ɵɵtext(1);
      ɵɵelementEnd();
      ɵɵtemplate(2, ClrDatagridColumnToggle_div_2_Template, 15, 9, "div", 2);
    }
    if (rf & 2) {
      ɵɵattribute("aria-controls", ctx.popoverId)("aria-owns", ctx.popoverId)("aria-expanded", ctx.openState);
      ɵɵadvance();
      ɵɵtextInterpolate1(" ", ctx.commonStrings.keys.pickColumns, " ");
      ɵɵadvance();
      ɵɵproperty("clrPopoverContent", ctx.openState)("clrPopoverContentAt", ctx.smartPosition)("clrPopoverContentOutsideClickToClose", true)("clrPopoverContentScrollToClose", true);
    }
  },
  dependencies: [NgForOf, NgTemplateOutlet, CdkTrapFocusModule_CdkTrapFocus, CdsIconCustomTag, ClrLabel, ClrCheckbox, ClrCheckboxWrapper, CheckboxControlValueAccessor, NgControlStatus, NgModel, ClrPopoverAnchor, ClrPopoverCloseButton, ClrPopoverOpenCloseButton, ClrPopoverContent, ClrDatagridColumnToggleButton],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridColumnToggle, [{
    type: Component,
    args: [{
      selector: "clr-dg-column-toggle",
      template: `
    <button
      role="button"
      type="button"
      class="btn btn-sm column-toggle--action"
      clrPopoverAnchor
      clrPopoverOpenCloseButton
      [attr.aria-controls]="popoverId"
      [attr.aria-owns]="popoverId"
      [attr.aria-expanded]="openState"
    >
      {{ commonStrings.keys.pickColumns }}
    </button>
    <div
      class="column-switch"
      role="dialog"
      [attr.aria-label]="commonStrings.keys.showColumnsMenuDescription"
      [id]="popoverId"
      cdkTrapFocus
      *clrPopoverContent="openState; at: smartPosition; outsideClickToClose: true; scrollToClose: true"
    >
      <div class="switch-header">
        <div class="clr-sr-only" tabindex="-1" #allSelected>{{ commonStrings.keys.allColumnsSelected }}</div>
        <h2>{{ commonStrings.keys.showColumns }}</h2>
        <button
          class="btn btn-sm btn-link toggle-switch-close-button"
          clrPopoverCloseButton
          type="button"
          [attr.aria-label]="commonStrings.keys.close"
        >
          <cds-icon shape="window-close" aria-hidden="true" [attr.title]="commonStrings.keys.close"></cds-icon>
          <span class="clr-sr-only">{{ commonStrings.keys.close }}</span>
        </button>
      </div>
      <ul class="switch-content list-unstyled">
        <li *ngFor="let columnState of hideableColumnStates; trackBy: trackByFn">
          <clr-checkbox-wrapper>
            <input
              clrCheckbox
              type="checkbox"
              [disabled]="hasOnlyOneVisibleColumn && !columnState.hidden"
              [ngModel]="!columnState.hidden"
              (ngModelChange)="toggleColumnState(columnState, !$event)"
            />
            <label>
              <ng-template [ngTemplateOutlet]="columnState.titleTemplateRef"></ng-template>
            </label>
          </clr-checkbox-wrapper>
        </li>
      </ul>
      <div class="switch-footer">
        <clr-dg-column-toggle-button (clrAllSelected)="allColumnsSelected()"></clr-dg-column-toggle-button>
      </div>
    </div>
  `,
      host: {
        "[class.column-switch-wrapper]": "true",
        "[class.active]": "openState"
      },
      hostDirectives: [ClrPopoverHostDirective]
    }]
  }], function() {
    return [{
      type: ClrCommonStringsService
    }, {
      type: ColumnsService
    }, {
      type: ClrPopoverToggleService
    }];
  }, {
    allSelectedElement: [{
      type: ViewChild,
      args: ["allSelected", {
        read: ElementRef
      }]
    }]
  });
})();
var ClrDatagridDetailHeader = class {
  constructor(detailService, commonStrings) {
    this.detailService = detailService;
    this.commonStrings = commonStrings;
  }
  get titleId() {
    return `${this.detailService.id}-title`;
  }
};
ClrDatagridDetailHeader.ɵfac = function ClrDatagridDetailHeader_Factory(t161) {
  return new (t161 || ClrDatagridDetailHeader)(ɵɵdirectiveInject(DetailService), ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrDatagridDetailHeader.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridDetailHeader,
  selectors: [["clr-dg-detail-header"]],
  hostVars: 2,
  hostBindings: function ClrDatagridDetailHeader_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("datagrid-detail-header", true);
    }
  },
  ngContentSelectors: _c02,
  decls: 5,
  vars: 2,
  consts: [["cdkFocusInitial", "", "tabindex", "-1", 1, "datagrid-detail-header-title", 3, "id"], [1, "datagrid-detail-pane-close"], ["type", "button", 1, "btn", "btn-link", 3, "click"], ["shape", "times"]],
  template: function ClrDatagridDetailHeader_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "div", 0);
      ɵɵprojection(1);
      ɵɵelementEnd();
      ɵɵelementStart(2, "div", 1)(3, "button", 2);
      ɵɵlistener("click", function ClrDatagridDetailHeader_Template_button_click_3_listener() {
        return ctx.detailService.close();
      });
      ɵɵelement(4, "cds-icon", 3);
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵproperty("id", ctx.titleId);
      ɵɵadvance(3);
      ɵɵattribute("aria-label", ctx.commonStrings.keys.close);
    }
  },
  dependencies: [CdsIconCustomTag],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridDetailHeader, [{
    type: Component,
    args: [{
      selector: "clr-dg-detail-header",
      host: {
        "[class.datagrid-detail-header]": "true"
      },
      template: `
    <div class="datagrid-detail-header-title" cdkFocusInitial tabindex="-1" [id]="titleId">
      <ng-content></ng-content>
    </div>
    <div class="datagrid-detail-pane-close">
      <button
        type="button"
        class="btn btn-link"
        (click)="detailService.close()"
        [attr.aria-label]="commonStrings.keys.close"
      >
        <cds-icon shape="times"></cds-icon>
      </button>
    </div>
  `
    }]
  }], function() {
    return [{
      type: DetailService
    }, {
      type: ClrCommonStringsService
    }];
  }, null);
})();
var ClrDatagridDetail = class {
  constructor(detailService, commonStrings) {
    this.detailService = detailService;
    this.commonStrings = commonStrings;
  }
  close() {
    this.detailService.close();
  }
};
ClrDatagridDetail.ɵfac = function ClrDatagridDetail_Factory(t161) {
  return new (t161 || ClrDatagridDetail)(ɵɵdirectiveInject(DetailService), ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrDatagridDetail.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridDetail,
  selectors: [["clr-dg-detail"]],
  contentQueries: function ClrDatagridDetail_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrDatagridDetailHeader, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.header = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function ClrDatagridDetail_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("datagrid-detail-pane", true);
    }
  },
  ngContentSelectors: _c02,
  decls: 1,
  vars: 1,
  consts: [["cdkTrapFocus", "", "class", "datagrid-detail-pane-content", "role", "dialog", "aria-modal", "true", 3, "cdkTrapFocusAutoCapture", "id", 4, "ngIf"], ["cdkTrapFocus", "", "role", "dialog", "aria-modal", "true", 1, "datagrid-detail-pane-content", 3, "cdkTrapFocusAutoCapture", "id"], [1, "clr-sr-only"]],
  template: function ClrDatagridDetail_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, ClrDatagridDetail_div_0_Template, 6, 5, "div", 0);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.detailService.isOpen);
    }
  },
  dependencies: [NgIf, CdkTrapFocusModule_CdkTrapFocus],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridDetail, [{
    type: Component,
    args: [{
      selector: "clr-dg-detail",
      host: {
        "[class.datagrid-detail-pane]": "true"
      },
      // We put the *ngIf on the cdkTrapFocus so it doesn't always exist on the page
      // have to test for presence of header for aria-describedby because it was causing unit tests to crash
      template: `
    <div
      cdkTrapFocus
      [cdkTrapFocusAutoCapture]="true"
      class="datagrid-detail-pane-content"
      *ngIf="detailService.isOpen"
      role="dialog"
      [id]="detailService.id"
      aria-modal="true"
      [attr.aria-describedby]="header ? header.titleId : ''"
    >
      <div class="clr-sr-only">{{ commonStrings.keys.detailPaneStart }}</div>
      <ng-content></ng-content>
      <div class="clr-sr-only">{{ commonStrings.keys.detailPaneEnd }}</div>
    </div>
  `
    }]
  }], function() {
    return [{
      type: DetailService
    }, {
      type: ClrCommonStringsService
    }];
  }, {
    header: [{
      type: ContentChild,
      args: [ClrDatagridDetailHeader]
    }]
  });
})();
var ClrDatagridDetailBody = class {
};
ClrDatagridDetailBody.ɵfac = function ClrDatagridDetailBody_Factory(t161) {
  return new (t161 || ClrDatagridDetailBody)();
};
ClrDatagridDetailBody.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridDetailBody,
  selectors: [["clr-dg-detail-body"]],
  hostVars: 2,
  hostBindings: function ClrDatagridDetailBody_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("datagrid-detail-body", true);
    }
  },
  ngContentSelectors: _c02,
  decls: 2,
  vars: 0,
  consts: [[1, "clr-dg-detail-body-wrapper"]],
  template: function ClrDatagridDetailBody_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "div", 0);
      ɵɵprojection(1);
      ɵɵelementEnd();
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridDetailBody, [{
    type: Component,
    args: [{
      selector: "clr-dg-detail-body",
      template: `
    <div class="clr-dg-detail-body-wrapper">
      <ng-content></ng-content>
    </div>
  `,
      host: {
        "[class.datagrid-detail-body]": "true"
      }
    }]
  }], null, null);
})();
var DatagridDetailRegisterer = class {
  constructor(expandableRowsCount) {
    this.expandableRowsCount = expandableRowsCount;
    if (this.expandableRowsCount) {
      this.expandableRowsCount.register();
    }
  }
  ngOnDestroy() {
    if (this.expandableRowsCount) {
      this.expandableRowsCount.unregister();
    }
  }
};
DatagridDetailRegisterer.ɵfac = function DatagridDetailRegisterer_Factory(t161) {
  return new (t161 || DatagridDetailRegisterer)(ɵɵdirectiveInject(ExpandableRowsCount, 8));
};
DatagridDetailRegisterer.ɵdir = ɵɵdefineDirective({
  type: DatagridDetailRegisterer,
  selectors: [["", "clrIfExpanded", ""]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatagridDetailRegisterer, [{
    type: Directive,
    args: [{
      selector: "[clrIfExpanded]"
    }]
  }], function() {
    return [{
      type: ExpandableRowsCount,
      decorators: [{
        type: Optional
      }]
    }];
  }, null);
})();
var ClrDatagridFooter = class {
  constructor(selection, detailService, columnsService, commonStrings) {
    this.selection = selection;
    this.detailService = detailService;
    this.columnsService = columnsService;
    this.commonStrings = commonStrings;
    this.SELECTION_TYPE = SelectionType;
  }
  get hasHideableColumns() {
    return this.columnsService.hasHideableColumns;
  }
};
ClrDatagridFooter.ɵfac = function ClrDatagridFooter_Factory(t161) {
  return new (t161 || ClrDatagridFooter)(ɵɵdirectiveInject(Selection), ɵɵdirectiveInject(DetailService), ɵɵdirectiveInject(ColumnsService), ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrDatagridFooter.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridFooter,
  selectors: [["clr-dg-footer"]],
  hostVars: 2,
  hostBindings: function ClrDatagridFooter_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("datagrid-footer", true);
    }
  },
  ngContentSelectors: _c70,
  decls: 3,
  vars: 2,
  consts: [[4, "ngIf"], [1, "clr-form-control-disabled"], [1, "datagrid-footer-select"], ["clrCheckbox", "", "type", "checkbox", "checked", "checked", "disabled", ""], [1, "clr-sr-only"], [1, "datagrid-footer-description"]],
  template: function ClrDatagridFooter_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c69);
      ɵɵtemplate(0, ClrDatagridFooter_ng_container_0_Template, 8, 2, "ng-container", 0)(1, ClrDatagridFooter_ng_container_1_Template, 4, 1, "ng-container", 0);
      ɵɵprojection(2);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.selection.selectionType === ctx.SELECTION_TYPE.Multi && ctx.selection.current.length > 0);
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.detailService.isOpen);
    }
  },
  dependencies: [NgIf, ClrLabel, ClrCheckbox, ClrCheckboxWrapper, ClrDatagridColumnToggle],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridFooter, [{
    type: Component,
    args: [{
      selector: "clr-dg-footer",
      template: `
    <ng-container *ngIf="selection.selectionType === SELECTION_TYPE.Multi && selection.current.length > 0">
      <div class="clr-form-control-disabled">
        <clr-checkbox-wrapper class="datagrid-footer-select">
          <input clrCheckbox type="checkbox" checked="checked" disabled />
          <label>{{ selection.current.length }}</label>
          <span class="clr-sr-only">{{ commonStrings.keys.selectedRows }}</span>
        </clr-checkbox-wrapper>
      </div>
    </ng-container>
    <ng-container *ngIf="!detailService.isOpen">
      <clr-dg-column-toggle *ngIf="hasHideableColumns"></clr-dg-column-toggle>
      <div class="datagrid-footer-description">
        <ng-content></ng-content>
      </div>
    </ng-container>
    <ng-content select="clr-dg-pagination"></ng-content>
  `,
      host: {
        "[class.datagrid-footer]": "true"
      }
    }]
  }], function() {
    return [{
      type: Selection
    }, {
      type: DetailService
    }, {
      type: ColumnsService
    }, {
      type: ClrCommonStringsService
    }];
  }, null);
})();
var COLUMN_STATE = new InjectionToken("COLUMN_STATE");
function columnStateFactory() {
  return new BehaviorSubject({
    changes: []
  });
}
var COLUMN_STATE_PROVIDER = {
  provide: COLUMN_STATE,
  useFactory: columnStateFactory
};
var ClrDatagridHideableColumn = class {
  constructor(titleTemplateRef, viewContainerRef, columnsService, columnState) {
    this.titleTemplateRef = titleTemplateRef;
    this.viewContainerRef = viewContainerRef;
    this.columnsService = columnsService;
    this.columnState = columnState;
    this.hiddenChange = new EventEmitter();
    this.subscriptions = [];
    this.viewContainerRef.createEmbeddedView(this.titleTemplateRef);
    if (!this.columnState) {
      throw new Error("The *clrDgHideableColumn directive can only be used inside of a clr-dg-column component.");
    }
  }
  /**
   *
   * @description
   * Setter fn for the @Input with the same name as this structural directive.
   * It allows the user to pre-configure the column's hide/show state. { hidden: true }
   * It's more verbose but has more Clarity.
   *
   * @example
   * *clrDgHideableColumn
   * *clrDgHideableColumn={hidden: false}
   * *clrDgHideableColumn={hidden: true}
   *
   */
  set clrDgHideableColumn(value) {
    if (typeof value === "string") {
      this.clrDgHidden = false;
      return;
    }
    this.clrDgHidden = value && value.hidden ? value.hidden : false;
  }
  set clrDgHidden(hidden) {
    this._hidden = hidden ? hidden : false;
    this.columnsService.emitStateChange(this.columnState, {
      hidden: this._hidden,
      changes: [DatagridColumnChanges.HIDDEN]
    });
  }
  ngOnInit() {
    this.columnsService.emitStateChange(this.columnState, {
      hideable: true,
      titleTemplateRef: this.titleTemplateRef,
      hidden: this._hidden,
      changes: [DatagridColumnChanges.HIDDEN]
    });
    this.subscriptions.push(this.columnState.subscribe((state2) => {
      if (state2.changes && state2.changes.indexOf(DatagridColumnChanges.HIDDEN) > -1) {
        this.hiddenChange.emit(state2.hidden);
      }
    }));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
};
ClrDatagridHideableColumn.ɵfac = function ClrDatagridHideableColumn_Factory(t161) {
  return new (t161 || ClrDatagridHideableColumn)(ɵɵdirectiveInject(TemplateRef), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(ColumnsService), ɵɵdirectiveInject(COLUMN_STATE, 8));
};
ClrDatagridHideableColumn.ɵdir = ɵɵdefineDirective({
  type: ClrDatagridHideableColumn,
  selectors: [["", "clrDgHideableColumn", ""]],
  inputs: {
    clrDgHideableColumn: "clrDgHideableColumn",
    clrDgHidden: "clrDgHidden"
  },
  outputs: {
    hiddenChange: "clrDgHiddenChange"
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridHideableColumn, [{
    type: Directive,
    args: [{
      selector: "[clrDgHideableColumn]"
    }]
  }], function() {
    return [{
      type: TemplateRef
    }, {
      type: ViewContainerRef
    }, {
      type: ColumnsService
    }, {
      type: BehaviorSubject,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [COLUMN_STATE]
      }]
    }];
  }, {
    hiddenChange: [{
      type: Output,
      args: ["clrDgHiddenChange"]
    }],
    clrDgHideableColumn: [{
      type: Input,
      args: ["clrDgHideableColumn"]
    }],
    clrDgHidden: [{
      type: Input,
      args: ["clrDgHidden"]
    }]
  });
})();
var ClrIfDetail = class {
  constructor(templateRef, viewContainer, detailService) {
    this.templateRef = templateRef;
    this.viewContainer = viewContainer;
    this.detailService = detailService;
    this.stateChange = new EventEmitter(null);
    this.subscriptions = [];
    this.skip = false;
    this.detailService.enabled = true;
  }
  set state(model) {
    if (!this.skip) {
      this.detailService.toggle(model);
    }
    this.skip = false;
  }
  ngOnInit() {
    this.subscriptions.push(this.detailService.stateChange.subscribe((state2) => {
      if (state2 === true) {
        this.togglePanel(true);
      } else {
        this.togglePanel(false);
      }
    }));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  togglePanel(showPanel) {
    let stateChangeParams = null;
    if (showPanel === true) {
      const embeddedViewContext = {
        $implicit: this.detailService.state
      };
      if (this.embeddedViewRef) {
        this.embeddedViewRef.context = embeddedViewContext;
      } else {
        this.embeddedViewRef = this.viewContainer.createEmbeddedView(this.templateRef, embeddedViewContext);
      }
      this.skip = true;
      stateChangeParams = this.detailService.state;
    } else {
      this.viewContainer.clear();
      this.embeddedViewRef = null;
    }
    this.stateChange.emit(stateChangeParams);
  }
};
ClrIfDetail.ɵfac = function ClrIfDetail_Factory(t161) {
  return new (t161 || ClrIfDetail)(ɵɵdirectiveInject(TemplateRef), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(DetailService));
};
ClrIfDetail.ɵdir = ɵɵdefineDirective({
  type: ClrIfDetail,
  selectors: [["", "clrIfDetail", ""]],
  inputs: {
    state: [InputFlags.None, "clrIfDetail", "state"]
  },
  outputs: {
    stateChange: "clrIfDetailChange"
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrIfDetail, [{
    type: Directive,
    args: [{
      selector: "[clrIfDetail]"
    }]
  }], function() {
    return [{
      type: TemplateRef
    }, {
      type: ViewContainerRef
    }, {
      type: DetailService
    }];
  }, {
    stateChange: [{
      type: Output,
      args: ["clrIfDetailChange"]
    }],
    state: [{
      type: Input,
      args: ["clrIfDetail"]
    }]
  });
})();
var ClrDatagridPageSize = class {
  constructor(page) {
    this.page = page;
    this.pageSizeOptionsId = uniqueIdFactory();
  }
  ngOnInit() {
    if (!this.pageSizeOptions || this.pageSizeOptions.length === 0) {
      this.pageSizeOptions = [this.page.size];
    }
  }
};
ClrDatagridPageSize.ɵfac = function ClrDatagridPageSize_Factory(t161) {
  return new (t161 || ClrDatagridPageSize)(ɵɵdirectiveInject(Page));
};
ClrDatagridPageSize.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridPageSize,
  selectors: [["clr-dg-page-size"]],
  inputs: {
    pageSizeOptions: [InputFlags.None, "clrPageSizeOptions", "pageSizeOptions"],
    pageSizeOptionsId: [InputFlags.None, "clrPageSizeOptionsId", "pageSizeOptionsId"]
  },
  ngContentSelectors: _c02,
  decls: 5,
  vars: 6,
  consts: [[3, "for"], [1, "clr-select-wrapper"], [3, "ngModelChange", "id", "ngModel"], [3, "ngValue", 4, "ngFor", "ngForOf"], [3, "ngValue"]],
  template: function ClrDatagridPageSize_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "label", 0);
      ɵɵprojection(1);
      ɵɵelementEnd();
      ɵɵelementStart(2, "div", 1)(3, "select", 2);
      ɵɵtwoWayListener("ngModelChange", function ClrDatagridPageSize_Template_select_ngModelChange_3_listener($event) {
        ɵɵtwoWayBindingSet(ctx.page.size, $event) || (ctx.page.size = $event);
        return $event;
      });
      ɵɵtemplate(4, ClrDatagridPageSize_option_4_Template, 2, 2, "option", 3);
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵproperty("for", ctx.pageSizeOptionsId);
      ɵɵadvance(3);
      ɵɵclassProp("clr-page-size-select", true);
      ɵɵproperty("id", ctx.pageSizeOptionsId);
      ɵɵtwoWayProperty("ngModel", ctx.page.size);
      ɵɵadvance();
      ɵɵproperty("ngForOf", ctx.pageSizeOptions);
    }
  },
  dependencies: [NgForOf, ClrLabel, NgSelectOption, ɵNgSelectMultipleOption, SelectControlValueAccessor, NgControlStatus, NgModel],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridPageSize, [{
    type: Component,
    args: [{
      selector: "clr-dg-page-size",
      template: `
    <label [for]="pageSizeOptionsId"><ng-content></ng-content></label>
    <div class="clr-select-wrapper">
      <select [id]="pageSizeOptionsId" [class.clr-page-size-select]="true" [(ngModel)]="page.size">
        <option *ngFor="let option of pageSizeOptions" [ngValue]="option">{{ option }}</option>
      </select>
    </div>
  `
    }]
  }], function() {
    return [{
      type: Page
    }];
  }, {
    pageSizeOptions: [{
      type: Input,
      args: ["clrPageSizeOptions"]
    }],
    pageSizeOptionsId: [{
      type: Input,
      args: ["clrPageSizeOptionsId"]
    }]
  });
})();
var ClrDatagridPagination = class {
  constructor(page, commonStrings, detailService) {
    this.page = page;
    this.commonStrings = commonStrings;
    this.detailService = detailService;
    this.currentChanged = new EventEmitter(false);
    this.page.activated = true;
  }
  /**
   * Page size
   */
  get pageSize() {
    return this.page.size;
  }
  set pageSize(size) {
    if (typeof size === "number") {
      this.page.size = size;
    }
  }
  /**
   * Total items (needed to guess the last page)
   */
  get totalItems() {
    return this.page.totalItems;
  }
  set totalItems(total) {
    if (typeof total === "number") {
      this.page.totalItems = total;
    }
  }
  /**
   * Last page
   */
  get lastPage() {
    return this.page.last;
  }
  set lastPage(last) {
    if (typeof last === "number") {
      this.page.last = last;
    }
  }
  /**
   * Current page
   */
  get currentPage() {
    return this.page.current;
  }
  set currentPage(page) {
    if (typeof page === "number") {
      this.page.current = page;
    }
  }
  /**
   * Index of the first item displayed on the current page, starting at 0, -1 if none displayed
   */
  get firstItem() {
    return this.page.firstItem;
  }
  /**
   * Index of the last item displayed on the current page, starting at 0, -1 if none displayed
   */
  get lastItem() {
    return this.page.lastItem;
  }
  /**
   * Conditionally adds page numbers before and after the current page
   */
  get middlePages() {
    const middlePages = [];
    if (this.page.current > 1) {
      middlePages.push(this.page.current - 1);
    }
    middlePages.push(this.page.current);
    if (this.page.current < this.page.last) {
      middlePages.push(this.page.current + 1);
    }
    return middlePages;
  }
  /**********
   * Subscription to the Page service for page changes.
   * Note: this only emits after the datagrid is initialized/stabalized and the page changes.
   */
  ngOnInit() {
    if (!this.page.size) {
      this.page.size = 10;
    }
    this._pageSubscription = this.page.change.subscribe((current) => this.currentChanged.emit(current));
  }
  ngOnDestroy() {
    this.page.resetPageSize(true);
    if (this._pageSubscription) {
      this._pageSubscription.unsubscribe();
    }
  }
  /**
   * Moves to the previous page if it exists
   */
  previous() {
    this.page.previous();
  }
  /**
   * Moves to the next page if it exists
   */
  next() {
    this.page.next();
  }
  verifyCurrentPage(event) {
    const parsed = parseInt(event.target.value, 10);
    if (parsed !== this.page.current) {
      event.target.value = this.page.current;
    }
  }
  /**
   * We only update the pagination's current page on enter.
   */
  updateCurrentPage(event) {
    const parsed = parseInt(event.target.value, 10);
    if (!isNaN(parsed)) {
      if (parsed < 1) {
        this.page.current = 1;
      } else if (parsed > this.page.last) {
        this.page.current = this.page.last;
      } else {
        this.page.current = parsed;
      }
    }
    this.currentPageInputRef.nativeElement.value = this.page.current;
  }
};
ClrDatagridPagination.ɵfac = function ClrDatagridPagination_Factory(t161) {
  return new (t161 || ClrDatagridPagination)(ɵɵdirectiveInject(Page), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(DetailService));
};
ClrDatagridPagination.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridPagination,
  selectors: [["clr-dg-pagination"]],
  contentQueries: function ClrDatagridPagination_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrDatagridPageSize, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._pageSizeComponent = _t.first);
    }
  },
  viewQuery: function ClrDatagridPagination_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c71, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.currentPageInputRef = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function ClrDatagridPagination_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("pagination", true);
    }
  },
  inputs: {
    disableCurrentPageInput: [InputFlags.None, "clrDgPageInputDisabled", "disableCurrentPageInput"],
    pageSize: [InputFlags.None, "clrDgPageSize", "pageSize"],
    totalItems: [InputFlags.None, "clrDgTotalItems", "totalItems"],
    lastPage: [InputFlags.None, "clrDgLastPage", "lastPage"],
    currentPage: [InputFlags.None, "clrDgPage", "currentPage"]
  },
  outputs: {
    currentChanged: "clrDgPageChange"
  },
  ngContentSelectors: _c73,
  decls: 2,
  vars: 2,
  consts: [["readOnly", ""], ["currentPageInput", ""], [4, "ngIf"], ["class", "pagination-size", 4, "ngIf"], [1, "pagination-description"], ["class", "pagination-list", 4, "ngIf"], [1, "pagination-size"], [1, "pagination-list"], ["type", "button", 1, "pagination-first", 3, "click", "disabled"], [1, "clr-sr-only"], ["shape", "step-forward-2", "direction", "down"], ["type", "button", 1, "pagination-previous", 3, "click", "disabled"], ["shape", "angle", "direction", "left"], ["type", "text", "class", "pagination-current clr-input", 3, "size", "value", "keydown.enter", "blur", 4, "ngIf", "ngIfElse"], ["type", "button", 1, "pagination-next", 3, "click", "disabled"], ["shape", "angle", "direction", "right"], ["type", "button", 1, "pagination-last", 3, "click", "disabled"], ["shape", "step-forward-2", "direction", "up"], ["type", "text", 1, "pagination-current", "clr-input", 3, "keydown.enter", "blur", "size", "value"], [1, "pagination-description-compact"]],
  template: function ClrDatagridPagination_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c72);
      ɵɵtemplate(0, ClrDatagridPagination_ng_container_0_Template, 5, 2, "ng-container", 2)(1, ClrDatagridPagination_ng_container_1_Template, 14, 10, "ng-container", 2);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", !ctx.detailService.isOpen);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.detailService.isOpen);
    }
  },
  dependencies: [NgIf, CdsIconCustomTag],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridPagination, [{
    type: Component,
    args: [{
      selector: "clr-dg-pagination",
      template: `
    <ng-container *ngIf="!detailService.isOpen">
      <div class="pagination-size" *ngIf="_pageSizeComponent">
        <ng-content select="clr-dg-page-size"></ng-content>
      </div>
      <div class="pagination-description">
        <ng-content></ng-content>
      </div>
      <div class="pagination-list" *ngIf="page.last > 1">
        <button
          type="button"
          class="pagination-first"
          [disabled]="page.current <= 1"
          (click)="page.current = 1"
          [attr.aria-label]="commonStrings.keys.firstPage"
        >
          <span class="clr-sr-only">{{ commonStrings.keys.firstPage }}</span>
          <cds-icon shape="step-forward-2" direction="down"></cds-icon>
        </button>
        <button
          type="button"
          class="pagination-previous"
          [disabled]="page.current <= 1"
          (click)="page.current = page.current - 1"
          [attr.aria-label]="commonStrings.keys.previousPage"
        >
          <span class="clr-sr-only">{{ commonStrings.keys.previousPage }}</span>
          <cds-icon shape="angle" direction="left"></cds-icon>
        </button>
        <input
          *ngIf="!disableCurrentPageInput; else readOnly"
          #currentPageInput
          type="text"
          class="pagination-current clr-input"
          [size]="page.last.toString().length"
          [value]="page.current"
          (keydown.enter)="updateCurrentPage($event)"
          (blur)="verifyCurrentPage($event)"
          [attr.aria-label]="commonStrings.keys.currentPage"
        />
        <ng-template #readOnly>
          <span>{{ page.current }}</span>
        </ng-template>

        &nbsp;/&nbsp;<span [attr.aria-label]="commonStrings.keys.totalPages">{{ page.last }}</span>
        <button
          type="button"
          class="pagination-next"
          [disabled]="page.current >= page.last"
          (click)="page.current = page.current + 1"
          [attr.aria-label]="commonStrings.keys.nextPage"
        >
          <span class="clr-sr-only">{{ commonStrings.keys.nextPage }}</span>
          <cds-icon shape="angle" direction="right"></cds-icon>
        </button>
        <button
          type="button"
          class="pagination-last"
          [disabled]="page.current >= page.last"
          (click)="page.current = page.last"
          [attr.aria-label]="commonStrings.keys.lastPage"
        >
          <span class="clr-sr-only">{{ commonStrings.keys.lastPage }}</span>
          <cds-icon shape="step-forward-2" direction="up"></cds-icon>
        </button>
      </div>
    </ng-container>
    <ng-container *ngIf="detailService.isOpen">
      <div class="pagination-description-compact">
        {{ page.firstItem + 1 }}-{{ page.lastItem + 1 }} / {{ page.totalItems }}
      </div>
      <div class="pagination-list">
        <button
          type="button"
          class="pagination-previous"
          [disabled]="page.current <= 1"
          (click)="page.current = page.current - 1"
          [attr.aria-label]="commonStrings.keys.previousPage"
        >
          <span class="clr-sr-only">{{ commonStrings.keys.previousPage }}</span>
          <cds-icon shape="angle" direction="left"></cds-icon>
        </button>
        <span>{{ page.current }}</span>
        <button
          type="button"
          class="pagination-next"
          [disabled]="page.current >= page.last"
          (click)="page.current = page.current + 1"
          [attr.aria-label]="commonStrings.keys.nextPage"
        >
          <span class="clr-sr-only">{{ commonStrings.keys.nextPage }}</span>
          <cds-icon shape="angle" direction="right"></cds-icon>
        </button>
      </div>
    </ng-container>
  `,
      host: {
        "[class.pagination]": "true"
      }
    }]
  }], function() {
    return [{
      type: Page
    }, {
      type: ClrCommonStringsService
    }, {
      type: DetailService
    }];
  }, {
    disableCurrentPageInput: [{
      type: Input,
      args: ["clrDgPageInputDisabled"]
    }],
    currentChanged: [{
      type: Output,
      args: ["clrDgPageChange"]
    }],
    _pageSizeComponent: [{
      type: ContentChild,
      args: [ClrDatagridPageSize]
    }],
    currentPageInputRef: [{
      type: ViewChild,
      args: ["currentPageInput"]
    }],
    pageSize: [{
      type: Input,
      args: ["clrDgPageSize"]
    }],
    totalItems: [{
      type: Input,
      args: ["clrDgTotalItems"]
    }],
    lastPage: [{
      type: Input,
      args: ["clrDgLastPage"]
    }],
    currentPage: [{
      type: Input,
      args: ["clrDgPage"]
    }]
  });
})();
var ClrDatagridRowDetail = class {
  constructor(selection, rowActionService, expand, expandableRows, commonStrings) {
    this.selection = selection;
    this.rowActionService = rowActionService;
    this.expand = expand;
    this.expandableRows = expandableRows;
    this.commonStrings = commonStrings;
    this.replacedRow = false;
    this.SELECTION_TYPE = SelectionType;
    this.subscriptions = [];
  }
  set replace(value) {
    this.expand.setReplace(!!value);
  }
  get beginningOfExpandableContentAriaText() {
    return this._beginningOfExpandableContentAriaText || `${this.commonStrings.keys.datagridExpandableBeginningOf} 
      ${this.commonStrings.keys.datagridExpandableRowContent}`;
  }
  get endOfExpandableContentAriaText() {
    return this._endOfExpandableContentAriaText || `${this.commonStrings.keys.datagridExpandableEndOf} 
      ${this.commonStrings.keys.datagridExpandableRowContent}`;
  }
  ngAfterContentInit() {
    this.subscriptions.push(this.expand.replace.subscribe((replaceChange) => {
      this.replacedRow = replaceChange;
    }));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
};
ClrDatagridRowDetail.ɵfac = function ClrDatagridRowDetail_Factory(t161) {
  return new (t161 || ClrDatagridRowDetail)(ɵɵdirectiveInject(Selection), ɵɵdirectiveInject(RowActionService), ɵɵdirectiveInject(DatagridIfExpandService), ɵɵdirectiveInject(ExpandableRowsCount), ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrDatagridRowDetail.ɵcmp = ɵɵdefineComponent({
  type: ClrDatagridRowDetail,
  selectors: [["clr-dg-row-detail"]],
  contentQueries: function ClrDatagridRowDetail_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrDatagridCell, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.cells = _t);
    }
  },
  hostAttrs: ["role", "gridcell"],
  hostVars: 7,
  hostBindings: function ClrDatagridRowDetail_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("id", ctx.expand.expandableId);
      ɵɵclassProp("datagrid-row-flex", true)("datagrid-row-detail", true)("datagrid-container", ctx.cells.length === 0);
    }
  },
  inputs: {
    _beginningOfExpandableContentAriaText: [InputFlags.None, "clrRowDetailBeginningAriaText", "_beginningOfExpandableContentAriaText"],
    _endOfExpandableContentAriaText: [InputFlags.None, "clrRowDetailEndAriaText", "_endOfExpandableContentAriaText"],
    replace: [InputFlags.None, "clrDgReplace", "replace"]
  },
  ngContentSelectors: _c02,
  decls: 5,
  vars: 3,
  consts: [[1, "clr-sr-only"]],
  template: function ClrDatagridRowDetail_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "div", 0);
      ɵɵtext(1);
      ɵɵelementEnd();
      ɵɵprojection(2);
      ɵɵelementStart(3, "div", 0);
      ɵɵtext(4);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵtextInterpolate2(" ", ctx.beginningOfExpandableContentAriaText, " ", ctx.commonStrings.keys.datagridExpandableRowsHelperText, " ");
      ɵɵadvance(3);
      ɵɵtextInterpolate(ctx.endOfExpandableContentAriaText);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridRowDetail, [{
    type: Component,
    args: [{
      selector: "clr-dg-row-detail",
      template: `
    <div class="clr-sr-only">
      {{ beginningOfExpandableContentAriaText }}
      {{ commonStrings.keys.datagridExpandableRowsHelperText }}
    </div>
    <ng-content></ng-content>
    <div class="clr-sr-only">{{ endOfExpandableContentAriaText }}</div>
  `,
      host: {
        "[class.datagrid-row-flex]": "true",
        "[class.datagrid-row-detail]": "true",
        "[class.datagrid-container]": "cells.length === 0",
        "[attr.id]": "expand.expandableId",
        role: "gridcell"
      }
    }]
  }], function() {
    return [{
      type: Selection
    }, {
      type: RowActionService
    }, {
      type: DatagridIfExpandService
    }, {
      type: ExpandableRowsCount
    }, {
      type: ClrCommonStringsService
    }];
  }, {
    _beginningOfExpandableContentAriaText: [{
      type: Input,
      args: ["clrRowDetailBeginningAriaText"]
    }],
    _endOfExpandableContentAriaText: [{
      type: Input,
      args: ["clrRowDetailEndAriaText"]
    }],
    cells: [{
      type: ContentChildren,
      args: [ClrDatagridCell]
    }],
    replace: [{
      type: Input,
      args: ["clrDgReplace"]
    }]
  });
})();
var STRICT_WIDTH_CLASS = "datagrid-fixed-width";
var HIDDEN_COLUMN_CLASS = "datagrid-hidden-column";
var DatagridCellRenderer = class {
  constructor(el, renderer, organizer) {
    this.el = el;
    this.renderer = renderer;
    this.subscriptions = [];
    this.subscriptions.push(organizer.filterRenderSteps(DatagridRenderStep.CLEAR_WIDTHS).subscribe(() => this.clearWidth()));
  }
  // @TODO(JEREMY) Work out how to dedupe some of this code between header and cell renderers
  set columnState(columnState) {
    if (this.stateSubscription) {
      this.stateSubscription.unsubscribe();
    }
    this.runAllChanges = ALL_COLUMN_CHANGES;
    this.stateSubscription = columnState.subscribe((state2) => this.stateChanges(state2));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
    if (this.stateSubscription) {
      this.stateSubscription.unsubscribe();
    }
  }
  stateChanges(state2) {
    if (this.runAllChanges) {
      state2.changes = this.runAllChanges;
      delete this.runAllChanges;
    }
    if (state2.changes && state2.changes.length) {
      state2.changes.forEach((change) => {
        switch (change) {
          case DatagridColumnChanges.WIDTH:
            this.setWidth(state2);
            break;
          case DatagridColumnChanges.HIDDEN:
            this.setHidden(state2);
            break;
          default:
            break;
        }
      });
    }
  }
  clearWidth() {
    this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);
    this.renderer.setStyle(this.el.nativeElement, "width", null);
  }
  setWidth(state2) {
    if (state2.strictWidth) {
      this.renderer.addClass(this.el.nativeElement, STRICT_WIDTH_CLASS);
    } else {
      this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);
    }
    this.renderer.setStyle(this.el.nativeElement, "width", state2.width + "px");
  }
  setHidden(state2) {
    if (state2.hidden) {
      this.renderer.addClass(this.el.nativeElement, HIDDEN_COLUMN_CLASS);
    } else {
      this.renderer.removeClass(this.el.nativeElement, HIDDEN_COLUMN_CLASS);
    }
  }
};
DatagridCellRenderer.ɵfac = function DatagridCellRenderer_Factory(t161) {
  return new (t161 || DatagridCellRenderer)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(DatagridRenderOrganizer));
};
DatagridCellRenderer.ɵdir = ɵɵdefineDirective({
  type: DatagridCellRenderer,
  selectors: [["clr-dg-cell"]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatagridCellRenderer, [{
    type: Directive,
    args: [{
      selector: "clr-dg-cell"
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: DatagridRenderOrganizer
    }];
  }, null);
})();
var DatagridHeaderRenderer = class {
  constructor(el, renderer, organizer, domAdapter, columnResizerService, columnsService, columnState) {
    this.el = el;
    this.renderer = renderer;
    this.organizer = organizer;
    this.domAdapter = domAdapter;
    this.columnResizerService = columnResizerService;
    this.columnsService = columnsService;
    this.columnState = columnState;
    this.resizeEmitter = new EventEmitter();
    this.widthSet = false;
    this.autoSet = false;
    this.subscriptions = [];
    this.subscriptions.push(this.organizer.filterRenderSteps(DatagridRenderStep.CLEAR_WIDTHS).subscribe(() => this.clearWidth()));
    this.subscriptions.push(columnState.subscribe((state2) => this.stateChanges(state2)));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  getColumnWidthState() {
    const strictWidth = this.detectStrictWidth();
    return {
      width: this.computeWidth(strictWidth),
      strictWidth
    };
  }
  setColumnState(index) {
    this.columnsService.columns[index] = this.columnState;
  }
  stateChanges(state2) {
    if (state2.changes && state2.changes.length) {
      state2.changes.forEach((change) => {
        switch (change) {
          case DatagridColumnChanges.WIDTH:
            this.setWidth(state2);
            break;
          case DatagridColumnChanges.HIDDEN:
            this.setHidden(state2);
            break;
          default:
            break;
        }
      });
    }
  }
  clearWidth() {
    if (this.widthSet && !this.columnResizerService.resizedBy) {
      this.renderer.setStyle(this.el.nativeElement, "width", null);
    }
    if (this.autoSet) {
      this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);
    }
  }
  detectStrictWidth() {
    if (this.columnResizerService.resizedBy) {
      return this.columnResizerService.widthAfterResize;
    } else if (this.autoSet) {
      return 0;
    } else {
      return this.domAdapter.userDefinedWidth(this.el.nativeElement);
    }
  }
  computeWidth(strictWidth) {
    let width = strictWidth;
    if (!width) {
      width = this.domAdapter.scrollWidth(this.el.nativeElement);
    }
    return width;
  }
  setWidth(state2) {
    if (state2.strictWidth) {
      if (this.columnResizerService.resizedBy) {
        this.resizeEmitter.emit(state2.width);
        this.renderer.setStyle(this.el.nativeElement, "width", state2.width + "px");
        this.widthSet = false;
      }
      this.renderer.addClass(this.el.nativeElement, STRICT_WIDTH_CLASS);
      this.autoSet = false;
    } else {
      this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);
      this.renderer.setStyle(this.el.nativeElement, "width", state2.width + "px");
      this.widthSet = true;
      this.autoSet = true;
    }
  }
  setHidden(state2) {
    if (state2.hidden) {
      this.renderer.addClass(this.el.nativeElement, HIDDEN_COLUMN_CLASS);
    } else {
      this.renderer.removeClass(this.el.nativeElement, HIDDEN_COLUMN_CLASS);
    }
  }
};
DatagridHeaderRenderer.ɵfac = function DatagridHeaderRenderer_Factory(t161) {
  return new (t161 || DatagridHeaderRenderer)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(DatagridRenderOrganizer), ɵɵdirectiveInject(DomAdapter), ɵɵdirectiveInject(ColumnResizerService), ɵɵdirectiveInject(ColumnsService), ɵɵdirectiveInject(COLUMN_STATE));
};
DatagridHeaderRenderer.ɵdir = ɵɵdefineDirective({
  type: DatagridHeaderRenderer,
  selectors: [["clr-dg-column"]],
  outputs: {
    resizeEmitter: "clrDgColumnResize"
  },
  features: [ɵɵProvidersFeature([ColumnResizerService, COLUMN_STATE_PROVIDER])]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatagridHeaderRenderer, [{
    type: Directive,
    args: [{
      selector: "clr-dg-column",
      providers: [ColumnResizerService, COLUMN_STATE_PROVIDER]
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: DatagridRenderOrganizer
    }, {
      type: DomAdapter
    }, {
      type: ColumnResizerService
    }, {
      type: ColumnsService
    }, {
      type: BehaviorSubject,
      decorators: [{
        type: Inject,
        args: [COLUMN_STATE]
      }]
    }];
  }, {
    resizeEmitter: [{
      type: Output,
      args: ["clrDgColumnResize"]
    }]
  });
})();
var NoopDomAdapter = class {
  userDefinedWidth(_element) {
    return 0;
  }
  scrollBarWidth(_element) {
    return 0;
  }
  scrollWidth(_element) {
    return 0;
  }
  computedHeight(_element) {
    return 0;
  }
  clientRect(_element) {
    return {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      width: 0,
      height: 0
    };
  }
  minWidth(_element) {
    return 0;
  }
  focus(_element) {
  }
};
NoopDomAdapter.ɵfac = function NoopDomAdapter_Factory(t161) {
  return new (t161 || NoopDomAdapter)();
};
NoopDomAdapter.ɵprov = ɵɵdefineInjectable({
  token: NoopDomAdapter,
  factory: NoopDomAdapter.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NoopDomAdapter, [{
    type: Injectable
  }], null, null);
})();
var DatagridRowRenderer = class {
  constructor(columnsService) {
    this.columnsService = columnsService;
    this.subscriptions = [];
  }
  ngAfterContentInit() {
    this.setColumnState();
    this.subscriptions.push(this.cells.changes.subscribe(() => {
      this.setColumnState();
    }));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  setColumnState() {
    if (this.cells.length === this.columnsService.columns.length) {
      this.cells.forEach((cell, index) => {
        if (this.columnsService.columns[index]) {
          cell.columnState = this.columnsService.columns[index];
        }
      });
    }
  }
};
DatagridRowRenderer.ɵfac = function DatagridRowRenderer_Factory(t161) {
  return new (t161 || DatagridRowRenderer)(ɵɵdirectiveInject(ColumnsService));
};
DatagridRowRenderer.ɵdir = ɵɵdefineDirective({
  type: DatagridRowRenderer,
  selectors: [["clr-dg-row"], ["clr-dg-row-detail"]],
  contentQueries: function DatagridRowRenderer_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, DatagridCellRenderer, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.cells = _t);
    }
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatagridRowRenderer, [{
    type: Directive,
    args: [{
      selector: "clr-dg-row, clr-dg-row-detail"
    }]
  }], function() {
    return [{
      type: ColumnsService
    }];
  }, {
    cells: [{
      type: ContentChildren,
      args: [DatagridCellRenderer]
    }]
  });
})();
var domAdapterFactory = (platformId) => {
  if (isPlatformBrowser(platformId)) {
    return new DomAdapter();
  } else {
    return new NoopDomAdapter();
  }
};
var DatagridMainRenderer = class {
  constructor(organizer, items, page, domAdapter, el, renderer, detailService, tableSizeService, columnsService, ngZone) {
    this.organizer = organizer;
    this.items = items;
    this.page = page;
    this.domAdapter = domAdapter;
    this.el = el;
    this.renderer = renderer;
    this.detailService = detailService;
    this.tableSizeService = tableSizeService;
    this.columnsService = columnsService;
    this.ngZone = ngZone;
    this._heightSet = false;
    this.shouldStabilizeColumns = true;
    this.subscriptions = [];
    this.columnsSizesStable = false;
    this.subscriptions.push(this.organizer.filterRenderSteps(DatagridRenderStep.COMPUTE_COLUMN_WIDTHS).subscribe(() => this.computeHeadersWidth()));
    this.subscriptions.push(this.page.sizeChange.subscribe(() => {
      if (this._heightSet) {
        this.resetDatagridHeight();
      }
    }));
    this.subscriptions.push(this.detailService.stateChange.subscribe((state2) => this.toggleDetailPane(state2)));
    this.subscriptions.push(this.items.change.subscribe(() => this.shouldStabilizeColumns = true));
  }
  ngAfterContentInit() {
    this.setupColumns();
    this.subscriptions.push(this.headers.changes.subscribe(() => {
      this.setupColumns();
      this.columnsSizesStable = false;
      this.stabilizeColumns();
    }));
  }
  // Initialize and set Table width for horizontal scrolling here.
  ngAfterViewInit() {
    this.tableSizeService.table = this.el;
  }
  ngAfterViewChecked() {
    if (this.shouldStabilizeColumns) {
      this.stabilizeColumns();
    }
    if (this.shouldComputeHeight()) {
      this.ngZone.runOutsideAngular(() => {
        setTimeout(() => {
          this.computeDatagridHeight();
        });
      });
    }
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  toggleDetailPane(state2) {
    if (this.headers) {
      if (state2 && !this.columnsService.hasCache()) {
        this.columnsService.cache();
        this.headers.forEach((_header, index) => {
          if (index > 0) {
            this.columnsService.emitStateChangeAt(index, {
              changes: [DatagridColumnChanges.HIDDEN],
              hidden: state2
            });
          }
        });
      } else if (!state2) {
        this.columnsService.resetToLastCache();
      }
    }
  }
  setupColumns() {
    this.headers.forEach((header, index) => header.setColumnState(index));
    this.columnsService.columns.splice(this.headers.length);
    this.rows.forEach((row) => row.setColumnState());
  }
  shouldComputeHeight() {
    if (!this._heightSet && this.page.size > 0) {
      if (this.items.displayed.length === this.page.size) {
        return true;
      }
    }
    return false;
  }
  /**
   * Computes the height of the datagrid.
   *
   * NOTE: We had to choose to set the height instead of the min-height because
   * IE 11 requires the height on the parent for the children flex grow/shrink properties to work.
   * When we used min-height, 1 1 auto doesn't used to work in IE11 :-(
   * But this doesn't affect the fix. It works in both fixed & variable height datagrids.
   *
   * Refer: http://stackoverflow.com/questions/24396205/flex-grow-not-working-in-internet-explorer-11-0
   */
  computeDatagridHeight() {
    const value = this.domAdapter.clientRect(this.el.nativeElement).height;
    this.renderer.setStyle(this.el.nativeElement, "height", value + "px");
    this._heightSet = true;
  }
  resetDatagridHeight() {
    this.renderer.setStyle(this.el.nativeElement, "height", "");
    this._heightSet = false;
  }
  /**
   * Makes each header compute its width.
   */
  computeHeadersWidth() {
    const nbColumns = this.headers.length;
    let allStrict = true;
    this.headers.forEach((header, index) => {
      const state2 = __spreadValues({
        changes: [DatagridColumnChanges.WIDTH]
      }, header.getColumnWidthState());
      if (!state2.strictWidth) {
        allStrict = false;
      }
      if (nbColumns === index + 1 && allStrict) {
        state2.strictWidth = 0;
      }
      this.columnsService.emitStateChangeAt(index, state2);
    });
  }
  /**
   * Triggers a whole re-rendring cycle to set column sizes, if needed.
   */
  stabilizeColumns() {
    this.shouldStabilizeColumns = false;
    if (this.columnsSizesStable) {
      return;
    }
    if (this.items.displayed.length > 0) {
      this.organizer.resize();
      this.columnsSizesStable = true;
    }
  }
};
DatagridMainRenderer.ɵfac = function DatagridMainRenderer_Factory(t161) {
  return new (t161 || DatagridMainRenderer)(ɵɵdirectiveInject(DatagridRenderOrganizer), ɵɵdirectiveInject(Items), ɵɵdirectiveInject(Page), ɵɵdirectiveInject(DomAdapter), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(DetailService), ɵɵdirectiveInject(TableSizeService), ɵɵdirectiveInject(ColumnsService), ɵɵdirectiveInject(NgZone));
};
DatagridMainRenderer.ɵdir = ɵɵdefineDirective({
  type: DatagridMainRenderer,
  selectors: [["clr-datagrid"]],
  contentQueries: function DatagridMainRenderer_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, DatagridHeaderRenderer, 4);
      ɵɵcontentQuery(dirIndex, DatagridRowRenderer, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.headers = _t);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.rows = _t);
    }
  },
  features: [ɵɵProvidersFeature([{
    provide: DomAdapter,
    useFactory: domAdapterFactory,
    deps: [PLATFORM_ID]
  }])]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatagridMainRenderer, [{
    type: Directive,
    args: [{
      selector: "clr-datagrid",
      providers: [{
        provide: DomAdapter,
        useFactory: domAdapterFactory,
        deps: [PLATFORM_ID]
      }]
    }]
  }], function() {
    return [{
      type: DatagridRenderOrganizer
    }, {
      type: Items
    }, {
      type: Page
    }, {
      type: DomAdapter
    }, {
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: DetailService
    }, {
      type: TableSizeService
    }, {
      type: ColumnsService
    }, {
      type: NgZone
    }];
  }, {
    headers: [{
      type: ContentChildren,
      args: [DatagridHeaderRenderer]
    }],
    rows: [{
      type: ContentChildren,
      args: [DatagridRowRenderer, {
        descendants: true
      }]
    }]
  });
})();
var CLR_DATAGRID_DIRECTIVES = [
  // Core
  ClrDatagrid,
  ClrDatagridActionBar,
  ClrDatagridActionOverflow,
  ClrDatagridCell,
  ClrDatagridColumn,
  ClrDatagridColumnSeparator,
  ClrDatagridDetail,
  ClrDatagridDetailBody,
  ClrDatagridDetailHeader,
  ClrDatagridFilter,
  ClrDatagridFooter,
  ClrDatagridHideableColumn,
  ClrDatagridItems,
  ClrDatagridPageSize,
  ClrDatagridPagination,
  ClrDatagridPlaceholder,
  ClrDatagridRow,
  ClrDatagridRowDetail,
  ClrDatagridSelectionCellDirective,
  ClrIfDetail,
  DatagridDetailRegisterer,
  WrappedCell,
  WrappedColumn,
  WrappedRow,
  // Renderers
  DatagridCellRenderer,
  DatagridHeaderRenderer,
  DatagridMainRenderer,
  DatagridRowRenderer,
  // Chocolate
  ActionableOompaLoompa,
  DatagridWillyWonka,
  ExpandableOompaLoompa,
  // Built-in shortcuts
  DatagridNumericFilter,
  DatagridStringFilter
];
var CLR_DATAGRID_INTERNAL_DIRECTIVES = [ClrDatagridColumnToggle, ClrDatagridColumnToggleButton];
var ClrDatagridModule = class {
  constructor() {
    r24.addIcons(e29, n24, n30, a20, o34, o33, o29, r28, r27);
  }
};
ClrDatagridModule.ɵfac = function ClrDatagridModule_Factory(t161) {
  return new (t161 || ClrDatagridModule)();
};
ClrDatagridModule.ɵmod = ɵɵdefineNgModule({
  type: ClrDatagridModule,
  declarations: [
    // Core
    ClrDatagrid,
    ClrDatagridActionBar,
    ClrDatagridActionOverflow,
    ClrDatagridCell,
    ClrDatagridColumn,
    ClrDatagridColumnSeparator,
    ClrDatagridDetail,
    ClrDatagridDetailBody,
    ClrDatagridDetailHeader,
    ClrDatagridFilter,
    ClrDatagridFooter,
    ClrDatagridHideableColumn,
    ClrDatagridItems,
    ClrDatagridPageSize,
    ClrDatagridPagination,
    ClrDatagridPlaceholder,
    ClrDatagridRow,
    ClrDatagridRowDetail,
    ClrDatagridSelectionCellDirective,
    ClrIfDetail,
    DatagridDetailRegisterer,
    WrappedCell,
    WrappedColumn,
    WrappedRow,
    // Renderers
    DatagridCellRenderer,
    DatagridHeaderRenderer,
    DatagridMainRenderer,
    DatagridRowRenderer,
    // Chocolate
    ActionableOompaLoompa,
    DatagridWillyWonka,
    ExpandableOompaLoompa,
    // Built-in shortcuts
    DatagridNumericFilter,
    DatagridStringFilter,
    ClrDatagridColumnToggle,
    ClrDatagridColumnToggleButton
  ],
  imports: [CommonModule, CdkDragModule, CdkTrapFocusModule, ClrIconModule, ClrFormsModule, FormsModule, ClrLoadingModule, ClrConditionalModule, ClrOutsideClickModule, ClrExpandableAnimationModule, ClrSpinnerModule, ClrPopoverModuleNext, ClrKeyFocusModule],
  exports: [
    // Core
    ClrDatagrid,
    ClrDatagridActionBar,
    ClrDatagridActionOverflow,
    ClrDatagridCell,
    ClrDatagridColumn,
    ClrDatagridColumnSeparator,
    ClrDatagridDetail,
    ClrDatagridDetailBody,
    ClrDatagridDetailHeader,
    ClrDatagridFilter,
    ClrDatagridFooter,
    ClrDatagridHideableColumn,
    ClrDatagridItems,
    ClrDatagridPageSize,
    ClrDatagridPagination,
    ClrDatagridPlaceholder,
    ClrDatagridRow,
    ClrDatagridRowDetail,
    ClrDatagridSelectionCellDirective,
    ClrIfDetail,
    DatagridDetailRegisterer,
    WrappedCell,
    WrappedColumn,
    WrappedRow,
    // Renderers
    DatagridCellRenderer,
    DatagridHeaderRenderer,
    DatagridMainRenderer,
    DatagridRowRenderer,
    // Chocolate
    ActionableOompaLoompa,
    DatagridWillyWonka,
    ExpandableOompaLoompa,
    // Built-in shortcuts
    DatagridNumericFilter,
    DatagridStringFilter
  ]
});
ClrDatagridModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, CdkDragModule, CdkTrapFocusModule, ClrIconModule, ClrFormsModule, FormsModule, ClrLoadingModule, ClrConditionalModule, ClrOutsideClickModule, ClrExpandableAnimationModule, ClrSpinnerModule, ClrPopoverModuleNext, ClrKeyFocusModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDatagridModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, CdkDragModule, CdkTrapFocusModule, ClrIconModule, ClrFormsModule, FormsModule, ClrLoadingModule, ClrConditionalModule, ClrOutsideClickModule, ClrExpandableAnimationModule, ClrSpinnerModule, ClrPopoverModuleNext, ClrKeyFocusModule],
      declarations: [CLR_DATAGRID_DIRECTIVES, CLR_DATAGRID_INTERNAL_DIRECTIVES],
      exports: [CLR_DATAGRID_DIRECTIVES]
    }]
  }], function() {
    return [];
  }, null);
})();
var ClrStackViewCustomTags = class {
};
ClrStackViewCustomTags.ɵfac = function ClrStackViewCustomTags_Factory(t161) {
  return new (t161 || ClrStackViewCustomTags)();
};
ClrStackViewCustomTags.ɵdir = ɵɵdefineDirective({
  type: ClrStackViewCustomTags,
  selectors: [["clr-stack-content"]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrStackViewCustomTags, [{
    type: Directive,
    args: [{
      selector: "clr-stack-content"
    }]
  }], null, null);
})();
var ClrStackViewLabel = class {
  constructor() {
    this._generatedId = null;
    this._id = null;
  }
  get id() {
    return this._id;
  }
  set id(val) {
    if (typeof val === "string" && val !== "") {
      this._id = val;
    } else {
      this._id = this._generatedId + "";
    }
  }
  ngOnInit() {
    this._generatedId = "clr-stack-label-" + uniqueIdFactory();
    if (!this.id) {
      this._id = this._generatedId + "";
    }
  }
};
ClrStackViewLabel.ɵfac = function ClrStackViewLabel_Factory(t161) {
  return new (t161 || ClrStackViewLabel)();
};
ClrStackViewLabel.ɵcmp = ɵɵdefineComponent({
  type: ClrStackViewLabel,
  selectors: [["clr-stack-label"]],
  hostVars: 1,
  hostBindings: function ClrStackViewLabel_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("id", ctx.id);
    }
  },
  inputs: {
    id: "id"
  },
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrStackViewLabel_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrStackViewLabel, [{
    type: Component,
    args: [{
      selector: "clr-stack-label",
      template: "<ng-content></ng-content>",
      host: {
        "[attr.id]": "id"
      }
    }]
  }], null, {
    id: [{
      type: Input
    }]
  });
})();
var ClrStackBlock = class {
  /*
   * This would be more efficient with @ContentChildren, with the parent ClrStackBlock
   * querying for children StackBlocks, but this feature is not available when downgrading
   * the component for Angular 1.
   */
  constructor(parent, commonStrings) {
    this.parent = parent;
    this.commonStrings = commonStrings;
    this.expanded = false;
    this.expandable = false;
    this.expandedChange = new EventEmitter(false);
    this.focused = false;
    this.uniqueId = uniqueIdFactory();
    this._changedChildren = 0;
    this._fullyInitialized = false;
    this._changed = false;
    if (parent) {
      parent.addChild();
    }
  }
  set setChangedValue(value) {
    this._changed = value;
    if (this.parent && this._fullyInitialized) {
      if (value) {
        this.parent._changedChildren++;
      } else {
        this.parent._changedChildren--;
      }
    }
  }
  get getChangedValue() {
    return this._changed || this._changedChildren > 0 && !this.expanded;
  }
  get onStackLabelFocus() {
    return this.expandable && !this.expanded && this.focused;
  }
  get labelledById() {
    return this.stackBlockTitle.id;
  }
  get headingLevel() {
    if (this.ariaLevel) {
      return this.ariaLevel + "";
    }
    return this.parent ? "4" : "3";
  }
  get caretDirection() {
    return this.expanded ? "down" : "right";
  }
  get role() {
    return this.expandable ? "button" : null;
  }
  get tabIndex() {
    return this.expandable ? "0" : null;
  }
  get ariaExpanded() {
    if (!this.expandable) {
      return null;
    } else {
      return this.expanded ? "true" : "false";
    }
  }
  ngOnInit() {
    this._fullyInitialized = true;
  }
  addChild() {
    this.expandable = true;
  }
  toggleExpand(event) {
    if (eventIsInputEvent(event)) {
      return;
    }
    if (this.expandable) {
      this.expanded = !this.expanded;
      this.expandedChange.emit(this.expanded);
    }
  }
  getStackChildrenId() {
    return this.expanded ? `clr-stack-children-${this.uniqueId}` : null;
  }
  preventDefaultIfNotInputEvent(event) {
    if (eventIsInputEvent(event)) {
      return;
    }
    event.preventDefault();
  }
};
ClrStackBlock.ɵfac = function ClrStackBlock_Factory(t161) {
  return new (t161 || ClrStackBlock)(ɵɵdirectiveInject(ClrStackBlock, 12), ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrStackBlock.ɵcmp = ɵɵdefineComponent({
  type: ClrStackBlock,
  selectors: [["clr-stack-block"]],
  contentQueries: function ClrStackBlock_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrStackViewLabel, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.stackBlockTitle = _t.first);
    }
  },
  hostVars: 12,
  hostBindings: function ClrStackBlock_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("role", "heading")("aria-level", ctx.headingLevel);
      ɵɵclassProp("stack-block", true)("stack-block-expanded", ctx.expanded)("stack-block-expandable", ctx.expandable)("stack-block-changed", ctx.getChangedValue)("on-focus", ctx.onStackLabelFocus);
    }
  },
  inputs: {
    expanded: [InputFlags.None, "clrSbExpanded", "expanded"],
    expandable: [InputFlags.None, "clrSbExpandable", "expandable"],
    ariaLevel: [InputFlags.None, "clrStackViewLevel", "ariaLevel"],
    setChangedValue: [InputFlags.None, "clrSbNotifyChange", "setChangedValue"]
  },
  outputs: {
    expandedChange: "clrSbExpandedChange"
  },
  ngContentSelectors: _c75,
  decls: 9,
  vars: 9,
  consts: [[1, "stack-block-label", 3, "click", "keyup.enter", "keyup.space", "keydown.space", "focus", "blur", "id"], ["shape", "angle", "class", "stack-block-caret", 4, "ngIf"], ["class", "clr-sr-only", 4, "ngIf"], [1, "stack-view-key"], [1, "stack-block-content"], [1, "stack-children", 3, "clrExpandTrigger"], ["role", "region", 3, "height", 4, "ngIf"], ["shape", "angle", 1, "stack-block-caret"], [1, "clr-sr-only"], ["role", "region"]],
  template: function ClrStackBlock_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c74);
      ɵɵelementStart(0, "div", 0);
      ɵɵlistener("click", function ClrStackBlock_Template_div_click_0_listener($event) {
        return ctx.toggleExpand($event);
      })("keyup.enter", function ClrStackBlock_Template_div_keyup_enter_0_listener($event) {
        return ctx.toggleExpand($event);
      })("keyup.space", function ClrStackBlock_Template_div_keyup_space_0_listener($event) {
        return ctx.toggleExpand($event);
      })("keydown.space", function ClrStackBlock_Template_div_keydown_space_0_listener($event) {
        return ctx.preventDefaultIfNotInputEvent($event);
      })("focus", function ClrStackBlock_Template_div_focus_0_listener() {
        return ctx.focused = true;
      })("blur", function ClrStackBlock_Template_div_blur_0_listener() {
        return ctx.focused = false;
      });
      ɵɵtemplate(1, ClrStackBlock_cds_icon_1_Template, 1, 1, "cds-icon", 1)(2, ClrStackBlock_span_2_Template, 2, 1, "span", 2);
      ɵɵelementStart(3, "div", 3);
      ɵɵprojection(4);
      ɵɵelementEnd();
      ɵɵelementStart(5, "div", 4);
      ɵɵprojection(6, 1);
      ɵɵelementEnd()();
      ɵɵelementStart(7, "clr-expandable-animation", 5);
      ɵɵtemplate(8, ClrStackBlock_div_8_Template, 2, 4, "div", 6);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵproperty("id", ctx.uniqueId);
      ɵɵattribute("role", ctx.role)("tabindex", ctx.tabIndex)("aria-expanded", ctx.ariaExpanded)("aria-controls", ctx.getStackChildrenId());
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.expandable);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.getChangedValue);
      ɵɵadvance(5);
      ɵɵproperty("clrExpandTrigger", ctx.expanded);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.expanded);
    }
  },
  dependencies: [NgIf, CdsIconCustomTag, ClrExpandableAnimation],
  styles: ["[_nghost-%COMP%]{display:block}"]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrStackBlock, [{
    type: Component,
    args: [{
      selector: "clr-stack-block",
      template: `
    <!-- The 'preventDefault' for the space keydown event prevents the page
         from scrolling when a stack block is toggled via the space key. -->
    <div
      class="stack-block-label"
      (click)="toggleExpand($event)"
      (keyup.enter)="toggleExpand($event)"
      (keyup.space)="toggleExpand($event)"
      (keydown.space)="preventDefaultIfNotInputEvent($event)"
      (focus)="focused = true"
      (blur)="focused = false"
      [id]="uniqueId"
      [attr.role]="role"
      [attr.tabindex]="tabIndex"
      [attr.aria-expanded]="ariaExpanded"
      [attr.aria-controls]="getStackChildrenId()"
    >
      <cds-icon shape="angle" class="stack-block-caret" *ngIf="expandable" [attr.direction]="caretDirection"></cds-icon>
      <span class="clr-sr-only" *ngIf="getChangedValue">{{ commonStrings.keys.stackViewChanged }}</span>
      <div class="stack-view-key">
        <!-- This structure changed to fix #3567 and the a11y request was to move away from dl's -->
        <!-- I added the key class to update css targets for the original component style -->
        <ng-content select="clr-stack-label"></ng-content>
      </div>
      <div class="stack-block-content">
        <ng-content></ng-content>
      </div>
    </div>

    <clr-expandable-animation [clrExpandTrigger]="expanded" class="stack-children">
      <div
        [style.height]="expanded ? 'auto' : 0"
        role="region"
        *ngIf="expanded"
        [attr.id]="getStackChildrenId()"
        [attr.aria-labelledby]="labelledById"
      >
        <ng-content select="clr-stack-block"></ng-content>
      </div>
    </clr-expandable-animation>
  `,
      host: {
        "[class.stack-block]": "true",
        "[attr.role]": '"heading"',
        "[attr.aria-level]": "headingLevel"
      },
      styles: [":host{display:block}\n"]
    }]
  }], function() {
    return [{
      type: ClrStackBlock,
      decorators: [{
        type: SkipSelf
      }, {
        type: Optional
      }]
    }, {
      type: ClrCommonStringsService
    }];
  }, {
    expanded: [{
      type: Input,
      args: ["clrSbExpanded"]
    }, {
      type: HostBinding,
      args: ["class.stack-block-expanded"]
    }],
    expandable: [{
      type: Input,
      args: ["clrSbExpandable"]
    }, {
      type: HostBinding,
      args: ["class.stack-block-expandable"]
    }],
    ariaLevel: [{
      type: Input,
      args: ["clrStackViewLevel"]
    }],
    expandedChange: [{
      type: Output,
      args: ["clrSbExpandedChange"]
    }],
    stackBlockTitle: [{
      type: ContentChild,
      args: [ClrStackViewLabel]
    }],
    setChangedValue: [{
      type: Input,
      args: ["clrSbNotifyChange"]
    }],
    getChangedValue: [{
      type: HostBinding,
      args: ["class.stack-block-changed"]
    }],
    onStackLabelFocus: [{
      type: HostBinding,
      args: ["class.on-focus"]
    }]
  });
})();
function eventIsInputEvent(event) {
  const targetElement = event?.target;
  return targetElement?.tagName === "INPUT";
}
var ClrStackContentInput = class {
  constructor() {
    this.uniqueId = uniqueIdFactory();
  }
};
ClrStackContentInput.ɵfac = function ClrStackContentInput_Factory(t161) {
  return new (t161 || ClrStackContentInput)();
};
ClrStackContentInput.ɵdir = ɵɵdefineDirective({
  type: ClrStackContentInput,
  selectors: [["", "clrStackInput", ""]],
  hostVars: 3,
  hostBindings: function ClrStackContentInput_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("aria-labelledby", ctx.uniqueId);
      ɵɵclassProp("clr-input", true);
    }
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrStackContentInput, [{
    type: Directive,
    args: [{
      selector: "[clrStackInput]",
      host: {
        "[class.clr-input]": "true",
        "[attr.aria-labelledby]": "uniqueId"
      }
    }]
  }], null, null);
})();
var ClrStackView = class {
};
ClrStackView.ɵfac = function ClrStackView_Factory(t161) {
  return new (t161 || ClrStackView)();
};
ClrStackView.ɵcmp = ɵɵdefineComponent({
  type: ClrStackView,
  selectors: [["clr-stack-view"]],
  ngContentSelectors: _c77,
  decls: 3,
  vars: 0,
  consts: [[1, "stack-view"]],
  template: function ClrStackView_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c76);
      ɵɵprojection(0);
      ɵɵelementStart(1, "div", 0);
      ɵɵprojection(2, 1);
      ɵɵelementEnd();
    }
  },
  styles: ["[_nghost-%COMP%]{display:block}"]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrStackView, [{
    type: Component,
    args: [{
      selector: "clr-stack-view",
      template: `
    <ng-content select="clr-stack-header"></ng-content>
    <div class="stack-view"><ng-content></ng-content></div>
  `,
      styles: [":host{display:block}\n"]
    }]
  }], null, null);
})();
var ClrStackHeader = class {
  constructor(stackView) {
    this.stackView = stackView;
  }
};
ClrStackHeader.ɵfac = function ClrStackHeader_Factory(t161) {
  return new (t161 || ClrStackHeader)(ɵɵdirectiveInject(ClrStackView));
};
ClrStackHeader.ɵcmp = ɵɵdefineComponent({
  type: ClrStackHeader,
  selectors: [["clr-stack-header"]],
  ngContentSelectors: _c79,
  decls: 5,
  vars: 0,
  consts: [[1, "stack-header"], [1, "stack-title"], [1, "stack-actions"]],
  template: function ClrStackHeader_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c78);
      ɵɵelementStart(0, "div", 0)(1, "h4", 1);
      ɵɵprojection(2);
      ɵɵelementEnd();
      ɵɵelementStart(3, "span", 2);
      ɵɵprojection(4, 1);
      ɵɵelementEnd()();
    }
  },
  styles: ["[_nghost-%COMP%]{display:block}"]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrStackHeader, [{
    type: Component,
    args: [{
      selector: "clr-stack-header",
      template: `
    <div class="stack-header">
      <h4 class="stack-title"><ng-content></ng-content></h4>

      <span class="stack-actions">
        <ng-content select=".stack-action"></ng-content>
      </span>
    </div>
  `,
      styles: [":host{display:block}\n"]
    }]
  }], function() {
    return [{
      type: ClrStackView
    }];
  }, null);
})();
var CLR_STACK_VIEW_DIRECTIVES = [ClrStackView, ClrStackHeader, ClrStackBlock, ClrStackContentInput, ClrStackViewLabel, ClrStackViewCustomTags];
var ClrStackViewModule = class {
  constructor() {
    r24.addIcons(o28);
  }
};
ClrStackViewModule.ɵfac = function ClrStackViewModule_Factory(t161) {
  return new (t161 || ClrStackViewModule)();
};
ClrStackViewModule.ɵmod = ɵɵdefineNgModule({
  type: ClrStackViewModule,
  declarations: [ClrStackView, ClrStackHeader, ClrStackBlock, ClrStackContentInput, ClrStackViewLabel, ClrStackViewCustomTags],
  imports: [CommonModule, FormsModule, ClrIconModule, ClrExpandableAnimationModule],
  exports: [ClrStackView, ClrStackHeader, ClrStackBlock, ClrStackContentInput, ClrStackViewLabel, ClrStackViewCustomTags]
});
ClrStackViewModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, FormsModule, ClrIconModule, ClrExpandableAnimationModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrStackViewModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, ClrIconModule, ClrExpandableAnimationModule],
      declarations: [CLR_STACK_VIEW_DIRECTIVES],
      exports: [CLR_STACK_VIEW_DIRECTIVES]
    }]
  }], function() {
    return [];
  }, null);
})();
var TreeFeaturesService = class {
  constructor() {
    this.selectable = false;
    this.eager = true;
    this.childrenFetched = new Subject();
  }
};
TreeFeaturesService.ɵfac = function TreeFeaturesService_Factory(t161) {
  return new (t161 || TreeFeaturesService)();
};
TreeFeaturesService.ɵprov = ɵɵdefineInjectable({
  token: TreeFeaturesService,
  factory: TreeFeaturesService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TreeFeaturesService, [{
    type: Injectable
  }], null, null);
})();
function treeFeaturesFactory(existing) {
  return existing || new TreeFeaturesService();
}
var TREE_FEATURES_PROVIDER = {
  provide: TreeFeaturesService,
  useFactory: treeFeaturesFactory,
  /*
   * The Optional + SkipSelf pattern ensures that in case of nested components, only the root one will
   * instantiate a new service and all its children will reuse the root's instance.
   * If there are several roots (in this case, several independent trees on a page), each root will instantiate
   * its own service so they won't interfere with one another.
   *
   * TL;DR - Optional + SkipSelf = 1 instance of TreeFeaturesService per tree.
   */
  deps: [[new Optional(), new SkipSelf(), TreeFeaturesService]]
};
var RecursiveChildren = class {
  constructor(featuresService, expandService) {
    this.featuresService = featuresService;
    this.expandService = expandService;
    if (expandService) {
      this.subscription = this.expandService.expandChange.subscribe((value) => {
        if (!value && this.parent && !this.featuresService.eager && this.featuresService.recursion) {
          this.parent.clearChildren();
        }
      });
    }
  }
  shouldRender() {
    return this.featuresService.recursion && // In the smart case, we eagerly render all the recursive children
    // to make sure two-way bindings for selection are available.
    // They will be hidden with CSS by the parent.
    (this.featuresService.eager || !this.expandService || this.expandService.expanded);
  }
  getContext(node) {
    return {
      $implicit: node.model,
      clrModel: node
    };
  }
  ngOnDestroy() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }
};
RecursiveChildren.ɵfac = function RecursiveChildren_Factory(t161) {
  return new (t161 || RecursiveChildren)(ɵɵdirectiveInject(TreeFeaturesService), ɵɵdirectiveInject(IfExpandService, 8));
};
RecursiveChildren.ɵcmp = ɵɵdefineComponent({
  type: RecursiveChildren,
  selectors: [["clr-recursive-children"]],
  hostVars: 1,
  hostBindings: function RecursiveChildren_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("role", "group");
    }
  },
  inputs: {
    parent: "parent",
    children: "children"
  },
  decls: 1,
  vars: 1,
  consts: [[4, "ngIf"], [4, "ngFor", "ngForOf"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"]],
  template: function RecursiveChildren_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, RecursiveChildren_ng_container_0_Template, 2, 1, "ng-container", 0);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.shouldRender());
    }
  },
  dependencies: [NgForOf, NgIf, NgTemplateOutlet],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RecursiveChildren, [{
    type: Component,
    args: [{
      selector: "clr-recursive-children",
      template: `
    <ng-container *ngIf="shouldRender()">
      <ng-container *ngFor="let child of parent?.children || children">
        <ng-container *ngTemplateOutlet="featuresService.recursion.template; context: getContext(child)"></ng-container>
      </ng-container>
    </ng-container>
  `,
      host: {
        "[attr.role]": '"group"'
        // Safari + VO needs direct relationship between treeitem and group; no element should exist between them
      }
    }]
  }], function() {
    return [{
      type: TreeFeaturesService
    }, {
      type: IfExpandService,
      decorators: [{
        type: Optional
      }]
    }];
  }, {
    parent: [{
      type: Input,
      args: ["parent"]
    }],
    children: [{
      type: Input,
      args: ["children"]
    }]
  });
})();
function isPromise2(o88) {
  return o88 && typeof o88.then === "function";
}
var ClrSelectedState;
(function(ClrSelectedState2) {
  ClrSelectedState2[ClrSelectedState2["UNSELECTED"] = 0] = "UNSELECTED";
  ClrSelectedState2[ClrSelectedState2["SELECTED"] = 1] = "SELECTED";
  ClrSelectedState2[ClrSelectedState2["INDETERMINATE"] = 2] = "INDETERMINATE";
})(ClrSelectedState || (ClrSelectedState = {}));
var TreeNodeModel = class {
  constructor() {
    this.loading$ = new BehaviorSubject(false);
    this.selected = new BehaviorSubject(ClrSelectedState.UNSELECTED);
    this._loading = false;
  }
  get loading() {
    return this._loading;
  }
  set loading(isLoading) {
    this._loading = isLoading;
    this.loading$.next(isLoading);
  }
  destroy() {
    this.selected.complete();
  }
  // Propagate by default when eager, don't propagate in the lazy-loaded tree.
  setSelected(state2, propagateUp, propagateDown) {
    if (state2 === this.selected.value) {
      return;
    }
    this.selected.next(state2);
    if (propagateDown && state2 !== ClrSelectedState.INDETERMINATE && this.children) {
      this.children.forEach((child) => child.setSelected(state2, false, true));
    }
    if (propagateUp && this.parent) {
      this.parent._updateSelectionFromChildren();
    }
  }
  toggleSelection(propagate) {
    const newState = this.selected.value === ClrSelectedState.SELECTED ? ClrSelectedState.UNSELECTED : ClrSelectedState.SELECTED;
    this.setSelected(newState, true, propagate);
  }
  /*
   * Internal, but needs to be called by other nodes
   */
  _updateSelectionFromChildren() {
    const newState = this.computeSelectionStateFromChildren();
    if (newState === this.selected.value) {
      return;
    }
    this.selected.next(newState);
    if (this.parent) {
      this.parent._updateSelectionFromChildren();
    }
  }
  computeSelectionStateFromChildren() {
    let oneSelected = false;
    let oneUnselected = false;
    for (const child of this.children) {
      switch (child.selected.value) {
        case ClrSelectedState.INDETERMINATE:
          return ClrSelectedState.INDETERMINATE;
        case ClrSelectedState.SELECTED:
          oneSelected = true;
          if (oneUnselected) {
            return ClrSelectedState.INDETERMINATE;
          }
          break;
        case ClrSelectedState.UNSELECTED:
        default:
          oneUnselected = true;
          if (oneSelected) {
            return ClrSelectedState.INDETERMINATE;
          }
          break;
      }
    }
    if (!oneSelected) {
      return ClrSelectedState.UNSELECTED;
    } else if (!oneUnselected) {
      return ClrSelectedState.SELECTED;
    } else {
      return ClrSelectedState.UNSELECTED;
    }
  }
};
var RecursiveTreeNodeModel = class _RecursiveTreeNodeModel extends TreeNodeModel {
  constructor(model, parent, getChildren, featuresService) {
    super();
    this.getChildren = getChildren;
    this.featuresService = featuresService;
    this.childrenFetched = false;
    this._children = [];
    this.model = model;
    this.parent = parent;
  }
  get children() {
    this.fetchChildren();
    return this._children;
  }
  set children(value) {
    this._children = value;
  }
  destroy() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
    super.destroy();
  }
  clearChildren() {
    this._children.forEach((child) => child.destroy());
    delete this._children;
    this.childrenFetched = false;
  }
  fetchChildren() {
    if (this.childrenFetched) {
      return;
    }
    const asyncChildren = this.getChildren(this.model);
    if (isPromise2(asyncChildren)) {
      this.loading = true;
      asyncChildren.then((raw) => {
        this._children = this.wrapChildren(raw);
        this.loading = false;
      });
    } else if (isObservable(asyncChildren)) {
      this.loading = true;
      this.subscription = asyncChildren.subscribe((raw) => {
        this._children = this.wrapChildren(raw);
        this.loading = false;
      });
    } else if (asyncChildren) {
      this._children = this.wrapChildren(asyncChildren);
    } else {
      this._children = [];
    }
    this.childrenFetched = true;
    if (this.featuresService) {
      this.featuresService.childrenFetched.next();
    }
  }
  wrapChildren(rawModels) {
    return rawModels.map((m8) => new _RecursiveTreeNodeModel(m8, this, this.getChildren, this.featuresService));
  }
};
var ClrRecursiveForOf = class {
  constructor(template, featuresService, cdr) {
    this.template = template;
    this.featuresService = featuresService;
    this.cdr = cdr;
  }
  // I'm using OnChanges instead of OnInit to easily keep up to date with dynamic trees. Maybe optimizable later.
  ngOnChanges() {
    let wrapped;
    if (Array.isArray(this.nodes)) {
      wrapped = this.nodes.map((node) => new RecursiveTreeNodeModel(node, null, this.getChildren, this.featuresService));
    } else {
      wrapped = [new RecursiveTreeNodeModel(this.nodes, null, this.getChildren, this.featuresService)];
    }
    if (!this.childrenFetchSubscription) {
      this.childrenFetchSubscription = this.featuresService.childrenFetched.pipe(debounceTime(0)).subscribe(() => {
        this.cdr.detectChanges();
      });
    }
    this.featuresService.recursion = {
      template: this.template,
      root: wrapped
    };
  }
  ngOnDestroy() {
    if (this.childrenFetchSubscription) {
      this.childrenFetchSubscription.unsubscribe();
    }
  }
};
ClrRecursiveForOf.ɵfac = function ClrRecursiveForOf_Factory(t161) {
  return new (t161 || ClrRecursiveForOf)(ɵɵdirectiveInject(TemplateRef), ɵɵdirectiveInject(TreeFeaturesService), ɵɵdirectiveInject(ChangeDetectorRef));
};
ClrRecursiveForOf.ɵdir = ɵɵdefineDirective({
  type: ClrRecursiveForOf,
  selectors: [["", "clrRecursiveFor", "", "clrRecursiveForOf", ""]],
  inputs: {
    nodes: [InputFlags.None, "clrRecursiveForOf", "nodes"],
    getChildren: [InputFlags.None, "clrRecursiveForGetChildren", "getChildren"]
  },
  features: [ɵɵNgOnChangesFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrRecursiveForOf, [{
    type: Directive,
    args: [{
      selector: "[clrRecursiveFor][clrRecursiveForOf]"
    }]
  }], function() {
    return [{
      type: TemplateRef
    }, {
      type: TreeFeaturesService
    }, {
      type: ChangeDetectorRef
    }];
  }, {
    nodes: [{
      type: Input,
      args: ["clrRecursiveForOf"]
    }],
    getChildren: [{
      type: Input,
      args: ["clrRecursiveForGetChildren"]
    }]
  });
})();
var TreeFocusManagerService = class {
  constructor() {
    this._focusRequest = new Subject();
    this._focusChange = new Subject();
  }
  get focusRequest() {
    return this._focusRequest.asObservable();
  }
  get focusChange() {
    return this._focusChange.asObservable();
  }
  focusNode(model) {
    if (model) {
      this._focusRequest.next(model.nodeId);
    }
  }
  broadcastFocusedNode(nodeId) {
    if (this.focusedNodeId !== nodeId) {
      this.focusedNodeId = nodeId;
      this._focusChange.next(nodeId);
    }
  }
  focusParent(model) {
    if (model) {
      this.focusNode(model.parent);
    }
  }
  focusFirstVisibleNode() {
    const focusModel = this.rootNodeModels && this.rootNodeModels[0];
    this.focusNode(focusModel);
  }
  focusLastVisibleNode() {
    this.focusNode(this.findLastVisibleInTree());
  }
  focusNodeAbove(model) {
    this.focusNode(this.findNodeAbove(model));
  }
  focusNodeBelow(model) {
    this.focusNode(this.findNodeBelow(model));
  }
  focusNodeStartsWith(searchString, model) {
    this.focusNode(this.findClosestNodeStartsWith(searchString, model));
  }
  findSiblings(model) {
    if (model.parent) {
      return model.parent.children;
    } else {
      return this.rootNodeModels;
    }
  }
  findLastVisibleInNode(model) {
    if (!model) {
      return null;
    }
    if (model.expanded && model.children.length > 0) {
      const children = model.children;
      const lastChild = children[children.length - 1];
      return this.findLastVisibleInNode(lastChild);
    } else {
      return model;
    }
  }
  findNextFocusable(model) {
    if (!model) {
      return null;
    }
    const siblings = this.findSiblings(model);
    const selfIndex = siblings.indexOf(model);
    if (selfIndex < siblings.length - 1) {
      return siblings[selfIndex + 1];
    } else if (selfIndex === siblings.length - 1) {
      return this.findNextFocusable(model.parent);
    }
    return null;
  }
  findLastVisibleInTree() {
    const lastRootNode = this.rootNodeModels && this.rootNodeModels.length && this.rootNodeModels[this.rootNodeModels.length - 1];
    return this.findLastVisibleInNode(lastRootNode);
  }
  findNodeAbove(model) {
    if (!model) {
      return null;
    }
    const siblings = this.findSiblings(model);
    const selfIndex = siblings.indexOf(model);
    if (selfIndex === 0) {
      return model.parent;
    } else if (selfIndex > 0) {
      return this.findLastVisibleInNode(siblings[selfIndex - 1]);
    }
    return null;
  }
  findNodeBelow(model) {
    if (!model) {
      return null;
    }
    if (model.expanded && model.children.length > 0) {
      return model.children[0];
    } else {
      return this.findNextFocusable(model);
    }
  }
  findDescendentNodeStartsWith(searchString, model) {
    if (model.expanded && model.children.length > 0) {
      for (const childModel of model.children) {
        const found = this.findNodeStartsWith(searchString, childModel);
        if (found) {
          return found;
        }
      }
    }
    return null;
  }
  findSiblingNodeStartsWith(searchString, model) {
    const siblings = this.findSiblings(model);
    const selfIndex = siblings.indexOf(model);
    for (let i35 = selfIndex + 1; i35 < siblings.length; i35++) {
      const siblingModel = siblings[i35];
      const found = this.findNodeStartsWith(searchString, siblingModel);
      if (found) {
        return found;
      }
    }
    return null;
  }
  findRootNodeStartsWith(searchString, model) {
    for (const rootModel of this.rootNodeModels) {
      if (model.parent && model.parent === rootModel) {
        continue;
      }
      const found = this.findNodeStartsWith(searchString, rootModel);
      if (found) {
        return found;
      }
    }
    return null;
  }
  findNodeStartsWith(searchString, model) {
    if (!model) {
      return null;
    }
    if (model.textContent.startsWith(searchString)) {
      return model;
    }
    return this.findDescendentNodeStartsWith(searchString, model);
  }
  findClosestNodeStartsWith(searchString, model) {
    if (!model) {
      return null;
    }
    const foundFromDescendents = this.findDescendentNodeStartsWith(searchString, model);
    if (foundFromDescendents) {
      return foundFromDescendents;
    }
    const foundFromSiblings = this.findSiblingNodeStartsWith(searchString, model);
    if (foundFromSiblings) {
      return foundFromSiblings;
    }
    const foundFromRootNodes = this.findRootNodeStartsWith(searchString, model);
    if (foundFromRootNodes) {
      return foundFromRootNodes;
    }
    return this.findNodeStartsWith(searchString, model.parent);
  }
};
TreeFocusManagerService.ɵfac = function TreeFocusManagerService_Factory(t161) {
  return new (t161 || TreeFocusManagerService)();
};
TreeFocusManagerService.ɵprov = ɵɵdefineInjectable({
  token: TreeFocusManagerService,
  factory: TreeFocusManagerService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TreeFocusManagerService, [{
    type: Injectable
  }], null, null);
})();
var DeclarativeTreeNodeModel = class extends TreeNodeModel {
  constructor(parent) {
    super();
    this.parent = parent;
    if (parent) {
      parent._addChild(this);
    }
    this.children = [];
  }
  destroy() {
    if (this.parent) {
      this.parent._removeChild(this);
    }
    super.destroy();
  }
  _addChild(child) {
    this.children.push(child);
  }
  _removeChild(child) {
    const index = this.children.indexOf(child);
    if (index > -1) {
      this.children.splice(index, 1);
    }
  }
};
var ClrTreeNodeLink = class {
  constructor(el) {
    this.el = el;
  }
  get active() {
    return this.el.nativeElement.classList.contains("active");
  }
  activate() {
    if (this.el.nativeElement && this.el.nativeElement.click) {
      this.el.nativeElement.click();
    }
  }
};
ClrTreeNodeLink.ɵfac = function ClrTreeNodeLink_Factory(t161) {
  return new (t161 || ClrTreeNodeLink)(ɵɵdirectiveInject(ElementRef));
};
ClrTreeNodeLink.ɵdir = ɵɵdefineDirective({
  type: ClrTreeNodeLink,
  selectors: [["", 8, "clr-treenode-link"]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTreeNodeLink, [{
    type: Directive,
    args: [{
      selector: ".clr-treenode-link"
    }]
  }], function() {
    return [{
      type: ElementRef
    }];
  }, null);
})();
var LVIEW_CONTEXT_INDEX = 8;
var TREE_TYPE_AHEAD_TIMEOUT = 200;
var ClrTreeNode = class {
  constructor(platformId, parent, featuresService, expandService, commonStrings, focusManager, elementRef, injector) {
    this.platformId = platformId;
    this.featuresService = featuresService;
    this.expandService = expandService;
    this.commonStrings = commonStrings;
    this.focusManager = focusManager;
    this.elementRef = elementRef;
    this.selectedChange = new EventEmitter(false);
    this.expandedChange = new EventEmitter();
    this.STATES = ClrSelectedState;
    this.isModelLoading = false;
    this.nodeId = uniqueIdFactory();
    this.contentContainerTabindex = -1;
    this.skipEmitChange = false;
    this.typeAheadKeyBuffer = "";
    this.typeAheadKeyEvent = new Subject();
    this.subscriptions = [];
    if (this.featuresService.recursion) {
      if (injector.view) {
        this._model = injector.view.context.clrModel;
      } else {
        this._model = injector._lView[LVIEW_CONTEXT_INDEX].clrModel;
      }
    } else {
      this._model = new DeclarativeTreeNodeModel(parent ? parent._model : null);
    }
    this._model.nodeId = this.nodeId;
  }
  get selected() {
    return this._model.selected.value;
  }
  set selected(value) {
    this.featuresService.selectable = true;
    if (value === null || typeof value === "undefined") {
      value = ClrSelectedState.UNSELECTED;
    }
    if (typeof value === "boolean") {
      value = value ? ClrSelectedState.SELECTED : ClrSelectedState.UNSELECTED;
    }
    this.skipEmitChange = true;
    this._model.setSelected(value, this.featuresService.eager, this.featuresService.eager);
    this.skipEmitChange = false;
  }
  // I'm caving on this, for tree nodes I think we can tolerate having a two-way binding on the component
  // rather than enforce the clrIfExpanded structural directive for dynamic cases. Mostly because for the smart
  // case, you can't use a structural directive, it would need to go on an ng-container.
  get expanded() {
    return this.expandService.expanded;
  }
  set expanded(value) {
    this.expandService.expanded = value;
  }
  set clrForTypeAhead(value) {
    this._model.textContent = trimAndLowerCase(value || this.elementRef.nativeElement.textContent);
  }
  get ariaSelected() {
    if (this.isSelectable()) {
      return this._model.selected.value === ClrSelectedState.SELECTED;
    } else if (this.treeNodeLink?.active) {
      return true;
    } else {
      return null;
    }
  }
  get treeNodeContentTextOnly() {
    return this.treeNodeLinkList.length === 0;
  }
  get treeNodeLink() {
    return this.treeNodeLinkList && this.treeNodeLinkList.first;
  }
  get isParent() {
    return this._model.children && this._model.children.length > 0;
  }
  ngOnInit() {
    this._model.expanded = this.expanded;
    this.subscriptions.push(this._model.selected.pipe(filter(() => !this.skipEmitChange)).subscribe((value) => {
      this.selectedChange.emit(value);
    }));
    this.subscriptions.push(this.expandService.expandChange.subscribe((value) => {
      this.expandedChange.emit(value);
      this._model.expanded = value;
    }));
    this.subscriptions.push(this.focusManager.focusRequest.subscribe((nodeId) => {
      if (this.nodeId === nodeId) {
        this.focusTreeNode();
      }
    }), this.focusManager.focusChange.subscribe((nodeId) => {
      this.checkTabIndex(nodeId);
    }));
    this.subscriptions.push(this._model.loading$.pipe(debounceTime(0)).subscribe((isLoading) => this.isModelLoading = isLoading));
  }
  ngAfterContentInit() {
    this.subscriptions.push(this.typeAheadKeyEvent.pipe(debounceTime(TREE_TYPE_AHEAD_TIMEOUT)).subscribe((bufferedKeys) => {
      this.focusManager.focusNodeStartsWith(bufferedKeys, this._model);
      this.typeAheadKeyBuffer = "";
    }));
  }
  ngAfterViewInit() {
    if (!this._model.textContent) {
      this._model.textContent = trimAndLowerCase(this.elementRef.nativeElement.textContent);
    }
  }
  ngOnDestroy() {
    this._model.destroy();
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  isExpandable() {
    if (typeof this.expandable !== "undefined") {
      return this.expandable;
    }
    return !!this.expandService.expandable || this.isParent;
  }
  isSelectable() {
    return this.featuresService.selectable;
  }
  focusTreeNode() {
    const containerEl = this.contentContainer.nativeElement;
    if (isPlatformBrowser(this.platformId) && document.activeElement !== containerEl) {
      this.setTabIndex(0);
      containerEl.focus();
      containerEl.scrollIntoView({
        block: "nearest",
        inline: "nearest"
      });
    }
  }
  broadcastFocusOnContainer() {
    this.focusManager.broadcastFocusedNode(this.nodeId);
  }
  onKeyDown(event) {
    preventArrowKeyScroll(event);
    switch (normalizeKey(event.key)) {
      case Keys.ArrowUp:
        this.focusManager.focusNodeAbove(this._model);
        break;
      case Keys.ArrowDown:
        this.focusManager.focusNodeBelow(this._model);
        break;
      case Keys.ArrowRight:
        this.expandOrFocusFirstChild();
        break;
      case Keys.ArrowLeft:
        this.collapseOrFocusParent();
        break;
      case Keys.Home:
        event.preventDefault();
        this.focusManager.focusFirstVisibleNode();
        break;
      case Keys.End:
        event.preventDefault();
        this.focusManager.focusLastVisibleNode();
        break;
      case Keys.Enter:
        this.toggleExpandOrTriggerDefault();
        break;
      case Keys.Space:
      case Keys.Spacebar:
        event.preventDefault();
        this.toggleExpandOrTriggerDefault();
        break;
      default:
        if (this._model.textContent && isKeyEitherLetterOrNumber(event)) {
          this.typeAheadKeyBuffer += event.key;
          this.typeAheadKeyEvent.next(this.typeAheadKeyBuffer);
          return;
        }
        break;
    }
    this.typeAheadKeyBuffer = "";
  }
  setTabIndex(value) {
    this.contentContainerTabindex = value;
    this.contentContainer.nativeElement.setAttribute("tabindex", value);
  }
  checkTabIndex(nodeId) {
    if (isPlatformBrowser(this.platformId) && this.nodeId !== nodeId && this.contentContainerTabindex !== -1) {
      this.setTabIndex(-1);
    }
  }
  toggleExpandOrTriggerDefault() {
    if (this.isExpandable() && !this.isSelectable()) {
      this.expandService.expanded = !this.expanded;
    } else {
      this.triggerDefaultAction();
    }
  }
  expandOrFocusFirstChild() {
    if (this.expanded) {
      if (this.isParent) {
        this.focusManager.focusNodeBelow(this._model);
      }
    } else {
      if (this.isExpandable()) {
        this.expandService.expanded = true;
      }
    }
  }
  collapseOrFocusParent() {
    if (this.expanded) {
      this.expandService.expanded = false;
    } else {
      this.focusManager.focusParent(this._model);
    }
  }
  triggerDefaultAction() {
    if (this.treeNodeLink) {
      this.treeNodeLink.activate();
    } else {
      if (this.isSelectable()) {
        this._model.toggleSelection(this.featuresService.eager);
      }
    }
  }
};
ClrTreeNode.ɵfac = function ClrTreeNode_Factory(t161) {
  return new (t161 || ClrTreeNode)(ɵɵdirectiveInject(PLATFORM_ID), ɵɵdirectiveInject(ClrTreeNode, 12), ɵɵdirectiveInject(TreeFeaturesService), ɵɵdirectiveInject(IfExpandService), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(TreeFocusManagerService), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Injector));
};
ClrTreeNode.ɵcmp = ɵɵdefineComponent({
  type: ClrTreeNode,
  selectors: [["clr-tree-node"]],
  contentQueries: function ClrTreeNode_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrTreeNodeLink, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.treeNodeLinkList = _t);
    }
  },
  viewQuery: function ClrTreeNode_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c80, 7, ElementRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.contentContainer = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function ClrTreeNode_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-tree-node", true);
    }
  },
  inputs: {
    expandable: [InputFlags.None, "clrExpandable", "expandable"],
    selected: [InputFlags.None, "clrSelected", "selected"],
    expanded: [InputFlags.None, "clrExpanded", "expanded"],
    clrForTypeAhead: "clrForTypeAhead"
  },
  outputs: {
    selectedChange: "clrSelectedChange",
    expandedChange: "clrExpandedChange"
  },
  features: [ɵɵProvidersFeature([TREE_FEATURES_PROVIDER, IfExpandService, {
    provide: LoadingListener,
    useExisting: IfExpandService
  }])],
  ngContentSelectors: _c82,
  decls: 12,
  vars: 9,
  consts: [["contentContainer", ""], ["treenodeContent", ""], ["role", "treeitem", "tabindex", "-1", 1, "clr-tree-node-content-container", 3, "keydown", "focus"], ["aria-hidden", "true", "type", "button", "tabindex", "-1", "class", "clr-treenode-caret", 3, "click", "focus", 4, "ngIf"], ["class", "clr-treenode-spinner-container", 4, "ngIf"], ["class", "clr-checkbox-wrapper clr-treenode-checkbox", 4, "ngIf"], ["class", "clr-treenode-content", 3, "clr-treenode-text-only", "mouseup", 4, "ngIf"], [1, "clr-treenode-children"], [3, "parent"], ["aria-hidden", "true", "type", "button", "tabindex", "-1", 1, "clr-treenode-caret", 3, "click", "focus"], ["shape", "angle", 1, "clr-treenode-caret-icon"], [1, "clr-treenode-spinner-container"], [1, "clr-treenode-spinner", "spinner"], [1, "clr-checkbox-wrapper", "clr-treenode-checkbox"], ["aria-hidden", "true", "type", "checkbox", "tabindex", "-1", 1, "clr-checkbox", 3, "change", "focus", "id", "checked", "indeterminate"], [1, "clr-control-label", 3, "for"], [3, "ngTemplateOutlet"], [1, "clr-treenode-content", 3, "mouseup"], ["class", "clr-sr-only", 4, "ngIf"], [1, "clr-sr-only"], [4, "ngIf"]],
  template: function ClrTreeNode_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = ɵɵgetCurrentView();
      ɵɵprojectionDef(_c81);
      ɵɵelementStart(0, "div", 2, 0);
      ɵɵlistener("keydown", function ClrTreeNode_Template_div_keydown_0_listener($event) {
        ɵɵrestoreView(_r1);
        return ɵɵresetView(ctx.onKeyDown($event));
      })("focus", function ClrTreeNode_Template_div_focus_0_listener() {
        ɵɵrestoreView(_r1);
        return ɵɵresetView(ctx.broadcastFocusOnContainer());
      });
      ɵɵtemplate(2, ClrTreeNode_button_2_Template, 2, 1, "button", 3)(3, ClrTreeNode_div_3_Template, 2, 0, "div", 4)(4, ClrTreeNode_div_4_Template, 4, 7, "div", 5)(5, ClrTreeNode_div_5_Template, 2, 3, "div", 6)(6, ClrTreeNode_ng_template_6_Template, 2, 1, "ng-template", null, 1, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
      ɵɵelementStart(8, "div", 7);
      ɵɵprojection(9);
      ɵɵprojection(10, 1);
      ɵɵelement(11, "clr-recursive-children", 8);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵattribute("aria-expanded", ctx.isExpandable() ? ctx.expanded : null)("aria-selected", ctx.ariaSelected);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.isExpandable() && !ctx.isModelLoading && !ctx.expandService.loading);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.expandService.loading || ctx.isModelLoading);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.featuresService.selectable);
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.featuresService.selectable);
      ɵɵadvance(3);
      ɵɵproperty("@toggleChildrenAnim", ctx.expandService.expanded ? "expanded" : "collapsed");
      ɵɵattribute("role", ctx.isExpandable() && !ctx.featuresService.recursion ? "group" : null);
      ɵɵadvance(3);
      ɵɵproperty("parent", ctx._model);
    }
  },
  dependencies: [NgIf, NgTemplateOutlet, CdsIconCustomTag, RecursiveChildren],
  encapsulation: 2,
  data: {
    animation: [trigger("toggleChildrenAnim", [transition("collapsed => expanded", [style({
      height: 0
    }), animate(200, style({
      height: "*"
    }))]), transition("expanded => collapsed", [style({
      height: "*"
    }), animate(200, style({
      height: 0
    }))]), state("expanded", style({
      height: "*",
      "overflow-y": "visible"
    })), state("collapsed", style({
      height: 0
    }))])]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTreeNode, [{
    type: Component,
    args: [{
      selector: "clr-tree-node",
      providers: [TREE_FEATURES_PROVIDER, IfExpandService, {
        provide: LoadingListener,
        useExisting: IfExpandService
      }],
      animations: [trigger("toggleChildrenAnim", [transition("collapsed => expanded", [style({
        height: 0
      }), animate(200, style({
        height: "*"
      }))]), transition("expanded => collapsed", [style({
        height: "*"
      }), animate(200, style({
        height: 0
      }))]), state("expanded", style({
        height: "*",
        "overflow-y": "visible"
      })), state("collapsed", style({
        height: 0
      }))])],
      host: {
        "[class.clr-tree-node]": "true"
      },
      template: `<!--
  ~ Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
  ~ This software is released under MIT license.
  ~ The full license information can be found in LICENSE in the root directory of this project.
  -->

<div
  #contentContainer
  role="treeitem"
  class="clr-tree-node-content-container"
  tabindex="-1"
  [attr.aria-expanded]="isExpandable() ? expanded : null"
  [attr.aria-selected]="ariaSelected"
  (keydown)="onKeyDown($event)"
  (focus)="broadcastFocusOnContainer()"
>
  <button
    *ngIf="isExpandable() && !isModelLoading && !expandService.loading"
    aria-hidden="true"
    type="button"
    tabindex="-1"
    class="clr-treenode-caret"
    (click)="expandService.toggle();"
    (focus)="focusTreeNode()"
  >
    <cds-icon
      class="clr-treenode-caret-icon"
      shape="angle"
      [attr.direction]="expandService.expanded ? 'down' : 'right'"
    ></cds-icon>
  </button>
  <div class="clr-treenode-spinner-container" *ngIf="expandService.loading || isModelLoading">
    <span class="clr-treenode-spinner spinner"></span>
  </div>
  <div class="clr-checkbox-wrapper clr-treenode-checkbox" *ngIf="featuresService.selectable">
    <input
      aria-hidden="true"
      type="checkbox"
      id="{{nodeId}}-check"
      class="clr-checkbox"
      [checked]="_model.selected.value === STATES.SELECTED"
      [indeterminate]="_model.selected.value === STATES.INDETERMINATE"
      (change)="_model.toggleSelection(featuresService.eager)"
      (focus)="focusTreeNode()"
      tabindex="-1"
    />
    <label for="{{nodeId}}-check" class="clr-control-label">
      <ng-container [ngTemplateOutlet]="treenodeContent"></ng-container>
    </label>
  </div>
  <div
    class="clr-treenode-content"
    [class.clr-treenode-text-only]="treeNodeContentTextOnly"
    (mouseup)="focusTreeNode()"
    *ngIf="!featuresService.selectable"
  >
    <ng-container [ngTemplateOutlet]="treenodeContent"></ng-container>
  </div>

  <ng-template #treenodeContent>
    <ng-content></ng-content>
    <div class="clr-sr-only" *ngIf="featuresService.selectable || ariaSelected">
      <span *ngIf="ariaSelected"> selected</span>
      <span *ngIf="!ariaSelected"> unselected</span>
    </div>
  </ng-template>
</div>
<div
  class="clr-treenode-children"
  [@toggleChildrenAnim]="expandService.expanded ? 'expanded' : 'collapsed'"
  [attr.role]="isExpandable() && !featuresService.recursion ? 'group' : null"
>
  <ng-content select="clr-tree-node"></ng-content>
  <ng-content select="[clrIfExpanded]"></ng-content>
  <clr-recursive-children [parent]="_model"></clr-recursive-children>
</div>
`
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }, {
      type: ClrTreeNode,
      decorators: [{
        type: Optional
      }, {
        type: SkipSelf
      }]
    }, {
      type: TreeFeaturesService
    }, {
      type: IfExpandService
    }, {
      type: ClrCommonStringsService
    }, {
      type: TreeFocusManagerService
    }, {
      type: ElementRef
    }, {
      type: Injector
    }];
  }, {
    expandable: [{
      type: Input,
      args: ["clrExpandable"]
    }],
    selectedChange: [{
      type: Output,
      args: ["clrSelectedChange"]
    }],
    expandedChange: [{
      type: Output,
      args: ["clrExpandedChange"]
    }],
    contentContainer: [{
      type: ViewChild,
      args: ["contentContainer", {
        read: ElementRef,
        static: true
      }]
    }],
    treeNodeLinkList: [{
      type: ContentChildren,
      args: [ClrTreeNodeLink, {
        descendants: false
      }]
    }],
    selected: [{
      type: Input,
      args: ["clrSelected"]
    }],
    expanded: [{
      type: Input,
      args: ["clrExpanded"]
    }],
    clrForTypeAhead: [{
      type: Input,
      args: ["clrForTypeAhead"]
    }]
  });
})();
function trimAndLowerCase(value) {
  return value.toLocaleLowerCase().trim();
}
var ClrTree = class {
  constructor(featuresService, focusManagerService, {
    nativeElement
  }, renderer, ngZone) {
    this.featuresService = featuresService;
    this.focusManagerService = focusManagerService;
    this.subscriptions = [];
    const subscription = ngZone.runOutsideAngular(() => fromEvent(nativeElement, "focusin").subscribe((event) => {
      if (event.target === nativeElement) {
        this.focusManagerService.focusFirstVisibleNode();
        renderer.removeAttribute(nativeElement, "tabindex");
      }
    }));
    this.subscriptions.push(subscription);
  }
  set lazy(value) {
    this.featuresService.eager = !value;
  }
  get isMultiSelectable() {
    return this.featuresService.selectable && this.rootNodes.length > 0;
  }
  ngAfterContentInit() {
    this.setRootNodes();
    this.subscriptions.push(this.rootNodes.changes.subscribe(() => {
      this.setRootNodes();
    }));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  setRootNodes() {
    this.focusManagerService.rootNodeModels = this.rootNodes.map((node) => node._model).filter((node) => !node.parent);
  }
};
ClrTree.ɵfac = function ClrTree_Factory(t161) {
  return new (t161 || ClrTree)(ɵɵdirectiveInject(TreeFeaturesService), ɵɵdirectiveInject(TreeFocusManagerService), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NgZone));
};
ClrTree.ɵcmp = ɵɵdefineComponent({
  type: ClrTree,
  selectors: [["clr-tree"]],
  contentQueries: function ClrTree_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrTreeNode, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.rootNodes = _t);
    }
  },
  hostAttrs: ["tabindex", "0"],
  hostVars: 2,
  hostBindings: function ClrTree_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("role", "tree")("aria-multiselectable", ctx.isMultiSelectable);
    }
  },
  inputs: {
    lazy: [InputFlags.None, "clrLazy", "lazy"]
  },
  features: [ɵɵProvidersFeature([TREE_FEATURES_PROVIDER, TreeFocusManagerService])],
  ngContentSelectors: _c02,
  decls: 2,
  vars: 1,
  consts: [[3, "children", 4, "ngIf"], [3, "children"]],
  template: function ClrTree_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
      ɵɵtemplate(1, ClrTree_clr_recursive_children_1_Template, 1, 1, "clr-recursive-children", 0);
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.featuresService.recursion);
    }
  },
  dependencies: [NgIf, RecursiveChildren],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTree, [{
    type: Component,
    args: [{
      selector: "clr-tree",
      template: `
    <ng-content></ng-content>
    <clr-recursive-children
      *ngIf="featuresService.recursion"
      [children]="featuresService.recursion.root"
    ></clr-recursive-children>
  `,
      providers: [TREE_FEATURES_PROVIDER, TreeFocusManagerService],
      host: {
        tabindex: "0",
        "[attr.role]": '"tree"',
        "[attr.aria-multiselectable]": "isMultiSelectable"
      }
    }]
  }], function() {
    return [{
      type: TreeFeaturesService
    }, {
      type: TreeFocusManagerService
    }, {
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: NgZone
    }];
  }, {
    rootNodes: [{
      type: ContentChildren,
      args: [ClrTreeNode]
    }],
    lazy: [{
      type: Input,
      args: ["clrLazy"]
    }]
  });
})();
var CLR_TREE_VIEW_DIRECTIVES = [ClrTree, ClrTreeNode, ClrRecursiveForOf, ClrTreeNodeLink];
var ClrTreeViewModule = class {
  constructor() {
    r24.addIcons(o28);
  }
};
ClrTreeViewModule.ɵfac = function ClrTreeViewModule_Factory(t161) {
  return new (t161 || ClrTreeViewModule)();
};
ClrTreeViewModule.ɵmod = ɵɵdefineNgModule({
  type: ClrTreeViewModule,
  declarations: [ClrTree, ClrTreeNode, ClrRecursiveForOf, ClrTreeNodeLink, RecursiveChildren],
  imports: [CommonModule, ClrIconModule, ClrLoadingModule],
  exports: [ClrTree, ClrTreeNode, ClrRecursiveForOf, ClrTreeNodeLink]
});
ClrTreeViewModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrIconModule, ClrLoadingModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTreeViewModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrIconModule, ClrLoadingModule],
      declarations: [CLR_TREE_VIEW_DIRECTIVES, RecursiveChildren],
      exports: [CLR_TREE_VIEW_DIRECTIVES]
    }]
  }], function() {
    return [];
  }, null);
})();
var ClrDataModule = class {
};
ClrDataModule.ɵfac = function ClrDataModule_Factory(t161) {
  return new (t161 || ClrDataModule)();
};
ClrDataModule.ɵmod = ɵɵdefineNgModule({
  type: ClrDataModule,
  exports: [ClrDatagridModule, ClrStackViewModule, ClrTreeViewModule]
});
ClrDataModule.ɵinj = ɵɵdefineInjector({
  imports: [ClrDatagridModule, ClrStackViewModule, ClrTreeViewModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDataModule, [{
    type: NgModule,
    args: [{
      exports: [ClrDatagridModule, ClrStackViewModule, ClrTreeViewModule]
    }]
  }], null, null);
})();
function wrapObservable(observable, onSubscribe, onUnsubscribe) {
  return Observable.create((observer) => {
    onSubscribe(observer);
    const subscription = observable.subscribe(observer);
    return () => {
      subscription.unsubscribe();
      if (onUnsubscribe) {
        onUnsubscribe(observer);
      }
    };
  });
}
var DropdownFocusHandler = class {
  constructor(renderer, parent, toggleService, focusService, platformId) {
    this.renderer = renderer;
    this.parent = parent;
    this.toggleService = toggleService;
    this.focusService = focusService;
    this.platformId = platformId;
    this.id = uniqueIdFactory();
    this.focusBackOnTriggerWhenClosed = false;
    this._unlistenFuncs = [];
    this.resetChildren();
    this.moveToFirstItemWhenOpen();
    if (!this.parent) {
      this.handleRootFocus();
    }
  }
  get trigger() {
    return this._trigger;
  }
  set trigger(el) {
    this._trigger = el;
    if (this.parent) {
      this._unlistenFuncs.push(this.renderer.listen(el, "keydown.arrowright", (event) => this.toggleService.toggleWithEvent(event)));
    } else {
      this._unlistenFuncs.push(this.renderer.listen(el, "keydown.arrowup", (event) => this.toggleService.toggleWithEvent(event)));
      this._unlistenFuncs.push(this.renderer.listen(el, "keydown.arrowdown", (event) => this.toggleService.toggleWithEvent(event)));
      this.focusService.listenToArrowKeys(el);
    }
  }
  get container() {
    return this._container;
  }
  set container(el) {
    this._container = el;
    this._unlistenFuncs.push(this.renderer.listen(el, "keydown.tab", (event) => this.toggleService.toggleWithEvent(event)));
    if (this.parent) {
      this._unlistenFuncs.push(this.renderer.listen(el, "keydown.escape", (event) => {
        this.focusService.move(ArrowKeyDirection.LEFT);
        event.stopPropagation();
      }));
    } else {
      this.focusService.registerContainer(el);
      this._unlistenFuncs.push(this.renderer.listen(el, "keydown.escape", (event) => this.toggleService.toggleWithEvent(event)));
      this._unlistenFuncs.push(this.renderer.listen(el, "blur", (event) => {
        this.children.pipe(take(1)).subscribe((items) => items.forEach((item) => item.blur()));
        const target = event.relatedTarget || document.activeElement;
        if (target && isPlatformBrowser(this.platformId)) {
          if (el.contains(target) || target === this.trigger) {
            return;
          }
        }
        this.focusBackOnTriggerWhenClosed = false;
        this.toggleService.open = false;
      }));
    }
  }
  ngOnDestroy() {
    this._unlistenFuncs.forEach((unlisten) => unlisten());
    this.focusService.detachListeners();
  }
  /**
   * If the dropdown was opened by clicking on the trigger, we automatically move to the first item
   */
  moveToFirstItemWhenOpen() {
    const subscription = this.toggleService.openChange.subscribe((open) => {
      if (open && this.toggleService.originalEvent) {
        setTimeout(() => {
          this.focusService.moveTo(this);
          if (this.parent) {
            this.focusService.move(ArrowKeyDirection.RIGHT);
          } else {
            this.focusService.move(ArrowKeyDirection.DOWN);
          }
        });
      }
    });
    this._unlistenFuncs.push(() => subscription.unsubscribe());
  }
  /**
   * Focus on the menu when it opens, and focus back on the root trigger when the whole dropdown becomes closed
   */
  handleRootFocus() {
    const subscription = this.toggleService.openChange.subscribe((open) => {
      if (!open) {
        this.focusService.reset(this);
        if (this.focusBackOnTriggerWhenClosed) {
          this.focus();
        }
      }
      this.focusBackOnTriggerWhenClosed = open;
    });
    this._unlistenFuncs.push(() => subscription.unsubscribe());
  }
  focus() {
    if (this.trigger && isPlatformBrowser(this.platformId)) {
      this.trigger.focus();
    }
  }
  blur() {
    if (this.trigger && isPlatformBrowser(this.platformId)) {
      this.trigger.blur();
    }
  }
  activate() {
    if (isPlatformBrowser(this.platformId)) {
      this.trigger.click();
    }
  }
  resetChildren() {
    this.children = new ReplaySubject(1);
    if (this.parent) {
      this.right = this.openAndGetChildren().pipe(map((all) => all[0]));
    } else {
      this.down = this.openAndGetChildren().pipe(map((all) => all[0]));
      this.up = this.openAndGetChildren().pipe(map((all) => all[all.length - 1]));
    }
  }
  addChildren(children) {
    Linkers.linkVertical(children);
    if (this.parent) {
      Linkers.linkParent(children, this.closeAndGetThis(), ArrowKeyDirection.LEFT);
    }
    this.children.next(children);
  }
  openAndGetChildren() {
    return wrapObservable(this.children, () => this.toggleService.open = true);
  }
  closeAndGetThis() {
    return wrapObservable(of(this), () => this.toggleService.open = false);
  }
};
DropdownFocusHandler.ɵfac = function DropdownFocusHandler_Factory(t161) {
  return new (t161 || DropdownFocusHandler)(ɵɵinject(Renderer2), ɵɵinject(DropdownFocusHandler, 12), ɵɵinject(ClrPopoverToggleService), ɵɵinject(FocusService$1), ɵɵinject(PLATFORM_ID));
};
DropdownFocusHandler.ɵprov = ɵɵdefineInjectable({
  token: DropdownFocusHandler,
  factory: DropdownFocusHandler.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DropdownFocusHandler, [{
    type: Injectable
  }], function() {
    return [{
      type: Renderer2
    }, {
      type: DropdownFocusHandler,
      decorators: [{
        type: SkipSelf
      }, {
        type: Optional
      }]
    }, {
      type: ClrPopoverToggleService
    }, {
      type: FocusService$1
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }];
  }, null);
})();
var DROPDOWN_FOCUS_HANDLER_PROVIDER = customFocusableItemProvider(DropdownFocusHandler);
var RootDropdownService = class {
  constructor() {
    this._changes = new Subject();
  }
  get changes() {
    return this._changes.asObservable();
  }
  closeMenus() {
    this._changes.next(false);
  }
};
RootDropdownService.ɵfac = function RootDropdownService_Factory(t161) {
  return new (t161 || RootDropdownService)();
};
RootDropdownService.ɵprov = ɵɵdefineInjectable({
  token: RootDropdownService,
  factory: RootDropdownService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RootDropdownService, [{
    type: Injectable
  }], null, null);
})();
function clrRootDropdownFactory(existing) {
  return existing || new RootDropdownService();
}
var ROOT_DROPDOWN_PROVIDER = {
  provide: RootDropdownService,
  useFactory: clrRootDropdownFactory,
  deps: [[new Optional(), new SkipSelf(), RootDropdownService]]
};
var ClrDropdown = class {
  constructor(parent, toggleService, focusHandler, cdr, dropdownService) {
    this.parent = parent;
    this.toggleService = toggleService;
    this.focusHandler = focusHandler;
    this.cdr = cdr;
    this.isMenuClosable = true;
    this.subscriptions = [];
    this.subscriptions.push(dropdownService.changes.subscribe((value) => this.toggleService.open = value));
    this.subscriptions.push(toggleService.openChange.subscribe(() => this.cdr.markForCheck()));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
};
ClrDropdown.ɵfac = function ClrDropdown_Factory(t161) {
  return new (t161 || ClrDropdown)(ɵɵdirectiveInject(ClrDropdown, 12), ɵɵdirectiveInject(ClrPopoverToggleService), ɵɵdirectiveInject(DropdownFocusHandler), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(RootDropdownService));
};
ClrDropdown.ɵcmp = ɵɵdefineComponent({
  type: ClrDropdown,
  selectors: [["clr-dropdown"]],
  hostVars: 4,
  hostBindings: function ClrDropdown_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("dropdown", true)("open", ctx.toggleService.open);
    }
  },
  inputs: {
    isMenuClosable: [InputFlags.None, "clrCloseMenuOnItemClick", "isMenuClosable"]
  },
  features: [ɵɵProvidersFeature([ROOT_DROPDOWN_PROVIDER, FOCUS_SERVICE_PROVIDER, DROPDOWN_FOCUS_HANDLER_PROVIDER]), ɵɵHostDirectivesFeature([ClrPopoverHostDirective])],
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrDropdown_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDropdown, [{
    type: Component,
    args: [{
      selector: "clr-dropdown",
      template: "<ng-content></ng-content>",
      host: {
        "[class.dropdown]": "true",
        "[class.open]": "toggleService.open"
      },
      providers: [ROOT_DROPDOWN_PROVIDER, FOCUS_SERVICE_PROVIDER, DROPDOWN_FOCUS_HANDLER_PROVIDER],
      hostDirectives: [ClrPopoverHostDirective]
    }]
  }], function() {
    return [{
      type: ClrDropdown,
      decorators: [{
        type: SkipSelf
      }, {
        type: Optional
      }]
    }, {
      type: ClrPopoverToggleService
    }, {
      type: DropdownFocusHandler
    }, {
      type: ChangeDetectorRef
    }, {
      type: RootDropdownService
    }];
  }, {
    isMenuClosable: [{
      type: Input,
      args: ["clrCloseMenuOnItemClick"]
    }]
  });
})();
var BasicFocusableItem = class {
  constructor(el, renderer, platformId) {
    this.el = el;
    this.renderer = renderer;
    this.platformId = platformId;
    this.id = uniqueIdFactory();
    this.disabled = false;
    renderer.setAttribute(el.nativeElement, "id", this.id);
    renderer.setAttribute(el.nativeElement, "tabindex", "-1");
  }
  focus() {
    if (isPlatformBrowser(this.platformId)) {
      this.renderer.setAttribute(this.el.nativeElement, "tabindex", "0");
      this.el.nativeElement.focus();
      this.el.nativeElement.scrollIntoView({
        behavior: "smooth",
        block: "center",
        inline: "nearest"
      });
    }
  }
  blur() {
    if (isPlatformBrowser(this.platformId)) {
      this.renderer.setAttribute(this.el.nativeElement, "tabindex", "-1");
      this.el.nativeElement.blur();
    }
  }
  activate() {
    if (isPlatformBrowser(this.platformId)) {
      this.el.nativeElement.click();
    }
  }
};
BasicFocusableItem.ɵfac = function BasicFocusableItem_Factory(t161) {
  return new (t161 || BasicFocusableItem)(ɵɵinject(ElementRef), ɵɵinject(Renderer2), ɵɵinject(PLATFORM_ID));
};
BasicFocusableItem.ɵprov = ɵɵdefineInjectable({
  token: BasicFocusableItem,
  factory: BasicFocusableItem.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BasicFocusableItem, [{
    type: Injectable
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }];
  }, null);
})();
var BASIC_FOCUSABLE_ITEM_PROVIDER = [{
  provide: FocusableItem,
  useClass: BasicFocusableItem
}];
var ClrDropdownItem = class {
  constructor(dropdown, _dropdownService, focusableItem) {
    this.dropdown = dropdown;
    this._dropdownService = _dropdownService;
    this.focusableItem = focusableItem;
  }
  get disabled() {
    return this.focusableItem.disabled;
  }
  set disabled(value) {
    this.focusableItem.disabled = !!value || value === "";
  }
  /**
   * Let you overwrite the focusable auto increment id.
   */
  get dropdownItemId() {
    return this.focusableItem.id;
  }
  set dropdownItemId(value) {
    this.focusableItem.id = value;
  }
  onDropdownItemClick() {
    if (this.dropdown.isMenuClosable && !this.disabled && this.dropdown.toggleService.open) {
      const rootDropdown = this.findRootDropdown();
      rootDropdown.focusHandler.focus();
      rootDropdown.focusHandler.focusBackOnTriggerWhenClosed = false;
    }
    setTimeout(() => {
      if (this.dropdown.isMenuClosable && !this.disabled) {
        this._dropdownService.closeMenus();
      }
    });
  }
  onSpaceKeydown($event) {
    this.stopImmediatePropagationIfDisabled($event);
  }
  onEnterKeydown($event) {
    this.stopImmediatePropagationIfDisabled($event);
  }
  stopImmediatePropagationIfDisabled($event) {
    if (this.disabled) {
      $event.preventDefault();
      $event.stopImmediatePropagation();
    }
  }
  findRootDropdown() {
    let rootDropdown = this.dropdown;
    while (rootDropdown.parent) {
      rootDropdown = rootDropdown.parent;
    }
    return rootDropdown;
  }
};
ClrDropdownItem.ɵfac = function ClrDropdownItem_Factory(t161) {
  return new (t161 || ClrDropdownItem)(ɵɵdirectiveInject(ClrDropdown), ɵɵdirectiveInject(RootDropdownService), ɵɵdirectiveInject(FocusableItem));
};
ClrDropdownItem.ɵdir = ɵɵdefineDirective({
  type: ClrDropdownItem,
  selectors: [["", "clrDropdownItem", ""]],
  hostVars: 7,
  hostBindings: function ClrDropdownItem_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("click", function ClrDropdownItem_click_HostBindingHandler() {
        return ctx.onDropdownItemClick();
      })("keydown.space", function ClrDropdownItem_keydown_space_HostBindingHandler($event) {
        return ctx.onSpaceKeydown($event);
      })("keydown.enter", function ClrDropdownItem_keydown_enter_HostBindingHandler($event) {
        return ctx.onEnterKeydown($event);
      });
    }
    if (rf & 2) {
      ɵɵattribute("role", "menuitem")("aria-disabled", ctx.disabled)("id", ctx.dropdownItemId);
      ɵɵclassProp("disabled", ctx.disabled)("dropdown-item", true);
    }
  },
  inputs: {
    disabled: [InputFlags.None, "clrDisabled", "disabled"],
    dropdownItemId: [InputFlags.None, "id", "dropdownItemId"]
  },
  features: [ɵɵProvidersFeature([BASIC_FOCUSABLE_ITEM_PROVIDER])]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDropdownItem, [{
    type: Directive,
    args: [{
      selector: "[clrDropdownItem]",
      host: {
        "[class.disabled]": "disabled",
        "[class.dropdown-item]": "true",
        "[attr.role]": '"menuitem"',
        "[attr.aria-disabled]": "disabled",
        "[attr.id]": "dropdownItemId"
      },
      providers: [BASIC_FOCUSABLE_ITEM_PROVIDER]
    }]
  }], function() {
    return [{
      type: ClrDropdown
    }, {
      type: RootDropdownService
    }, {
      type: FocusableItem
    }];
  }, {
    disabled: [{
      type: Input,
      args: ["clrDisabled"]
    }],
    dropdownItemId: [{
      type: Input,
      args: ["id"]
    }],
    onDropdownItemClick: [{
      type: HostListener,
      args: ["click"]
    }],
    onSpaceKeydown: [{
      type: HostListener,
      args: ["keydown.space", ["$event"]]
    }],
    onEnterKeydown: [{
      type: HostListener,
      args: ["keydown.enter", ["$event"]]
    }]
  });
})();
var Point;
(function(Point2) {
  Point2[Point2["RIGHT_CENTER"] = 0] = "RIGHT_CENTER";
  Point2[Point2["RIGHT_TOP"] = 1] = "RIGHT_TOP";
  Point2[Point2["RIGHT_BOTTOM"] = 2] = "RIGHT_BOTTOM";
  Point2[Point2["TOP_CENTER"] = 3] = "TOP_CENTER";
  Point2[Point2["TOP_RIGHT"] = 4] = "TOP_RIGHT";
  Point2[Point2["TOP_LEFT"] = 5] = "TOP_LEFT";
  Point2[Point2["BOTTOM_CENTER"] = 6] = "BOTTOM_CENTER";
  Point2[Point2["BOTTOM_RIGHT"] = 7] = "BOTTOM_RIGHT";
  Point2[Point2["BOTTOM_LEFT"] = 8] = "BOTTOM_LEFT";
  Point2[Point2["LEFT_CENTER"] = 9] = "LEFT_CENTER";
  Point2[Point2["LEFT_TOP"] = 10] = "LEFT_TOP";
  Point2[Point2["LEFT_BOTTOM"] = 11] = "LEFT_BOTTOM";
})(Point || (Point = {}));
var POSITION_RELATIVE = "relative";
var POSITION_ABSOLUTE = "absolute";
var POSITION_FIXED = "fixed";
var OVERFLOW_SCROLL = "scroll";
var OVERFLOW_AUTO = "auto";
var Popover = class {
  constructor(element) {
    this.element = element;
    this.boundOnScrollListener = this.emitScrollEvent.bind(this);
    this.scrollableElements = [];
    element.style.position = POSITION_ABSOLUTE;
    element.style.top = 0;
    element.style.bottom = "auto";
    element.style.left = 0;
    element.style.right = "auto";
  }
  // TODO: need a way to account for parameters that change dynamically (positioning).
  anchor(anchor, anchorAlign, popoverAlign, {
    offsetX = 0,
    offsetY = 0,
    useAnchorParent = false
  } = {}) {
    this.addScrollEventListeners(anchor);
    if (useAnchorParent) {
      anchor = anchor.parentNode;
    }
    anchor.style.position = "static";
    const anchorRect = anchor.getBoundingClientRect();
    const popoverRect = this.element.getBoundingClientRect();
    let leftDiff = anchorRect.left - popoverRect.left + offsetX;
    let topDiff = anchorRect.top - popoverRect.top + offsetY;
    switch (anchorAlign) {
      case Point.LEFT_TOP:
      case Point.TOP_LEFT:
        break;
      case Point.TOP_CENTER:
        leftDiff += anchorRect.width / 2;
        break;
      case Point.TOP_RIGHT:
        leftDiff += anchorRect.width;
        break;
      case Point.RIGHT_TOP:
        leftDiff += anchorRect.width;
        break;
      case Point.LEFT_BOTTOM:
        topDiff += anchorRect.height;
        break;
      case Point.BOTTOM_LEFT:
        topDiff += anchorRect.height;
        break;
      case Point.BOTTOM_CENTER:
        topDiff += anchorRect.height;
        leftDiff += anchorRect.width / 2;
        break;
      case Point.BOTTOM_RIGHT:
        topDiff += anchorRect.height;
        leftDiff += anchorRect.width;
        break;
      case Point.RIGHT_BOTTOM:
        topDiff += anchorRect.height;
        leftDiff += anchorRect.width;
        break;
      case Point.LEFT_CENTER:
        topDiff += anchorRect.height / 2;
        break;
      case Point.RIGHT_CENTER:
        topDiff += anchorRect.height / 2;
        leftDiff += anchorRect.width;
        break;
      default:
    }
    switch (popoverAlign) {
      case Point.LEFT_TOP:
      case Point.TOP_LEFT:
        break;
      case Point.TOP_CENTER:
        leftDiff -= popoverRect.width / 2;
        break;
      case Point.TOP_RIGHT:
        leftDiff -= popoverRect.width;
        break;
      case Point.RIGHT_TOP:
        leftDiff -= popoverRect.width;
        break;
      case Point.LEFT_BOTTOM:
        topDiff -= popoverRect.height;
        break;
      case Point.BOTTOM_LEFT:
        topDiff -= popoverRect.height;
        break;
      case Point.BOTTOM_CENTER:
        topDiff -= popoverRect.height;
        leftDiff -= popoverRect.width / 2;
        break;
      case Point.BOTTOM_RIGHT:
        topDiff -= popoverRect.height;
        leftDiff -= popoverRect.width;
        break;
      case Point.RIGHT_BOTTOM:
        topDiff -= popoverRect.height;
        leftDiff -= popoverRect.width;
        break;
      case Point.LEFT_CENTER:
        topDiff -= popoverRect.height / 2;
        break;
      case Point.RIGHT_CENTER:
        topDiff -= popoverRect.height / 2;
        leftDiff -= popoverRect.width;
        break;
      default:
    }
    const popoverComputedStyle = getComputedStyle(this.element);
    const marginLeft = parseInt(popoverComputedStyle.marginLeft, 10);
    const marginRight = parseInt(popoverComputedStyle.marginRight, 10);
    const marginTop = parseInt(popoverComputedStyle.marginTop, 10);
    const marginBottom = parseInt(popoverComputedStyle.marginBottom, 10);
    switch (anchorAlign) {
      case Point.LEFT_TOP:
      case Point.TOP_LEFT:
      case Point.TOP_RIGHT:
      case Point.RIGHT_TOP:
        if (popoverAlign === Point.BOTTOM_RIGHT || popoverAlign === Point.RIGHT_BOTTOM) {
          topDiff -= marginBottom;
          leftDiff -= marginRight;
        }
        if (popoverAlign === Point.BOTTOM_LEFT || popoverAlign === Point.LEFT_BOTTOM) {
          topDiff -= marginTop;
          leftDiff += marginLeft;
        }
        if (popoverAlign === Point.TOP_LEFT || popoverAlign === Point.LEFT_TOP) {
          topDiff += marginTop;
          leftDiff += marginLeft;
        }
        if (popoverAlign === Point.TOP_RIGHT || popoverAlign === Point.RIGHT_TOP) {
          topDiff += marginTop;
          leftDiff -= marginRight;
        }
        break;
      case Point.LEFT_BOTTOM:
      case Point.BOTTOM_LEFT:
      case Point.BOTTOM_RIGHT:
      case Point.RIGHT_BOTTOM:
        if (popoverAlign === Point.BOTTOM_LEFT || popoverAlign === Point.LEFT_BOTTOM) {
          topDiff -= marginBottom;
          leftDiff += marginLeft;
        }
        if (popoverAlign === Point.BOTTOM_RIGHT || popoverAlign === Point.RIGHT_BOTTOM) {
          topDiff -= marginBottom;
          leftDiff -= marginRight;
        }
        if (popoverAlign === Point.TOP_LEFT || popoverAlign === Point.LEFT_TOP) {
          topDiff += marginTop;
          leftDiff += marginLeft;
        }
        if (popoverAlign === Point.TOP_RIGHT || popoverAlign === Point.RIGHT_TOP) {
          topDiff += marginTop;
          leftDiff -= marginRight;
        }
        break;
      case Point.TOP_CENTER:
        topDiff -= marginBottom;
        leftDiff += marginLeft;
        leftDiff -= marginRight;
        break;
      case Point.BOTTOM_CENTER:
        topDiff += marginTop;
        leftDiff += marginLeft;
        leftDiff -= marginRight;
        break;
      case Point.LEFT_CENTER:
        topDiff += marginTop;
        topDiff -= marginBottom;
        leftDiff -= marginRight;
        break;
      case Point.RIGHT_CENTER:
        topDiff += marginTop;
        topDiff -= marginBottom;
        leftDiff += marginLeft;
        break;
      default:
    }
    this.element.style.transform = `translateX(${Math.round(leftDiff)}px) translateY(${Math.round(topDiff)}px)`;
    return this._scroll.asObservable();
  }
  release() {
    this.element.style.transform = "";
    this.removeScrollEventListeners();
  }
  isPositioned(container) {
    const position = getComputedStyle(container).position;
    return position === POSITION_RELATIVE || position === POSITION_ABSOLUTE || position === POSITION_FIXED;
  }
  emitScrollEvent() {
    this._scroll.next();
  }
  addScrollEventListeners(e83) {
    this._scroll = new Subject();
    const anchor = e83;
    let current = e83;
    while (current && current !== document) {
      if (this.scrolls(current)) {
        current.addEventListener("scroll", this.boundOnScrollListener);
        this.scrollableElements.push(current);
      }
      if (current !== anchor && this.isPositioned(current)) {
        break;
      }
      current = current.parentNode;
    }
  }
  removeScrollEventListeners() {
    for (const elem of this.scrollableElements) {
      elem.removeEventListener("scroll", this.boundOnScrollListener);
    }
    this.scrollableElements.length = 0;
    if (this._scroll) {
      this._scroll.complete();
      delete this._scroll;
    }
  }
  scrolls(container) {
    const computedStyles = getComputedStyle(container);
    return computedStyles.overflowX === OVERFLOW_SCROLL || computedStyles.overflowX === OVERFLOW_AUTO || computedStyles.overflowY === OVERFLOW_SCROLL || computedStyles.overflowY === OVERFLOW_AUTO;
  }
};
var AbstractPopover = class {
  constructor(injector, parentHost) {
    this.parentHost = parentHost;
    this.closeOnOutsideClick = false;
    this.popoverOptions = {};
    this.updateAnchor = false;
    this.documentESCListener = null;
    this.closeOnOutsideClickCallback = (event) => {
      if (this.anchorElem.contains(event.target)) {
        return;
      }
      this.toggleService.open = false;
    };
    this.el = injector.get(ElementRef);
    this.toggleService = injector.get(ClrPopoverToggleService);
    this.renderer = injector.get(Renderer2);
    this.ngZone = injector.get(NgZone);
    this.ref = injector.get(ChangeDetectorRef);
    this.anchorElem = parentHost.nativeElement;
    this.popoverInstance = new Popover(this.el.nativeElement);
    this.subscription = this.toggleService.openChange.subscribe((change) => {
      if (change) {
        this.anchor();
        this.attachESCListener();
      } else {
        this.release();
        this.detachESCListener();
      }
    });
    if (this.toggleService.open) {
      this.anchor();
      this.attachESCListener();
    }
  }
  /*
   * Fallback to hide when *clrIfOpen is not being used
   */
  get isOffScreen() {
    return this.toggleService.open ? false : true;
  }
  ngAfterViewChecked() {
    if (this.updateAnchor) {
      this.updateAnchor = false;
      this.popoverInstance.anchor(this.anchorElem, this.anchorPoint, this.popoverPoint, this.popoverOptions).subscribe(() => {
        this.toggleService.open = false;
      });
      this.attachOutsideClickListener();
    }
  }
  ngOnDestroy() {
    this.release();
    this.detachESCListener();
    this.subscription.unsubscribe();
  }
  anchor() {
    this.updateAnchor = true;
  }
  release() {
    this.detachOutsideClickListener();
    this.popoverInstance.release();
  }
  attachESCListener() {
    if (this.popoverOptions.ignoreGlobalESCListener) {
      return;
    }
    this.ngZone.runOutsideAngular(() => {
      this.documentESCListener = this.renderer.listen("document", "keydown", (event) => {
        if (event && event.key) {
          if (normalizeKey(event.key) === Keys.Escape) {
            this.ngZone.run(() => {
              this.toggleService.open = false;
              this.ref.markForCheck();
            });
          }
        }
      });
    });
  }
  detachESCListener() {
    if (this.documentESCListener) {
      this.documentESCListener();
      this.documentESCListener = null;
    }
  }
  attachOutsideClickListener() {
    if (this.closeOnOutsideClick && this.toggleService.open) {
      if (document && document.addEventListener) {
        document.addEventListener("click", this.closeOnOutsideClickCallback, true);
      }
    }
  }
  detachOutsideClickListener() {
    if (this.closeOnOutsideClick) {
      if (document && document.removeEventListener) {
        document.removeEventListener("click", this.closeOnOutsideClickCallback, true);
      }
    }
  }
};
AbstractPopover.ɵfac = function AbstractPopover_Factory(t161) {
  return new (t161 || AbstractPopover)(ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(ElementRef, 4));
};
AbstractPopover.ɵdir = ɵɵdefineDirective({
  type: AbstractPopover,
  hostVars: 2,
  hostBindings: function AbstractPopover_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("is-off-screen", ctx.isOffScreen);
    }
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AbstractPopover, [{
    type: Directive
  }], function() {
    return [{
      type: Injector
    }, {
      type: ElementRef,
      decorators: [{
        type: SkipSelf
      }]
    }];
  }, {
    isOffScreen: [{
      type: HostBinding,
      args: ["class.is-off-screen"]
    }]
  });
})();
var ClrDropdownMenu = class extends AbstractPopover {
  constructor(injector, parentHost, nested, focusHandler) {
    if (!parentHost) {
      throw new Error("clr-dropdown-menu should only be used inside of a clr-dropdown");
    }
    super(injector, parentHost);
    if (!nested) {
      this.anchorPoint = Point.BOTTOM_LEFT;
      this.popoverPoint = Point.LEFT_TOP;
    } else {
      this.anchorPoint = Point.RIGHT_TOP;
      this.popoverPoint = Point.LEFT_TOP;
    }
    this.popoverOptions.allowMultipleOpen = true;
    this.popoverOptions.ignoreGlobalESCListener = true;
    this.closeOnOutsideClick = true;
    this.focusHandler = focusHandler;
  }
  set position(position) {
    switch (position) {
      case "top-right":
        this.anchorPoint = Point.TOP_RIGHT;
        this.popoverPoint = Point.RIGHT_BOTTOM;
        break;
      case "top-left":
        this.anchorPoint = Point.TOP_LEFT;
        this.popoverPoint = Point.LEFT_BOTTOM;
        break;
      case "bottom-right":
        this.anchorPoint = Point.BOTTOM_RIGHT;
        this.popoverPoint = Point.RIGHT_TOP;
        break;
      case "bottom-left":
        this.anchorPoint = Point.BOTTOM_LEFT;
        this.popoverPoint = Point.LEFT_TOP;
        break;
      case "right-top":
        this.anchorPoint = Point.RIGHT_TOP;
        this.popoverPoint = Point.LEFT_TOP;
        break;
      case "right-bottom":
        this.anchorPoint = Point.RIGHT_BOTTOM;
        this.popoverPoint = Point.LEFT_BOTTOM;
        break;
      case "left-top":
        this.anchorPoint = Point.LEFT_TOP;
        this.popoverPoint = Point.RIGHT_TOP;
        break;
      case "left-bottom":
        this.anchorPoint = Point.LEFT_BOTTOM;
        this.popoverPoint = Point.RIGHT_BOTTOM;
        break;
      default:
        this.anchorPoint = Point.BOTTOM_LEFT;
        this.popoverPoint = Point.LEFT_TOP;
        break;
    }
  }
  ngAfterContentInit() {
    this.focusHandler.container = this.el.nativeElement;
    this.items.changes.subscribe(() => this.focusHandler.addChildren(this.items.toArray()));
    this.items.notifyOnChanges();
  }
  ngOnDestroy() {
    super.ngOnDestroy();
    this.focusHandler.resetChildren();
  }
};
ClrDropdownMenu.ɵfac = function ClrDropdownMenu_Factory(t161) {
  return new (t161 || ClrDropdownMenu)(ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(POPOVER_HOST_ANCHOR, 8), ɵɵdirectiveInject(ClrDropdownMenu, 12), ɵɵdirectiveInject(DropdownFocusHandler));
};
ClrDropdownMenu.ɵcmp = ɵɵdefineComponent({
  type: ClrDropdownMenu,
  selectors: [["clr-dropdown-menu"]],
  contentQueries: function ClrDropdownMenu_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, FocusableItem, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.items = _t);
    }
  },
  hostVars: 3,
  hostBindings: function ClrDropdownMenu_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("role", "menu");
      ɵɵclassProp("dropdown-menu", true);
    }
  },
  inputs: {
    position: [InputFlags.None, "clrPosition", "position"]
  },
  features: [ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrDropdownMenu_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDropdownMenu, [{
    type: Component,
    args: [{
      selector: "clr-dropdown-menu",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.dropdown-menu]": "true",
        "[attr.role]": '"menu"'
      }
    }]
  }], function() {
    return [{
      type: Injector
    }, {
      type: ElementRef,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [POPOVER_HOST_ANCHOR]
      }]
    }, {
      type: ClrDropdownMenu,
      decorators: [{
        type: Optional
      }, {
        type: SkipSelf
      }]
    }, {
      type: DropdownFocusHandler
    }];
  }, {
    items: [{
      type: ContentChildren,
      args: [FocusableItem]
    }],
    position: [{
      type: Input,
      args: ["clrPosition"]
    }]
  });
})();
var ClrDropdownTrigger = class {
  constructor(dropdown, toggleService, el, focusHandler) {
    this.toggleService = toggleService;
    this.isRootLevelToggle = true;
    if (dropdown.parent) {
      this.isRootLevelToggle = false;
    }
    focusHandler.trigger = el.nativeElement;
  }
  get active() {
    return this.toggleService.open;
  }
  onDropdownTriggerClick(event) {
    this.toggleService.toggleWithEvent(event);
  }
};
ClrDropdownTrigger.ɵfac = function ClrDropdownTrigger_Factory(t161) {
  return new (t161 || ClrDropdownTrigger)(ɵɵdirectiveInject(ClrDropdown), ɵɵdirectiveInject(ClrPopoverToggleService), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(DropdownFocusHandler));
};
ClrDropdownTrigger.ɵdir = ɵɵdefineDirective({
  type: ClrDropdownTrigger,
  selectors: [["", "clrDropdownTrigger", ""], ["", "clrDropdownToggle", ""]],
  hostVars: 10,
  hostBindings: function ClrDropdownTrigger_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("click", function ClrDropdownTrigger_click_HostBindingHandler($event) {
        return ctx.onDropdownTriggerClick($event);
      });
    }
    if (rf & 2) {
      ɵɵattribute("aria-haspopup", "menu")("aria-expanded", ctx.active);
      ɵɵclassProp("dropdown-toggle", ctx.isRootLevelToggle)("dropdown-item", !ctx.isRootLevelToggle)("expandable", !ctx.isRootLevelToggle)("active", ctx.active);
    }
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDropdownTrigger, [{
    type: Directive,
    args: [{
      // We support both selectors for legacy reasons
      selector: "[clrDropdownTrigger],[clrDropdownToggle]",
      host: {
        "[class.dropdown-toggle]": "isRootLevelToggle",
        "[class.dropdown-item]": "!isRootLevelToggle",
        "[class.expandable]": "!isRootLevelToggle",
        "[class.active]": "active",
        "[attr.aria-haspopup]": '"menu"',
        "[attr.aria-expanded]": "active"
      }
    }]
  }], function() {
    return [{
      type: ClrDropdown
    }, {
      type: ClrPopoverToggleService
    }, {
      type: ElementRef
    }, {
      type: DropdownFocusHandler
    }];
  }, {
    onDropdownTriggerClick: [{
      type: HostListener,
      args: ["click", ["$event"]]
    }]
  });
})();
var CLR_DROPDOWN_DIRECTIVES = [ClrDropdown, ClrDropdownMenu, ClrDropdownTrigger, ClrDropdownItem];
var ClrDropdownModule = class {
};
ClrDropdownModule.ɵfac = function ClrDropdownModule_Factory(t161) {
  return new (t161 || ClrDropdownModule)();
};
ClrDropdownModule.ɵmod = ɵɵdefineNgModule({
  type: ClrDropdownModule,
  declarations: [ClrDropdown, ClrDropdownMenu, ClrDropdownTrigger, ClrDropdownItem],
  imports: [CommonModule],
  exports: [ClrDropdown, ClrDropdownMenu, ClrDropdownTrigger, ClrDropdownItem, ClrConditionalModule, ClrIconModule]
});
ClrDropdownModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrConditionalModule, ClrIconModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrDropdownModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [CLR_DROPDOWN_DIRECTIVES],
      exports: [CLR_DROPDOWN_DIRECTIVES, ClrConditionalModule, ClrIconModule]
    }]
  }], null, null);
})();
var ALERT_TYPES = ["info", "warning", "danger", "success", "neutral", "unknown", "loading"];
var AlertIconAndTypesService = class {
  constructor(commonStrings) {
    this.commonStrings = commonStrings;
    this.defaultIconShape = "info-standard";
    this._alertIconShape = "";
    this._alertType = "info";
  }
  get alertType() {
    return this._alertType;
  }
  set alertType(val) {
    if (ALERT_TYPES.indexOf(val) > -1) {
      this._alertType = val;
    }
  }
  get alertIconShape() {
    if ("" === this._alertIconShape) {
      return this.iconInfoFromType(this._alertType).shape;
    }
    return this._alertIconShape;
  }
  set alertIconShape(val) {
    if (!val) {
      this._alertIconShape = "";
    } else if (val !== this._alertIconShape) {
      this._alertIconShape = val;
    }
  }
  get alertIconTitle() {
    return this.iconInfoFromType(this._alertType).title;
  }
  iconInfoFromType(type3) {
    const returnObj = {
      shape: "",
      cssClass: "",
      title: ""
    };
    switch (type3) {
      case "warning":
        returnObj.shape = "warning-standard";
        returnObj.cssClass = "alert-warning";
        returnObj.title = this.commonStrings.keys.warning;
        break;
      case "danger":
        returnObj.shape = "error-standard";
        returnObj.cssClass = "alert-danger";
        returnObj.title = this.commonStrings.keys.danger;
        break;
      case "success":
        returnObj.shape = "success-standard";
        returnObj.cssClass = "alert-success";
        returnObj.title = this.commonStrings.keys.success;
        break;
      case "neutral":
        returnObj.shape = "note";
        returnObj.cssClass = "alert-neutral";
        returnObj.title = this.commonStrings.keys.neutral;
        break;
      case "unknown":
        returnObj.shape = "help";
        returnObj.cssClass = "alert-neutral";
        returnObj.title = this.commonStrings.keys.unknown;
        break;
      case "loading":
        returnObj.shape = "loading";
        returnObj.cssClass = "alert-neutral";
        returnObj.title = this.commonStrings.keys.unknown;
        break;
      default:
        returnObj.shape = this.defaultIconShape;
        returnObj.cssClass = "alert-info";
        returnObj.title = this.commonStrings.keys.info;
        break;
    }
    return returnObj;
  }
};
AlertIconAndTypesService.ɵfac = function AlertIconAndTypesService_Factory(t161) {
  return new (t161 || AlertIconAndTypesService)(ɵɵinject(ClrCommonStringsService));
};
AlertIconAndTypesService.ɵprov = ɵɵdefineInjectable({
  token: AlertIconAndTypesService,
  factory: AlertIconAndTypesService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AlertIconAndTypesService, [{
    type: Injectable
  }], function() {
    return [{
      type: ClrCommonStringsService
    }];
  }, null);
})();
var MultiAlertService = class {
  constructor() {
    this._change = new Subject();
  }
  /**
   * The Observable that lets other classes subscribe to changes
   */
  get changes() {
    return this._change.asObservable();
  }
  get current() {
    return this._current;
  }
  set current(index) {
    if (index !== this._current) {
      this._current = index;
      this._change.next(index);
    }
  }
  get activeAlerts() {
    return this.allAlerts && this.allAlerts.filter((alert) => !alert._closed);
  }
  get currentAlert() {
    return this.activeAlerts && this.activeAlerts[this.current];
  }
  set currentAlert(alert) {
    this.current = this.activeAlerts.indexOf(alert);
  }
  get count() {
    return this.activeAlerts && this.activeAlerts.length || 0;
  }
  manage(alerts) {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
    this.allAlerts = alerts;
    this.current = typeof this._current === "number" ? this._current : 0;
    this._change.next(this.current);
    this.subscription = this.allAlerts.changes.subscribe(() => {
      if (this.current >= this.allAlerts.length) {
        this.current = Math.max(0, this.allAlerts.length - 1);
      }
    });
  }
  next() {
    this._current = this.current === this.activeAlerts.length - 1 ? 0 : this.current + 1;
    this._change.next(this._current);
  }
  previous() {
    if (this.activeAlerts.length === 0) {
      return;
    }
    this._current = this.current === 0 ? this.activeAlerts.length - 1 : this.current - 1;
    this._change.next(this._current);
  }
  open() {
    if (this.activeAlerts.length === 0) {
      return;
    }
    if (!this.currentAlert) {
      this._current = 0;
    }
    this._change.next(this._current);
  }
  close(isCurrentAlert) {
    if (this.activeAlerts.length === 0) {
      return;
    }
    if (isCurrentAlert) {
      this._current = Math.max(0, this.current - 1);
    }
    this._change.next(this._current);
  }
  destroy() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }
};
MultiAlertService.ɵfac = function MultiAlertService_Factory(t161) {
  return new (t161 || MultiAlertService)();
};
MultiAlertService.ɵprov = ɵɵdefineInjectable({
  token: MultiAlertService,
  factory: MultiAlertService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MultiAlertService, [{
    type: Injectable
  }], null, null);
})();
var ClrAlert = class {
  constructor(iconService, cdr, multiAlertService, commonStrings, renderer, hostElement) {
    this.iconService = iconService;
    this.cdr = cdr;
    this.multiAlertService = multiAlertService;
    this.commonStrings = commonStrings;
    this.renderer = renderer;
    this.hostElement = hostElement;
    this.isSmall = false;
    this.closable = true;
    this.isAppLevel = false;
    this.clrCloseButtonAriaLabel = this.commonStrings.keys.alertCloseButtonAriaLabel;
    this._closedChanged = new EventEmitter(false);
    this._closed = false;
    this.subscriptions = [];
    this._isLightweight = false;
  }
  get isLightweight() {
    return this._isLightweight;
  }
  set isLightweight(val) {
    this._isLightweight = val;
    this.configAlertType(this._origAlertType);
  }
  get alertType() {
    return this.iconService.alertType;
  }
  set alertType(val) {
    this._origAlertType = val;
    this.configAlertType(val);
  }
  set alertIconShape(value) {
    this.iconService.alertIconShape = value;
  }
  set closed(value) {
    if (value && !this._closed) {
      this.close();
    } else if (!value && this._closed) {
      this.open();
    }
  }
  get alertClass() {
    return this.iconService.iconInfoFromType(this.iconService.alertType).cssClass;
  }
  get hidden() {
    return this._hidden;
  }
  set hidden(value) {
    if (value !== this._hidden) {
      this._hidden = value;
      if (this._hidden) {
        this.renderer.addClass(this.hostElement.nativeElement, "alert-hidden");
      } else {
        this.renderer.removeClass(this.hostElement.nativeElement, "alert-hidden");
      }
      this.cdr.detectChanges();
    }
  }
  ngOnInit() {
    if (this.multiAlertService) {
      this.subscriptions.push(this.multiAlertService.changes.subscribe(() => {
        this.hidden = this.multiAlertService.currentAlert !== this;
      }));
    }
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
  }
  configAlertType(val) {
    this.iconService.alertType = val;
  }
  open() {
    this._closed = false;
    if (this.multiAlertService) {
      this.multiAlertService.open();
    }
    this._closedChanged.emit(false);
  }
  close() {
    if (!this.closable) {
      return;
    }
    const isCurrentAlert = this.multiAlertService?.currentAlert === this;
    this._closed = true;
    if (this.multiAlertService?.activeAlerts) {
      this.multiAlertService.close(isCurrentAlert);
    }
    this._closedChanged.emit(true);
  }
};
ClrAlert.ɵfac = function ClrAlert_Factory(t161) {
  return new (t161 || ClrAlert)(ɵɵdirectiveInject(AlertIconAndTypesService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(MultiAlertService, 8), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef));
};
ClrAlert.ɵcmp = ɵɵdefineComponent({
  type: ClrAlert,
  selectors: [["clr-alert"]],
  inputs: {
    isSmall: [InputFlags.None, "clrAlertSizeSmall", "isSmall"],
    closable: [InputFlags.None, "clrAlertClosable", "closable"],
    isAppLevel: [InputFlags.None, "clrAlertAppLevel", "isAppLevel"],
    clrCloseButtonAriaLabel: "clrCloseButtonAriaLabel",
    isLightweight: [InputFlags.None, "clrAlertLightweight", "isLightweight"],
    alertType: [InputFlags.None, "clrAlertType", "alertType"],
    alertIconShape: [InputFlags.None, "clrAlertIcon", "alertIconShape"],
    closed: [InputFlags.None, "clrAlertClosed", "closed"]
  },
  outputs: {
    _closedChanged: "clrAlertClosedChange"
  },
  features: [ɵɵProvidersFeature([AlertIconAndTypesService])],
  ngContentSelectors: _c02,
  decls: 1,
  vars: 1,
  consts: [["class", "alert", 3, "ngClass", "alert-sm", "alert-lightweight", "alert-app-level", 4, "ngIf"], [1, "alert", 3, "ngClass"], [1, "alert-items"], ["type", "button", "class", "close", 3, "click", 4, "ngIf"], ["type", "button", 1, "close", 3, "click"], ["shape", "window-close"]],
  template: function ClrAlert_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, ClrAlert_div_0_Template, 4, 8, "div", 0);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", !ctx._closed);
    }
  },
  dependencies: [NgClass, NgIf, CdsIconCustomTag],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrAlert, [{
    type: Component,
    args: [{
      selector: "clr-alert",
      providers: [AlertIconAndTypesService],
      template: '<!--\n  ~ Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div\n  *ngIf="!_closed"\n  class="alert"\n  [ngClass]="alertClass"\n  [class.alert-sm]="isSmall"\n  [class.alert-lightweight]="isLightweight"\n  [class.alert-app-level]="isAppLevel"\n>\n  <div class="alert-items">\n    <ng-content></ng-content>\n  </div>\n  <button type="button" class="close" *ngIf="closable" (click)="close()" [attr.aria-label]="clrCloseButtonAriaLabel">\n    <cds-icon shape="window-close"></cds-icon>\n  </button>\n</div>\n'
    }]
  }], function() {
    return [{
      type: AlertIconAndTypesService
    }, {
      type: ChangeDetectorRef
    }, {
      type: MultiAlertService,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ClrCommonStringsService
    }, {
      type: Renderer2
    }, {
      type: ElementRef
    }];
  }, {
    isSmall: [{
      type: Input,
      args: ["clrAlertSizeSmall"]
    }],
    closable: [{
      type: Input,
      args: ["clrAlertClosable"]
    }],
    isAppLevel: [{
      type: Input,
      args: ["clrAlertAppLevel"]
    }],
    clrCloseButtonAriaLabel: [{
      type: Input
    }],
    _closedChanged: [{
      type: Output,
      args: ["clrAlertClosedChange"]
    }],
    isLightweight: [{
      type: Input,
      args: ["clrAlertLightweight"]
    }],
    alertType: [{
      type: Input,
      args: ["clrAlertType"]
    }],
    alertIconShape: [{
      type: Input,
      args: ["clrAlertIcon"]
    }],
    closed: [{
      type: Input,
      args: ["clrAlertClosed"]
    }]
  });
})();
var ClrAlertItem = class {
  constructor(iconService) {
    this.iconService = iconService;
  }
};
ClrAlertItem.ɵfac = function ClrAlertItem_Factory(t161) {
  return new (t161 || ClrAlertItem)(ɵɵdirectiveInject(AlertIconAndTypesService));
};
ClrAlertItem.ɵcmp = ɵɵdefineComponent({
  type: ClrAlertItem,
  selectors: [["clr-alert-item"]],
  hostAttrs: [1, "alert-item"],
  ngContentSelectors: _c02,
  decls: 4,
  vars: 2,
  consts: [[1, "alert-icon-wrapper"], ["class", "alert-spinner", "clrInline", "", 4, "ngIf"], ["class", "alert-icon", "role", "img", 4, "ngIf"], ["clrInline", "", 1, "alert-spinner"], ["role", "img", 1, "alert-icon"]],
  template: function ClrAlertItem_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "div", 0);
      ɵɵtemplate(1, ClrAlertItem_clr_spinner_1_Template, 1, 0, "clr-spinner", 1)(2, ClrAlertItem_cds_icon_2_Template, 1, 2, "cds-icon", 2);
      ɵɵelementEnd();
      ɵɵprojection(3);
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.iconService.alertIconShape === "loading");
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.iconService.alertIconShape !== "loading");
    }
  },
  dependencies: [NgIf, CdsIconCustomTag, ClrSpinner],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrAlertItem, [{
    type: Component,
    args: [{
      selector: "clr-alert-item",
      template: `
    <div class="alert-icon-wrapper">
      <clr-spinner class="alert-spinner" clrInline *ngIf="iconService.alertIconShape === 'loading'"></clr-spinner>
      <cds-icon
        class="alert-icon"
        role="img"
        *ngIf="iconService.alertIconShape !== 'loading'"
        [attr.shape]="iconService.alertIconShape"
        [attr.aria-label]="iconService.alertIconTitle"
      ></cds-icon>
    </div>
    <ng-content></ng-content>
  `,
      host: {
        class: "alert-item"
      }
    }]
  }], function() {
    return [{
      type: AlertIconAndTypesService
    }];
  }, null);
})();
var ClrAlertText = class {
};
ClrAlertText.ɵfac = function ClrAlertText_Factory(t161) {
  return new (t161 || ClrAlertText)();
};
ClrAlertText.ɵdir = ɵɵdefineDirective({
  type: ClrAlertText,
  selectors: [["", 8, "alert-text"]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrAlertText, [{
    type: Directive,
    args: [{
      selector: ".alert-text"
    }]
  }], null, null);
})();
var ClrAlertsPager = class {
  constructor(multiAlertService, commonStrings) {
    this.multiAlertService = multiAlertService;
    this.commonStrings = commonStrings;
    this.currentAlertChange = new EventEmitter(false);
    this.currentAlertIndexChange = new EventEmitter();
  }
  /**
   * Input/Output to support two way binding on current alert instance
   */
  get currentAlert() {
    return this.multiAlertService.currentAlert;
  }
  set currentAlert(alert) {
    if (alert) {
      this.multiAlertService.currentAlert = alert;
    }
  }
  /**
   * Input/Output to support two way binding on current alert index
   */
  get currentAlertIndex() {
    return this.multiAlertService.current;
  }
  set currentAlertIndex(index) {
    this.multiAlertService.current = index;
  }
  get previousAlertAriaLabel() {
    const CURRENT = this.currentAlertIndex + 1;
    return this.commonStrings.parse(this.commonStrings.keys.alertPreviousAlertAriaLabel, {
      CURRENT: (CURRENT === 1 ? this.multiAlertService.count : CURRENT - 1).toString(),
      COUNT: this.multiAlertService.count.toString()
    });
  }
  get nextAlertAriaLabel() {
    const CURRENT = this.currentAlertIndex + 1;
    return this.commonStrings.parse(this.commonStrings.keys.alertNextAlertAriaLabel, {
      CURRENT: (CURRENT === this.multiAlertService.count ? 1 : CURRENT + 1).toString(),
      COUNT: this.multiAlertService.count.toString()
    });
  }
  ngOnInit() {
    this.multiAlertServiceChanges = this.multiAlertService.changes.subscribe((index) => {
      this.currentAlertIndexChange.emit(index);
      this.currentAlertChange.emit(this.multiAlertService.activeAlerts[index]);
    });
  }
  ngOnDestroy() {
    this.multiAlertServiceChanges.unsubscribe();
  }
  pageUp() {
    this.multiAlertService.next();
  }
  pageDown() {
    this.multiAlertService.previous();
  }
};
ClrAlertsPager.ɵfac = function ClrAlertsPager_Factory(t161) {
  return new (t161 || ClrAlertsPager)(ɵɵdirectiveInject(MultiAlertService), ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrAlertsPager.ɵcmp = ɵɵdefineComponent({
  type: ClrAlertsPager,
  selectors: [["clr-alerts-pager"]],
  hostVars: 2,
  hostBindings: function ClrAlertsPager_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("alerts-pager", true);
    }
  },
  inputs: {
    currentAlert: [InputFlags.None, "clrCurrentAlert", "currentAlert"],
    currentAlertIndex: [InputFlags.None, "clrCurrentAlertIndex", "currentAlertIndex"]
  },
  outputs: {
    currentAlertChange: "clrCurrentAlertChange",
    currentAlertIndexChange: "clrCurrentAlertIndexChange"
  },
  decls: 9,
  vars: 4,
  consts: [[1, "alerts-pager-control"], [1, "alerts-page-down"], ["type", "button", 1, "alerts-pager-button", 3, "click"], ["shape", "angle", "direction", "left"], [1, "alerts-pager-text"], [1, "alerts-page-up"], ["shape", "angle", "direction", "right"]],
  template: function ClrAlertsPager_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "div", 0)(1, "div", 1)(2, "button", 2);
      ɵɵlistener("click", function ClrAlertsPager_Template_button_click_2_listener() {
        return ctx.pageDown();
      });
      ɵɵelement(3, "cds-icon", 3);
      ɵɵelementEnd()();
      ɵɵelementStart(4, "div", 4);
      ɵɵtext(5);
      ɵɵelementEnd();
      ɵɵelementStart(6, "div", 5)(7, "button", 2);
      ɵɵlistener("click", function ClrAlertsPager_Template_button_click_7_listener() {
        return ctx.pageUp();
      });
      ɵɵelement(8, "cds-icon", 6);
      ɵɵelementEnd()()();
    }
    if (rf & 2) {
      ɵɵadvance(2);
      ɵɵattribute("aria-label", ctx.previousAlertAriaLabel);
      ɵɵadvance(3);
      ɵɵtextInterpolate2("", ctx.multiAlertService.current + 1, " / ", ctx.multiAlertService.count, "");
      ɵɵadvance(2);
      ɵɵattribute("aria-label", ctx.nextAlertAriaLabel);
    }
  },
  dependencies: [CdsIconCustomTag],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrAlertsPager, [{
    type: Component,
    args: [{
      selector: "clr-alerts-pager",
      host: {
        "[class.alerts-pager]": "true"
      },
      template: '<!--\n  ~ Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div class="alerts-pager-control">\n  <div class="alerts-page-down">\n    <button class="alerts-pager-button" type="button" (click)="pageDown()" [attr.aria-label]="previousAlertAriaLabel">\n      <cds-icon shape="angle" direction="left"></cds-icon>\n    </button>\n  </div>\n  <div class="alerts-pager-text">{{this.multiAlertService.current+1}} / {{this.multiAlertService.count}}</div>\n  <div class="alerts-page-up">\n    <button class="alerts-pager-button" type="button" (click)="pageUp()" [attr.aria-label]="nextAlertAriaLabel">\n      <cds-icon shape="angle" direction="right"></cds-icon>\n    </button>\n  </div>\n</div>\n'
    }]
  }], function() {
    return [{
      type: MultiAlertService
    }, {
      type: ClrCommonStringsService
    }];
  }, {
    currentAlertChange: [{
      type: Output,
      args: ["clrCurrentAlertChange"]
    }],
    currentAlertIndexChange: [{
      type: Output,
      args: ["clrCurrentAlertIndexChange"]
    }],
    currentAlert: [{
      type: Input,
      args: ["clrCurrentAlert"]
    }],
    currentAlertIndex: [{
      type: Input,
      args: ["clrCurrentAlertIndex"]
    }]
  });
})();
var ClrAlerts = class {
  constructor(multiAlertService) {
    this.multiAlertService = multiAlertService;
    this.currentAlertChange = new EventEmitter(false);
    this.currentAlertIndexChange = new EventEmitter(false);
    this.subscriptions = [];
  }
  set allAlerts(value) {
    this.multiAlertService.manage(value);
  }
  /**
   * Input/Output to support two way binding on current alert index
   */
  set _inputCurrentIndex(index) {
    if (Number.isInteger(index) && index >= 0) {
      this.multiAlertService.current = index;
    }
  }
  get currentAlertIndex() {
    return this.multiAlertService.current;
  }
  set currentAlertIndex(index) {
    this.multiAlertService.current = index;
  }
  /**
   * Input/Output to support two way binding on current alert instance
   */
  get currentAlert() {
    return this.multiAlertService.currentAlert;
  }
  set currentAlert(alert) {
    if (alert) {
      this.multiAlertService.currentAlert = alert;
    }
  }
  /**
   * Ensure we are only dealing with alerts that have not been closed yet
   */
  get alerts() {
    return this.allAlerts.filter((alert) => {
      return alert.hidden === false;
    });
  }
  get currentAlertType() {
    if (this.multiAlertService.currentAlert) {
      return this.multiAlertService.currentAlert.alertType;
    }
    return "";
  }
  ngAfterContentInit() {
    this.subscriptions.push(this.multiAlertService.changes.subscribe((index) => {
      this.currentAlertIndexChange.next(index);
      this.currentAlertChange.next(this.multiAlertService.currentAlert);
    }));
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => sub.unsubscribe());
    this.multiAlertService.destroy();
  }
};
ClrAlerts.ɵfac = function ClrAlerts_Factory(t161) {
  return new (t161 || ClrAlerts)(ɵɵdirectiveInject(MultiAlertService));
};
ClrAlerts.ɵcmp = ɵɵdefineComponent({
  type: ClrAlerts,
  selectors: [["clr-alerts"]],
  contentQueries: function ClrAlerts_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrAlert, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.allAlerts = _t);
    }
  },
  hostVars: 12,
  hostBindings: function ClrAlerts_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("alerts", true)("alert-danger", ctx.currentAlertType == "danger")("alert-info", ctx.currentAlertType == "info")("alert-success", ctx.currentAlertType == "success")("alert-warning", ctx.currentAlertType == "warning")("alert-neutral", ctx.currentAlertType == "neutral");
    }
  },
  inputs: {
    _inputCurrentIndex: [InputFlags.None, "clrCurrentAlertIndex", "_inputCurrentIndex"],
    currentAlert: [InputFlags.None, "clrCurrentAlert", "currentAlert"]
  },
  outputs: {
    currentAlertChange: "clrCurrentAlertChange",
    currentAlertIndexChange: "clrCurrentAlertIndexChange"
  },
  features: [ɵɵProvidersFeature([MultiAlertService])],
  ngContentSelectors: _c84,
  decls: 3,
  vars: 1,
  consts: [[1, "alerts-wrapper"], [3, "clrCurrentAlertIndex", 4, "ngIf"], [3, "clrCurrentAlertIndex"]],
  template: function ClrAlerts_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c83);
      ɵɵelementStart(0, "div", 0);
      ɵɵtemplate(1, ClrAlerts_clr_alerts_pager_1_Template, 1, 1, "clr-alerts-pager", 1);
      ɵɵprojection(2);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.multiAlertService.count > 1);
    }
  },
  dependencies: [NgIf, ClrAlertsPager],
  styles: ["[_nghost-%COMP%]{display:block}"]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrAlerts, [{
    type: Component,
    args: [{
      selector: "clr-alerts",
      providers: [MultiAlertService],
      host: {
        "[class.alerts]": "true",
        "[class.alert-danger]": "this.currentAlertType == 'danger'",
        "[class.alert-info]": "this.currentAlertType == 'info'",
        "[class.alert-success]": "this.currentAlertType == 'success'",
        "[class.alert-warning]": "this.currentAlertType == 'warning'",
        "[class.alert-neutral]": "this.currentAlertType == 'neutral'"
      },
      template: '<!--\n  ~ Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n<div class="alerts-wrapper">\n  <clr-alerts-pager *ngIf="multiAlertService.count > 1" [clrCurrentAlertIndex]="currentAlertIndex"></clr-alerts-pager>\n  <ng-content select="clr-alert"></ng-content>\n</div>\n',
      styles: [":host{display:block}\n"]
    }]
  }], function() {
    return [{
      type: MultiAlertService
    }];
  }, {
    currentAlertChange: [{
      type: Output,
      args: ["clrCurrentAlertChange"]
    }],
    currentAlertIndexChange: [{
      type: Output,
      args: ["clrCurrentAlertIndexChange"]
    }],
    allAlerts: [{
      type: ContentChildren,
      args: [ClrAlert]
    }],
    _inputCurrentIndex: [{
      type: Input,
      args: ["clrCurrentAlertIndex"]
    }],
    currentAlert: [{
      type: Input,
      args: ["clrCurrentAlert"]
    }]
  });
})();
var CLR_ALERT_DIRECTIVES = [ClrAlert, ClrAlertItem, ClrAlerts, ClrAlertsPager, ClrAlertText];
var ClrAlertModule = class {
  constructor() {
    r24.addIcons(d11, d17, d12, o42, d13, C5, n30);
  }
};
ClrAlertModule.ɵfac = function ClrAlertModule_Factory(t161) {
  return new (t161 || ClrAlertModule)();
};
ClrAlertModule.ɵmod = ɵɵdefineNgModule({
  type: ClrAlertModule,
  declarations: [ClrAlert, ClrAlertItem, ClrAlerts, ClrAlertsPager, ClrAlertText],
  imports: [CommonModule, ClrIconModule, ClrDropdownModule, ClrSpinnerModule],
  exports: [ClrAlert, ClrAlertItem, ClrAlerts, ClrAlertsPager, ClrAlertText]
});
ClrAlertModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrIconModule, ClrDropdownModule, ClrSpinnerModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrAlertModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrIconModule, ClrDropdownModule, ClrSpinnerModule],
      declarations: [CLR_ALERT_DIRECTIVES],
      exports: [CLR_ALERT_DIRECTIVES]
    }]
  }], function() {
    return [];
  }, null);
})();
var ClrEmphasisModule = class {
};
ClrEmphasisModule.ɵfac = function ClrEmphasisModule_Factory(t161) {
  return new (t161 || ClrEmphasisModule)();
};
ClrEmphasisModule.ɵmod = ɵɵdefineNgModule({
  type: ClrEmphasisModule,
  exports: [ClrAlertModule]
});
ClrEmphasisModule.ɵinj = ɵɵdefineInjector({
  imports: [ClrAlertModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrEmphasisModule, [{
    type: NgModule,
    args: [{
      exports: [ClrAlertModule]
    }]
  }], null, null);
})();
var ResponsiveNavCodes = class {
};
ResponsiveNavCodes.NAV_LEVEL_1 = 1;
ResponsiveNavCodes.NAV_LEVEL_2 = 2;
ResponsiveNavCodes.NAV_CLOSE_ALL = "NAV_CLOSE_ALL";
ResponsiveNavCodes.NAV_OPEN = "NAV_OPEN";
ResponsiveNavCodes.NAV_CLOSE = "NAV_CLOSE";
ResponsiveNavCodes.NAV_TOGGLE = "NAV_TOGGLE";
ResponsiveNavCodes.NAV_CLASS_HAMBURGER_MENU = "open-hamburger-menu";
ResponsiveNavCodes.NAV_CLASS_OVERFLOW_MENU = "open-overflow-menu";
ResponsiveNavCodes.NAV_CLASS_TRIGGER_1 = "header-hamburger-trigger";
ResponsiveNavCodes.NAV_CLASS_TRIGGER_2 = "header-overflow-trigger";
ResponsiveNavCodes.NAV_CLASS_LEVEL_1 = "clr-nav-level-1";
ResponsiveNavCodes.NAV_CLASS_LEVEL_2 = "clr-nav-level-2";
var ResponsiveNavControlMessage = class {
  constructor(_controlCode, _navLevel) {
    this._controlCode = _controlCode;
    this._navLevel = _navLevel;
  }
  get controlCode() {
    return this._controlCode;
  }
  get navLevel() {
    return this._navLevel;
  }
};
var ResponsiveNavigationService = class {
  constructor() {
    this.responsiveNavList = [];
    this.registerNavSubject = new ReplaySubject();
    this.controlNavSubject = new Subject();
    this.closeAllNavs();
  }
  get registeredNavs() {
    return this.registerNavSubject.asObservable();
  }
  get navControl() {
    return this.controlNavSubject.asObservable();
  }
  registerNav(navLevel) {
    if (!navLevel || this.isNavRegistered(navLevel)) {
      return;
    }
    this.responsiveNavList.push(navLevel);
    this.registerNavSubject.next(this.responsiveNavList);
  }
  isNavRegistered(navLevel) {
    if (this.responsiveNavList.indexOf(navLevel) > -1) {
      console.error("Multiple clr-nav-level " + navLevel + " attributes found. Please make sure that only one exists");
      return true;
    }
    return false;
  }
  unregisterNav(navLevel) {
    const index = this.responsiveNavList.indexOf(navLevel);
    if (index > -1) {
      this.responsiveNavList.splice(index, 1);
      this.registerNavSubject.next(this.responsiveNavList);
    }
  }
  sendControlMessage(controlCode, navLevel) {
    const message = new ResponsiveNavControlMessage(controlCode, navLevel);
    this.controlNavSubject.next(message);
  }
  closeAllNavs() {
    const message = new ResponsiveNavControlMessage(ResponsiveNavCodes.NAV_CLOSE_ALL, -999);
    this.controlNavSubject.next(message);
  }
};
ResponsiveNavigationService.ɵfac = function ResponsiveNavigationService_Factory(t161) {
  return new (t161 || ResponsiveNavigationService)();
};
ResponsiveNavigationService.ɵprov = ɵɵdefineInjectable({
  token: ResponsiveNavigationService,
  factory: ResponsiveNavigationService.ɵfac,
  providedIn: "root"
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ResponsiveNavigationService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], function() {
    return [];
  }, null);
})();
var ClrMainContainer = class {
  constructor(elRef, responsiveNavService) {
    this.elRef = elRef;
    this.responsiveNavService = responsiveNavService;
  }
  ngOnInit() {
    this._classList = this.elRef.nativeElement.classList;
    this._subscription = this.responsiveNavService.navControl.subscribe({
      next: (message) => {
        this.processMessage(message);
      }
    });
  }
  processMessage(message) {
    let navClass = ResponsiveNavCodes.NAV_CLASS_HAMBURGER_MENU;
    if (message.controlCode === ResponsiveNavCodes.NAV_CLOSE_ALL) {
      this._classList.remove(ResponsiveNavCodes.NAV_CLASS_HAMBURGER_MENU);
      this._classList.remove(ResponsiveNavCodes.NAV_CLASS_OVERFLOW_MENU);
    } else if (message.navLevel === ResponsiveNavCodes.NAV_LEVEL_1) {
      this.controlNav(message.controlCode, navClass);
    } else if (message.navLevel === ResponsiveNavCodes.NAV_LEVEL_2) {
      navClass = ResponsiveNavCodes.NAV_CLASS_OVERFLOW_MENU;
      this.controlNav(message.controlCode, navClass);
    }
  }
  controlNav(controlCode, navClass) {
    if (controlCode === ResponsiveNavCodes.NAV_OPEN) {
      this._classList.add(navClass);
    } else if (controlCode === ResponsiveNavCodes.NAV_CLOSE) {
      this._classList.remove(navClass);
    } else if (controlCode === ResponsiveNavCodes.NAV_TOGGLE) {
      this._classList.toggle(navClass);
    }
  }
  ngOnDestroy() {
    this._subscription.unsubscribe();
  }
};
ClrMainContainer.ɵfac = function ClrMainContainer_Factory(t161) {
  return new (t161 || ClrMainContainer)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ResponsiveNavigationService));
};
ClrMainContainer.ɵdir = ɵɵdefineDirective({
  type: ClrMainContainer,
  selectors: [["clr-main-container"]],
  hostVars: 2,
  hostBindings: function ClrMainContainer_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("main-container", true);
    }
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrMainContainer, [{
    type: Directive,
    args: [{
      selector: "clr-main-container",
      host: {
        "[class.main-container]": "true"
      }
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: ResponsiveNavigationService
    }];
  }, null);
})();
var CLR_LAYOUT_DIRECTIVES = [ClrMainContainer];
var ClrMainContainerModule = class {
};
ClrMainContainerModule.ɵfac = function ClrMainContainerModule_Factory(t161) {
  return new (t161 || ClrMainContainerModule)();
};
ClrMainContainerModule.ɵmod = ɵɵdefineNgModule({
  type: ClrMainContainerModule,
  declarations: [ClrMainContainer],
  imports: [CommonModule, ClrIconModule],
  exports: [ClrMainContainer]
});
ClrMainContainerModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrIconModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrMainContainerModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrIconModule],
      declarations: [CLR_LAYOUT_DIRECTIVES],
      exports: [CLR_LAYOUT_DIRECTIVES]
    }]
  }], null, null);
})();
var ClrAriaCurrentLink = class {
  constructor(rla) {
    this.rla = rla;
  }
  ngOnInit() {
    this.subscription = this.rla.isActiveChange.subscribe((isActive) => {
      this.ariaCurrent = isActive ? "page" : void 0;
    });
  }
  ngOnDestroy() {
    this.subscription.unsubscribe();
  }
};
ClrAriaCurrentLink.ɵfac = function ClrAriaCurrentLink_Factory(t161) {
  return new (t161 || ClrAriaCurrentLink)(ɵɵdirectiveInject(RouterLinkActive));
};
ClrAriaCurrentLink.ɵdir = ɵɵdefineDirective({
  type: ClrAriaCurrentLink,
  selectors: [["", "clrAriaCurrentLink", ""]],
  hostVars: 1,
  hostBindings: function ClrAriaCurrentLink_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("aria-current", ctx.ariaCurrent);
    }
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrAriaCurrentLink, [{
    type: Directive,
    args: [{
      selector: "[clrAriaCurrentLink]",
      host: {
        "[attr.aria-current]": "ariaCurrent"
      }
    }]
  }], function() {
    return [{
      type: RouterLinkActive
    }];
  }, null);
})();
var MainContainerWillyWonka = class extends WillyWonka {
};
MainContainerWillyWonka.ɵfac = /* @__PURE__ */ (() => {
  let ɵMainContainerWillyWonka_BaseFactory;
  return function MainContainerWillyWonka_Factory(t161) {
    return (ɵMainContainerWillyWonka_BaseFactory || (ɵMainContainerWillyWonka_BaseFactory = ɵɵgetInheritedFactory(MainContainerWillyWonka)))(t161 || MainContainerWillyWonka);
  };
})();
MainContainerWillyWonka.ɵdir = ɵɵdefineDirective({
  type: MainContainerWillyWonka,
  selectors: [["clr-main-container"]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MainContainerWillyWonka, [{
    type: Directive,
    args: [{
      selector: "clr-main-container"
    }]
  }], null, null);
})();
var NavDetectionOompaLoompa = class extends OompaLoompa {
  constructor(cdr, willyWonka, responsiveNavService) {
    if (!willyWonka) {
      throw new Error("clr-header should only be used inside of a clr-main-container");
    }
    super(cdr, willyWonka);
    this.responsiveNavService = responsiveNavService;
  }
  // NavDetectionOompaLoompa is the addition of the nav levels
  // Since we support 2 levels, the possibilities are 0, 1 or 3 (1 + 2)
  get flavor() {
    return this.responsiveNavService.responsiveNavList.reduce((sum2, navLevel) => sum2 + navLevel, 0);
  }
};
NavDetectionOompaLoompa.ɵfac = function NavDetectionOompaLoompa_Factory(t161) {
  return new (t161 || NavDetectionOompaLoompa)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(MainContainerWillyWonka, 8), ɵɵdirectiveInject(ResponsiveNavigationService));
};
NavDetectionOompaLoompa.ɵdir = ɵɵdefineDirective({
  type: NavDetectionOompaLoompa,
  selectors: [["clr-header"]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NavDetectionOompaLoompa, [{
    type: Directive,
    args: [{
      selector: "clr-header"
    }]
  }], function() {
    return [{
      type: ChangeDetectorRef
    }, {
      type: MainContainerWillyWonka,
      decorators: [{
        type: Optional
      }]
    }, {
      type: ResponsiveNavigationService
    }];
  }, null);
})();
var ClrHeader = class {
  constructor(responsiveNavService, commonStrings) {
    this.responsiveNavService = responsiveNavService;
    this.commonStrings = commonStrings;
    this.role = "banner";
    this.isNavLevel1OnPage = false;
    this.isNavLevel2OnPage = false;
    this.openNavLevel = null;
    this.responsiveNavCodes = ResponsiveNavCodes;
    this._subscription = this.responsiveNavService.registeredNavs.subscribe({
      next: (navLevelList) => {
        this.initializeNavTriggers(navLevelList);
      }
    });
    this._subscription.add(this.responsiveNavService.navControl.pipe(filter(({
      controlCode
    }) => controlCode === ResponsiveNavCodes.NAV_CLOSE || controlCode === ResponsiveNavCodes.NAV_CLOSE_ALL)).subscribe(() => {
      this.openNavLevel = null;
    }));
  }
  get responsiveNavCommonString() {
    const myCommonStrings = this.commonStrings.keys;
    if (this.openNavLevel !== this.responsiveNavCodes.NAV_LEVEL_1) {
      return myCommonStrings.responsiveNavToggleOpen;
    } else {
      return myCommonStrings.responsiveNavToggleClose;
    }
  }
  get responsiveOverflowCommonString() {
    const myCommonStrings = this.commonStrings.keys;
    if (this.openNavLevel !== this.responsiveNavCodes.NAV_LEVEL_2) {
      return myCommonStrings.responsiveNavOverflowOpen;
    } else {
      return myCommonStrings.responsiveNavOverflowClose;
    }
  }
  // reset triggers. handles cases when an application has different nav levels on different pages.
  resetNavTriggers() {
    this.isNavLevel1OnPage = false;
    this.isNavLevel2OnPage = false;
  }
  // decides which triggers to show on the header
  initializeNavTriggers(navList) {
    this.resetNavTriggers();
    if (navList.length > 2) {
      console.error("More than 2 Nav Levels detected.");
      return;
    }
    navList.forEach((navLevel) => {
      if (navLevel === ResponsiveNavCodes.NAV_LEVEL_1) {
        this.isNavLevel1OnPage = true;
      } else if (navLevel === ResponsiveNavCodes.NAV_LEVEL_2) {
        this.isNavLevel2OnPage = true;
      }
    });
  }
  // closes the nav that is open
  closeOpenNav() {
    this.responsiveNavService.closeAllNavs();
  }
  /**
   * @deprecated Will be removed in with @clr/angular v15.0.0
   *
   * Use `openNav(navLevel)` instead to open the navigation and ResponsiveNavService to close it.
   */
  toggleNav(navLevel) {
    if (this.openNavLevel === navLevel) {
      this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_CLOSE, navLevel);
      return;
    }
    this.openNav(navLevel);
  }
  openNav(navLevel) {
    this.openNavLevel = navLevel;
    this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_OPEN, navLevel);
  }
  ngOnDestroy() {
    this._subscription.unsubscribe();
  }
};
ClrHeader.ɵfac = function ClrHeader_Factory(t161) {
  return new (t161 || ClrHeader)(ɵɵdirectiveInject(ResponsiveNavigationService), ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrHeader.ɵcmp = ɵɵdefineComponent({
  type: ClrHeader,
  selectors: [["clr-header"]],
  hostVars: 3,
  hostBindings: function ClrHeader_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("role", ctx.role);
      ɵɵclassProp("header", true);
    }
  },
  inputs: {
    role: "role"
  },
  ngContentSelectors: _c02,
  decls: 4,
  vars: 2,
  consts: [["type", "button", "class", "header-hamburger-trigger", 3, "click", 4, "ngIf"], ["type", "button", "class", "header-overflow-trigger", 3, "click", 4, "ngIf"], [1, "header-backdrop", 3, "click"], ["type", "button", 1, "header-hamburger-trigger", 3, "click"], ["type", "button", 1, "header-overflow-trigger", 3, "click"]],
  template: function ClrHeader_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, ClrHeader_button_0_Template, 2, 1, "button", 0);
      ɵɵprojection(1);
      ɵɵtemplate(2, ClrHeader_button_2_Template, 2, 1, "button", 1);
      ɵɵelementStart(3, "div", 2);
      ɵɵlistener("click", function ClrHeader_Template_div_click_3_listener() {
        return ctx.closeOpenNav();
      });
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.isNavLevel1OnPage);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.isNavLevel2OnPage);
    }
  },
  dependencies: [NgIf],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrHeader, [{
    type: Component,
    args: [{
      selector: "clr-header",
      template: `
    <button
      type="button"
      *ngIf="isNavLevel1OnPage"
      class="header-hamburger-trigger"
      [attr.aria-label]="responsiveNavCommonString"
      (click)="openNav(responsiveNavCodes.NAV_LEVEL_1)"
    >
      <span></span>
    </button>
    <ng-content></ng-content>
    <button
      type="button"
      *ngIf="isNavLevel2OnPage"
      class="header-overflow-trigger"
      [attr.aria-label]="responsiveOverflowCommonString"
      (click)="openNav(responsiveNavCodes.NAV_LEVEL_2)"
    >
      <span></span>
    </button>
    <div class="header-backdrop" (click)="closeOpenNav()"></div>
  `,
      host: {
        "[class.header]": "true"
      }
    }]
  }], function() {
    return [{
      type: ResponsiveNavigationService
    }, {
      type: ClrCommonStringsService
    }];
  }, {
    role: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.role"]
    }]
  });
})();
var createCdsCloseButton = (document2, ariaLabel) => {
  const cdsCloseButton = document2.createElement("cds-internal-close-button");
  cdsCloseButton.setAttribute("icon-size", "32");
  cdsCloseButton.setAttribute("aria-label", ariaLabel);
  cdsCloseButton.setAttribute("aria-hidden", "true");
  cdsCloseButton.setAttribute("type", "button");
  cdsCloseButton.setAttribute("hidden", "true");
  cdsCloseButton.className = "clr-nav-close";
  return cdsCloseButton;
};
var ClrNavLevel = class {
  constructor(platformId, cdkTrapFocus, responsiveNavService, elementRef, renderer, injector) {
    this.cdkTrapFocus = cdkTrapFocus;
    this.responsiveNavService = responsiveNavService;
    this.elementRef = elementRef;
    this.renderer = renderer;
    this._isOpen = false;
    if (isPlatformBrowser(platformId)) {
      this._document = injector.get(DOCUMENT);
    }
    this._subscription = responsiveNavService.navControl.pipe(filter((x6) => x6.navLevel === this.level), filter(({
      controlCode
    }) => controlCode === ResponsiveNavCodes.NAV_OPEN && !this.isOpen || controlCode === ResponsiveNavCodes.NAV_CLOSE && this.isOpen)).subscribe(({
      controlCode
    }) => {
      if (controlCode === ResponsiveNavCodes.NAV_OPEN) {
        this.open();
        return;
      }
      this.close();
    });
    this._subscription.add(responsiveNavService.navControl.pipe(filter(({
      controlCode
    }) => controlCode === ResponsiveNavCodes.NAV_CLOSE_ALL)).subscribe(() => this.close()));
  }
  get level() {
    return this._level;
  }
  // getter to access the responsive navigation codes from the template
  get responsiveNavCodes() {
    return ResponsiveNavCodes;
  }
  get isOpen() {
    return this._isOpen;
  }
  ngOnInit() {
    this.cdkTrapFocus.enabled = false;
    if (!this.closeButtonAriaLabel) {
      this.closeButtonAriaLabel = this._level === ResponsiveNavCodes.NAV_LEVEL_1 ? commonStringsDefault.responsiveNavToggleClose : commonStringsDefault.responsiveNavOverflowClose;
    }
    if (this.level !== ResponsiveNavCodes.NAV_LEVEL_1 && this.level !== ResponsiveNavCodes.NAV_LEVEL_2) {
      console.error("Nav Level can only be 1 or 2");
      return;
    }
    this.responsiveNavService.registerNav(this.level);
    this.addNavClass(this.level);
  }
  ngAfterViewInit() {
    const closeButton = createCdsCloseButton(this._document, this.closeButtonAriaLabel);
    this.renderer.listen(closeButton, "click", this.close.bind(this));
    this.renderer.insertBefore(this.elementRef.nativeElement, closeButton, this.elementRef.nativeElement.firstChild);
    if (this._document.body.clientWidth < LARGE_BREAKPOINT) {
      this.close();
    }
  }
  ngOnDestroy() {
    this.responsiveNavService.unregisterNav(this.level);
    this._subscription.unsubscribe();
  }
  onResize(event) {
    const target = event.target;
    if (target.innerWidth < LARGE_BREAKPOINT && this.isOpen) {
      this.close();
      return;
    }
    this.showNavigation();
  }
  // TODO: Figure out whats the best way to do this. Possible methods
  // 1. HostListener (current solution)
  // 2. Directives on the .nav-link class. We discussed on moving away from class selectors but I forget the reason
  // why
  onMouseClick(target) {
    let current = target;
    const navHost = this.elementRef.nativeElement;
    while (current) {
      if (current === navHost) {
        return;
      } else if (current.classList.contains("nav-link") && this._document.body.clientWidth < LARGE_BREAKPOINT) {
        this.close();
        return;
      }
      current = current.parentNode;
    }
  }
  addNavClass(level) {
    const navHostClassList = this.elementRef.nativeElement.classList;
    if (level === ResponsiveNavCodes.NAV_LEVEL_1) {
      navHostClassList.add(ResponsiveNavCodes.NAV_CLASS_LEVEL_1);
    } else if (level === ResponsiveNavCodes.NAV_LEVEL_2) {
      navHostClassList.add(ResponsiveNavCodes.NAV_CLASS_LEVEL_2);
    }
  }
  open() {
    this._isOpen = true;
    this.showNavigation();
    this.cdkTrapFocus.enabled = true;
    this.showCloseButton();
    this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_OPEN, this.level);
  }
  close() {
    this._isOpen = false;
    this.hideNavigation();
    this.cdkTrapFocus.enabled = false;
    this.hideCloseButton();
    this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_CLOSE, this.level);
  }
  hideNavigation() {
    this.renderer.setAttribute(this.elementRef.nativeElement, "aria-hidden", "true");
    this.renderer.setAttribute(this.elementRef.nativeElement, "hidden", "true");
  }
  showNavigation() {
    this.renderer.setAttribute(this.elementRef.nativeElement, "aria-hidden", "false");
    this.renderer.removeAttribute(this.elementRef.nativeElement, "hidden");
  }
  hideCloseButton() {
    this.renderer.setAttribute(this.elementRef.nativeElement, "aria-hidden", "true");
    this.renderer.setAttribute(this.elementRef.nativeElement.querySelector(".clr-nav-close"), "hidden", "true");
  }
  showCloseButton() {
    this.renderer.setAttribute(this.elementRef.nativeElement.querySelector(".clr-nav-close"), "aria-hidden", "false");
    this.renderer.removeAttribute(this.elementRef.nativeElement.querySelector(".clr-nav-close"), "hidden");
  }
};
ClrNavLevel.ɵfac = function ClrNavLevel_Factory(t161) {
  return new (t161 || ClrNavLevel)(ɵɵdirectiveInject(PLATFORM_ID), ɵɵdirectiveInject(ClrStandaloneCdkTrapFocus), ɵɵdirectiveInject(ResponsiveNavigationService), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(Injector));
};
ClrNavLevel.ɵdir = ɵɵdefineDirective({
  type: ClrNavLevel,
  selectors: [["", "clr-nav-level", ""]],
  hostBindings: function ClrNavLevel_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("resize", function ClrNavLevel_resize_HostBindingHandler($event) {
        return ctx.onResize($event);
      }, false, ɵɵresolveWindow)("click", function ClrNavLevel_click_HostBindingHandler($event) {
        return ctx.onMouseClick($event.target);
      });
    }
  },
  inputs: {
    _level: [InputFlags.None, "clr-nav-level", "_level"],
    closeButtonAriaLabel: [InputFlags.None, "closeAriaLabel", "closeButtonAriaLabel"]
  },
  features: [ɵɵHostDirectivesFeature([ClrStandaloneCdkTrapFocus])]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrNavLevel, [{
    type: Directive,
    args: [{
      selector: "[clr-nav-level]",
      hostDirectives: [ClrStandaloneCdkTrapFocus]
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }, {
      type: ClrStandaloneCdkTrapFocus
    }, {
      type: ResponsiveNavigationService
    }, {
      type: ElementRef
    }, {
      type: Renderer2
    }, {
      type: Injector
    }];
  }, {
    _level: [{
      type: Input,
      args: ["clr-nav-level"]
    }],
    closeButtonAriaLabel: [{
      type: Input,
      args: ["closeAriaLabel"]
    }],
    onResize: [{
      type: HostListener,
      args: ["window:resize", ["$event"]]
    }],
    onMouseClick: [{
      type: HostListener,
      args: ["click", ["$event.target"]]
    }]
  });
})();
var CLR_NAVIGATION_DIRECTIVES = [ClrHeader, ClrNavLevel, ClrAriaCurrentLink, NavDetectionOompaLoompa, MainContainerWillyWonka];
var ClrNavigationModule = class {
};
ClrNavigationModule.ɵfac = function ClrNavigationModule_Factory(t161) {
  return new (t161 || ClrNavigationModule)();
};
ClrNavigationModule.ɵmod = ɵɵdefineNgModule({
  type: ClrNavigationModule,
  declarations: [ClrHeader, ClrNavLevel, ClrAriaCurrentLink, NavDetectionOompaLoompa, MainContainerWillyWonka],
  imports: [CommonModule, ClrIconModule, ClrDropdownModule],
  exports: [ClrHeader, ClrNavLevel, ClrAriaCurrentLink, NavDetectionOompaLoompa, MainContainerWillyWonka]
});
ClrNavigationModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrIconModule, ClrDropdownModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrNavigationModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrIconModule, ClrDropdownModule],
      declarations: [CLR_NAVIGATION_DIRECTIVES],
      exports: [CLR_NAVIGATION_DIRECTIVES]
    }]
  }], null, null);
})();
var TemplateRefContainer = class {
};
TemplateRefContainer.ɵfac = function TemplateRefContainer_Factory(t161) {
  return new (t161 || TemplateRefContainer)();
};
TemplateRefContainer.ɵcmp = ɵɵdefineComponent({
  type: TemplateRefContainer,
  selectors: [["ng-component"]],
  viewQuery: function TemplateRefContainer_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TemplateRef, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.template = _t.first);
    }
  },
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function TemplateRefContainer_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, TemplateRefContainer_ng_template_0_Template, 1, 0, "ng-template");
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TemplateRefContainer, [{
    type: Component,
    args: [{
      template: `
    <ng-template>
      <ng-content></ng-content>
    </ng-template>
  `
    }]
  }], null, {
    template: [{
      type: ViewChild,
      args: [TemplateRef]
    }]
  });
})();
var TEMPLATE_REF_DIRECTIVES = [TemplateRefContainer];
var ClrTemplateRefModule = class {
};
ClrTemplateRefModule.ɵfac = function ClrTemplateRefModule_Factory(t161) {
  return new (t161 || ClrTemplateRefModule)();
};
ClrTemplateRefModule.ɵmod = ɵɵdefineNgModule({
  type: ClrTemplateRefModule,
  declarations: [TemplateRefContainer],
  imports: [CommonModule],
  exports: [TemplateRefContainer]
});
ClrTemplateRefModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTemplateRefModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [TEMPLATE_REF_DIRECTIVES],
      exports: [TEMPLATE_REF_DIRECTIVES]
    }]
  }], null, null);
})();
var TabsWillyWonka = class extends WillyWonka {
};
TabsWillyWonka.ɵfac = /* @__PURE__ */ (() => {
  let ɵTabsWillyWonka_BaseFactory;
  return function TabsWillyWonka_Factory(t161) {
    return (ɵTabsWillyWonka_BaseFactory || (ɵTabsWillyWonka_BaseFactory = ɵɵgetInheritedFactory(TabsWillyWonka)))(t161 || TabsWillyWonka);
  };
})();
TabsWillyWonka.ɵdir = ɵɵdefineDirective({
  type: TabsWillyWonka,
  selectors: [["clr-tabs"]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TabsWillyWonka, [{
    type: Directive,
    args: [{
      selector: "clr-tabs"
    }]
  }], null, null);
})();
var ActiveOompaLoompa = class extends OompaLoompa {
  constructor(cdr, willyWonka, id, ifActive) {
    if (!willyWonka) {
      throw new Error("clrTabLink and clr-tab-content should only be used inside of a clr-tabs");
    }
    super(cdr, willyWonka);
    this.ifActive = ifActive;
    this.id = id;
  }
  get flavor() {
    return this.ifActive.current === this.id;
  }
};
ActiveOompaLoompa.ɵfac = function ActiveOompaLoompa_Factory(t161) {
  return new (t161 || ActiveOompaLoompa)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TabsWillyWonka, 8), ɵɵdirectiveInject(IF_ACTIVE_ID), ɵɵdirectiveInject(IfActiveService));
};
ActiveOompaLoompa.ɵdir = ɵɵdefineDirective({
  type: ActiveOompaLoompa,
  selectors: [["", "clrTabLink", ""], ["clr-tab-content"]],
  features: [ɵɵInheritDefinitionFeature]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ActiveOompaLoompa, [{
    type: Directive,
    args: [{
      selector: "[clrTabLink], clr-tab-content"
    }]
  }], function() {
    return [{
      type: ChangeDetectorRef
    }, {
      type: TabsWillyWonka,
      decorators: [{
        type: Optional
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [IF_ACTIVE_ID]
      }]
    }, {
      type: IfActiveService
    }];
  }, null);
})();
var TabsLayout;
(function(TabsLayout2) {
  TabsLayout2["HORIZONTAL"] = "horizontal";
  TabsLayout2["VERTICAL"] = "vertical";
})(TabsLayout || (TabsLayout = {}));
var TabsService = class {
  constructor() {
    this.layout = TabsLayout.HORIZONTAL;
    this._children = [];
  }
  get children() {
    return this._children;
  }
  get activeTab() {
    return this.children.find((tab) => {
      return tab.active;
    });
  }
  get overflowTabs() {
    if (this.layout === TabsLayout.VERTICAL) {
      return [];
    } else {
      return this.children.filter((tab) => tab.tabLink.inOverflow === true);
    }
  }
  register(tab) {
    this._children.push(tab);
  }
  unregister(tab) {
    const index = this.children.indexOf(tab);
    if (index > -1) {
      this.children.splice(index, 1);
    }
  }
};
TabsService.ɵfac = function TabsService_Factory(t161) {
  return new (t161 || TabsService)();
};
TabsService.ɵprov = ɵɵdefineInjectable({
  token: TabsService,
  factory: TabsService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TabsService, [{
    type: Injectable
  }], null, null);
})();
var nbTabContentComponents = 0;
var ClrTabContent = class {
  constructor(ifActiveService, id, tabsService) {
    this.ifActiveService = ifActiveService;
    this.id = id;
    this.tabsService = tabsService;
    if (!this.tabContentId) {
      this.tabContentId = "clr-tab-content-" + nbTabContentComponents++;
    }
  }
  get active() {
    return this.ifActiveService.current === this.id;
  }
  get ariaLabelledBy() {
    return this.tabsService.children.find((tab) => tab.tabContent === this)?.tabLink?.tabLinkId;
  }
  // The template must be applied on the top-down phase of view-child initialization to prevent
  // components in the content from initializing before a content container exists.
  // Some child components need their container for sizing calculations.
  set templateRef(value) {
    this.viewRef = this.tabsService.tabContentViewContainer.createEmbeddedView(value);
  }
  ngOnDestroy() {
    const index = this.tabsService.tabContentViewContainer.indexOf(this.viewRef);
    if (index > -1) {
      this.tabsService.tabContentViewContainer.remove(index);
    }
  }
};
ClrTabContent.ɵfac = function ClrTabContent_Factory(t161) {
  return new (t161 || ClrTabContent)(ɵɵdirectiveInject(IfActiveService), ɵɵdirectiveInject(IF_ACTIVE_ID), ɵɵdirectiveInject(TabsService));
};
ClrTabContent.ɵcmp = ɵɵdefineComponent({
  type: ClrTabContent,
  selectors: [["clr-tab-content"]],
  viewQuery: function ClrTabContent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c85, 7);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.templateRef = _t.first);
    }
  },
  inputs: {
    tabContentId: [InputFlags.None, "id", "tabContentId"]
  },
  ngContentSelectors: _c02,
  decls: 2,
  vars: 0,
  consts: [["tabContentProjectedRef", ""], ["role", "tabpanel", 1, "tab-content", 3, "id", "hidden"]],
  template: function ClrTabContent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, ClrTabContent_ng_template_0_Template, 2, 6, "ng-template", null, 0, ɵɵtemplateRefExtractor);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTabContent, [{
    type: Component,
    args: [{
      selector: "clr-tab-content",
      template: `
    <ng-template #tabContentProjectedRef>
      <section
        [id]="tabContentId"
        role="tabpanel"
        class="tab-content"
        [class.active]="active"
        [hidden]="!active"
        [attr.aria-labelledby]="ariaLabelledBy"
        [attr.aria-hidden]="!active"
      >
        <ng-content></ng-content>
      </section>
    </ng-template>
  `
    }]
  }], function() {
    return [{
      type: IfActiveService
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [IF_ACTIVE_ID]
      }]
    }, {
      type: TabsService
    }];
  }, {
    tabContentId: [{
      type: Input,
      args: ["id"]
    }],
    templateRef: [{
      type: ViewChild,
      args: ["tabContentProjectedRef", {
        static: true
      }]
    }]
  });
})();
var nbTabsComponent = 0;
var TABS_ID = new InjectionToken("TABS_ID");
function tokenFactory() {
  return "clr-tabs-" + nbTabsComponent++;
}
var TABS_ID_PROVIDER = {
  provide: TABS_ID,
  useFactory: tokenFactory
};
var nbTabLinkComponents = 0;
var ClrTabLink = class {
  constructor(ifActiveService, id, el, cfr, viewContainerRef, tabsService, tabsId) {
    this.ifActiveService = ifActiveService;
    this.id = id;
    this.el = el;
    this.cfr = cfr;
    this.viewContainerRef = viewContainerRef;
    this.tabsService = tabsService;
    this.tabsId = tabsId;
    if (!this.tabLinkId) {
      this.tabLinkId = "clr-tab-link-" + nbTabLinkComponents++;
    }
    const factory = this.cfr.resolveComponentFactory(TemplateRefContainer);
    this.templateRefContainer = this.viewContainerRef.createComponent(factory, void 0, void 0, [[this.el.nativeElement]]).instance;
  }
  get inOverflow() {
    return this._inOverflow && this.tabsService.layout !== TabsLayout.VERTICAL;
  }
  set inOverflow(inOverflow) {
    this._inOverflow = inOverflow;
  }
  get addLinkClasses() {
    return !this.inOverflow;
  }
  get ariaControls() {
    return this.tabsService.children.find((tab) => tab.tabLink === this)?.tabContent?.tabContentId;
  }
  get active() {
    return this.ifActiveService.current === this.id;
  }
  get tabindex() {
    return this.active ? 0 : -1;
  }
  activate() {
    this.ifActiveService.current = this.id;
  }
};
ClrTabLink.ɵfac = function ClrTabLink_Factory(t161) {
  return new (t161 || ClrTabLink)(ɵɵdirectiveInject(IfActiveService), ɵɵdirectiveInject(IF_ACTIVE_ID), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ComponentFactoryResolver$1), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(TabsService), ɵɵdirectiveInject(TABS_ID));
};
ClrTabLink.ɵdir = ɵɵdefineDirective({
  type: ClrTabLink,
  selectors: [["", "clrTabLink", ""]],
  hostAttrs: ["role", "tab", "type", "button"],
  hostVars: 12,
  hostBindings: function ClrTabLink_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("click", function ClrTabLink_click_HostBindingHandler() {
        return ctx.activate();
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("id", ctx.tabLinkId);
      ɵɵattribute("aria-controls", ctx.ariaControls)("aria-selected", ctx.active)("tabindex", ctx.tabindex);
      ɵɵclassProp("btn", true)("btn-link", ctx.addLinkClasses)("nav-link", ctx.addLinkClasses)("active", ctx.active);
    }
  },
  inputs: {
    tabLinkId: [InputFlags.None, "id", "tabLinkId"],
    inOverflow: [InputFlags.None, "clrTabLinkInOverflow", "inOverflow"]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTabLink, [{
    type: Directive,
    args: [{
      selector: "[clrTabLink]",
      host: {
        "[class.btn]": "true",
        role: "tab",
        type: "button"
      }
    }]
  }], function() {
    return [{
      type: IfActiveService
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [IF_ACTIVE_ID]
      }]
    }, {
      type: ElementRef
    }, {
      type: ComponentFactoryResolver$1
    }, {
      type: ViewContainerRef
    }, {
      type: TabsService
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TABS_ID]
      }]
    }];
  }, {
    tabLinkId: [{
      type: Input,
      args: ["id"]
    }, {
      type: HostBinding,
      args: ["id"]
    }],
    inOverflow: [{
      type: Input,
      args: ["clrTabLinkInOverflow"]
    }],
    addLinkClasses: [{
      type: HostBinding,
      args: ["class.btn-link"]
    }, {
      type: HostBinding,
      args: ["class.nav-link"]
    }],
    ariaControls: [{
      type: HostBinding,
      args: ["attr.aria-controls"]
    }],
    active: [{
      type: HostBinding,
      args: ["class.active"]
    }, {
      type: HostBinding,
      args: ["attr.aria-selected"]
    }],
    tabindex: [{
      type: HostBinding,
      args: ["attr.tabindex"]
    }],
    activate: [{
      type: HostListener,
      args: ["click"]
    }]
  });
})();
var ClrTab = class {
  constructor(ifActiveService, id, tabsService) {
    this.ifActiveService = ifActiveService;
    this.id = id;
    this.tabsService = tabsService;
    tabsService.register(this);
  }
  get active() {
    return this.ifActiveService.current === this.id;
  }
  ngOnDestroy() {
    this.tabsService.unregister(this);
  }
};
ClrTab.ɵfac = function ClrTab_Factory(t161) {
  return new (t161 || ClrTab)(ɵɵdirectiveInject(IfActiveService), ɵɵdirectiveInject(IF_ACTIVE_ID), ɵɵdirectiveInject(TabsService));
};
ClrTab.ɵcmp = ɵɵdefineComponent({
  type: ClrTab,
  selectors: [["clr-tab"]],
  contentQueries: function ClrTab_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrTabLink, 7);
      ɵɵcontentQuery(dirIndex, ClrTabContent, 7);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.tabLink = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.tabContent = _t.first);
    }
  },
  features: [ɵɵProvidersFeature([IF_ACTIVE_ID_PROVIDER])],
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrTab_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTab, [{
    type: Component,
    args: [{
      selector: "clr-tab",
      template: `<ng-content></ng-content>`,
      providers: [IF_ACTIVE_ID_PROVIDER]
    }]
  }], function() {
    return [{
      type: IfActiveService
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [IF_ACTIVE_ID]
      }]
    }, {
      type: TabsService
    }];
  }, {
    tabLink: [{
      type: ContentChild,
      args: [ClrTabLink, {
        static: true
      }]
    }],
    tabContent: [{
      type: ContentChild,
      args: [ClrTabContent, {
        static: true
      }]
    }]
  });
})();
var ClrTabOverflowContent = class {
};
ClrTabOverflowContent.ɵfac = function ClrTabOverflowContent_Factory(t161) {
  return new (t161 || ClrTabOverflowContent)();
};
ClrTabOverflowContent.ɵcmp = ɵɵdefineComponent({
  type: ClrTabOverflowContent,
  selectors: [["clr-tab-overflow-content"]],
  hostVars: 2,
  hostBindings: function ClrTabOverflowContent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("dropdown-menu", true);
    }
  },
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrTabOverflowContent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTabOverflowContent, [{
    type: Component,
    args: [{
      selector: "clr-tab-overflow-content",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.dropdown-menu]": "true"
      }
    }]
  }], null, null);
})();
var ClrTabs = class {
  constructor(ifActiveService, toggleService, tabsService, tabsId, commonStrings) {
    this.ifActiveService = ifActiveService;
    this.toggleService = toggleService;
    this.tabsService = tabsService;
    this.tabsId = tabsId;
    this.commonStrings = commonStrings;
    this.tabLinkElements = [];
    this._mousedown = false;
    this.subscriptions = [];
    this._tabLinkDirectives = [];
  }
  get layout() {
    return this.tabsService.layout;
  }
  set layout(layout) {
    if (Object.keys(TabsLayout).map((key) => {
      return TabsLayout[key];
    }).indexOf(layout) >= 0) {
      this.tabsService.layout = layout;
    }
  }
  get tabLinkDirectives() {
    return this._tabLinkDirectives;
  }
  get activeTabInOverflow() {
    return this.tabsService.overflowTabs.indexOf(this.tabsService.activeTab) > -1;
  }
  get activeTabPosition() {
    return this._tabLinkDirectives.findIndex((link) => link.active);
  }
  get isCurrentInOverflow() {
    return this.keyFocus.current >= this.overflowPosition;
  }
  get isVertical() {
    return this.layout === TabsLayout.VERTICAL;
  }
  set tabOverflowEl(value) {
    this._tabOverflowEl = value && value.nativeElement;
    if (this.toggleService.open && value) {
      this.keyFocus.focusCurrent();
    }
  }
  get overflowPosition() {
    return this._tabLinkDirectives.filter((link) => !link.inOverflow).length;
  }
  set tabContentViewContainer(value) {
    this.tabsService.tabContentViewContainer = value;
  }
  ngAfterContentInit() {
    this.subscriptions.push(this.listenForTabLinkChanges());
    if (typeof this.ifActiveService.current === "undefined" && this.tabLinkDirectives[0]) {
      this.tabLinkDirectives[0].activate();
    }
    this.keyFocus.current = this.activeTabPosition;
  }
  ngOnDestroy() {
    this.subscriptions.forEach((sub) => {
      sub.unsubscribe();
    });
  }
  toggleOverflowOnPosition(position) {
    this.toggleService.open = position >= this.overflowPosition;
  }
  resetKeyFocusCurrentToActive(event) {
    const keyFocusContainsFocus = this.keyFocus.nativeElement.contains(event.relatedTarget);
    if (!keyFocusContainsFocus && this.keyFocus.current !== this.activeTabPosition) {
      this.keyFocus.current = this.activeTabPosition;
    }
  }
  toggleOverflowOnClick() {
    if (this.isCurrentInOverflow && this.toggleService.open) {
      this.keyFocus.moveTo(this.overflowPosition - 1);
    } else {
      this.keyFocus.moveTo(this.overflowPosition);
    }
    this._mousedown = false;
  }
  openOverflowOnFocus() {
    if (!this._mousedown && !this.toggleService.open) {
      this.keyFocus.moveTo(this.activeTabPosition);
    }
  }
  closeOnFocusOut(event) {
    if (!this._tabOverflowEl.contains(event.relatedTarget) && this.toggleService.open && !this._mousedown) {
      this.toggleService.open = false;
      if (this.tabLinkElements[this.activeTabPosition] === event.relatedTarget) {
        this.keyFocus.current = this.activeTabPosition;
      }
    }
  }
  closeOnEscapeKey() {
    this.keyFocus.moveTo(this.overflowPosition - 1);
  }
  closeOnOutsideClick(event, tabOverflowTrigger) {
    if (event.target === tabOverflowTrigger || tabOverflowTrigger.contains(event.target)) {
      return;
    }
    if (!this._tabOverflowEl.contains(event.target) && this.isCurrentInOverflow) {
      this.keyFocus.moveTo(this.overflowPosition - 1);
    }
  }
  listenForTabLinkChanges() {
    return this.tabs.changes.pipe(startWith(this.tabs.map((tab) => tab.tabLink))).subscribe(() => {
      this._tabLinkDirectives = this.tabs.map((tab) => tab.tabLink);
      this.tabLinkElements = this._tabLinkDirectives.map((tab) => tab.el.nativeElement);
    });
  }
};
ClrTabs.ɵfac = function ClrTabs_Factory(t161) {
  return new (t161 || ClrTabs)(ɵɵdirectiveInject(IfActiveService), ɵɵdirectiveInject(ClrPopoverToggleService), ɵɵdirectiveInject(TabsService), ɵɵdirectiveInject(TABS_ID), ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrTabs.ɵcmp = ɵɵdefineComponent({
  type: ClrTabs,
  selectors: [["clr-tabs"]],
  contentQueries: function ClrTabs_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrTab, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.tabs = _t);
    }
  },
  viewQuery: function ClrTabs_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(ClrKeyFocus, 7);
      ɵɵviewQuery(ClrTabOverflowContent, 5, ElementRef);
      ɵɵviewQuery(_c86, 7, ViewContainerRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.keyFocus = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.tabOverflowEl = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.tabContentViewContainer = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function ClrTabs_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("tabs-vertical", ctx.isVertical);
    }
  },
  inputs: {
    layout: [InputFlags.None, "clrLayout", "layout"]
  },
  features: [ɵɵProvidersFeature([IfActiveService, TabsService, TABS_ID_PROVIDER]), ɵɵHostDirectivesFeature([ClrPopoverHostDirective])],
  decls: 5,
  vars: 3,
  consts: [["tabContentViewContainer", ""], ["tabOverflowTrigger", ""], ["role", "tablist", "clrDirection", "both", 1, "nav", 3, "clrFocusChange", "focusout", "clrKeyFocus"], [4, "ngFor", "ngForOf"], [4, "ngIf"], ["role", "presentation", 1, "nav-item"], [3, "ngTemplateOutlet"], ["role", "presentation", 1, "tabs-overflow", "bottom-right"], ["role", "application", 1, "nav-item"], ["type", "button", "aria-hidden", "true", 1, "btn", "btn-link", "nav-link", "dropdown-toggle", 3, "mousedown", "focus", "click"], ["shape", "ellipsis-horizontal"], [3, "keydown.escape", "click", "focusout", 4, "ngIf"], [3, "keydown.escape", "click", "focusout"], [3, "ngTemplateOutlet", 4, "ngIf"]],
  template: function ClrTabs_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = ɵɵgetCurrentView();
      ɵɵelementStart(0, "ul", 2);
      ɵɵlistener("clrFocusChange", function ClrTabs_Template_ul_clrFocusChange_0_listener($event) {
        ɵɵrestoreView(_r1);
        return ɵɵresetView(ctx.toggleOverflowOnPosition($event));
      })("focusout", function ClrTabs_Template_ul_focusout_0_listener($event) {
        ɵɵrestoreView(_r1);
        return ɵɵresetView(ctx.resetKeyFocusCurrentToActive($event));
      });
      ɵɵtemplate(1, ClrTabs_ng_container_1_Template, 2, 1, "ng-container", 3)(2, ClrTabs_ng_container_2_Template, 7, 11, "ng-container", 4);
      ɵɵelementEnd();
      ɵɵelementContainer(3, null, 0);
    }
    if (rf & 2) {
      ɵɵproperty("clrKeyFocus", ctx.tabLinkElements);
      ɵɵadvance();
      ɵɵproperty("ngForOf", ctx.tabLinkDirectives);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.tabsService.overflowTabs.length > 0);
    }
  },
  dependencies: [NgForOf, NgIf, NgTemplateOutlet, CdsIconCustomTag, ClrKeyFocus, ClrTabOverflowContent],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTabs, [{
    type: Component,
    args: [{
      selector: "clr-tabs",
      template: `
    <ul
      class="nav"
      role="tablist"
      [clrKeyFocus]="tabLinkElements"
      clrDirection="both"
      (clrFocusChange)="toggleOverflowOnPosition($event)"
      (focusout)="resetKeyFocusCurrentToActive($event)"
    >
      <!--tab links-->
      <ng-container *ngFor="let link of tabLinkDirectives">
        <ng-container *ngIf="link.tabsId === tabsId && !link.inOverflow">
          <li role="presentation" class="nav-item">
            <ng-container [ngTemplateOutlet]="link.templateRefContainer.template"></ng-container>
          </li>
        </ng-container>
      </ng-container>
      <ng-container *ngIf="tabsService.overflowTabs.length > 0">
        <div class="tabs-overflow bottom-right" role="presentation" [class.open]="toggleService.open">
          <li role="application" class="nav-item">
            <button
              #tabOverflowTrigger
              class="btn btn-link nav-link dropdown-toggle"
              type="button"
              aria-hidden="true"
              [attr.tabindex]="activeTabInOverflow && !toggleService.open ? 0 : -1"
              [class.active]="activeTabInOverflow"
              [class.open]="toggleService.open"
              (mousedown)="_mousedown = true"
              (focus)="openOverflowOnFocus()"
              (click)="toggleOverflowOnClick()"
              [attr.title]="commonStrings.keys.more"
            >
              <cds-icon
                shape="ellipsis-horizontal"
                [attr.status]="toggleService.open ? 'info' : null"
                [attr.title]="commonStrings.keys.more"
              ></cds-icon>
            </button>
          </li>
          <!--tab links in overflow menu-->
          <clr-tab-overflow-content
            *ngIf="toggleService.open"
            (document:keydown.escape)="closeOnEscapeKey()"
            (document:click)="closeOnOutsideClick($event, tabOverflowTrigger)"
            (focusout)="closeOnFocusOut($event)"
          >
            <ng-container *ngFor="let link of tabLinkDirectives">
              <ng-container
                *ngIf="link.tabsId === tabsId && link.inOverflow"
                [ngTemplateOutlet]="link.templateRefContainer.template"
              ></ng-container>
            </ng-container>
          </clr-tab-overflow-content>
        </div>
      </ng-container>
    </ul>
    <ng-container #tabContentViewContainer></ng-container>
  `,
      providers: [IfActiveService, TabsService, TABS_ID_PROVIDER],
      hostDirectives: [ClrPopoverHostDirective]
    }]
  }], function() {
    return [{
      type: IfActiveService
    }, {
      type: ClrPopoverToggleService
    }, {
      type: TabsService
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TABS_ID]
      }]
    }, {
      type: ClrCommonStringsService
    }];
  }, {
    keyFocus: [{
      type: ViewChild,
      args: [ClrKeyFocus, {
        static: true
      }]
    }],
    tabs: [{
      type: ContentChildren,
      args: [ClrTab]
    }],
    layout: [{
      type: Input,
      args: ["clrLayout"]
    }],
    isVertical: [{
      type: HostBinding,
      args: ["class.tabs-vertical"]
    }],
    tabOverflowEl: [{
      type: ViewChild,
      args: [ClrTabOverflowContent, {
        read: ElementRef
      }]
    }],
    tabContentViewContainer: [{
      type: ViewChild,
      args: ["tabContentViewContainer", {
        static: true,
        read: ViewContainerRef
      }]
    }]
  });
})();
var CLR_TABS_DIRECTIVES = [ClrTabContent, ClrTab, ClrTabs, ClrTabOverflowContent, ClrTabLink, TabsWillyWonka, ActiveOompaLoompa];
var ClrTabsModule = class {
  constructor() {
    r24.addIcons(i23);
  }
};
ClrTabsModule.ɵfac = function ClrTabsModule_Factory(t161) {
  return new (t161 || ClrTabsModule)();
};
ClrTabsModule.ɵmod = ɵɵdefineNgModule({
  type: ClrTabsModule,
  declarations: [ClrTabContent, ClrTab, ClrTabs, ClrTabOverflowContent, ClrTabLink, TabsWillyWonka, ActiveOompaLoompa],
  imports: [CommonModule, ClrConditionalModule, ClrIconModule, ClrTemplateRefModule, ClrKeyFocusModule],
  exports: [ClrTabContent, ClrTab, ClrTabs, ClrTabOverflowContent, ClrTabLink, TabsWillyWonka, ActiveOompaLoompa, ClrConditionalModule]
});
ClrTabsModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrConditionalModule, ClrIconModule, ClrTemplateRefModule, ClrKeyFocusModule, ClrConditionalModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTabsModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrConditionalModule, ClrIconModule, ClrTemplateRefModule, ClrKeyFocusModule],
      declarations: [CLR_TABS_DIRECTIVES],
      exports: [CLR_TABS_DIRECTIVES, ClrConditionalModule]
    }]
  }], function() {
    return [];
  }, null);
})();
var VerticalNavGroupRegistrationService = class {
  constructor() {
    this.navGroupCount = 0;
  }
  registerNavGroup() {
    this.navGroupCount++;
  }
  unregisterNavGroup() {
    this.navGroupCount--;
  }
};
VerticalNavGroupRegistrationService.ɵfac = function VerticalNavGroupRegistrationService_Factory(t161) {
  return new (t161 || VerticalNavGroupRegistrationService)();
};
VerticalNavGroupRegistrationService.ɵprov = ɵɵdefineInjectable({
  token: VerticalNavGroupRegistrationService,
  factory: VerticalNavGroupRegistrationService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(VerticalNavGroupRegistrationService, [{
    type: Injectable
  }], null, null);
})();
var VerticalNavIconService = class {
  constructor() {
    this._icons = 0;
  }
  get hasIcons() {
    return this._icons > 0;
  }
  registerIcon() {
    this._icons++;
  }
  unregisterIcon() {
    this._icons--;
  }
};
VerticalNavIconService.ɵfac = function VerticalNavIconService_Factory(t161) {
  return new (t161 || VerticalNavIconService)();
};
VerticalNavIconService.ɵprov = ɵɵdefineInjectable({
  token: VerticalNavIconService,
  factory: VerticalNavIconService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(VerticalNavIconService, [{
    type: Injectable
  }], null, null);
})();
var VerticalNavService = class {
  constructor() {
    this._animateOnCollapsed = new Subject();
    this._collapsedChanged = new Subject();
    this._collapsed = false;
    this._collapsible = false;
  }
  get animateOnCollapsed() {
    return this._animateOnCollapsed.asObservable();
  }
  get collapsedChanged() {
    return this._collapsedChanged.asObservable();
  }
  get collapsed() {
    return this._collapsed;
  }
  set collapsed(value) {
    value = !!value;
    if (this.collapsible && this._collapsed !== value) {
      this.updateCollapseBehavior(value);
    }
  }
  get collapsible() {
    return this._collapsible;
  }
  set collapsible(value) {
    value = !!value;
    if (this._collapsible !== value) {
      if (!value && this.collapsed) {
        this.updateCollapseBehavior(false);
      }
      this._collapsible = value;
    }
  }
  updateCollapseBehavior(value) {
    this._animateOnCollapsed.next(value);
    this._collapsed = value;
    this._collapsedChanged.next(value);
  }
};
VerticalNavService.ɵfac = function VerticalNavService_Factory(t161) {
  return new (t161 || VerticalNavService)();
};
VerticalNavService.ɵprov = ɵɵdefineInjectable({
  token: VerticalNavService,
  factory: VerticalNavService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(VerticalNavService, [{
    type: Injectable
  }], null, null);
})();
var ClrVerticalNav = class {
  constructor(_navService, _navIconService, _navGroupRegistrationService, commonStrings) {
    this._navService = _navService;
    this._navIconService = _navIconService;
    this._navGroupRegistrationService = _navGroupRegistrationService;
    this.commonStrings = commonStrings;
    this._collapsedChanged = new EventEmitter(true);
    this._sub = this._navService.collapsedChanged.subscribe((value) => {
      this._collapsedChanged.emit(value);
    });
  }
  get collapsible() {
    return this._navService.collapsible;
  }
  set collapsible(value) {
    this._navService.collapsible = value;
  }
  get collapsed() {
    return this._navService.collapsed;
  }
  set collapsed(value) {
    this._navService.collapsed = value;
  }
  get hasNavGroups() {
    return this._navGroupRegistrationService.navGroupCount > 0;
  }
  get hasIcons() {
    return this._navIconService.hasIcons;
  }
  get ariaExpanded() {
    if (!this.collapsible) {
      return null;
    }
    return !this.collapsed ? "true" : "false";
  }
  ngOnDestroy() {
    this._sub.unsubscribe();
  }
  toggleByButton() {
    this.collapsed = !this.collapsed;
  }
};
ClrVerticalNav.ɵfac = function ClrVerticalNav_Factory(t161) {
  return new (t161 || ClrVerticalNav)(ɵɵdirectiveInject(VerticalNavService), ɵɵdirectiveInject(VerticalNavIconService), ɵɵdirectiveInject(VerticalNavGroupRegistrationService), ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrVerticalNav.ɵcmp = ɵɵdefineComponent({
  type: ClrVerticalNav,
  selectors: [["clr-vertical-nav"]],
  hostAttrs: [1, "clr-vertical-nav"],
  hostVars: 6,
  hostBindings: function ClrVerticalNav_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("is-collapsed", ctx.collapsed)("has-nav-groups", ctx.hasNavGroups)("has-icons", ctx.hasIcons);
    }
  },
  inputs: {
    collapsible: [InputFlags.None, "clrVerticalNavCollapsible", "collapsible"],
    collapsed: [InputFlags.None, "clrVerticalNavCollapsed", "collapsed"]
  },
  outputs: {
    _collapsedChanged: "clrVerticalNavCollapsedChange"
  },
  features: [ɵɵProvidersFeature([VerticalNavService, VerticalNavIconService, VerticalNavGroupRegistrationService])],
  ngContentSelectors: _c02,
  decls: 4,
  vars: 2,
  consts: [["type", "button", "class", "nav-trigger", 3, "on-collapse", "click", 4, "ngIf"], [1, "nav-content"], ["type", "button", "class", "nav-btn", "aria-hidden", "true", "tabindex", "-1", 3, "click", 4, "ngIf"], ["type", "button", 1, "nav-trigger", 3, "click"], ["shape", "angle-double", 1, "nav-trigger-icon"], ["type", "button", "aria-hidden", "true", "tabindex", "-1", 1, "nav-btn", 3, "click"]],
  template: function ClrVerticalNav_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, ClrVerticalNav_button_0_Template, 2, 5, "button", 0);
      ɵɵelementStart(1, "div", 1);
      ɵɵprojection(2);
      ɵɵtemplate(3, ClrVerticalNav_button_3_Template, 1, 1, "button", 2);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.collapsible);
      ɵɵadvance(3);
      ɵɵproperty("ngIf", ctx.collapsible && ctx.collapsed);
    }
  },
  dependencies: [NgIf, CdsIconCustomTag],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrVerticalNav, [{
    type: Component,
    args: [{
      selector: "clr-vertical-nav",
      providers: [VerticalNavService, VerticalNavIconService, VerticalNavGroupRegistrationService],
      host: {
        class: "clr-vertical-nav",
        "[class.is-collapsed]": "collapsed",
        "[class.has-nav-groups]": "hasNavGroups",
        "[class.has-icons]": "hasIcons"
      },
      template: `<!--
  ~ Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
  ~ This software is released under MIT license.
  ~ The full license information can be found in LICENSE in the root directory of this project.
  -->

<button
  type="button"
  class="nav-trigger"
  [class.on-collapse]="collapsed"
  [attr.aria-expanded]="ariaExpanded"
  [attr.aria-label]="commonStrings.keys.verticalNavToggle"
  (click)="toggleByButton()"
  *ngIf="collapsible"
>
  <cds-icon
    shape="angle-double"
    class="nav-trigger-icon"
    [attr.direction]="(this.collapsed) ? 'right' : 'left'"
  ></cds-icon>
</button>
<div class="nav-content">
  <ng-content></ng-content>
  <button
    type="button"
    (click)="collapsed = false"
    class="nav-btn"
    aria-hidden="true"
    tabindex="-1"
    [attr.aria-label]="commonStrings.keys.verticalNavToggle"
    *ngIf="collapsible && collapsed"
  ></button>
</div>
`
    }]
  }], function() {
    return [{
      type: VerticalNavService
    }, {
      type: VerticalNavIconService
    }, {
      type: VerticalNavGroupRegistrationService
    }, {
      type: ClrCommonStringsService
    }];
  }, {
    _collapsedChanged: [{
      type: Output,
      args: ["clrVerticalNavCollapsedChange"]
    }],
    collapsible: [{
      type: Input,
      args: ["clrVerticalNavCollapsible"]
    }],
    collapsed: [{
      type: Input,
      args: ["clrVerticalNavCollapsed"]
    }]
  });
})();
var VerticalNavGroupService = class {
  constructor() {
    this._expandChange = new Subject();
  }
  get expandChange() {
    return this._expandChange.asObservable();
  }
  expand() {
    this._expandChange.next(true);
  }
};
VerticalNavGroupService.ɵfac = function VerticalNavGroupService_Factory(t161) {
  return new (t161 || VerticalNavGroupService)();
};
VerticalNavGroupService.ɵprov = ɵɵdefineInjectable({
  token: VerticalNavGroupService,
  factory: VerticalNavGroupService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(VerticalNavGroupService, [{
    type: Injectable
  }], null, null);
})();
var EXPANDED_STATE = "expanded";
var COLLAPSED_STATE = "collapsed";
var ClrVerticalNavGroup = class {
  constructor(_itemExpand, _navGroupRegistrationService, _navGroupService, _navService, commonStrings) {
    this._itemExpand = _itemExpand;
    this._navGroupRegistrationService = _navGroupRegistrationService;
    this._navGroupService = _navGroupService;
    this._navService = _navService;
    this.commonStrings = commonStrings;
    this.expandedChange = new EventEmitter(true);
    this.wasExpanded = false;
    this._subscriptions = [];
    this._expandAnimationState = COLLAPSED_STATE;
    this._navGroupRegistrationService.registerNavGroup();
    this._subscriptions.push(this._itemExpand.expandChange.subscribe((value) => {
      if (value && this.expandAnimationState === COLLAPSED_STATE) {
        if (this._navService.collapsed) {
          this._navService.collapsed = false;
        }
        this.expandAnimationState = EXPANDED_STATE;
      } else if (!value && this.expandAnimationState === EXPANDED_STATE) {
        this.expandAnimationState = COLLAPSED_STATE;
      }
    }));
    this._subscriptions.push(this._navService.animateOnCollapsed.subscribe((goingToCollapse) => {
      if (goingToCollapse && this.expanded) {
        this.wasExpanded = true;
        this.expandAnimationState = COLLAPSED_STATE;
      } else if (!goingToCollapse && this.wasExpanded) {
        this.expandGroup();
        this.wasExpanded = false;
      }
    }));
    this._subscriptions.push(this._navGroupService.expandChange.subscribe((expand) => {
      if (expand && !this.expanded) {
        this.expandGroup();
      }
    }));
  }
  get expanded() {
    return this._itemExpand.expanded;
  }
  set expanded(value) {
    if (this._itemExpand.expanded !== value) {
      this._itemExpand.expanded = value;
      this.expandedChange.emit(value);
    }
  }
  set userExpandedInput(value) {
    value = !!value;
    if (this.expanded !== value) {
      this.toggleExpand();
    }
  }
  get expandAnimationState() {
    return this._expandAnimationState;
  }
  set expandAnimationState(value) {
    if (value !== this._expandAnimationState) {
      this._expandAnimationState = value;
    }
  }
  ngAfterContentInit() {
    if (this._navService.collapsed && this.expanded) {
      this.wasExpanded = true;
      this.expandAnimationState = COLLAPSED_STATE;
    }
  }
  ngOnDestroy() {
    this._subscriptions.forEach((sub) => sub.unsubscribe());
    this._navGroupRegistrationService.unregisterNavGroup();
  }
  expandGroup() {
    this.expanded = true;
    this.expandAnimationState = EXPANDED_STATE;
  }
  collapseGroup() {
    this.expandAnimationState = COLLAPSED_STATE;
  }
  // closes a group after the collapse animation
  expandAnimationDone($event) {
    if ($event.toState === COLLAPSED_STATE) {
      this.expanded = false;
    }
  }
  toggleExpand() {
    if (this.expanded) {
      this.collapseGroup();
    } else {
      if (this._navService.collapsed) {
        this._navService.collapsed = false;
      }
      this.expandGroup();
    }
  }
};
ClrVerticalNavGroup.ɵfac = function ClrVerticalNavGroup_Factory(t161) {
  return new (t161 || ClrVerticalNavGroup)(ɵɵdirectiveInject(IfExpandService), ɵɵdirectiveInject(VerticalNavGroupRegistrationService), ɵɵdirectiveInject(VerticalNavGroupService), ɵɵdirectiveInject(VerticalNavService), ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrVerticalNavGroup.ɵcmp = ɵɵdefineComponent({
  type: ClrVerticalNavGroup,
  selectors: [["clr-vertical-nav-group"]],
  hostAttrs: [1, "nav-group"],
  hostVars: 2,
  hostBindings: function ClrVerticalNavGroup_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("is-expanded", ctx.expanded);
    }
  },
  inputs: {
    userExpandedInput: [InputFlags.None, "clrVerticalNavGroupExpanded", "userExpandedInput"]
  },
  outputs: {
    expandedChange: "clrVerticalNavGroupExpandedChange"
  },
  features: [ɵɵProvidersFeature([IfExpandService, VerticalNavGroupService])],
  ngContentSelectors: _c88,
  decls: 9,
  vars: 3,
  consts: [[1, "nav-group-content"], ["type", "button", 1, "nav-group-trigger", 3, "click"], [1, "nav-group-text"], ["shape", "angle", 1, "nav-group-trigger-icon"], [1, "nav-group-children"]],
  template: function ClrVerticalNavGroup_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c87);
      ɵɵelementStart(0, "div", 0);
      ɵɵprojection(1);
      ɵɵelementStart(2, "button", 1);
      ɵɵlistener("click", function ClrVerticalNavGroup_Template_button_click_2_listener() {
        return ctx.toggleExpand();
      });
      ɵɵprojection(3, 1);
      ɵɵelementStart(4, "div", 2);
      ɵɵprojection(5, 2);
      ɵɵelementEnd();
      ɵɵelement(6, "cds-icon", 3);
      ɵɵelementEnd()();
      ɵɵelementStart(7, "div", 4);
      ɵɵlistener("@clrExpand.done", function ClrVerticalNavGroup_Template_div_animation_clrExpand_done_7_listener($event) {
        return ctx.expandAnimationDone($event);
      });
      ɵɵprojection(8, 3);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance(2);
      ɵɵattribute("aria-expanded", ctx.expanded);
      ɵɵadvance(4);
      ɵɵattribute("direction", ctx.expanded ? "down" : "right");
      ɵɵadvance();
      ɵɵproperty("@clrExpand", ctx.expandAnimationState);
    }
  },
  dependencies: [CdsIconCustomTag],
  encapsulation: 2,
  data: {
    animation: [trigger("clrExpand", [state(EXPANDED_STATE, style({
      height: "*"
    })), state(COLLAPSED_STATE, style({
      height: 0,
      visibility: "hidden"
    })), transition(`${EXPANDED_STATE} <=> ${COLLAPSED_STATE}`, animate("0.2s ease-in-out"))])]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrVerticalNavGroup, [{
    type: Component,
    args: [{
      selector: "clr-vertical-nav-group",
      providers: [IfExpandService, VerticalNavGroupService],
      animations: [trigger("clrExpand", [state(EXPANDED_STATE, style({
        height: "*"
      })), state(COLLAPSED_STATE, style({
        height: 0,
        visibility: "hidden"
      })), transition(`${EXPANDED_STATE} <=> ${COLLAPSED_STATE}`, animate("0.2s ease-in-out"))])],
      host: {
        class: "nav-group"
      },
      template: `<!--
  ~ Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
  ~ This software is released under MIT license.
  ~ The full license information can be found in LICENSE in the root directory of this project.
  -->

<div class="nav-group-content">
  <ng-content select="[clrVerticalNavLink]"></ng-content>
  <button class="nav-group-trigger" type="button" [attr.aria-expanded]="expanded" (click)="toggleExpand()">
    <ng-content select="[clrVerticalNavIcon]"></ng-content>
    <div class="nav-group-text">
      <ng-content></ng-content>
    </div>
    <cds-icon shape="angle" class="nav-group-trigger-icon" [attr.direction]="expanded ? 'down' : 'right'"></cds-icon>
  </button>
</div>
<!--TODO: This animation needs to be added to the clr-vertical-nav-group-children component-->
<div class="nav-group-children" [@clrExpand]="expandAnimationState" (@clrExpand.done)="expandAnimationDone($event)">
  <ng-content select="[clrIfExpanded], clr-vertical-nav-group-children"></ng-content>
</div>
`
    }]
  }], function() {
    return [{
      type: IfExpandService
    }, {
      type: VerticalNavGroupRegistrationService
    }, {
      type: VerticalNavGroupService
    }, {
      type: VerticalNavService
    }, {
      type: ClrCommonStringsService
    }];
  }, {
    expandedChange: [{
      type: Output,
      args: ["clrVerticalNavGroupExpandedChange"]
    }],
    expanded: [{
      type: HostBinding,
      args: ["class.is-expanded"]
    }],
    userExpandedInput: [{
      type: Input,
      args: ["clrVerticalNavGroupExpanded"]
    }]
  });
})();
var ClrVerticalNavGroupChildren = class {
};
ClrVerticalNavGroupChildren.ɵfac = function ClrVerticalNavGroupChildren_Factory(t161) {
  return new (t161 || ClrVerticalNavGroupChildren)();
};
ClrVerticalNavGroupChildren.ɵcmp = ɵɵdefineComponent({
  type: ClrVerticalNavGroupChildren,
  selectors: [["clr-vertical-nav-group-children"]],
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrVerticalNavGroupChildren_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrVerticalNavGroupChildren, [{
    type: Component,
    args: [{
      selector: "clr-vertical-nav-group-children",
      template: `<ng-content></ng-content>`
    }]
  }], null, null);
})();
var ClrVerticalNavIcon = class {
  constructor(_verticalNavIconService) {
    this._verticalNavIconService = _verticalNavIconService;
    this._verticalNavIconService.registerIcon();
  }
  ngOnDestroy() {
    this._verticalNavIconService.unregisterIcon();
  }
};
ClrVerticalNavIcon.ɵfac = function ClrVerticalNavIcon_Factory(t161) {
  return new (t161 || ClrVerticalNavIcon)(ɵɵdirectiveInject(VerticalNavIconService));
};
ClrVerticalNavIcon.ɵdir = ɵɵdefineDirective({
  type: ClrVerticalNavIcon,
  selectors: [["", "clrVerticalNavIcon", ""]],
  hostAttrs: [1, "nav-icon"]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrVerticalNavIcon, [{
    type: Directive,
    args: [{
      selector: "[clrVerticalNavIcon]",
      host: {
        class: "nav-icon"
      }
    }]
  }], function() {
    return [{
      type: VerticalNavIconService
    }];
  }, null);
})();
var ClrVerticalNavLink = class {
  constructor(host, ref, navGroupService) {
    this.destroy$ = new Subject();
    navGroupService && fromEvent(host.nativeElement, "click").pipe(takeUntil(this.destroy$)).subscribe(() => {
      navGroupService.expand();
      ref.markForCheck();
    });
  }
  ngOnDestroy() {
    this.destroy$.next();
  }
};
ClrVerticalNavLink.ɵfac = function ClrVerticalNavLink_Factory(t161) {
  return new (t161 || ClrVerticalNavLink)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(VerticalNavGroupService, 8));
};
ClrVerticalNavLink.ɵcmp = ɵɵdefineComponent({
  type: ClrVerticalNavLink,
  selectors: [["", "clrVerticalNavLink", ""]],
  hostAttrs: [1, "nav-link"],
  attrs: _c89,
  ngContentSelectors: _c91,
  decls: 3,
  vars: 0,
  consts: [[1, "nav-text"]],
  template: function ClrVerticalNavLink_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c90);
      ɵɵprojection(0);
      ɵɵelementStart(1, "span", 0);
      ɵɵprojection(2, 1);
      ɵɵelementEnd();
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrVerticalNavLink, [{
    type: Component,
    args: [{
      selector: "[clrVerticalNavLink]",
      template: `
    <ng-content select="[clrVerticalNavIcon]"></ng-content>
    <span class="nav-text">
      <ng-content></ng-content>
    </span>
  `,
      host: {
        class: "nav-link"
      }
    }]
  }], function() {
    return [{
      type: ElementRef
    }, {
      type: ChangeDetectorRef
    }, {
      type: VerticalNavGroupService,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [VerticalNavGroupService]
      }]
    }];
  }, null);
})();
var CLR_VERTICAL_NAV_DIRECTIVES = [ClrVerticalNav, ClrVerticalNavLink, ClrVerticalNavGroup, ClrVerticalNavGroupChildren, ClrVerticalNavIcon];
var ClrVerticalNavModule = class {
  constructor() {
    r24.addIcons(o28, o29);
  }
};
ClrVerticalNavModule.ɵfac = function ClrVerticalNavModule_Factory(t161) {
  return new (t161 || ClrVerticalNavModule)();
};
ClrVerticalNavModule.ɵmod = ɵɵdefineNgModule({
  type: ClrVerticalNavModule,
  declarations: [ClrVerticalNav, ClrVerticalNavLink, ClrVerticalNavGroup, ClrVerticalNavGroupChildren, ClrVerticalNavIcon],
  imports: [CommonModule, ClrIconModule, ClrConditionalModule, ClrFocusOnViewInitModule],
  exports: [ClrVerticalNav, ClrVerticalNavLink, ClrVerticalNavGroup, ClrVerticalNavGroupChildren, ClrVerticalNavIcon, ClrConditionalModule, ClrIconModule, ClrFocusOnViewInitModule]
});
ClrVerticalNavModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrIconModule, ClrConditionalModule, ClrFocusOnViewInitModule, ClrConditionalModule, ClrIconModule, ClrFocusOnViewInitModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrVerticalNavModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrIconModule, ClrConditionalModule, ClrFocusOnViewInitModule],
      declarations: [CLR_VERTICAL_NAV_DIRECTIVES],
      exports: [CLR_VERTICAL_NAV_DIRECTIVES, ClrConditionalModule, ClrIconModule, ClrFocusOnViewInitModule]
    }]
  }], function() {
    return [];
  }, null);
})();
var ClrLayoutModule = class {
};
ClrLayoutModule.ɵfac = function ClrLayoutModule_Factory(t161) {
  return new (t161 || ClrLayoutModule)();
};
ClrLayoutModule.ɵmod = ɵɵdefineNgModule({
  type: ClrLayoutModule,
  exports: [ClrMainContainerModule, ClrNavigationModule, ClrTabsModule, ClrVerticalNavModule]
});
ClrLayoutModule.ɵinj = ɵɵdefineInjector({
  imports: [ClrMainContainerModule, ClrNavigationModule, ClrTabsModule, ClrVerticalNavModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrLayoutModule, [{
    type: NgModule,
    args: [{
      exports: [ClrMainContainerModule, ClrNavigationModule, ClrTabsModule, ClrVerticalNavModule]
    }]
  }], null, null);
})();
var ScrollingService = class {
  constructor(_document) {
    this._document = _document;
  }
  stopScrolling() {
    this._document.body.classList.add("no-scrolling");
  }
  resumeScrolling() {
    if (this._document.body.classList.contains("no-scrolling")) {
      this._document.body.classList.remove("no-scrolling");
    }
  }
};
ScrollingService.ɵfac = function ScrollingService_Factory(t161) {
  return new (t161 || ScrollingService)(ɵɵinject(DOCUMENT));
};
ScrollingService.ɵprov = ɵɵdefineInjectable({
  token: ScrollingService,
  factory: ScrollingService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScrollingService, [{
    type: Injectable
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }];
  }, null);
})();
var ClrModal = class {
  constructor(_scrollingService, commonStrings, modalStackService) {
    this._scrollingService = _scrollingService;
    this.commonStrings = commonStrings;
    this.modalStackService = modalStackService;
    this.modalId = uniqueIdFactory();
    this._open = false;
    this._openChanged = new EventEmitter(false);
    this.closable = true;
    this.closeButtonAriaLabel = this.commonStrings.keys.close;
    this.staticBackdrop = true;
    this.skipAnimation = "false";
    this.stopClose = false;
    this.altClose = new EventEmitter(false);
    this.labelledBy = this.modalId;
  }
  // Detect when _open is set to true and set no-scrolling to true
  ngOnChanges(changes) {
    if (changes && Object.prototype.hasOwnProperty.call(changes, "_open")) {
      if (changes._open.currentValue) {
        this._scrollingService.stopScrolling();
        this.modalStackService.trackModalOpen(this);
      } else {
        this._scrollingService.resumeScrolling();
      }
    }
  }
  ngOnDestroy() {
    this._scrollingService.resumeScrolling();
  }
  open() {
    if (this._open) {
      return;
    }
    this._open = true;
    this._openChanged.emit(true);
    this.modalStackService.trackModalOpen(this);
  }
  close() {
    if (this.stopClose) {
      this.altClose.emit(false);
      return;
    }
    if (!this.closable || !this._open) {
      return;
    }
    this._open = false;
  }
  fadeDone(e83) {
    if (e83.toState === "void") {
      this._openChanged.emit(false);
      this.modalStackService.trackModalClose(this);
    }
  }
};
ClrModal.ɵfac = function ClrModal_Factory(t161) {
  return new (t161 || ClrModal)(ɵɵdirectiveInject(ScrollingService), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(ModalStackService));
};
ClrModal.ɵcmp = ɵɵdefineComponent({
  type: ClrModal,
  selectors: [["clr-modal"]],
  hostVars: 2,
  hostBindings: function ClrModal_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("open", ctx._open);
    }
  },
  inputs: {
    _open: [InputFlags.None, "clrModalOpen", "_open"],
    closable: [InputFlags.None, "clrModalClosable", "closable"],
    closeButtonAriaLabel: [InputFlags.None, "clrModalCloseButtonAriaLabel", "closeButtonAriaLabel"],
    size: [InputFlags.None, "clrModalSize", "size"],
    staticBackdrop: [InputFlags.None, "clrModalStaticBackdrop", "staticBackdrop"],
    skipAnimation: [InputFlags.None, "clrModalSkipAnimation", "skipAnimation"],
    stopClose: [InputFlags.None, "clrModalPreventClose", "stopClose"],
    labelledBy: [InputFlags.None, "clrModalLabelledById", "labelledBy"]
  },
  outputs: {
    _openChanged: "clrModalOpenChange",
    altClose: "clrModalAlternateClose"
  },
  features: [ɵɵProvidersFeature([], [ScrollingService]), ɵɵNgOnChangesFeature],
  ngContentSelectors: _c93,
  decls: 1,
  vars: 1,
  consts: [["class", "modal", 4, "ngIf"], [1, "modal"], ["cdkTrapFocus", "", "role", "dialog", "aria-modal", "true", 1, "modal-dialog", 3, "cdkTrapFocusAutoCapture"], [1, "clr-sr-only"], [1, "modal-content-wrapper"], [1, "modal-content"], [1, "modal-header--accessible"], ["cdkFocusInitial", "", "tabindex", "-1", 1, "modal-title-wrapper", 3, "id"], ["type", "button", "class", "close", 3, "click", 4, "ngIf"], [1, "modal-body-wrapper"], ["aria-hidden", "true", 1, "modal-backdrop", 3, "click"], ["type", "button", 1, "close", 3, "click"], ["shape", "window-close"]],
  template: function ClrModal_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c92);
      ɵɵtemplate(0, ClrModal_div_0_Template, 17, 15, "div", 0);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx._open);
    }
  },
  dependencies: [NgIf, CdkTrapFocusModule_CdkTrapFocus, CdsIconCustomTag],
  styles: ["[_nghost-%COMP%]{display:none}.open[_nghost-%COMP%]{display:inline}"],
  data: {
    animation: [trigger("fadeDown", [transition("* => false", [style({
      opacity: 0,
      transform: "translate(0, -25%)"
    }), animate("0.2s ease-in-out")]), transition("false => *", [animate("0.2s ease-in-out", style({
      opacity: 0,
      transform: "translate(0, -25%)"
    }))])]), trigger("fade", [transition("void => *", [style({
      opacity: 0
    }), animate("0.2s ease-in-out", style({
      opacity: 0.85
    }))]), transition("* => void", [animate("0.2s ease-in-out", style({
      opacity: 0
    }))])])]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrModal, [{
    type: Component,
    args: [{
      selector: "clr-modal",
      viewProviders: [ScrollingService],
      animations: [trigger("fadeDown", [transition("* => false", [style({
        opacity: 0,
        transform: "translate(0, -25%)"
      }), animate("0.2s ease-in-out")]), transition("false => *", [animate("0.2s ease-in-out", style({
        opacity: 0,
        transform: "translate(0, -25%)"
      }))])]), trigger("fade", [transition("void => *", [style({
        opacity: 0
      }), animate("0.2s ease-in-out", style({
        opacity: 0.85
      }))]), transition("* => void", [animate("0.2s ease-in-out", style({
        opacity: 0
      }))])])],
      template: `<!--
  ~ Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
  ~ This software is released under MIT license.
  ~ The full license information can be found in LICENSE in the root directory of this project.
  -->

<div class="modal" *ngIf="_open">
  <!--fixme: revisit when ngClass works with exit animation-->
  <div
    cdkTrapFocus
    [cdkTrapFocusAutoCapture]="true"
    [@fadeDown]="skipAnimation"
    (@fadeDown.done)="fadeDone($event)"
    class="modal-dialog"
    [class.modal-sm]="size == 'sm'"
    [class.modal-lg]="size == 'lg'"
    [class.modal-xl]="size == 'xl'"
    role="dialog"
    aria-modal="true"
    [attr.aria-hidden]="!_open"
    [attr.aria-labelledby]="labelledBy"
  >
    <div class="clr-sr-only">{{commonStrings.keys.modalContentStart}}</div>
    <div class="modal-content-wrapper">
      <!-- only used in wizards -->
      <ng-content select=".modal-nav"></ng-content>

      <div class="modal-content">
        <div class="modal-header--accessible">
          <div class="modal-title-wrapper" id="{{modalId}}" cdkFocusInitial tabindex="-1">
            <ng-content select=".modal-title"></ng-content>
          </div>
          <button
            type="button"
            [attr.aria-label]="closeButtonAriaLabel || commonStrings.keys.close"
            class="close"
            *ngIf="closable"
            (click)="close()"
          >
            <cds-icon shape="window-close"></cds-icon>
          </button>
        </div>
        <div class="modal-body-wrapper">
          <ng-content select=".modal-body"></ng-content>
        </div>
        <ng-content select=".modal-footer"></ng-content>
      </div>
    </div>
    <div class="clr-sr-only">{{commonStrings.keys.modalContentEnd}}</div>
  </div>

  <div [@fade] class="modal-backdrop" aria-hidden="true" (click)="staticBackdrop || close()"></div>
</div>
`,
      styles: [":host{display:none}:host.open{display:inline}\n"]
    }]
  }], function() {
    return [{
      type: ScrollingService
    }, {
      type: ClrCommonStringsService
    }, {
      type: ModalStackService
    }];
  }, {
    _open: [{
      type: Input,
      args: ["clrModalOpen"]
    }, {
      type: HostBinding,
      args: ["class.open"]
    }],
    _openChanged: [{
      type: Output,
      args: ["clrModalOpenChange"]
    }],
    closable: [{
      type: Input,
      args: ["clrModalClosable"]
    }],
    closeButtonAriaLabel: [{
      type: Input,
      args: ["clrModalCloseButtonAriaLabel"]
    }],
    size: [{
      type: Input,
      args: ["clrModalSize"]
    }],
    staticBackdrop: [{
      type: Input,
      args: ["clrModalStaticBackdrop"]
    }],
    skipAnimation: [{
      type: Input,
      args: ["clrModalSkipAnimation"]
    }],
    stopClose: [{
      type: Input,
      args: ["clrModalPreventClose"]
    }],
    altClose: [{
      type: Output,
      args: ["clrModalAlternateClose"]
    }],
    labelledBy: [{
      type: Input,
      args: ["clrModalLabelledById"]
    }]
  });
})();
var ClrModalBody = class {
  constructor(renderer, host, ngZone) {
    this.renderer = renderer;
    this.host = host;
    this.tabindex = "0";
    this.unlisteners = [];
    ngZone.runOutsideAngular(() => {
      this.observer = new ResizeObserver(() => this.addOrRemoveTabIndex());
      this.observer.observe(this.host.nativeElement);
      this.unlisteners.push(this.renderer.listen(this.host.nativeElement, "mouseup", () => {
        this.addOrRemoveTabIndex();
      }), this.renderer.listen(this.host.nativeElement, "mousedown", () => {
        this.removeTabIndex();
      }));
    });
  }
  ngOnDestroy() {
    while (this.unlisteners.length) {
      this.unlisteners.pop()();
    }
    this.observer.disconnect();
    this.observer = null;
  }
  addTabIndex() {
    this.renderer.setAttribute(this.host.nativeElement, "tabindex", this.tabindex);
  }
  removeTabIndex() {
    this.renderer.removeAttribute(this.host.nativeElement, "tabindex");
  }
  addOrRemoveTabIndex() {
    const modalBody = this.host.nativeElement.parentElement;
    if (modalBody && modalBody.clientHeight < modalBody.scrollHeight) {
      this.addTabIndex();
    } else {
      this.removeTabIndex();
    }
  }
};
ClrModalBody.ɵfac = function ClrModalBody_Factory(t161) {
  return new (t161 || ClrModalBody)(ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NgZone));
};
ClrModalBody.ɵdir = ɵɵdefineDirective({
  type: ClrModalBody,
  selectors: [["", 8, "modal-body"]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrModalBody, [{
    type: Directive,
    args: [{
      selector: ".modal-body"
    }]
  }], function() {
    return [{
      type: Renderer2
    }, {
      type: ElementRef
    }, {
      type: NgZone
    }];
  }, null);
})();
var CLR_MODAL_DIRECTIVES = [ClrModal, ClrModalBody];
var ClrModalModule = class {
  constructor() {
    r24.addIcons(n30);
  }
};
ClrModalModule.ɵfac = function ClrModalModule_Factory(t161) {
  return new (t161 || ClrModalModule)();
};
ClrModalModule.ɵmod = ɵɵdefineNgModule({
  type: ClrModalModule,
  declarations: [ClrModal, ClrModalBody],
  imports: [CommonModule, CdkTrapFocusModule, ClrIconModule],
  exports: [ClrModal, ClrModalBody, ClrIconModule]
});
ClrModalModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, CdkTrapFocusModule, ClrIconModule, ClrIconModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrModalModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, CdkTrapFocusModule, ClrIconModule],
      declarations: [CLR_MODAL_DIRECTIVES],
      exports: [CLR_MODAL_DIRECTIVES, ClrIconModule]
    }]
  }], function() {
    return [];
  }, null);
})();
var SIGNPOST_POSITIONS = {
  "top-left": {
    anchorPoint: Point.TOP_CENTER,
    popoverPoint: Point.BOTTOM_RIGHT,
    offsetY: -16,
    offsetX: 0
  },
  "top-middle": {
    anchorPoint: Point.TOP_CENTER,
    popoverPoint: Point.BOTTOM_CENTER,
    offsetY: -16,
    offsetX: 0
  },
  "top-right": {
    anchorPoint: Point.TOP_CENTER,
    popoverPoint: Point.BOTTOM_LEFT,
    offsetY: -16,
    offsetX: 0
  },
  "right-top": {
    anchorPoint: Point.RIGHT_CENTER,
    popoverPoint: Point.LEFT_BOTTOM,
    offsetY: 0,
    offsetX: 16
  },
  "right-middle": {
    anchorPoint: Point.RIGHT_CENTER,
    popoverPoint: Point.LEFT_CENTER,
    offsetY: 0,
    offsetX: 16
  },
  "right-bottom": {
    anchorPoint: Point.RIGHT_CENTER,
    popoverPoint: Point.LEFT_TOP,
    offsetY: 0,
    offsetX: 16
  },
  "bottom-right": {
    anchorPoint: Point.BOTTOM_CENTER,
    popoverPoint: Point.TOP_LEFT,
    offsetY: 16,
    offsetX: 0
  },
  "bottom-middle": {
    anchorPoint: Point.BOTTOM_CENTER,
    popoverPoint: Point.TOP_CENTER,
    offsetY: 16,
    offsetX: 0
  },
  "bottom-left": {
    anchorPoint: Point.BOTTOM_CENTER,
    popoverPoint: Point.TOP_RIGHT,
    offsetY: 16,
    offsetX: 0
  },
  "left-bottom": {
    anchorPoint: Point.LEFT_CENTER,
    popoverPoint: Point.RIGHT_TOP,
    offsetY: 0,
    offsetX: -16
  },
  "left-middle": {
    anchorPoint: Point.LEFT_CENTER,
    popoverPoint: Point.RIGHT_CENTER,
    offsetY: 0,
    offsetX: -16
  },
  "left-top": {
    anchorPoint: Point.LEFT_CENTER,
    popoverPoint: Point.RIGHT_BOTTOM,
    offsetY: 0,
    offsetX: -16
  },
  default: {
    anchorPoint: Point.RIGHT_CENTER,
    popoverPoint: Point.LEFT_CENTER,
    offsetY: 0,
    offsetX: 16
  }
};
var POSITIONS$1 = ["top-left", "top-middle", "top-right", "right-top", "right-middle", "right-bottom", "bottom-right", "bottom-middle", "bottom-left", "left-bottom", "left-middle", "left-top"];
var ClrSignpostContent = class extends AbstractPopover {
  constructor(injector, parentHost, commonStrings, signpostIdService, signpostFocusManager, platformId, document2) {
    super(injector, parentHost);
    this.commonStrings = commonStrings;
    this.signpostIdService = signpostIdService;
    this.signpostFocusManager = signpostFocusManager;
    this.platformId = platformId;
    this.signpostContentId = uniqueIdFactory();
    if (!parentHost) {
      throw new Error("clr-signpost-content should only be used inside of a clr-signpost");
    }
    this.position = "right-middle";
    this.closeOnOutsideClick = true;
    this.signpostIdService.setId(this.signpostContentId);
    this.document = document2;
  }
  /*********
   *
   * @description
   * A setter for the position of the ClrSignpostContent popover. This is a combination of the following:
   * - anchorPoint - where on the trigger to anchor the ClrSignpostContent
   * - popoverPoint - where on the ClrSignpostContent container to align with the anchorPoint
   * - offsetY - where on the Y axis to align the ClrSignpostContent so it meets specs
   * - offsetX - where on the X axis to align the ClrSignpostContent so it meets specs
   * There are 12 possible positions to place a ClrSignpostContent container:
   * - top-left
   * - top-middle
   * - top-right
   * - right-top
   * - right-middle
   * - right-bottom
   * - bottom-right
   * - bottom-middle
   * - bottom-left
   * - left-bottom
   * - left-middle
   * - left-top
   *
   * I think of it as follows for 'top-left' -> CONTAINER_SIDE-SIDE_POSITION. In this case CONTAINER_SIDE is 'top'
   * meaning the top of the trigger icon (above the icon that hides/shows) the ClrSignpostContent. And, SIDE_POSITION
   * is 'left' meaning two things: 1) the ClrSignpostContent container extends to the left and 2) the 'arrow/pointer'
   * linking the SingpostContent to the trigger points down at the horizontal center of the trigger icon.
   *
   * @param newPosition
   */
  get position() {
    return this._position;
  }
  set position(position) {
    this.renderer.removeClass(this.el.nativeElement, this.position);
    if (position && POSITIONS$1.indexOf(position) > -1) {
      this._position = position;
    } else {
      this._position = "right-middle";
    }
    this.renderer.addClass(this.el.nativeElement, this.position);
    const setPosition = SIGNPOST_POSITIONS[this.position];
    this.anchorPoint = setPosition.anchorPoint;
    this.popoverPoint = setPosition.popoverPoint;
    this.popoverOptions.offsetY = setPosition.offsetY;
    this.popoverOptions.offsetX = setPosition.offsetX;
  }
  /**********
   *
   * @description
   * Close function that uses the signpost instance to toggle the state of the content popover.
   *
   */
  close() {
    this.toggleService.open = false;
  }
  ngOnDestroy() {
    super.ngOnDestroy();
    if (isPlatformBrowser(this.platformId) && this.el.nativeElement.contains(this.document.activeElement)) {
      this.signpostFocusManager.focusTrigger();
    }
  }
};
ClrSignpostContent.ɵfac = function ClrSignpostContent_Factory(t161) {
  return new (t161 || ClrSignpostContent)(ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(POPOVER_HOST_ANCHOR, 8), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(SignpostIdService), ɵɵdirectiveInject(SignpostFocusManager), ɵɵdirectiveInject(PLATFORM_ID), ɵɵdirectiveInject(DOCUMENT));
};
ClrSignpostContent.ɵcmp = ɵɵdefineComponent({
  type: ClrSignpostContent,
  selectors: [["clr-signpost-content"]],
  hostVars: 3,
  hostBindings: function ClrSignpostContent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵhostProperty("id", ctx.signpostContentId);
      ɵɵclassProp("signpost-content", true);
    }
  },
  inputs: {
    position: [InputFlags.None, "clrPosition", "position"]
  },
  features: [ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c02,
  decls: 7,
  vars: 3,
  consts: [[1, "signpost-wrap"], [1, "popover-pointer"], [1, "signpost-content-header"], ["type", "button", 1, "signpost-action", "close", 3, "click"], ["shape", "window-close"], ["tabindex", "0", 1, "signpost-content-body"]],
  template: function ClrSignpostContent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "div", 0);
      ɵɵelement(1, "div", 1);
      ɵɵelementStart(2, "div", 2)(3, "button", 3);
      ɵɵlistener("click", function ClrSignpostContent_Template_button_click_3_listener() {
        return ctx.close();
      });
      ɵɵelement(4, "cds-icon", 4);
      ɵɵelementEnd()();
      ɵɵelementStart(5, "div", 5);
      ɵɵprojection(6);
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵadvance(3);
      ɵɵattribute("aria-label", ctx.commonStrings.keys.signpostClose)("aria-controls", ctx.signpostContentId);
      ɵɵadvance();
      ɵɵattribute("title", ctx.commonStrings.keys.close);
    }
  },
  dependencies: [CdsIconCustomTag],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrSignpostContent, [{
    type: Component,
    args: [{
      selector: "clr-signpost-content",
      template: `
    <div class="signpost-wrap">
      <div class="popover-pointer"></div>
      <div class="signpost-content-header">
        <button
          type="button"
          [attr.aria-label]="commonStrings.keys.signpostClose"
          class="signpost-action close"
          (click)="close()"
          [attr.aria-controls]="signpostContentId"
        >
          <cds-icon shape="window-close" [attr.title]="commonStrings.keys.close"></cds-icon>
        </button>
      </div>
      <div class="signpost-content-body" tabindex="0">
        <ng-content></ng-content>
      </div>
    </div>
  `,
      host: {
        "[class.signpost-content]": "true",
        "[id]": "signpostContentId"
      }
    }]
  }], function() {
    return [{
      type: Injector
    }, {
      type: ElementRef,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [POPOVER_HOST_ANCHOR]
      }]
    }, {
      type: ClrCommonStringsService
    }, {
      type: SignpostIdService
    }, {
      type: SignpostFocusManager
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }];
  }, {
    position: [{
      type: Input,
      args: ["clrPosition"]
    }]
  });
})();
var CLR_SIGNPOST_DIRECTIVES = [ClrSignpost, ClrSignpostContent, ClrSignpostTrigger];
var ClrSignpostModule = class {
  constructor() {
    r24.addIcons(n30, r29);
  }
};
ClrSignpostModule.ɵfac = function ClrSignpostModule_Factory(t161) {
  return new (t161 || ClrSignpostModule)();
};
ClrSignpostModule.ɵmod = ɵɵdefineNgModule({
  type: ClrSignpostModule,
  declarations: [ClrSignpost, ClrSignpostContent, ClrSignpostTrigger],
  imports: [CommonModule, ClrIconModule, ClrFocusOnViewInitModule],
  exports: [ClrSignpost, ClrSignpostContent, ClrSignpostTrigger, ClrConditionalModule]
});
ClrSignpostModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrIconModule, ClrFocusOnViewInitModule, ClrConditionalModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrSignpostModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrIconModule, ClrFocusOnViewInitModule],
      declarations: [CLR_SIGNPOST_DIRECTIVES],
      exports: [CLR_SIGNPOST_DIRECTIVES, ClrConditionalModule]
    }]
  }], function() {
    return [];
  }, null);
})();
var TooltipIdService = class {
  constructor() {
    this._id = new Subject();
  }
  get id() {
    return this._id.asObservable();
  }
  updateId(id) {
    this._id.next(id);
  }
};
TooltipIdService.ɵfac = function TooltipIdService_Factory(t161) {
  return new (t161 || TooltipIdService)();
};
TooltipIdService.ɵprov = ɵɵdefineInjectable({
  token: TooltipIdService,
  factory: TooltipIdService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TooltipIdService, [{
    type: Injectable
  }], null, null);
})();
var TooltipMouseService = class {
  constructor(toggleService) {
    this.toggleService = toggleService;
  }
  onMouseEnterTrigger() {
    this.mouseOverTrigger = true;
    this.toggleService.open = true;
  }
  onMouseLeaveTrigger() {
    this.mouseOverTrigger = false;
    this.hideIfMouseOut();
  }
  onMouseEnterContent() {
    this.mouseOverContent = true;
  }
  onMouseLeaveContent() {
    this.mouseOverContent = false;
    this.hideIfMouseOut();
  }
  hideIfMouseOut() {
    setTimeout(() => {
      if (!this.mouseOverTrigger && !this.mouseOverContent) {
        this.toggleService.open = false;
      }
    }, 0);
  }
};
TooltipMouseService.ɵfac = function TooltipMouseService_Factory(t161) {
  return new (t161 || TooltipMouseService)(ɵɵinject(ClrPopoverToggleService));
};
TooltipMouseService.ɵprov = ɵɵdefineInjectable({
  token: TooltipMouseService,
  factory: TooltipMouseService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TooltipMouseService, [{
    type: Injectable
  }], function() {
    return [{
      type: ClrPopoverToggleService
    }];
  }, null);
})();
var ClrTooltip = class {
};
ClrTooltip.ɵfac = function ClrTooltip_Factory(t161) {
  return new (t161 || ClrTooltip)();
};
ClrTooltip.ɵcmp = ɵɵdefineComponent({
  type: ClrTooltip,
  selectors: [["clr-tooltip"]],
  hostVars: 2,
  hostBindings: function ClrTooltip_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("tooltip", true);
    }
  },
  features: [ɵɵProvidersFeature([TooltipIdService, TooltipMouseService]), ɵɵHostDirectivesFeature([ClrPopoverHostDirective])],
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrTooltip_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTooltip, [{
    type: Component,
    args: [{
      selector: "clr-tooltip",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.tooltip]": "true"
      },
      providers: [TooltipIdService, TooltipMouseService],
      hostDirectives: [ClrPopoverHostDirective]
    }]
  }], null, null);
})();
function assertNever(value) {
  throw new Error(`Unhandled value: ${value}`);
}
var POSITIONS = ["bottom-left", "bottom-right", "top-left", "top-right", "right", "left"];
var SIZES = ["xs", "sm", "md", "lg"];
var defaultPosition = "right";
var defaultSize = "sm";
var ClrTooltipContent = class extends AbstractPopover {
  constructor(injector, parentHost, tooltipIdService, tooltipMouseService) {
    super(injector, parentHost);
    this.tooltipIdService = tooltipIdService;
    this.tooltipMouseService = tooltipMouseService;
    if (!parentHost) {
      throw new Error("clr-tooltip-content should only be used inside of a clr-tooltip");
    }
    this.id = uniqueIdFactory();
  }
  get id() {
    return this._id;
  }
  set id(value) {
    const id = value || "";
    this._id = id;
    this.tooltipIdService.updateId(id);
  }
  get position() {
    return this._position;
  }
  set position(value) {
    const oldPosition = this._position;
    const newPosition = POSITIONS.includes(value) ? value : defaultPosition;
    this._position = newPosition;
    this.updateCssClass({
      oldClass: `tooltip-${oldPosition}`,
      newClass: `tooltip-${newPosition}`
    });
    switch (newPosition) {
      case "top-right":
        this.anchorPoint = Point.TOP_CENTER;
        this.popoverPoint = Point.LEFT_BOTTOM;
        break;
      case "top-left":
        this.anchorPoint = Point.TOP_CENTER;
        this.popoverPoint = Point.RIGHT_BOTTOM;
        break;
      case "bottom-right":
        this.anchorPoint = Point.BOTTOM_CENTER;
        this.popoverPoint = Point.LEFT_TOP;
        break;
      case "bottom-left":
        this.anchorPoint = Point.BOTTOM_CENTER;
        this.popoverPoint = Point.RIGHT_TOP;
        break;
      case "right":
        this.anchorPoint = Point.RIGHT_CENTER;
        this.popoverPoint = Point.LEFT_TOP;
        break;
      case "left":
        this.anchorPoint = Point.LEFT_CENTER;
        this.popoverPoint = Point.RIGHT_TOP;
        break;
      default:
        assertNever(newPosition);
    }
  }
  get size() {
    return this._size;
  }
  set size(value) {
    const oldSize = this._size;
    const newSize = SIZES.includes(value) ? value : defaultSize;
    this._size = newSize;
    this.updateCssClass({
      oldClass: `tooltip-${oldSize}`,
      newClass: `tooltip-${newSize}`
    });
  }
  ngOnInit() {
    this.size = this.size || defaultSize;
    this.position = this.position || defaultPosition;
  }
  onMouseEnter() {
    this.tooltipMouseService.onMouseEnterContent();
  }
  onMouseLeave() {
    this.tooltipMouseService.onMouseLeaveContent();
  }
  updateCssClass({
    oldClass,
    newClass
  }) {
    this.renderer.removeClass(this.el.nativeElement, oldClass);
    this.renderer.addClass(this.el.nativeElement, newClass);
  }
};
ClrTooltipContent.ɵfac = function ClrTooltipContent_Factory(t161) {
  return new (t161 || ClrTooltipContent)(ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(POPOVER_HOST_ANCHOR, 8), ɵɵdirectiveInject(TooltipIdService), ɵɵdirectiveInject(TooltipMouseService));
};
ClrTooltipContent.ɵcmp = ɵɵdefineComponent({
  type: ClrTooltipContent,
  selectors: [["clr-tooltip-content"]],
  hostVars: 6,
  hostBindings: function ClrTooltipContent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("mouseenter", function ClrTooltipContent_mouseenter_HostBindingHandler() {
        return ctx.onMouseEnter();
      })("mouseleave", function ClrTooltipContent_mouseleave_HostBindingHandler() {
        return ctx.onMouseLeave();
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("id", ctx.id);
      ɵɵattribute("role", "tooltip");
      ɵɵstyleProp("opacity", 1);
      ɵɵclassProp("tooltip-content", true);
    }
  },
  inputs: {
    id: "id",
    position: [InputFlags.None, "clrPosition", "position"],
    size: [InputFlags.None, "clrSize", "size"]
  },
  features: [ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrTooltipContent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTooltipContent, [{
    type: Component,
    args: [{
      selector: "clr-tooltip-content",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.tooltip-content]": "true",
        "[style.opacity]": "1",
        "[attr.role]": '"tooltip"',
        "[id]": "id"
      }
    }]
  }], function() {
    return [{
      type: Injector
    }, {
      type: ElementRef,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [POPOVER_HOST_ANCHOR]
      }]
    }, {
      type: TooltipIdService
    }, {
      type: TooltipMouseService
    }];
  }, {
    id: [{
      type: Input
    }],
    position: [{
      type: Input,
      args: ["clrPosition"]
    }],
    size: [{
      type: Input,
      args: ["clrSize"]
    }],
    onMouseEnter: [{
      type: HostListener,
      args: ["mouseenter"]
    }],
    onMouseLeave: [{
      type: HostListener,
      args: ["mouseleave"]
    }]
  });
})();
var ClrTooltipTrigger = class {
  constructor(toggleService, tooltipIdService, tooltipMouseService) {
    this.toggleService = toggleService;
    this.tooltipIdService = tooltipIdService;
    this.tooltipMouseService = tooltipMouseService;
    this.subs = [];
    this.subs.push(this.tooltipIdService.id.subscribe((tooltipId) => this.ariaDescribedBy = tooltipId));
  }
  ngOnDestroy() {
    this.subs.forEach((sub) => sub.unsubscribe());
  }
  showTooltip() {
    this.toggleService.open = true;
  }
  hideTooltip() {
    this.toggleService.open = false;
  }
  onMouseEnter() {
    this.tooltipMouseService.onMouseEnterTrigger();
  }
  onMouseLeave() {
    this.tooltipMouseService.onMouseLeaveTrigger();
  }
};
ClrTooltipTrigger.ɵfac = function ClrTooltipTrigger_Factory(t161) {
  return new (t161 || ClrTooltipTrigger)(ɵɵdirectiveInject(ClrPopoverToggleService), ɵɵdirectiveInject(TooltipIdService), ɵɵdirectiveInject(TooltipMouseService));
};
ClrTooltipTrigger.ɵdir = ɵɵdefineDirective({
  type: ClrTooltipTrigger,
  selectors: [["", "clrTooltipTrigger", ""]],
  hostAttrs: ["tabindex", "0"],
  hostVars: 4,
  hostBindings: function ClrTooltipTrigger_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("focus", function ClrTooltipTrigger_focus_HostBindingHandler() {
        return ctx.showTooltip();
      })("blur", function ClrTooltipTrigger_blur_HostBindingHandler() {
        return ctx.hideTooltip();
      })("mouseenter", function ClrTooltipTrigger_mouseenter_HostBindingHandler() {
        return ctx.onMouseEnter();
      })("mouseleave", function ClrTooltipTrigger_mouseleave_HostBindingHandler() {
        return ctx.onMouseLeave();
      });
    }
    if (rf & 2) {
      ɵɵattribute("aria-describedby", ctx.ariaDescribedBy)("role", "button");
      ɵɵclassProp("tooltip-trigger", true);
    }
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTooltipTrigger, [{
    type: Directive,
    args: [{
      selector: "[clrTooltipTrigger]",
      host: {
        tabindex: "0",
        "[class.tooltip-trigger]": "true",
        "[attr.aria-describedby]": "ariaDescribedBy",
        "[attr.role]": '"button"'
      }
    }]
  }], function() {
    return [{
      type: ClrPopoverToggleService
    }, {
      type: TooltipIdService
    }, {
      type: TooltipMouseService
    }];
  }, {
    showTooltip: [{
      type: HostListener,
      args: ["focus"]
    }],
    hideTooltip: [{
      type: HostListener,
      args: ["blur"]
    }],
    onMouseEnter: [{
      type: HostListener,
      args: ["mouseenter"]
    }],
    onMouseLeave: [{
      type: HostListener,
      args: ["mouseleave"]
    }]
  });
})();
var CLR_TOOLTIP_DIRECTIVES = [ClrTooltip, ClrTooltipTrigger, ClrTooltipContent];
var ClrTooltipModule = class {
};
ClrTooltipModule.ɵfac = function ClrTooltipModule_Factory(t161) {
  return new (t161 || ClrTooltipModule)();
};
ClrTooltipModule.ɵmod = ɵɵdefineNgModule({
  type: ClrTooltipModule,
  declarations: [ClrTooltip, ClrTooltipTrigger, ClrTooltipContent],
  imports: [CommonModule],
  exports: [ClrTooltip, ClrTooltipTrigger, ClrTooltipContent, ClrConditionalModule, ClrIconModule]
});
ClrTooltipModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrConditionalModule, ClrIconModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTooltipModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [CLR_TOOLTIP_DIRECTIVES],
      exports: [CLR_TOOLTIP_DIRECTIVES, ClrConditionalModule, ClrIconModule]
    }]
  }], null, null);
})();
var ClrPopoverModule = class {
};
ClrPopoverModule.ɵfac = function ClrPopoverModule_Factory(t161) {
  return new (t161 || ClrPopoverModule)();
};
ClrPopoverModule.ɵmod = ɵɵdefineNgModule({
  type: ClrPopoverModule,
  exports: [ClrDropdownModule, ClrSignpostModule, ClrTooltipModule]
});
ClrPopoverModule.ɵinj = ɵɵdefineInjector({
  imports: [ClrDropdownModule, ClrSignpostModule, ClrTooltipModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrPopoverModule, [{
    type: NgModule,
    args: [{
      exports: [ClrDropdownModule, ClrSignpostModule, ClrTooltipModule]
    }]
  }], null, null);
})();
var ClrProgressBar = class {
  constructor() {
    this.max = 100;
    this.value = 0;
    this.externalId = "";
  }
  get id() {
    return this._ID;
  }
  set id(value) {
    this._ID = value;
    this.externalId = null;
  }
  get progressClass() {
    return true;
  }
  set clrCompact(value) {
    this._compact = isBooleanAttributeSet(value);
  }
  get compactClass() {
    return this._compact;
  }
  set clrLabeled(value) {
    this._labeled = isBooleanAttributeSet(value);
  }
  get labeledClass() {
    return this._labeled;
  }
  set clrFade(value) {
    this._fade = isBooleanAttributeSet(value);
  }
  get fadeClass() {
    return this._fade;
  }
  set clrLoop(value) {
    this._loop = isBooleanAttributeSet(value);
  }
  get loopClass() {
    return this._loop;
  }
  get warningClass() {
    return this.color === "warning";
  }
  get successClass() {
    return this.color === "success";
  }
  get dangerClass() {
    return this.color === "danger";
  }
  set clrFlash(value) {
    this._flash = isBooleanAttributeSet(value);
  }
  get flashClass() {
    return this._flash;
  }
  /** @deprecated since 2.0, remove in 4.0 */
  set clrFlashDanger(value) {
    this._flashDanger = isBooleanAttributeSet(value);
  }
  get flashDangerClass() {
    return this._flashDanger;
  }
  /**
   * Make sure that we always will have something that is readable
   * for the screen reader
   */
  get displayValue() {
    if (this.displayval) {
      return this.displayval;
    }
    return `${this.value || 0}%`;
  }
  /**
   * Display optional text only when labeled is eneabled
   */
  displayStringValue() {
    return this._labeled;
  }
};
ClrProgressBar.ɵfac = function ClrProgressBar_Factory(t161) {
  return new (t161 || ClrProgressBar)();
};
ClrProgressBar.ɵcmp = ɵɵdefineComponent({
  type: ClrProgressBar,
  selectors: [["clr-progress-bar"]],
  hostVars: 21,
  hostBindings: function ClrProgressBar_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("id", ctx.externalId);
      ɵɵclassProp("progress", ctx.progressClass)("compact", ctx.compactClass)("labeled", ctx.labeledClass)("progress-fade", ctx.fadeClass)("loop", ctx.loopClass)("warning", ctx.warningClass)("success", ctx.successClass)("danger", ctx.dangerClass)("flash", ctx.flashClass)("flash-danger", ctx.flashDangerClass);
    }
  },
  inputs: {
    max: [InputFlags.None, "clrMax", "max"],
    displayval: [InputFlags.None, "clrDisplayval", "displayval"],
    color: [InputFlags.None, "clrColor", "color"],
    value: [InputFlags.None, "clrValue", "value"],
    id: "id",
    clrCompact: "clrCompact",
    clrLabeled: "clrLabeled",
    clrFade: "clrFade",
    clrLoop: "clrLoop",
    clrFlash: "clrFlash",
    clrFlashDanger: "clrFlashDanger"
  },
  decls: 2,
  vars: 5,
  consts: [[3, "id"], [4, "ngIf"]],
  template: function ClrProgressBar_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelement(0, "progress", 0);
      ɵɵtemplate(1, ClrProgressBar_span_1_Template, 2, 1, "span", 1);
    }
    if (rf & 2) {
      ɵɵproperty("id", ctx.id);
      ɵɵattribute("max", ctx.max)("value", ctx.value)("data-displayval", ctx.displayValue);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.displayStringValue());
    }
  },
  dependencies: [NgIf],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrProgressBar, [{
    type: Component,
    args: [{
      selector: "clr-progress-bar",
      template: `
    <progress [id]="id" [attr.max]="max" [attr.value]="value" [attr.data-displayval]="displayValue"></progress>
    <span *ngIf="displayStringValue()">{{ displayValue }}</span>
  `
    }]
  }], null, {
    max: [{
      type: Input,
      args: ["clrMax"]
    }],
    displayval: [{
      type: Input,
      args: ["clrDisplayval"]
    }],
    color: [{
      type: Input,
      args: ["clrColor"]
    }],
    value: [{
      type: Input,
      args: ["clrValue"]
    }],
    externalId: [{
      type: HostBinding,
      args: ["attr.id"]
    }],
    id: [{
      type: Input
    }],
    progressClass: [{
      type: HostBinding,
      args: ["class.progress"]
    }],
    clrCompact: [{
      type: Input,
      args: ["clrCompact"]
    }],
    compactClass: [{
      type: HostBinding,
      args: ["class.compact"]
    }],
    clrLabeled: [{
      type: Input,
      args: ["clrLabeled"]
    }],
    labeledClass: [{
      type: HostBinding,
      args: ["class.labeled"]
    }],
    clrFade: [{
      type: Input,
      args: ["clrFade"]
    }],
    fadeClass: [{
      type: HostBinding,
      args: ["class.progress-fade"]
    }],
    clrLoop: [{
      type: Input,
      args: ["clrLoop"]
    }],
    loopClass: [{
      type: HostBinding,
      args: ["class.loop"]
    }],
    warningClass: [{
      type: HostBinding,
      args: ["class.warning"]
    }],
    successClass: [{
      type: HostBinding,
      args: ["class.success"]
    }],
    dangerClass: [{
      type: HostBinding,
      args: ["class.danger"]
    }],
    clrFlash: [{
      type: Input,
      args: ["clrFlash"]
    }],
    flashClass: [{
      type: HostBinding,
      args: ["class.flash"]
    }],
    clrFlashDanger: [{
      type: Input,
      args: ["clrFlashDanger"]
    }],
    flashDangerClass: [{
      type: HostBinding,
      args: ["class.flash-danger"]
    }]
  });
})();
var CLR_PROGRESS_BAR_DIRECTIVES = [ClrProgressBar];
var ClrProgressBarModule = class {
};
ClrProgressBarModule.ɵfac = function ClrProgressBarModule_Factory(t161) {
  return new (t161 || ClrProgressBarModule)();
};
ClrProgressBarModule.ɵmod = ɵɵdefineNgModule({
  type: ClrProgressBarModule,
  declarations: [ClrProgressBar],
  imports: [CommonModule],
  exports: [ClrProgressBar]
});
ClrProgressBarModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrProgressBarModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [CLR_PROGRESS_BAR_DIRECTIVES],
      exports: [CLR_PROGRESS_BAR_DIRECTIVES]
    }]
  }], null, null);
})();
var ClrTimelineLayout;
(function(ClrTimelineLayout2) {
  ClrTimelineLayout2["HORIZONTAL"] = "horizontal";
  ClrTimelineLayout2["VERTICAL"] = "vertical";
})(ClrTimelineLayout || (ClrTimelineLayout = {}));
var ClrTimelineStepState;
(function(ClrTimelineStepState2) {
  ClrTimelineStepState2["NOT_STARTED"] = "not-started";
  ClrTimelineStepState2["CURRENT"] = "current";
  ClrTimelineStepState2["PROCESSING"] = "processing";
  ClrTimelineStepState2["SUCCESS"] = "success";
  ClrTimelineStepState2["ERROR"] = "error";
})(ClrTimelineStepState || (ClrTimelineStepState = {}));
var TimelineIconAttributeService = class {
  constructor(commonStrings) {
    this.attributeMap = /* @__PURE__ */ new Map();
    this.attributeMap.set(ClrTimelineStepState.NOT_STARTED, {
      iconShape: "circle",
      iconStatus: null,
      ariaLabel: commonStrings.keys.timelineStepNotStarted
    });
    this.attributeMap.set(ClrTimelineStepState.CURRENT, {
      iconShape: "dot-circle",
      iconStatus: "info",
      ariaLabel: commonStrings.keys.timelineStepCurrent
    });
    this.attributeMap.set(ClrTimelineStepState.PROCESSING, {
      iconShape: void 0,
      iconStatus: null,
      ariaLabel: commonStrings.keys.timelineStepProcessing
    });
    this.attributeMap.set(ClrTimelineStepState.SUCCESS, {
      iconShape: "success-standard",
      iconStatus: "success",
      ariaLabel: commonStrings.keys.timelineStepSuccess
    });
    this.attributeMap.set(ClrTimelineStepState.ERROR, {
      iconShape: "error-standard",
      iconStatus: "danger",
      ariaLabel: commonStrings.keys.timelineStepError
    });
  }
  getAriaLabel(step) {
    return this.attributeMap.get(step).ariaLabel;
  }
  getIconShape(step) {
    return this.attributeMap.get(step).iconShape;
  }
  getIconStatus(step) {
    return this.attributeMap.get(step).iconStatus;
  }
};
TimelineIconAttributeService.ɵfac = function TimelineIconAttributeService_Factory(t161) {
  return new (t161 || TimelineIconAttributeService)(ɵɵinject(ClrCommonStringsService));
};
TimelineIconAttributeService.ɵprov = ɵɵdefineInjectable({
  token: TimelineIconAttributeService,
  factory: TimelineIconAttributeService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TimelineIconAttributeService, [{
    type: Injectable
  }], function() {
    return [{
      type: ClrCommonStringsService
    }];
  }, null);
})();
var ClrTimeline = class {
  constructor() {
    this.layout = ClrTimelineLayout.HORIZONTAL;
  }
  get isVertical() {
    return this.layout === ClrTimelineLayout.VERTICAL;
  }
};
ClrTimeline.ɵfac = function ClrTimeline_Factory(t161) {
  return new (t161 || ClrTimeline)();
};
ClrTimeline.ɵcmp = ɵɵdefineComponent({
  type: ClrTimeline,
  selectors: [["clr-timeline"]],
  hostVars: 4,
  hostBindings: function ClrTimeline_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-timeline", true)("clr-timeline-vertical", ctx.isVertical);
    }
  },
  inputs: {
    layout: [InputFlags.None, "clrLayout", "layout"]
  },
  features: [ɵɵProvidersFeature([TimelineIconAttributeService])],
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrTimeline_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTimeline, [{
    type: Component,
    args: [{
      selector: "clr-timeline",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.clr-timeline]": "true"
      },
      providers: [TimelineIconAttributeService]
    }]
  }], null, {
    layout: [{
      type: Input,
      args: ["clrLayout"]
    }],
    isVertical: [{
      type: HostBinding,
      args: ["class.clr-timeline-vertical"]
    }]
  });
})();
var ClrTimelineStepTitle = class {
};
ClrTimelineStepTitle.ɵfac = function ClrTimelineStepTitle_Factory(t161) {
  return new (t161 || ClrTimelineStepTitle)();
};
ClrTimelineStepTitle.ɵcmp = ɵɵdefineComponent({
  type: ClrTimelineStepTitle,
  selectors: [["clr-timeline-step-title"]],
  hostVars: 3,
  hostBindings: function ClrTimelineStepTitle_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("aria-hidden", true);
      ɵɵclassProp("clr-timeline-step-title", true);
    }
  },
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrTimelineStepTitle_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTimelineStepTitle, [{
    type: Component,
    args: [{
      selector: "clr-timeline-step-title",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.clr-timeline-step-title]": "true",
        "[attr.aria-hidden]": "true"
      }
    }]
  }], null, null);
})();
var ClrTimelineStep = class {
  constructor(iconAttributeService, platformId) {
    this.iconAttributeService = iconAttributeService;
    this.platformId = platformId;
    this.state = ClrTimelineStepState.NOT_STARTED;
  }
  get iconAriaLabel() {
    return this.iconAttributeService.getAriaLabel(this.state);
  }
  get iconShape() {
    return this.iconAttributeService.getIconShape(this.state);
  }
  get iconStatus() {
    return this.iconAttributeService.getIconStatus(this.state);
  }
  get isProcessing() {
    return this.state === ClrTimelineStepState.PROCESSING;
  }
  ngAfterContentInit() {
    if (this.stepTitle && isPlatformBrowser(this.platformId)) {
      this.stepTitleText = this.stepTitle.nativeElement.innerText;
    }
  }
};
ClrTimelineStep.ɵfac = function ClrTimelineStep_Factory(t161) {
  return new (t161 || ClrTimelineStep)(ɵɵdirectiveInject(TimelineIconAttributeService), ɵɵdirectiveInject(PLATFORM_ID));
};
ClrTimelineStep.ɵcmp = ɵɵdefineComponent({
  type: ClrTimelineStep,
  selectors: [["clr-timeline-step"]],
  contentQueries: function ClrTimelineStep_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrTimelineStepTitle, 5, ElementRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.stepTitle = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function ClrTimelineStep_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-timeline-step", true);
    }
  },
  inputs: {
    state: [InputFlags.None, "clrState", "state"]
  },
  ngContentSelectors: _c95,
  decls: 9,
  vars: 3,
  consts: [["processing", ""], [1, "clr-sr-only"], [4, "ngIf", "ngIfElse"], [1, "clr-timeline-step-body"], ["role", "img"], ["clrMedium", ""]],
  template: function ClrTimelineStep_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c94);
      ɵɵprojection(0);
      ɵɵelementStart(1, "span", 1);
      ɵɵtext(2);
      ɵɵelementEnd();
      ɵɵtemplate(3, ClrTimelineStep_ng_container_3_Template, 2, 3, "ng-container", 2);
      ɵɵelementStart(4, "div", 3);
      ɵɵprojection(5, 1);
      ɵɵprojection(6, 2);
      ɵɵelementEnd();
      ɵɵtemplate(7, ClrTimelineStep_ng_template_7_Template, 1, 1, "ng-template", null, 0, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const processing_r2 = ɵɵreference(8);
      ɵɵadvance(2);
      ɵɵtextInterpolate(ctx.stepTitleText);
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.isProcessing)("ngIfElse", processing_r2);
    }
  },
  dependencies: [NgIf, CdsIconCustomTag, ClrSpinner],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTimelineStep, [{
    type: Component,
    args: [{
      selector: "clr-timeline-step",
      template: `
    <ng-content select="clr-timeline-step-header"></ng-content>
    <span class="clr-sr-only">{{ stepTitleText }}</span>
    <ng-container *ngIf="!isProcessing; else processing">
      <cds-icon
        [attr.status]="iconStatus"
        [attr.shape]="iconShape"
        [attr.aria-label]="iconAriaLabel"
        role="img"
      ></cds-icon>
    </ng-container>
    <div class="clr-timeline-step-body">
      <ng-content select="clr-timeline-step-title"></ng-content>
      <ng-content select="clr-timeline-step-description"></ng-content>
    </div>

    <ng-template #processing>
      <clr-spinner clrMedium [attr.aria-label]="iconAriaLabel"></clr-spinner>
    </ng-template>
  `,
      host: {
        "[class.clr-timeline-step]": "true"
      }
    }]
  }], function() {
    return [{
      type: TimelineIconAttributeService
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }];
  }, {
    state: [{
      type: Input,
      args: ["clrState"]
    }],
    stepTitle: [{
      type: ContentChild,
      args: [ClrTimelineStepTitle, {
        read: ElementRef
      }]
    }]
  });
})();
var ClrTimelineStepDescription = class {
};
ClrTimelineStepDescription.ɵfac = function ClrTimelineStepDescription_Factory(t161) {
  return new (t161 || ClrTimelineStepDescription)();
};
ClrTimelineStepDescription.ɵcmp = ɵɵdefineComponent({
  type: ClrTimelineStepDescription,
  selectors: [["clr-timeline-step-description"]],
  hostVars: 2,
  hostBindings: function ClrTimelineStepDescription_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-timeline-step-description", true);
    }
  },
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrTimelineStepDescription_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTimelineStepDescription, [{
    type: Component,
    args: [{
      selector: "clr-timeline-step-description",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.clr-timeline-step-description]": "true"
      }
    }]
  }], null, null);
})();
var ClrTimelineStepHeader = class {
};
ClrTimelineStepHeader.ɵfac = function ClrTimelineStepHeader_Factory(t161) {
  return new (t161 || ClrTimelineStepHeader)();
};
ClrTimelineStepHeader.ɵcmp = ɵɵdefineComponent({
  type: ClrTimelineStepHeader,
  selectors: [["clr-timeline-step-header"]],
  hostVars: 2,
  hostBindings: function ClrTimelineStepHeader_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-timeline-step-header", true);
    }
  },
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrTimelineStepHeader_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTimelineStepHeader, [{
    type: Component,
    args: [{
      selector: "clr-timeline-step-header",
      template: `<ng-content></ng-content>`,
      host: {
        "[class.clr-timeline-step-header]": "true"
      }
    }]
  }], null, null);
})();
var CLR_TIMELINE_DIRECTIVES = [ClrTimeline, ClrTimelineStep, ClrTimelineStepDescription, ClrTimelineStepHeader, ClrTimelineStepTitle];
var ClrTimelineModule = class {
  constructor() {
    r24.addIcons(o36, t49, d11, d13);
  }
};
ClrTimelineModule.ɵfac = function ClrTimelineModule_Factory(t161) {
  return new (t161 || ClrTimelineModule)();
};
ClrTimelineModule.ɵmod = ɵɵdefineNgModule({
  type: ClrTimelineModule,
  declarations: [ClrTimeline, ClrTimelineStep, ClrTimelineStepDescription, ClrTimelineStepHeader, ClrTimelineStepTitle],
  imports: [CommonModule, ClrIconModule, ClrSpinnerModule],
  exports: [ClrTimeline, ClrTimelineStep, ClrTimelineStepDescription, ClrTimelineStepHeader, ClrTimelineStepTitle, ClrIconModule, ClrSpinnerModule]
});
ClrTimelineModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrIconModule, ClrSpinnerModule, ClrIconModule, ClrSpinnerModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrTimelineModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrIconModule, ClrSpinnerModule],
      exports: [...CLR_TIMELINE_DIRECTIVES, ClrIconModule, ClrSpinnerModule],
      declarations: [CLR_TIMELINE_DIRECTIVES]
    }]
  }], function() {
    return [];
  }, null);
})();
var ButtonHubService = class {
  constructor() {
    this.buttonsReady = false;
    this._previousBtnClicked = new Subject();
    this._nextBtnClicked = new Subject();
    this._dangerBtnClicked = new Subject();
    this._cancelBtnClicked = new Subject();
    this._finishBtnClicked = new Subject();
    this._customBtnClicked = new Subject();
  }
  get previousBtnClicked() {
    return this._previousBtnClicked.asObservable();
  }
  get nextBtnClicked() {
    return this._nextBtnClicked.asObservable();
  }
  get dangerBtnClicked() {
    return this._dangerBtnClicked.asObservable();
  }
  get cancelBtnClicked() {
    return this._cancelBtnClicked.asObservable();
  }
  get finishBtnClicked() {
    return this._finishBtnClicked.asObservable();
  }
  get customBtnClicked() {
    return this._customBtnClicked.asObservable();
  }
  buttonClicked(buttonType) {
    if ("previous" === buttonType) {
      this._previousBtnClicked.next();
    } else if ("next" === buttonType) {
      this._nextBtnClicked.next();
    } else if ("finish" === buttonType) {
      this._finishBtnClicked.next();
    } else if ("danger" === buttonType) {
      this._dangerBtnClicked.next();
    } else if ("cancel" === buttonType) {
      this._cancelBtnClicked.next();
    } else {
      this._customBtnClicked.next(buttonType);
    }
  }
};
ButtonHubService.ɵfac = function ButtonHubService_Factory(t161) {
  return new (t161 || ButtonHubService)();
};
ButtonHubService.ɵprov = ɵɵdefineInjectable({
  token: ButtonHubService,
  factory: ButtonHubService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ButtonHubService, [{
    type: Injectable
  }], null, null);
})();
var PageCollectionService = class {
  constructor() {
    this._pagesReset = new Subject();
  }
  /**
   * Converts the PageCollectionService.pages QueryList to an array and returns it.
   *
   * Useful for many instances when you would prefer a QueryList to act like an array.
   *
   * @memberof PageCollectionService
   */
  get pagesAsArray() {
    return this.pages ? this.pages.toArray() : [];
  }
  /**
   * Returns the length of the pages query list.
   *
   * @memberof PageCollectionService
   */
  get pagesCount() {
    return this.pages ? this.pages.length : 0;
  }
  /**
   * Returns the next-to-last page in the query list of pages. Operates as a getter
   * so that it isn't working with stale data.
   *
   * @memberof PageCollectionService
   */
  get penultimatePage() {
    const pageCount = this.pagesCount;
    if (pageCount < 2) {
      return null;
    }
    return this.pagesAsArray[pageCount - 2];
  }
  /**
   * Returns the last page in the query list of pages. Operates as a getter
   * so that it isn't working with stale data.
   *
   * @memberof PageCollectionService
   */
  get lastPage() {
    const pageCount = this.pagesCount;
    if (pageCount < 1) {
      return null;
    }
    return this.pagesAsArray[pageCount - 1];
  }
  /**
   * Returns the first page in the query list of pages. Operates as a getter
   * so that it isn't working with stale data.
   *
   * @memberof PageCollectionService
   */
  get firstPage() {
    if (!this.pagesCount) {
      return null;
    }
    return this.pagesAsArray[0];
  }
  /**
   * An observable that the navigation service listens to in order to know when
   * the page collection completed states have been reset to false so that way it
   * can also reset the navigation to make the first page in the page collection
   * current/active.
   *
   * @memberof PageCollectionService
   */
  get pagesReset() {
    return this._pagesReset.asObservable();
  }
  /**
   * Used mostly internally, but accepts a string ID and returns a ClrWizardPage
   * object that matches the ID passed. Note that IDs here should include the prefix
   * "clr-wizard-page-".
   *
   * Returns the next-to-last page in the query list of pages. Operates as a getter
   * so that it isn't working with stale data.
   *
   * @memberof PageCollectionService
   */
  getPageById(id) {
    const foundPages = this.pages.filter((page) => id === page.id);
    return this.checkResults(foundPages, id);
  }
  /**
   * Accepts s number as a parameter and treats that number as the index of the page
   * you're looking for in the collection of pages. Returns a  wizard page object.
   *
   * @memberof PageCollectionService
   */
  getPageByIndex(index) {
    const pageCount = this.pagesCount;
    const pagesLastIndex = pageCount > 1 ? pageCount - 1 : 0;
    if (index < 0) {
      throw new Error("Cannot retrieve page with index of " + index);
    }
    if (index > pagesLastIndex) {
      throw new Error("Page index is greater than length of pages array.");
    }
    return this.pagesAsArray[index];
  }
  /**
   * Takes a wizard page object as a parameter and returns its index in the
   * collection of pages.
   *
   * @memberof PageCollectionService
   */
  getPageIndex(page) {
    const index = this.pagesAsArray.indexOf(page);
    if (index < 0) {
      throw new Error("Requested page cannot be found in collection of pages.");
    }
    return index;
  }
  /**
   * Accepts two numeric indexes and returns an array of wizard page objects that include
   * all wizard pages in the page collection from the first index to the second.
   *
   * @memberof PageCollectionService
   */
  pageRange(start, end) {
    let pages = [];
    if (start < 0 || end < 0) {
      return [];
    }
    if (start === null || typeof start === "undefined" || isNaN(start)) {
      return [];
    }
    if (end === null || typeof end === "undefined" || isNaN(end)) {
      return [];
    }
    if (end > this.pagesCount) {
      end = this.pagesCount;
    }
    pages = this.pagesAsArray;
    if (end - start === 0) {
      return [this.getPageByIndex(start)];
    }
    end = end + 1;
    return pages.slice(start, end);
  }
  /**
   * Accepts two wizard page objects and returns those page objects with all other page
   * objects between them in the page collection. It doesn't care which page is ahead of the
   * other in the parameters. It will be smart enough to figure that out  on its own.
   *
   * @memberof PageCollectionService
   */
  getPageRangeFromPages(page, otherPage) {
    const pageIndex = this.getPageIndex(page);
    const otherPageIndex = this.getPageIndex(otherPage);
    let startIndex;
    let endIndex;
    if (pageIndex <= otherPageIndex) {
      startIndex = pageIndex;
      endIndex = otherPageIndex;
    } else {
      startIndex = otherPageIndex;
      endIndex = pageIndex;
    }
    return this.pageRange(startIndex, endIndex);
  }
  /**
   * Takes a wizard page object as a parameter and returns the wizard page object of
   * the page immediately before it in the page collection. Returns null if there is
   * no page before the page it is passed.
   *
   * @memberof PageCollectionService
   */
  getPreviousPage(page) {
    const myPageIndex = this.getPageIndex(page);
    const previousPageIndex = myPageIndex - 1;
    if (previousPageIndex < 0) {
      return null;
    }
    return this.getPageByIndex(previousPageIndex);
  }
  /**
   * Accepts a wizard page object as a parameter and returns a Boolean that says if
   * the page you sent it is complete.
   *
   * @memberof PageCollectionService
   */
  previousPageIsCompleted(page) {
    if (!page) {
      return false;
    }
    const previousPage = this.getPreviousPage(page);
    if (null === previousPage) {
      return true;
    }
    return previousPage.completed;
  }
  /**
   * Takes a wizard page object as a parameter and returns the wizard page object of
   * the page immediately after it in the page collection. Returns null if there is
   * no page after the page it is passed.
   *
   * @memberof PageCollectionService
   */
  getNextPage(page) {
    const myPageIndex = this.getPageIndex(page);
    const nextPageIndex = myPageIndex + 1;
    if (nextPageIndex >= this.pagesAsArray.length) {
      return null;
    }
    return this.getPageByIndex(nextPageIndex);
  }
  /**
   * Takes a wizard page object as a parameter and generates a step item id from the
   * page ID. Returns the generated step item ID as a string.
   *
   * @memberof PageCollectionService
   */
  getStepItemIdForPage(page) {
    const pageId = page.id;
    const pageIdParts = pageId.split("-").reverse();
    pageIdParts[1] = "step";
    return pageIdParts.reverse().join("-");
  }
  /**
   * Generally only used internally to mark that a specific page has been "committed".
   * This involves marking the page complete and firing the ClrWizardPage.onCommit
   * (clrWizardPageOnCommit) output. Takes the wizard page object that you intend to
   * mark completed as a parameter.
   *
   * @memberof PageCollectionService
   */
  commitPage(page) {
    const pageHasOverrides = page.stopNext || page.preventDefault;
    page.completed = true;
    if (!pageHasOverrides) {
      page.onCommit.emit(page.id);
    }
  }
  /**
   * Sets all completed states of the pages in the page collection to false and
   * notifies the navigation service to likewise reset the navigation.
   *
   * @memberof PageCollectionService
   */
  reset() {
    this.pagesAsArray.forEach((page) => {
      page.completed = false;
    });
    this._pagesReset.next(true);
  }
  /**
   * Rolls through all the pages in the page collection to make sure there are no
   * incomplete pages sandwiched between completed pages in the workflow. Identifies
   * the first incomplete page index and sets all pages behind it to a completed
   * state of false.
   *
   * @memberof PageCollectionService
   */
  updateCompletedStates() {
    const firstIncompleteIndex = this.findFirstIncompletePageIndex();
    if (firstIncompleteIndex === this.pagesAsArray.length - 1) {
      return;
    }
    this.pagesAsArray.forEach((page, index) => {
      if (index > firstIncompleteIndex) {
        page.completed = false;
      }
    });
  }
  /**
   * Retrieves the index of the first incomplete page in the page collection.
   *
   * @memberof PageCollectionService
   */
  findFirstIncompletePageIndex() {
    let returnIndex = null;
    this.pagesAsArray.forEach((page, index) => {
      if (null === returnIndex && false === page.completed) {
        returnIndex = index;
      }
    });
    if (null === returnIndex) {
      returnIndex = this.pagesCount - 1;
    }
    return returnIndex;
  }
  findFirstIncompletePage() {
    const myIncompleteIndex = this.findFirstIncompletePageIndex();
    return this.pagesAsArray[myIncompleteIndex];
  }
  /**
   * Consolidates guard logic that prevents a couple of unfortunate edge cases with
   * look ups on the collection of pages.
   *
   * @memberof PageCollectionService
   */
  checkResults(results, requestedPageId) {
    const foundPagesCount = results.length || 0;
    if (foundPagesCount > 1) {
      throw new Error("More than one page has the requested id " + requestedPageId + ".");
    } else if (foundPagesCount < 1) {
      throw new Error("No page can be found with the id " + requestedPageId + ".");
    } else {
      return results[0];
    }
  }
};
PageCollectionService.ɵfac = function PageCollectionService_Factory(t161) {
  return new (t161 || PageCollectionService)();
};
PageCollectionService.ɵprov = ɵɵdefineInjectable({
  token: PageCollectionService,
  factory: PageCollectionService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PageCollectionService, [{
    type: Injectable
  }], null, null);
})();
var WizardNavigationService = class {
  /**
   * Creates an instance of WizardNavigationService. Also sets up subscriptions
   * that listen to the button service to determine when a button has been clicked
   * in the wizard. Is also responsible for taking action when the page collection
   * requests that navigation be reset to its pristine state.
   *
   * @memberof WizardNavigationService
   */
  constructor(pageCollection, buttonService) {
    this.pageCollection = pageCollection;
    this.buttonService = buttonService;
    this.navServiceLoaded = false;
    this.forceForwardNavigation = false;
    this.wizardHasAltCancel = false;
    this.wizardHasAltNext = false;
    this.wizardStopNavigation = false;
    this.wizardDisableStepnav = false;
    this._currentChanged = new Subject();
    this._movedToNextPage = new Subject();
    this._wizardFinished = new Subject();
    this._movedToPreviousPage = new Subject();
    this._cancelWizard = new Subject();
    this.previousButtonSubscription = this.buttonService.previousBtnClicked.subscribe(() => {
      const currentPage = this.currentPage;
      if (this.currentPageIsFirst || currentPage.previousStepDisabled) {
        return;
      }
      currentPage.previousButtonClicked.emit(currentPage);
      if (!currentPage.preventDefault) {
        this.previous();
      }
    });
    this.nextButtonSubscription = this.buttonService.nextBtnClicked.subscribe(() => {
      this.checkAndCommitCurrentPage("next");
    });
    this.dangerButtonSubscription = this.buttonService.dangerBtnClicked.subscribe(() => {
      this.checkAndCommitCurrentPage("danger");
    });
    this.finishButtonSubscription = this.buttonService.finishBtnClicked.subscribe(() => {
      this.checkAndCommitCurrentPage("finish");
    });
    this.customButtonSubscription = this.buttonService.customBtnClicked.subscribe((type3) => {
      if (!this.wizardStopNavigation) {
        this.currentPage.customButtonClicked.emit(type3);
      }
    });
    this.cancelButtonSubscription = this.buttonService.cancelBtnClicked.subscribe(() => {
      if (this.wizardStopNavigation) {
        return;
      }
      if (this.currentPage.preventDefault) {
        this.currentPage.pageOnCancel.emit(this.currentPage);
      } else {
        this.cancel();
      }
    });
    this.pagesResetSubscription = this.pageCollection.pagesReset.subscribe(() => {
      this.setFirstPageCurrent();
    });
  }
  /**
   * An Observable that is predominantly used amongst the subcomponents and services
   * of the wizard. It is recommended that users listen to the ClrWizardPage.onLoad
   * (clrWizardPageOnLoad) output instead of this Observable.
   *
   * @memberof WizardNavigationService
   */
  get currentPageChanged() {
    return this._currentChanged.asObservable();
  }
  /**
   * @memberof WizardNavigationService
   */
  get currentPageTitle() {
    if (!this.currentPage) {
      return null;
    }
    return this.currentPage.title;
  }
  /**
   * Returns a Boolean that tells you whether or not the current page is the first
   * page in the Wizard.
   *
   * This is helpful for determining whether a page is navigable.
   *
   * @memberof WizardNavigationService
   */
  get currentPageIsFirst() {
    return this.pageCollection.firstPage === this.currentPage;
  }
  /**
   * Returns a Boolean that tells you whether or not the current page is the
   * last page in the Wizard.
   *
   * This is used to determine which buttons should display in the wizard footer.
   *
   * @memberof WizardNavigationService
   */
  get currentPageIsLast() {
    return this.pageCollection.lastPage === this.currentPage;
  }
  /**
   * Returns the ClrWizardPage object of the current page or null.
   *
   * @memberof WizardNavigationService
   */
  get currentPage() {
    if (!this._currentPage) {
      return null;
    }
    return this._currentPage;
  }
  /**
   * Accepts a ClrWizardPage object, since that object to be the current/active
   * page in the wizard, and emits the ClrWizardPage.onLoad (clrWizardPageOnLoad)
   * event for that page.
   *
   * Note that all of this work is bypassed if the ClrWizardPage object is already
   * the current page.
   *
   * @memberof WizardNavigationService
   */
  set currentPage(page) {
    if (this._currentPage !== page && !this.wizardStopNavigation) {
      this._currentPage = page;
      page.onLoad.emit(page.id);
      this._currentChanged.next(page);
    }
  }
  /**
   * An observable used internally to alert the wizard that forward navigation
   * has occurred. It is recommended that you use the Wizard.onMoveNext
   * (clrWizardOnNext) output instead of this one.
   *
   * @memberof WizardNavigationService
   */
  get movedToNextPage() {
    return this._movedToNextPage.asObservable();
  }
  /**
   * An observable used internally to alert the wizard that the nav service
   * has approved completion of the wizard.
   *
   * It is recommended that you use the Wizard.wizardFinished (clrWizardOnFinish)
   * output instead of this one.
   *
   * @memberof WizardNavigationService
   */
  get wizardFinished() {
    return this._wizardFinished.asObservable();
  }
  /**
   * Notifies the wizard when backwards navigation has occurred via the
   * previous button.
   *
   * @memberof WizardNavigationService
   */
  get movedToPreviousPage() {
    return this._movedToPreviousPage.asObservable();
  }
  /**
   * Notifies the wizard that a user is trying to cancel it.
   *
   * @memberof WizardNavigationService
   */
  get notifyWizardCancel() {
    return this._cancelWizard.asObservable();
  }
  /**
   *
   * @memberof WizardNavigationService
   */
  ngOnDestroy() {
    this.previousButtonSubscription.unsubscribe();
    this.nextButtonSubscription.unsubscribe();
    this.dangerButtonSubscription.unsubscribe();
    this.finishButtonSubscription.unsubscribe();
    this.customButtonSubscription.unsubscribe();
    this.cancelButtonSubscription.unsubscribe();
    this.pagesResetSubscription.unsubscribe();
  }
  /**
   * This is a public function that can be used to programmatically advance
   * the user to the next page.
   *
   * When invoked, this method will move the wizard to the next page after
   * successful validation. Note that this method goes through all checks
   * and event emissions as if Wizard.next(false) had been called.
   *
   * In most cases, it makes more sense to use Wizard.next(false).
   *
   * @memberof WizardNavigationService
   */
  next() {
    if (this.currentPageIsLast) {
      this.checkAndCommitCurrentPage("finish");
    } else {
      this.checkAndCommitCurrentPage("next");
    }
  }
  /**
   * Bypasses checks and most event emissions to force a page to navigate forward.
   *
   * Comparable to calling Wizard.next() or Wizard.forceNext().
   *
   * @memberof WizardNavigationService
   */
  forceNext() {
    const currentPage = this.currentPage;
    const nextPage = this.pageCollection.getNextPage(currentPage);
    if (!nextPage) {
      throw new Error("The wizard has no next page to go to.");
    }
    if (this.wizardStopNavigation) {
      return;
    }
    if (!currentPage.completed) {
      this.pageCollection.commitPage(currentPage);
    }
    this.currentPage = nextPage;
  }
  /**
   * Accepts a button/action type as a parameter. Encapsulates all logic for
   * event emissions, state of the current page, and wizard and page level overrides.
   *
   * Avoid calling this function directly unless you really know what you're doing.
   *
   * @memberof WizardNavigationService
   */
  checkAndCommitCurrentPage(buttonType) {
    const currentPage = this.currentPage;
    if (!currentPage.readyToComplete || this.wizardStopNavigation) {
      return;
    }
    const iAmTheLastPage = this.currentPageIsLast;
    const isNext = buttonType === "next";
    const isDanger = buttonType === "danger";
    const isDangerNext = isDanger && !iAmTheLastPage;
    const isDangerFinish = isDanger && iAmTheLastPage;
    const isFinish = buttonType === "finish" || isDangerFinish;
    if (isFinish && !iAmTheLastPage) {
      return;
    }
    currentPage.primaryButtonClicked.emit(buttonType);
    if (isFinish) {
      currentPage.finishButtonClicked.emit(currentPage);
    } else if (isDanger) {
      currentPage.dangerButtonClicked.emit();
    } else if (isNext) {
      currentPage.nextButtonClicked.emit();
    }
    if (currentPage.stopNext || currentPage.preventDefault) {
      currentPage.onCommit.emit(currentPage.id);
      return;
    }
    if (isFinish) {
      if (!this.wizardHasAltNext) {
        this.pageCollection.commitPage(currentPage);
      }
      this._wizardFinished.next();
    }
    if (this.wizardHasAltNext) {
      this.pageCollection.commitPage(currentPage);
      if (isNext || isDangerNext) {
        this._movedToNextPage.next(true);
      }
      return;
    }
    if (isNext || isDangerNext) {
      this.forceNext();
    }
    if (!this.wizardHasAltNext && !this.wizardStopNavigation) {
      this._movedToNextPage.next(true);
    }
  }
  /**
   * This is a public function that can be used to programmatically conclude
   * the wizard.
   *
   * When invoked, this method will  initiate the work involved with finalizing
   * and finishing the wizard workflow. Note that this method goes through all
   * checks and event emissions as if Wizard.finish(false) had been called.
   *
   * In most cases, it makes more sense to use Wizard.finish(false).
   *
   * @memberof WizardNavigationService
   */
  finish() {
    this.checkAndCommitCurrentPage("finish");
  }
  /**
   * Programmatically moves the wizard to the page before the current page.
   *
   * In most instances, it makes more sense to call Wizard.previous()
   * which does the same thing.
   *
   * @memberof WizardNavigationService
   */
  previous() {
    if (this.currentPageIsFirst || this.wizardStopNavigation) {
      return;
    }
    const previousPage = this.pageCollection.getPreviousPage(this.currentPage);
    if (!previousPage) {
      return;
    }
    this._movedToPreviousPage.next(true);
    if (this.forceForwardNavigation) {
      this.currentPage.completed = false;
    }
    this.currentPage = previousPage;
  }
  /**
   * Allows a hook into the cancel workflow of the wizard from the nav service. Note that
   * this route goes through all checks and event emissions as if a cancel button had
   * been clicked.
   *
   * In most cases, users looking for a hook into the cancel routine are actually looking
   * for a way to close the wizard from their host component because they have prevented
   * the default cancel action.
   *
   * In this instance, it is recommended that you use Wizard.close() to avoid any event
   * emission loop resulting from an event handler calling back into routine that will
   * again evoke the events it handles.
   *
   * @memberof WizardNavigationService
   */
  cancel() {
    this._cancelWizard.next();
  }
  /**
   * Performs all required checks to determine if a user can navigate to a page. Checking at each
   * point if a page is navigable -- completed where the page immediately after the last completed
   * page.
   *
   * Takes two parameters. The first one must be either the ClrWizardPage object or the ID of the
   * ClrWizardPage object that you want to make the current page.
   *
   * The second parameter is optional and is a Boolean flag for "lazy completion". What this means
   * is the Wizard will mark all pages between the current page and the page you want to navigate
   * to as completed. This is useful for informational wizards that do not require user action,
   * allowing an easy means for users to jump ahead.
   *
   * To avoid checks on navigation, use ClrWizardPage.makeCurrent() instead.
   *
   * @memberof WizardNavigationService
   */
  goTo(pageToGoToOrId, lazyComplete = false) {
    const myPages = this.pageCollection;
    const pageToGoTo = typeof pageToGoToOrId === "string" ? myPages.getPageById(pageToGoToOrId) : pageToGoToOrId;
    const currentPage = this.currentPage;
    if (pageToGoTo === currentPage || this.wizardStopNavigation) {
      return;
    }
    const currentPageIndex = myPages.getPageIndex(currentPage);
    const goToPageIndex = myPages.getPageIndex(pageToGoTo);
    const goingForward = goToPageIndex > currentPageIndex;
    const pagesToCheck = myPages.getPageRangeFromPages(this.currentPage, pageToGoTo);
    const okayToMove = lazyComplete || this.canGoTo(pagesToCheck);
    if (!okayToMove) {
      return;
    }
    if (goingForward && lazyComplete) {
      pagesToCheck.forEach((page) => {
        if (page !== pageToGoTo) {
          page.completed = true;
        }
      });
    } else if (!goingForward && this.forceForwardNavigation) {
      pagesToCheck.forEach((page) => {
        page.completed = false;
      });
    }
    this.currentPage = pageToGoTo;
  }
  /**
   * Accepts a range of ClrWizardPage objects as a parameter. Performs the work of checking
   * those objects to determine if navigation can be accomplished.
   *
   * @memberof WizardNavigationService
   */
  canGoTo(pagesToCheck) {
    let okayToMove = true;
    const myPages = this.pageCollection;
    let previousPagePasses;
    if (!pagesToCheck || pagesToCheck.length < 1) {
      return false;
    }
    pagesToCheck.forEach((page) => {
      if (!okayToMove) {
        return;
      }
      if (page.completed) {
        return;
      }
      const previousPage = myPages.getPageIndex(page) > 0 ? myPages.getPreviousPage(page) : null;
      previousPagePasses = previousPage === null || previousPage.completed === true;
      if (!page.current && !previousPagePasses) {
        okayToMove = false;
      }
    });
    return okayToMove;
  }
  /**
   * Looks through the collection of pages to find the first one that is incomplete
   * and makes that page the current/active page.
   *
   * @memberof WizardNavigationService
   */
  setLastEnabledPageCurrent() {
    const allPages = this.pageCollection.pagesAsArray;
    let lastCompletedPageIndex = null;
    allPages.forEach((page, index) => {
      if (page.completed) {
        lastCompletedPageIndex = index;
      }
    });
    if (lastCompletedPageIndex === null) {
      lastCompletedPageIndex = 0;
    } else if (lastCompletedPageIndex + 1 < allPages.length) {
      lastCompletedPageIndex = lastCompletedPageIndex + 1;
    }
    this.currentPage = allPages[lastCompletedPageIndex];
  }
  /**
   * Finds the first page in the collection of pages and makes that page the
   * current/active page.
   *
   * @memberof WizardNavigationService
   */
  setFirstPageCurrent() {
    this.currentPage = this.pageCollection.pagesAsArray[0];
  }
  /**
   * Updates the stepnav on the left side of the wizard when pages are dynamically
   * added or removed from the collection of pages.
   *
   * @memberof WizardNavigationService
   */
  updateNavigation() {
    let toSetCurrent;
    this.pageCollection.updateCompletedStates();
    const currentPageRemoved = this.pageCollection.pagesAsArray.indexOf(this.currentPage) < 0;
    if (currentPageRemoved) {
      toSetCurrent = this.pageCollection.findFirstIncompletePage();
      this.currentPage = toSetCurrent;
    }
  }
};
WizardNavigationService.ɵfac = function WizardNavigationService_Factory(t161) {
  return new (t161 || WizardNavigationService)(ɵɵinject(PageCollectionService), ɵɵinject(ButtonHubService));
};
WizardNavigationService.ɵprov = ɵɵdefineInjectable({
  token: WizardNavigationService,
  factory: WizardNavigationService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(WizardNavigationService, [{
    type: Injectable
  }], function() {
    return [{
      type: PageCollectionService
    }, {
      type: ButtonHubService
    }];
  }, null);
})();
var HeaderActionService = class {
  constructor(navService) {
    this.navService = navService;
  }
  get wizardHasHeaderActions() {
    const wizardHdrActions = this.wizardHeaderActions;
    if (!wizardHdrActions) {
      return false;
    }
    return wizardHdrActions.toArray().length > 0;
  }
  get currentPageHasHeaderActions() {
    return this.navService.currentPage ? this.navService.currentPage.hasHeaderActions : false;
  }
  get showWizardHeaderActions() {
    return !this.currentPageHasHeaderActions && this.wizardHasHeaderActions;
  }
  get displayHeaderActionsWrapper() {
    return this.currentPageHasHeaderActions || this.wizardHasHeaderActions;
  }
};
HeaderActionService.ɵfac = function HeaderActionService_Factory(t161) {
  return new (t161 || HeaderActionService)(ɵɵinject(WizardNavigationService));
};
HeaderActionService.ɵprov = ɵɵdefineInjectable({
  token: HeaderActionService,
  factory: HeaderActionService.ɵfac
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HeaderActionService, [{
    type: Injectable
  }], function() {
    return [{
      type: WizardNavigationService
    }];
  }, null);
})();
var wizardHeaderActionIndex = 0;
var ClrWizardHeaderAction = class {
  constructor() {
    this.title = "";
    this._id = (wizardHeaderActionIndex++).toString();
    this.disabled = false;
    this.headerActionClicked = new EventEmitter(false);
  }
  get id() {
    return `clr-wizard-header-action-${this._id}`;
  }
  click() {
    if (this.disabled) {
      return;
    }
    this.headerActionClicked.emit(this._id);
  }
};
ClrWizardHeaderAction.ɵfac = function ClrWizardHeaderAction_Factory(t161) {
  return new (t161 || ClrWizardHeaderAction)();
};
ClrWizardHeaderAction.ɵcmp = ɵɵdefineComponent({
  type: ClrWizardHeaderAction,
  selectors: [["clr-wizard-header-action"]],
  hostAttrs: [1, "clr-wizard-header-action-wrapper"],
  inputs: {
    title: "title",
    _id: [InputFlags.None, "id", "_id"],
    disabled: [InputFlags.None, "clrWizardHeaderActionDisabled", "disabled"]
  },
  outputs: {
    headerActionClicked: "actionClicked"
  },
  ngContentSelectors: _c02,
  decls: 2,
  vars: 4,
  consts: [["type", "button", 1, "btn", "clr-wizard-header-action", "btn-link", 3, "click", "id", "title"]],
  template: function ClrWizardHeaderAction_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "button", 0);
      ɵɵlistener("click", function ClrWizardHeaderAction_Template_button_click_0_listener() {
        return ctx.click();
      });
      ɵɵprojection(1);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵclassProp("disabled", ctx.disabled);
      ɵɵproperty("id", ctx.id)("title", ctx.title);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrWizardHeaderAction, [{
    type: Component,
    args: [{
      selector: "clr-wizard-header-action",
      template: `
    <button
      type="button"
      class="btn clr-wizard-header-action btn-link"
      [id]="id"
      [class.disabled]="disabled"
      (click)="click()"
      [title]="title"
    >
      <ng-content></ng-content>
    </button>
  `,
      host: {
        class: "clr-wizard-header-action-wrapper"
      }
    }]
  }], null, {
    title: [{
      type: Input,
      args: ["title"]
    }],
    _id: [{
      type: Input,
      args: ["id"]
    }],
    disabled: [{
      type: Input,
      args: ["clrWizardHeaderActionDisabled"]
    }],
    headerActionClicked: [{
      type: Output,
      args: ["actionClicked"]
    }]
  });
})();
var ClrWizardPageButtons = class {
  constructor(pageButtonsTemplateRef) {
    this.pageButtonsTemplateRef = pageButtonsTemplateRef;
  }
};
ClrWizardPageButtons.ɵfac = function ClrWizardPageButtons_Factory(t161) {
  return new (t161 || ClrWizardPageButtons)(ɵɵdirectiveInject(TemplateRef));
};
ClrWizardPageButtons.ɵdir = ɵɵdefineDirective({
  type: ClrWizardPageButtons,
  selectors: [["", "clrPageButtons", ""]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrWizardPageButtons, [{
    type: Directive,
    args: [{
      selector: "[clrPageButtons]"
    }]
  }], function() {
    return [{
      type: TemplateRef
    }];
  }, null);
})();
var ClrWizardPageHeaderActions = class {
  constructor(pageHeaderActionsTemplateRef) {
    this.pageHeaderActionsTemplateRef = pageHeaderActionsTemplateRef;
  }
};
ClrWizardPageHeaderActions.ɵfac = function ClrWizardPageHeaderActions_Factory(t161) {
  return new (t161 || ClrWizardPageHeaderActions)(ɵɵdirectiveInject(TemplateRef));
};
ClrWizardPageHeaderActions.ɵdir = ɵɵdefineDirective({
  type: ClrWizardPageHeaderActions,
  selectors: [["", "clrPageHeaderActions", ""]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrWizardPageHeaderActions, [{
    type: Directive,
    args: [{
      selector: "[clrPageHeaderActions]"
    }]
  }], function() {
    return [{
      type: TemplateRef
    }];
  }, null);
})();
var ClrWizardPageNavTitle = class {
  constructor(pageNavTitleTemplateRef) {
    this.pageNavTitleTemplateRef = pageNavTitleTemplateRef;
  }
};
ClrWizardPageNavTitle.ɵfac = function ClrWizardPageNavTitle_Factory(t161) {
  return new (t161 || ClrWizardPageNavTitle)(ɵɵdirectiveInject(TemplateRef));
};
ClrWizardPageNavTitle.ɵdir = ɵɵdefineDirective({
  type: ClrWizardPageNavTitle,
  selectors: [["", "clrPageNavTitle", ""]]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrWizardPageNavTitle, [{
    type: Directive,
    args: [{
      selector: "[clrPageNavTitle]"
    }]
  }], function() {
    return [{
      type: TemplateRef
    }];
  }, null);
})();
var ClrWizardPageTitle = class {
  constructor(pageTitleTemplateRef) {
    this.pageTitleTemplateRef = pageTitleTemplateRef;
  }
};
ClrWizardPageTitle.ɵfac = function ClrWizardPageTitle_Factory(t161) {
  return new (t161 || ClrWizardPageTitle)(ɵɵdirectiveInject(TemplateRef));
};
ClrWizardPageTitle.ɵdir = ɵɵdefineDirective({
  type: ClrWizardPageTitle,
  selectors: [["", "clrPageTitle", ""]],
  inputs: {
    headingLevel: [InputFlags.None, "clrHeadingLevel", "headingLevel"]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrWizardPageTitle, [{
    type: Directive,
    args: [{
      selector: "[clrPageTitle]"
    }]
  }], function() {
    return [{
      type: TemplateRef
    }];
  }, {
    headingLevel: [{
      type: Input,
      args: ["clrHeadingLevel"]
    }]
  });
})();
var wizardPageIndex = 0;
var ClrWizardPage = class {
  /**
   * Creates an instance of ClrWizardPage.
   *
   * @memberof WizardPage
   */
  constructor(navService, pageCollection, buttonService) {
    this.navService = navService;
    this.pageCollection = pageCollection;
    this.buttonService = buttonService;
    this._id = (wizardPageIndex++).toString();
    this.preventDefault = false;
    this.nextStepDisabledChange = new EventEmitter();
    this.previousStepDisabledChange = new EventEmitter();
    this.stopCancelChange = new EventEmitter();
    this.onCommit = new EventEmitter(false);
    this.onLoad = new EventEmitter();
    this.pageOnCancel = new EventEmitter();
    this.finishButtonClicked = new EventEmitter();
    this.previousButtonClicked = new EventEmitter();
    this.nextButtonClicked = new EventEmitter();
    this.dangerButtonClicked = new EventEmitter();
    this.primaryButtonClicked = new EventEmitter();
    this.customButtonClicked = new EventEmitter();
    this._nextStepDisabled = false;
    this._previousStepDisabled = false;
    this._hasError = false;
    this._stopCancel = false;
    this._stopNext = false;
    this._complete = false;
  }
  /**
   * A property that tells whether or not the wizard should be allowed
   * to move to the next page.
   *
   * Useful for in-page validation because it prevents forward navigation
   * and visibly disables the next button.
   *
   * Does not require that you re-implement navigation routines like you
   * would if you were using ClrWizardPage.preventDefault or
   * Wizard.preventDefault.
   *
   * @memberof WizardPage
   *
   */
  get nextStepDisabled() {
    return this._nextStepDisabled;
  }
  set nextStepDisabled(val) {
    const valBool = !!val;
    if (valBool !== this._nextStepDisabled) {
      this._nextStepDisabled = valBool;
      this.nextStepDisabledChange.emit(valBool);
    }
  }
  /**
   * A property that tells whether or not the wizard should be allowed
   * to move to the previous page.
   *
   * Useful for in-page validation because it prevents backward navigation
   * and visibly disables the previous button.
   *
   * Does not require that you re-implement navigation routines like you
   * would if you were using ClrWizardPage.preventDefault or
   * Wizard.preventDefault.
   *
   * @memberof WizardPage
   *
   */
  get previousStepDisabled() {
    return this._previousStepDisabled;
  }
  set previousStepDisabled(val) {
    const valBool = !!val;
    if (valBool !== this._previousStepDisabled) {
      this._previousStepDisabled = valBool;
      this.previousStepDisabledChange.emit(valBool);
    }
  }
  /**
   * Whether the page has an error and also resolve the "falsy" value. The
   * current logic treat a "0" or an empty string as false and likewise will treat any
   * "truthy" value as true.
   *
   * @memberof WizardPage
   *
   */
  get hasError() {
    return this._hasError;
  }
  set hasError(val) {
    const valBool = !!val;
    if (valBool !== this._hasError) {
      this._hasError = valBool;
    }
  }
  /**
   * Overrides the cancel action from the page level. Allows you to use an
   * alternate function for validation or data-munging before cancelling the
   * wizard when combined with the ClrWizardPage.onCancel
   * (the clrWizardPageOnCancel output).
   *
   * Requires that you manually close the wizard from your host component,
   * usually with a call to Wizard.forceNext() or wizard.next();
   *
   * @memberof ClrWizardPage
   */
  get stopCancel() {
    return this._stopCancel;
  }
  set stopCancel(val) {
    const valBool = !!val;
    if (valBool !== this._stopCancel) {
      this._stopCancel = valBool;
      this.stopCancelChange.emit(valBool);
    }
  }
  /**
   * Overrides forward navigation from the page level. Allows you to use an
   * alternate function for validation or data-munging before moving the
   * wizard to the next pagewhen combined with the ClrWizardPage.onCommit
   * (clrWizardPageOnCommit) or ClrWizardPage.nextButtonClicked
   * (clrWizardPageNext) outputs.
   *
   * Requires that you manually tell the wizard to navigate forward from
   * the hostComponent, usually with a call to Wizard.forceNext() or
   * wizard.next();
   *
   * @memberof ClrWizardPage
   */
  get stopNext() {
    return this._stopNext;
  }
  set stopNext(val) {
    const valBool = !!val;
    if (valBool !== this._stopNext) {
      this._stopNext = valBool;
    }
  }
  /**
   * A read-only getter that generates an ID string for the wizard page from
   * either the value passed to the ClrWizardPage "id" input or a wizard page
   * counter shared across all wizard pages in the application.
   *
   * Note that the value passed into the ID input Will be prefixed with
   * "clr-wizard-page-".
   *
   * @readonly
   *
   * @memberof ClrWizardPage
   */
  get id() {
    const idIsNonZeroFalsy = !this._id && this._id !== 0;
    if (idIsNonZeroFalsy || this._id < 0) {
      this._id = (wizardPageIndex++).toString();
    }
    return `clr-wizard-page-${this._id}`;
  }
  /**
   * A read-only getter that serves as a convenience for those who would rather
   * not think in the terms of !ClrWizardPage.nextStepDisabled. For some use cases,
   * ClrWizardPage.readyToComplete is more logical and declarative.
   *
   * @memberof WizardPage
   *
   */
  get readyToComplete() {
    return !this.nextStepDisabled;
  }
  /**
   * A page is marked as completed if it is both readyToComplete and completed,
   * as in the next or finish action has been executed while this page was current.
   *
   * Note there is and open question about how to handle pages that are marked
   * complete but who are no longer readyToComplete. This might indicate an error
   * state for the ClrWizardPage. Currently, the wizard does not acknowledge this state
   * and only returns that the page is incomplete.
   *
   * @memberof WizardPage
   *
   */
  get completed() {
    return this._complete && this.readyToComplete;
  }
  /**
   * A ClrWizardPage can be manually set to completed using this boolean setter.
   * It is recommended that users rely on the convenience functions in the wizard
   * and navigation service instead of manually setting pages’ completion state.
   *
   * @memberof ClrWizardPage
   */
  set completed(value) {
    this._complete = value;
  }
  /**
   * Checks with the navigation service to see if it is the current page.
   *
   * @memberof WizardPage
   *
   */
  get current() {
    return this.navService.currentPage === this;
  }
  get disabled() {
    return !this.enabled;
  }
  /**
   * A read-only getter that returns whether or not the page is navigable
   * in the wizard. A wizard page can be navigated to if it is completed
   * or the page before it is completed.
   *
   * This getter handles the logic for enabling or disabling the links in
   * the step nav on the left Side of the wizard.
   *
   * @memberof WizardPage
   *
   */
  get enabled() {
    return this.current || this.completed || this.previousCompleted;
  }
  /**
   * A read-only getter that returns whether or not the page before this
   * ClrWizardPage is completed. This is useful for determining whether or not
   * a page is navigable if it is not current or already completed.
   *
   * @memberof WizardPage
   *
   */
  get previousCompleted() {
    const previousPage = this.pageCollection.getPreviousPage(this);
    if (!previousPage) {
      return true;
    }
    return previousPage.completed;
  }
  /**
   *
   * @memberof WizardPage
   *
   */
  get title() {
    return this.pageTitle.pageTitleTemplateRef;
  }
  /**
   *
   * @memberof WizardPage
   *
   */
  get navTitle() {
    if (this.pageNavTitle) {
      return this.pageNavTitle.pageNavTitleTemplateRef;
    }
    return this.pageTitle.pageTitleTemplateRef;
  }
  /**
   *
   * @memberof WizardPage
   *
   */
  get headerActions() {
    if (!this._headerActions) {
      return void 0;
    }
    return this._headerActions.pageHeaderActionsTemplateRef;
  }
  /**
   *
   * @memberof WizardPage
   *
   */
  get hasHeaderActions() {
    return !!this._headerActions;
  }
  /**
   *
   * @memberof WizardPage
   *
   */
  get buttons() {
    if (!this._buttons) {
      return void 0;
    }
    return this._buttons.pageButtonsTemplateRef;
  }
  /**
   * A read-only getter that returns a boolean that says whether or
   * not the ClrWizardPage includes buttons. Used to determine if the
   * Wizard should override the default button set defined as
   * its direct children.
   *
   * @memberof WizardPage
   *
   */
  get hasButtons() {
    return !!this._buttons;
  }
  /**
   * A read-only getter that returns the id used by the step nav item associated with the page.
   *
   * ClrWizardPage needs this ID string for aria information.
   *
   * @memberof WizardPage
   *
   */
  get stepItemId() {
    return this.pageCollection.getStepItemIdForPage(this);
  }
  /**
   * Links the nav service and establishes the current page if one is not defined.
   *
   * @memberof WizardPage
   *
   */
  ngOnInit() {
    const navService = this.navService;
    if (!navService.currentPage && !navService.navServiceLoaded) {
      this.makeCurrent();
      this.navService.navServiceLoaded = true;
    }
  }
  /**
   * Uses the nav service to make the ClrWizardPage the current page in the
   * wizard. Bypasses all checks but still emits the ClrWizardPage.onLoad
   * (clrWizardPageOnLoad) output.
   *
   * In most cases, it is better to use the default navigation functions
   * in Wizard.
   *
   * @memberof WizardPage
   *
   */
  makeCurrent() {
    this.navService.currentPage = this;
  }
};
ClrWizardPage.ɵfac = function ClrWizardPage_Factory(t161) {
  return new (t161 || ClrWizardPage)(ɵɵdirectiveInject(WizardNavigationService), ɵɵdirectiveInject(PageCollectionService), ɵɵdirectiveInject(ButtonHubService));
};
ClrWizardPage.ɵcmp = ɵɵdefineComponent({
  type: ClrWizardPage,
  selectors: [["clr-wizard-page"]],
  contentQueries: function ClrWizardPage_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrWizardPageTitle, 7);
      ɵɵcontentQuery(dirIndex, ClrWizardPageNavTitle, 7);
      ɵɵcontentQuery(dirIndex, ClrWizardPageButtons, 7);
      ɵɵcontentQuery(dirIndex, ClrWizardPageHeaderActions, 7);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.pageTitle = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.pageNavTitle = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._buttons = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._headerActions = _t.first);
    }
  },
  hostVars: 7,
  hostBindings: function ClrWizardPage_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵhostProperty("id", ctx.id);
      ɵɵattribute("aria-hidden", !ctx.current)("aria-labelledby", ctx.stepItemId);
      ɵɵclassProp("active", ctx.current)("clr-wizard-page", true);
    }
  },
  inputs: {
    _id: [InputFlags.None, "id", "_id"],
    preventDefault: [InputFlags.None, "clrWizardPagePreventDefault", "preventDefault"],
    nextStepDisabled: [InputFlags.None, "clrWizardPageNextDisabled", "nextStepDisabled"],
    previousStepDisabled: [InputFlags.None, "clrWizardPagePreviousDisabled", "previousStepDisabled"],
    hasError: [InputFlags.None, "clrWizardPageHasError", "hasError"],
    stopCancel: [InputFlags.None, "clrWizardPagePreventDefaultCancel", "stopCancel"],
    stopNext: [InputFlags.None, "clrWizardPagePreventDefaultNext", "stopNext"]
  },
  outputs: {
    nextStepDisabledChange: "clrWizardPageNextDisabledChange",
    previousStepDisabledChange: "clrWizardPagePreviousDisabledChange",
    stopCancelChange: "clrWizardPagePreventDefaultCancelChange",
    onCommit: "clrWizardPageOnCommit",
    onLoad: "clrWizardPageOnLoad",
    pageOnCancel: "clrWizardPageOnCancel",
    finishButtonClicked: "clrWizardPageFinish",
    previousButtonClicked: "clrWizardPagePrevious",
    nextButtonClicked: "clrWizardPageNext",
    dangerButtonClicked: "clrWizardPageDanger",
    primaryButtonClicked: "clrWizardPagePrimary",
    customButtonClicked: "clrWizardPageCustomButton"
  },
  ngContentSelectors: _c02,
  decls: 1,
  vars: 0,
  template: function ClrWizardPage_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrWizardPage, [{
    type: Component,
    args: [{
      selector: "clr-wizard-page",
      template: "<ng-content></ng-content>",
      host: {
        "[id]": "id",
        "[attr.aria-hidden]": "!current",
        "[attr.aria-labelledby]": "stepItemId",
        "[class.active]": "current",
        "[class.clr-wizard-page]": "true"
      }
    }]
  }], function() {
    return [{
      type: WizardNavigationService
    }, {
      type: PageCollectionService
    }, {
      type: ButtonHubService
    }];
  }, {
    _id: [{
      type: Input,
      args: ["id"]
    }],
    preventDefault: [{
      type: Input,
      args: ["clrWizardPagePreventDefault"]
    }],
    nextStepDisabledChange: [{
      type: Output,
      args: ["clrWizardPageNextDisabledChange"]
    }],
    previousStepDisabledChange: [{
      type: Output,
      args: ["clrWizardPagePreviousDisabledChange"]
    }],
    stopCancelChange: [{
      type: Output,
      args: ["clrWizardPagePreventDefaultCancelChange"]
    }],
    onCommit: [{
      type: Output,
      args: ["clrWizardPageOnCommit"]
    }],
    onLoad: [{
      type: Output,
      args: ["clrWizardPageOnLoad"]
    }],
    pageOnCancel: [{
      type: Output,
      args: ["clrWizardPageOnCancel"]
    }],
    finishButtonClicked: [{
      type: Output,
      args: ["clrWizardPageFinish"]
    }],
    previousButtonClicked: [{
      type: Output,
      args: ["clrWizardPagePrevious"]
    }],
    nextButtonClicked: [{
      type: Output,
      args: ["clrWizardPageNext"]
    }],
    dangerButtonClicked: [{
      type: Output,
      args: ["clrWizardPageDanger"]
    }],
    primaryButtonClicked: [{
      type: Output,
      args: ["clrWizardPagePrimary"]
    }],
    customButtonClicked: [{
      type: Output,
      args: ["clrWizardPageCustomButton"]
    }],
    pageTitle: [{
      type: ContentChild,
      args: [ClrWizardPageTitle, {
        static: true
      }]
    }],
    pageNavTitle: [{
      type: ContentChild,
      args: [ClrWizardPageNavTitle, {
        static: true
      }]
    }],
    _buttons: [{
      type: ContentChild,
      args: [ClrWizardPageButtons, {
        static: true
      }]
    }],
    _headerActions: [{
      type: ContentChild,
      args: [ClrWizardPageHeaderActions, {
        static: true
      }]
    }],
    nextStepDisabled: [{
      type: Input,
      args: ["clrWizardPageNextDisabled"]
    }],
    previousStepDisabled: [{
      type: Input,
      args: ["clrWizardPagePreviousDisabled"]
    }],
    hasError: [{
      type: Input,
      args: ["clrWizardPageHasError"]
    }],
    stopCancel: [{
      type: Input,
      args: ["clrWizardPagePreventDefaultCancel"]
    }],
    stopNext: [{
      type: Input,
      args: ["clrWizardPagePreventDefaultNext"]
    }]
  });
})();
var ClrWizardTitle = class {
};
ClrWizardTitle.ɵfac = function ClrWizardTitle_Factory(t161) {
  return new (t161 || ClrWizardTitle)();
};
ClrWizardTitle.ɵdir = ɵɵdefineDirective({
  type: ClrWizardTitle,
  selectors: [["clr-wizard-title"]],
  inputs: {
    headingLevel: [InputFlags.None, "clrHeadingLevel", "headingLevel"]
  }
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrWizardTitle, [{
    type: Directive,
    args: [{
      selector: "clr-wizard-title"
    }]
  }], null, {
    headingLevel: [{
      type: Input,
      args: ["clrHeadingLevel"]
    }]
  });
})();
var ClrWizardStepnavItem = class {
  constructor(navService, pageCollection, commonStrings) {
    this.navService = navService;
    this.pageCollection = pageCollection;
    this.commonStrings = commonStrings;
  }
  get id() {
    this.pageGuard();
    return this.pageCollection.getStepItemIdForPage(this.page);
  }
  get stepAriaCurrent() {
    return this.isCurrent && "step";
  }
  get isDisabled() {
    this.pageGuard();
    return this.page.disabled || this.navService.wizardStopNavigation || this.navService.wizardDisableStepnav;
  }
  get isCurrent() {
    this.pageGuard();
    return this.page.current;
  }
  get isComplete() {
    this.pageGuard();
    return this.page.completed;
  }
  get hasError() {
    this.pageGuard();
    return this.page.hasError && this.isComplete;
  }
  get canNavigate() {
    this.pageGuard();
    return this.pageCollection.previousPageIsCompleted(this.page);
  }
  click() {
    this.pageGuard();
    if (this.isDisabled || this.isCurrent) {
      return;
    }
    this.navService.goTo(this.page);
  }
  pageGuard() {
    if (!this.page) {
      throw new Error("Wizard stepnav item is not associated with a wizard page.");
    }
  }
};
ClrWizardStepnavItem.ɵfac = function ClrWizardStepnavItem_Factory(t161) {
  return new (t161 || ClrWizardStepnavItem)(ɵɵdirectiveInject(WizardNavigationService), ɵɵdirectiveInject(PageCollectionService), ɵɵdirectiveInject(ClrCommonStringsService));
};
ClrWizardStepnavItem.ɵcmp = ɵɵdefineComponent({
  type: ClrWizardStepnavItem,
  selectors: [["", "clr-wizard-stepnav-item", ""]],
  hostVars: 17,
  hostBindings: function ClrWizardStepnavItem_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵhostProperty("id", ctx.id);
      ɵɵattribute("aria-current", ctx.stepAriaCurrent)("aria-controls", ctx.page.id);
      ɵɵclassProp("clr-nav-link", true)("nav-item", true)("active", ctx.isCurrent)("disabled", ctx.isDisabled)("no-click", !ctx.canNavigate)("complete", ctx.isComplete)("error", ctx.hasError);
    }
  },
  inputs: {
    page: "page"
  },
  attrs: _c96,
  ngContentSelectors: _c02,
  decls: 8,
  vars: 6,
  consts: [["type", "button", 1, "btn", "btn-link", "clr-wizard-stepnav-link", 3, "click"], [1, "clr-wizard-stepnav-link-suffix"], ["shape", "error-standard", "status", "danger", "class", "clr-wizard-stepnav-item-error-icon", 4, "ngIf"], [4, "ngIf"], [1, "clr-wizard-stepnav-link-title"], [3, "ngTemplateOutlet"], ["class", "clr-sr-only", 4, "ngIf"], ["shape", "error-standard", "status", "danger", 1, "clr-wizard-stepnav-item-error-icon"], [1, "clr-sr-only"]],
  template: function ClrWizardStepnavItem_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "button", 0);
      ɵɵlistener("click", function ClrWizardStepnavItem_Template_button_click_0_listener() {
        return ctx.click();
      });
      ɵɵelementStart(1, "span", 1);
      ɵɵtemplate(2, ClrWizardStepnavItem_cds_icon_2_Template, 1, 0, "cds-icon", 2)(3, ClrWizardStepnavItem_ng_content_3_Template, 1, 0, "ng-content", 3);
      ɵɵelementEnd();
      ɵɵelementStart(4, "span", 4);
      ɵɵtemplate(5, ClrWizardStepnavItem_ng_template_5_Template, 0, 0, "ng-template", 5);
      ɵɵelementEnd();
      ɵɵtemplate(6, ClrWizardStepnavItem_span_6_Template, 2, 1, "span", 6)(7, ClrWizardStepnavItem_span_7_Template, 2, 1, "span", 6);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵattribute("disabled", ctx.isDisabled ? "" : null);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.hasError);
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.hasError);
      ɵɵadvance(2);
      ɵɵproperty("ngTemplateOutlet", ctx.page.navTitle);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.hasError);
      ɵɵadvance();
      ɵɵproperty("ngIf", !ctx.hasError && ctx.isComplete);
    }
  },
  dependencies: [NgIf, NgTemplateOutlet, CdsIconCustomTag],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrWizardStepnavItem, [{
    type: Component,
    args: [{
      selector: "[clr-wizard-stepnav-item]",
      template: `
    <button
      type="button"
      class="btn btn-link clr-wizard-stepnav-link"
      (click)="click()"
      [attr.disabled]="isDisabled ? '' : null"
    >
      <span class="clr-wizard-stepnav-link-suffix">
        <cds-icon
          shape="error-standard"
          status="danger"
          class="clr-wizard-stepnav-item-error-icon"
          *ngIf="hasError"
        ></cds-icon>
        <ng-content *ngIf="!hasError"></ng-content>
      </span>
      <span class="clr-wizard-stepnav-link-title">
        <ng-template [ngTemplateOutlet]="page.navTitle"></ng-template>
      </span>
      <span *ngIf="hasError" class="clr-sr-only">{{ commonStrings.keys.wizardStepError }}</span>
      <span *ngIf="!hasError && isComplete" class="clr-sr-only">{{ commonStrings.keys.wizardStepSuccess }}</span>
    </button>
  `,
      host: {
        "[id]": "id",
        "[attr.aria-current]": "stepAriaCurrent",
        "[attr.aria-controls]": "page.id",
        "[class.clr-nav-link]": "true",
        "[class.nav-item]": "true",
        "[class.active]": "isCurrent",
        "[class.disabled]": "isDisabled",
        "[class.no-click]": "!canNavigate",
        "[class.complete]": "isComplete",
        "[class.error]": "hasError"
      }
    }]
  }], function() {
    return [{
      type: WizardNavigationService
    }, {
      type: PageCollectionService
    }, {
      type: ClrCommonStringsService
    }];
  }, {
    page: [{
      type: Input,
      args: ["page"]
    }]
  });
})();
var ClrWizardStepnav = class {
  constructor(pageService) {
    this.pageService = pageService;
  }
};
ClrWizardStepnav.ɵfac = function ClrWizardStepnav_Factory(t161) {
  return new (t161 || ClrWizardStepnav)(ɵɵdirectiveInject(PageCollectionService));
};
ClrWizardStepnav.ɵcmp = ɵɵdefineComponent({
  type: ClrWizardStepnav,
  selectors: [["clr-wizard-stepnav"]],
  hostAttrs: [1, "clr-wizard-stepnav"],
  decls: 2,
  vars: 1,
  consts: [[1, "clr-wizard-stepnav-list"], ["clr-wizard-stepnav-item", "", "class", "clr-wizard-stepnav-item", 3, "page", 4, "ngFor", "ngForOf"], ["clr-wizard-stepnav-item", "", 1, "clr-wizard-stepnav-item", 3, "page"]],
  template: function ClrWizardStepnav_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "div", 0);
      ɵɵtemplate(1, ClrWizardStepnav_div_1_Template, 2, 2, "div", 1);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance();
      ɵɵproperty("ngForOf", ctx.pageService.pages);
    }
  },
  dependencies: [NgForOf, ClrWizardStepnavItem],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrWizardStepnav, [{
    type: Component,
    args: [{
      selector: "clr-wizard-stepnav",
      template: `
    <div class="clr-wizard-stepnav-list">
      <div
        *ngFor="let page of pageService.pages; let i = index"
        clr-wizard-stepnav-item
        [page]="page"
        class="clr-wizard-stepnav-item"
      >
        {{ i + 1 }}
      </div>
    </div>
  `,
      host: {
        class: "clr-wizard-stepnav"
      }
    }]
  }], function() {
    return [{
      type: PageCollectionService
    }];
  }, null);
})();
var ClrWizard = class {
  constructor(platformId, commonStrings, navService, pageCollection, buttonService, headerActionService, differs) {
    this.platformId = platformId;
    this.commonStrings = commonStrings;
    this.navService = navService;
    this.pageCollection = pageCollection;
    this.buttonService = buttonService;
    this.headerActionService = headerActionService;
    this.stepnavAriaLabel = this.commonStrings.keys.wizardStepnavAriaLabel;
    this.size = "xl";
    this.closable = true;
    this._openChanged = new EventEmitter(false);
    this.onCancel = new EventEmitter(false);
    this.wizardFinished = new EventEmitter(false);
    this.onReset = new EventEmitter(false);
    this.currentPageChanged = new EventEmitter(false);
    this.onMoveNext = new EventEmitter(false);
    this.onMovePrevious = new EventEmitter(false);
    this._open = false;
    this.wizardId = uniqueIdFactory();
    this._forceForward = false;
    this._stopNext = false;
    this._stopCancel = false;
    this._stopNavigation = false;
    this._disableStepnav = false;
    this.subscriptions = [];
    this.subscriptions.push(this.listenForNextPageChanges(), this.listenForPreviousPageChanges(), this.listenForCancelChanges(), this.listenForFinishedChanges(), this.listenForPageChanges());
    this.differ = differs.find([]).create(null);
  }
  /**
   * Resets page completed states when navigating backwards.
   * Set using `[clrWizardForceForwardNavigation]` input.
   */
  get forceForward() {
    return this._forceForward;
  }
  set forceForward(value) {
    this._forceForward = !!value;
    this.navService.forceForwardNavigation = value;
  }
  /**
   * Toggles open/close of the wizard component.
   * Set using the `[clrWizardOpen]` input.
   */
  set clrWizardOpen(open) {
    if (open) {
      this.buttonService.buttonsReady = true;
    }
    this._open = open;
  }
  /**
   * Prevents ClrWizard from moving to the next page or closing itself on finishing.
   * Set using the `[clrWizardPreventDefaultNext]` input. Note that using stopNext
   * will require you to create your own calls to .next() and .finish() in your
   * host component to make the ClrWizard work as expected.
   */
  get stopNext() {
    return this._stopNext;
  }
  set stopNext(value) {
    this._stopNext = !!value;
    this.navService.wizardHasAltNext = value;
  }
  /**
   * Prevents ClrWizard from closing when the cancel button or close "X" is clicked.
   * Set using the `[clrWizardPreventDefaultCancel]` input.
   *
   * Note that using stopCancel will require you to create your own calls to `close()` in your host compone`nt
   * to make the ClrWizard work as expected. Useful for doing checks or prompts
   * before closing a ClrWizard.
   */
  get stopCancel() {
    return this._stopCancel;
  }
  set stopCancel(value) {
    this._stopCancel = !!value;
    this.navService.wizardHasAltCancel = value;
  }
  /**
   * Prevents ClrWizard from performing any form of navigation away from the current
   * page. Set using the `[clrWizardPreventNavigation]` input.
   * Note that stopNavigation is meant to freeze the wizard in place, typically
   * during a long validation or background action where you want the wizard to
   * display loading content but not allow the user to execute navigation in
   * the stepnav, close X, or the  back, finish, or next buttons.
   */
  get stopNavigation() {
    return this._stopNavigation;
  }
  set stopNavigation(value) {
    this._stopNavigation = !!value;
    this.navService.wizardStopNavigation = value;
  }
  /**
   * Prevents clicks on the links in the stepnav from working.
   * Set using `[clrWizardDisableStepnav]` input.
   * A more granular bypassing of navigation which can be useful when your
   * ClrWizard is in a state of completion and you don't want users to be
   * able to jump backwards and change things.
   */
  get disableStepnav() {
    return this._disableStepnav;
  }
  set disableStepnav(value) {
    this._disableStepnav = !!value;
    this.navService.wizardDisableStepnav = value;
  }
  get currentPage() {
    return this.navService.currentPage;
  }
  set currentPage(page) {
    this.navService.goTo(page, true);
  }
  get isLast() {
    return this.navService.currentPageIsLast;
  }
  get isFirst() {
    return this.navService.currentPageIsFirst;
  }
  ngAfterContentInit() {
    this.pageCollection.pages = this.pages;
    this.headerActionService.wizardHeaderActions = this.headerActions;
  }
  ngDoCheck() {
    this.updateNavOnPageChanges();
  }
  ngOnDestroy() {
    this.subscriptions.forEach((s27) => s27.unsubscribe());
  }
  /**
   * Marks Wizard as finished. By default it does not execute event
   * emissions or checks before completing and closing. This method is commonly
   * used as part of an alternative navigation with `[clrWizardPreventDefaultNext]`.
   *
   * If `skipChecksAndEmits` is true, the wizard will complete and close
   * regardless of the state of its current page. This is useful for alternative
   * navigation where event emissions have already been done and firing them again
   * may cause an event loop.
   */
  finish(skipChecksAndEmits = true) {
    if (skipChecksAndEmits) {
      this.forceFinish();
    } else {
      this.navService.finish();
    }
  }
  /**
   * Marks the wizard as finished but does run checks and emissions.
   * Good for a last step in an alternate workflow. Does the same thing as
   * calling `ClrWizard.finish(true)` or `ClrWizard.finish()` without a parameter.
   */
  forceFinish() {
    if (this.stopNavigation) {
      return;
    }
    this.close();
  }
  /**
   * Opens the wizard. If there is no current page defined, sets the first page in the wizard to be current.
   */
  open() {
    this._open = true;
    if (!this.currentPage) {
      this.navService.setFirstPageCurrent();
    }
    this.buttonService.buttonsReady = true;
    this._openChanged.emit(true);
  }
  /**
   * Closes the wizard. Call this directly instead of `cancel()` to implement alternative cancel functionality.
   */
  close() {
    if (this.stopNavigation) {
      return;
    }
    this._open = false;
    this._openChanged.emit(false);
  }
  /**
   * Used to open and close the wizard. By default the wizard will
   * close if invoked with no parameter. If parameter is true wizard will open
   * else if false will close.
   */
  toggle(open) {
    if (open) {
      this.open();
    } else {
      this.close();
    }
  }
  /**
   * Moves the wizard to the previous page.
   */
  previous() {
    this.navService.previous();
  }
  /**
   * By default, `next()` does not execute event emissions.
   * This method is commonly called as part of an alternative navigation
   * with `[clrWizardPreventDefaultNext]`. The wizard will move to the next page
   * regardless of the state of its current page. This is useful for alternative
   * navigation where event emissions have already been done and firing them again
   * may cause an event loop.
   *
   * If `skipChecksAndEmits` is false, the wizard will execute default checks
   * and emit events as normal. This is useful for custom buttons or programmatic
   * workflows that are not executing the wizards default checks and emissions.
   * It is another way to navigate without having to rewrite the wizard’s default
   * functionality from scratch.
   */
  next(skipChecksAndEmits = true) {
    if (skipChecksAndEmits) {
      this.forceNext();
    } else {
      this.navService.next();
    }
  }
  /**
   * Moves the wizard to the next page without the checks and emissions.
   * Good for a last step in an alternate workflow.
   * Alias for `ClrWizard.next(true)` or `ClrWizard.next()`
   */
  forceNext() {
    this.navService.forceNext();
  }
  /**
   * Cancels and closes the wizard. Do not use this for an override of the cancel
   * the functionality with `[clrWizardPreventDefaultCancel]`, `[clrWizardPreventPageDefaultCancel]`,
   * or `[clrWizardPagePreventDefault]` because it will initiate the same checks
   * and event emissions that invoked your event handler. Use `ClrWizard.close()` instead.
   */
  cancel() {
    this.navService.cancel();
  }
  /**
   * Overrides behavior of the underlying modal to avoid collisions with
   * alternative cancel functionality. In most cases, use `ClrWizard.cancel()` instead.
   */
  modalCancel() {
    if (this.closable) {
      this.checkAndCancel();
    }
  }
  /**
   * Checks for alternative cancel flows defined at the current page or
   * wizard level. Performs a canceled if not. Emits events that initiate
   * the alternative cancel outputs `(clrWizardPageOnCancel)` and `(clrWizardOnCancel)`.
   */
  checkAndCancel() {
    const currentPage = this.currentPage;
    const currentPageHasOverrides = currentPage.stopCancel || currentPage.preventDefault;
    if (this.stopNavigation) {
      return;
    }
    currentPage.pageOnCancel.emit();
    if (!currentPageHasOverrides) {
      this.onCancel.emit();
    }
    if (!this.stopCancel && !currentPageHasOverrides) {
      this.close();
    }
  }
  /**
   * Navigates to a given page in the Wizard. Navigation will invoke the wizard’s default
   * checks and event emissions.
   *
   * The format of the expected ID parameter can be found in the return of the
   * ClrWizardPage.id getter, usually prefixed with `clr-wizard-page-` and then either a
   * numeric ID or the ID specified for the `ClrWizardPage` component’s `id` input.
   */
  goTo(pageId) {
    if (!pageId) {
      return;
    }
    this.navService.goTo(pageId);
  }
  /**
   * Reset sets all WizardPages to incomplete and sets the first page in the `ClrWizard` to
   * be the current page, resetting the wizard navigation.
   * Use `(clrWizardOnReset)` event to reset the data or model of your wizard.
   */
  reset() {
    this.pageCollection.reset();
    this.onReset.emit();
  }
  listenForNextPageChanges() {
    return this.navService.movedToNextPage.pipe(filter(() => isPlatformBrowser(this.platformId))).subscribe(() => {
      this.onMoveNext.emit();
      this.pageTitle?.nativeElement.focus();
    });
  }
  listenForPreviousPageChanges() {
    return this.navService.movedToPreviousPage.pipe(filter(() => isPlatformBrowser(this.platformId))).subscribe(() => {
      this.onMovePrevious.emit();
      this.pageTitle?.nativeElement.focus();
    });
  }
  listenForCancelChanges() {
    return this.navService.notifyWizardCancel.subscribe(() => this.checkAndCancel());
  }
  listenForFinishedChanges() {
    return this.navService.wizardFinished.subscribe(() => this.emitWizardFinished());
  }
  listenForPageChanges() {
    return this.navService.currentPageChanged.subscribe(() => {
      this.pageTitle?.nativeElement.focus();
      this.currentPageChanged.emit();
    });
  }
  updateNavOnPageChanges() {
    const changes = this.differ.diff(this.pages);
    if (changes) {
      changes.forEachAddedItem(() => this.navService.updateNavigation());
      changes.forEachRemovedItem(() => this.navService.updateNavigation());
    }
  }
  emitWizardFinished() {
    if (!this.stopNext) {
      this.forceFinish();
    }
    this.wizardFinished.emit();
  }
};
ClrWizard.ɵfac = function ClrWizard_Factory(t161) {
  return new (t161 || ClrWizard)(ɵɵdirectiveInject(PLATFORM_ID), ɵɵdirectiveInject(ClrCommonStringsService), ɵɵdirectiveInject(WizardNavigationService), ɵɵdirectiveInject(PageCollectionService), ɵɵdirectiveInject(ButtonHubService), ɵɵdirectiveInject(HeaderActionService), ɵɵdirectiveInject(IterableDiffers));
};
ClrWizard.ɵcmp = ɵɵdefineComponent({
  type: ClrWizard,
  selectors: [["clr-wizard"]],
  contentQueries: function ClrWizard_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, ClrWizardTitle, 5);
      ɵɵcontentQuery(dirIndex, ClrWizardPage, 5);
      ɵɵcontentQuery(dirIndex, ClrWizardHeaderAction, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.wizardTitle = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.pages = _t);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.headerActions = _t);
    }
  },
  viewQuery: function ClrWizard_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c97, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.pageTitle = _t.first);
    }
  },
  hostVars: 10,
  hostBindings: function ClrWizard_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("clr-wizard", true)("wizard-md", ctx.size == "md")("wizard-lg", ctx.size == "lg")("wizard-xl", ctx.size == "xl")("lastPage", ctx.navService.currentPageIsLast);
    }
  },
  inputs: {
    stepnavAriaLabel: [InputFlags.None, "clrWizardStepnavAriaLabel", "stepnavAriaLabel"],
    size: [InputFlags.None, "clrWizardSize", "size"],
    closable: [InputFlags.None, "clrWizardClosable", "closable"],
    forceForward: [InputFlags.None, "clrWizardForceForwardNavigation", "forceForward"],
    clrWizardOpen: "clrWizardOpen",
    stopNext: [InputFlags.None, "clrWizardPreventDefaultNext", "stopNext"],
    stopCancel: [InputFlags.None, "clrWizardPreventDefaultCancel", "stopCancel"],
    stopNavigation: [InputFlags.None, "clrWizardPreventNavigation", "stopNavigation"],
    disableStepnav: [InputFlags.None, "clrWizardDisableStepnav", "disableStepnav"]
  },
  outputs: {
    _openChanged: "clrWizardOpenChange",
    onCancel: "clrWizardOnCancel",
    wizardFinished: "clrWizardOnFinish",
    onReset: "clrWizardOnReset",
    currentPageChanged: "clrWizardCurrentPageChanged",
    onMoveNext: "clrWizardOnNext",
    onMovePrevious: "clrWizardOnPrevious"
  },
  features: [ɵɵProvidersFeature([WizardNavigationService, PageCollectionService, ButtonHubService, HeaderActionService])],
  ngContentSelectors: _c99,
  decls: 17,
  vars: 14,
  consts: [["pageTitle", ""], [3, "clrModalAlternateClose", "clrModalOpen", "clrModalSize", "clrModalClosable", "clrModalStaticBackdrop", "clrModalPreventClose", "clrModalLabelledById"], ["role", "region", 1, "modal-nav", "clr-wizard-stepnav-wrapper"], ["role", "heading", 1, "clr-wizard-title", 3, "id"], ["role", "heading", 1, "modal-title"], ["tabindex", "-1", 1, "modal-title-text"], [3, "ngTemplateOutlet"], ["class", "modal-header-actions-wrapper", 4, "ngIf"], [1, "modal-body"], ["clr-wizard-pages-wrapper", "", 1, "clr-wizard-content"], [1, "modal-footer", "clr-wizard-footer"], [1, "clr-wizard-footer-buttons"], ["class", "clr-wizard-footer-buttons-wrapper", 4, "ngIf"], [1, "modal-header-actions-wrapper"], [4, "ngIf"], [1, "clr-wizard-footer-buttons-wrapper"]],
  template: function ClrWizard_Template(rf, ctx) {
    if (rf & 1) {
      const _r1 = ɵɵgetCurrentView();
      ɵɵprojectionDef(_c98);
      ɵɵelementStart(0, "clr-modal", 1);
      ɵɵlistener("clrModalAlternateClose", function ClrWizard_Template_clr_modal_clrModalAlternateClose_0_listener() {
        ɵɵrestoreView(_r1);
        return ɵɵresetView(ctx.modalCancel());
      });
      ɵɵelementStart(1, "div", 2)(2, "div", 3);
      ɵɵprojection(3);
      ɵɵelementEnd();
      ɵɵelement(4, "clr-wizard-stepnav");
      ɵɵelementEnd();
      ɵɵelementStart(5, "div", 4)(6, "span", 5, 0);
      ɵɵtemplate(8, ClrWizard_ng_template_8_Template, 0, 0, "ng-template", 6);
      ɵɵelementEnd();
      ɵɵtemplate(9, ClrWizard_div_9_Template, 3, 2, "div", 7);
      ɵɵelementEnd();
      ɵɵelementStart(10, "div", 8)(11, "main", 9);
      ɵɵprojection(12, 1);
      ɵɵelementEnd()();
      ɵɵelementStart(13, "div", 10)(14, "div", 11);
      ɵɵtemplate(15, ClrWizard_div_15_Template, 2, 0, "div", 12)(16, ClrWizard_div_16_Template, 2, 1, "div", 12);
      ɵɵelementEnd()()();
    }
    if (rf & 2) {
      ɵɵproperty("clrModalOpen", ctx._open)("clrModalSize", ctx.size)("clrModalClosable", ctx.closable)("clrModalStaticBackdrop", true)("clrModalPreventClose", true)("clrModalLabelledById", ctx.wizardId);
      ɵɵadvance();
      ɵɵattribute("aria-label", ctx.stepnavAriaLabel);
      ɵɵadvance();
      ɵɵpropertyInterpolate("id", ctx.wizardId);
      ɵɵattribute("aria-level", ctx.wizardTitle.headingLevel || 1);
      ɵɵadvance(3);
      ɵɵattribute("aria-level", ctx.navService.currentPage.pageTitle.headingLevel || 2);
      ɵɵadvance(3);
      ɵɵproperty("ngTemplateOutlet", ctx.navService.currentPageTitle);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.headerActionService.displayHeaderActionsWrapper);
      ɵɵadvance(6);
      ɵɵproperty("ngIf", ctx.navService.currentPage && !ctx.navService.currentPage.hasButtons);
      ɵɵadvance();
      ɵɵproperty("ngIf", ctx.navService.currentPage && ctx.navService.currentPage.hasButtons);
    }
  },
  dependencies: [NgIf, NgTemplateOutlet, ClrModal, ClrModalBody, ClrWizardStepnav],
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrWizard, [{
    type: Component,
    args: [{
      selector: "clr-wizard",
      providers: [WizardNavigationService, PageCollectionService, ButtonHubService, HeaderActionService],
      host: {
        "[class.clr-wizard]": "true",
        "[class.wizard-md]": "size == 'md'",
        "[class.wizard-lg]": "size == 'lg'",
        "[class.wizard-xl]": "size == 'xl'",
        "[class.lastPage]": "navService.currentPageIsLast"
      },
      template: '<!--\n  ~ Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<clr-modal\n  [clrModalOpen]="_open"\n  [clrModalSize]="size"\n  [clrModalClosable]="closable"\n  [clrModalStaticBackdrop]="true"\n  [clrModalPreventClose]="true"\n  (clrModalAlternateClose)="modalCancel()"\n  [clrModalLabelledById]="wizardId"\n>\n  <div class="modal-nav clr-wizard-stepnav-wrapper" role="region" [attr.aria-label]="stepnavAriaLabel">\n    <div class="clr-wizard-title" id="{{wizardId}}" role="heading" [attr.aria-level]="wizardTitle.headingLevel || 1">\n      <ng-content select="clr-wizard-title"></ng-content>\n    </div>\n    <clr-wizard-stepnav></clr-wizard-stepnav>\n  </div>\n\n  <div class="modal-title" role="heading" [attr.aria-level]="navService.currentPage.pageTitle.headingLevel || 2">\n    <span tabindex="-1" #pageTitle class="modal-title-text">\n      <ng-template [ngTemplateOutlet]="navService.currentPageTitle"></ng-template>\n    </span>\n\n    <div class="modal-header-actions-wrapper" *ngIf="headerActionService.displayHeaderActionsWrapper">\n      <div *ngIf="headerActionService.showWizardHeaderActions">\n        <ng-content select="clr-wizard-header-action"></ng-content>\n      </div>\n      <div *ngIf="headerActionService.currentPageHasHeaderActions">\n        <ng-template [ngTemplateOutlet]="navService.currentPage.headerActions"></ng-template>\n      </div>\n    </div>\n  </div>\n\n  <div class="modal-body">\n    <main clr-wizard-pages-wrapper class="clr-wizard-content">\n      <ng-content></ng-content>\n    </main>\n  </div>\n  <div class="modal-footer clr-wizard-footer">\n    <div class="clr-wizard-footer-buttons">\n      <div\n        *ngIf="navService.currentPage && !navService.currentPage.hasButtons"\n        class="clr-wizard-footer-buttons-wrapper"\n      >\n        <ng-content select="clr-wizard-button"></ng-content>\n      </div>\n      <div\n        *ngIf="navService.currentPage && navService.currentPage.hasButtons"\n        class="clr-wizard-footer-buttons-wrapper"\n      >\n        <ng-template [ngTemplateOutlet]="navService.currentPage.buttons"></ng-template>\n      </div>\n    </div>\n  </div>\n</clr-modal>\n'
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [PLATFORM_ID]
      }]
    }, {
      type: ClrCommonStringsService
    }, {
      type: WizardNavigationService
    }, {
      type: PageCollectionService
    }, {
      type: ButtonHubService
    }, {
      type: HeaderActionService
    }, {
      type: IterableDiffers
    }];
  }, {
    stepnavAriaLabel: [{
      type: Input,
      args: ["clrWizardStepnavAriaLabel"]
    }],
    size: [{
      type: Input,
      args: ["clrWizardSize"]
    }],
    closable: [{
      type: Input,
      args: ["clrWizardClosable"]
    }],
    _openChanged: [{
      type: Output,
      args: ["clrWizardOpenChange"]
    }],
    onCancel: [{
      type: Output,
      args: ["clrWizardOnCancel"]
    }],
    wizardFinished: [{
      type: Output,
      args: ["clrWizardOnFinish"]
    }],
    onReset: [{
      type: Output,
      args: ["clrWizardOnReset"]
    }],
    currentPageChanged: [{
      type: Output,
      args: ["clrWizardCurrentPageChanged"]
    }],
    onMoveNext: [{
      type: Output,
      args: ["clrWizardOnNext"]
    }],
    onMovePrevious: [{
      type: Output,
      args: ["clrWizardOnPrevious"]
    }],
    pageTitle: [{
      type: ViewChild,
      args: ["pageTitle"]
    }],
    pages: [{
      type: ContentChildren,
      args: [ClrWizardPage, {
        descendants: true
      }]
    }],
    headerActions: [{
      type: ContentChildren,
      args: [ClrWizardHeaderAction]
    }],
    wizardTitle: [{
      type: ContentChild,
      args: [ClrWizardTitle]
    }],
    forceForward: [{
      type: Input,
      args: ["clrWizardForceForwardNavigation"]
    }],
    clrWizardOpen: [{
      type: Input,
      args: ["clrWizardOpen"]
    }],
    stopNext: [{
      type: Input,
      args: ["clrWizardPreventDefaultNext"]
    }],
    stopCancel: [{
      type: Input,
      args: ["clrWizardPreventDefaultCancel"]
    }],
    stopNavigation: [{
      type: Input,
      args: ["clrWizardPreventNavigation"]
    }],
    disableStepnav: [{
      type: Input,
      args: ["clrWizardDisableStepnav"]
    }]
  });
})();
var DEFAULT_BUTTON_TYPES = {
  cancel: "cancel",
  previous: "previous",
  next: "next",
  finish: "finish",
  danger: "danger"
};
var CUSTOM_BUTTON_TYPES = {
  cancel: "custom-cancel",
  previous: "custom-previous",
  next: "custom-next",
  finish: "custom-finish",
  danger: "custom-danger"
};
var ClrWizardButton = class {
  constructor(navService, buttonService) {
    this.navService = navService;
    this.buttonService = buttonService;
    this.type = "";
    this.disabled = false;
    this.hidden = false;
    this.wasClicked = new EventEmitter(false);
  }
  get isCancel() {
    return this.checkDefaultAndCustomType(this.type, "cancel");
  }
  get isNext() {
    return this.checkDefaultAndCustomType(this.type, "next");
  }
  get isPrevious() {
    return this.checkDefaultAndCustomType(this.type, "previous");
  }
  get isFinish() {
    return this.checkDefaultAndCustomType(this.type, "finish");
  }
  get isDanger() {
    return this.checkDefaultAndCustomType(this.type, "danger");
  }
  get isPrimaryAction() {
    return this.isNext || this.isDanger || this.isFinish;
  }
  get _disabledAttribute() {
    if (this.isDisabled) {
      return "";
    }
    return null;
  }
  get isDisabled() {
    const disabled = true;
    const nav = this.navService;
    const page = this.navService.currentPage;
    if (!this.buttonService.buttonsReady) {
      return !disabled;
    }
    if (this.disabled || nav.wizardStopNavigation || !page) {
      return true;
    }
    if (this.isCancel) {
      return !disabled;
    }
    if (this.isPrevious && (nav.currentPageIsFirst || page.previousStepDisabled)) {
      return disabled;
    }
    if (this.isDanger && !page.readyToComplete) {
      return disabled;
    }
    if (this.isNext && (nav.currentPageIsLast || !page.readyToComplete)) {
      return disabled;
    }
    if (this.isFinish && (!nav.currentPageIsLast || !page.readyToComplete)) {
      return disabled;
    }
    return !disabled;
  }
  get isHidden() {
    const hidden = true;
    const nav = this.navService;
    if (!this.buttonService.buttonsReady) {
      return !hidden;
    }
    if (this.hidden) {
      return true;
    }
    if (this.isCancel) {
      return !hidden;
    }
    if (this.isPrevious && nav.currentPageIsFirst) {
      return hidden;
    }
    if (this.isNext && nav.currentPageIsLast) {
      return hidden;
    }
    if (this.isFinish && !nav.currentPageIsLast) {
      return hidden;
    }
    return !hidden;
  }
  click() {
    if (this.isDisabled) {
      return;
    }
    this.wasClicked.emit(this.type);
    this.buttonService.buttonClicked(this.type);
  }
  checkDefaultAndCustomType(valueToCheck = "", typeToLookUp) {
    if (DEFAULT_BUTTON_TYPES[typeToLookUp] === valueToCheck) {
      return true;
    }
    if (CUSTOM_BUTTON_TYPES[typeToLookUp] === valueToCheck) {
      return true;
    }
    return false;
  }
};
ClrWizardButton.ɵfac = function ClrWizardButton_Factory(t161) {
  return new (t161 || ClrWizardButton)(ɵɵdirectiveInject(WizardNavigationService), ɵɵdirectiveInject(ButtonHubService));
};
ClrWizardButton.ɵcmp = ɵɵdefineComponent({
  type: ClrWizardButton,
  selectors: [["clr-wizard-button"]],
  hostAttrs: [1, "clr-wizard-btn-wrapper"],
  hostVars: 1,
  hostBindings: function ClrWizardButton_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("aria-hidden", ctx.isHidden);
    }
  },
  inputs: {
    type: "type",
    disabled: [InputFlags.None, "clrWizardButtonDisabled", "disabled"],
    hidden: [InputFlags.None, "clrWizardButtonHidden", "hidden"]
  },
  outputs: {
    wasClicked: "clrWizardButtonClicked"
  },
  ngContentSelectors: _c02,
  decls: 2,
  vars: 19,
  consts: [["type", "button", 1, "btn", "clr-wizard-btn", 3, "click"]],
  template: function ClrWizardButton_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "button", 0);
      ɵɵlistener("click", function ClrWizardButton_Template_button_click_0_listener() {
        return ctx.click();
      });
      ɵɵprojection(1);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵclassProp("btn-link", ctx.isCancel)("clr-wizard-btn--tertiary", ctx.isCancel)("btn-outline", ctx.isPrevious)("clr-wizard-btn--secondary", ctx.isPrevious)("btn-primary", ctx.isPrimaryAction)("clr-wizard-btn--primary", ctx.isPrimaryAction)("btn-success", ctx.isFinish)("btn-danger", ctx.isDanger)("disabled", ctx.isDisabled);
      ɵɵattribute("disabled", ctx._disabledAttribute);
    }
  },
  encapsulation: 2
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrWizardButton, [{
    type: Component,
    args: [{
      selector: "clr-wizard-button",
      template: `
    <button
      type="button"
      class="btn clr-wizard-btn"
      [class.btn-link]="isCancel"
      [class.clr-wizard-btn--tertiary]="isCancel"
      [class.btn-outline]="isPrevious"
      [class.clr-wizard-btn--secondary]="isPrevious"
      [class.btn-primary]="isPrimaryAction"
      [class.clr-wizard-btn--primary]="isPrimaryAction"
      [class.btn-success]="isFinish"
      [class.btn-danger]="isDanger"
      [class.disabled]="isDisabled"
      [attr.disabled]="_disabledAttribute"
      (click)="click()"
    >
      <ng-content></ng-content>
    </button>
  `,
      host: {
        class: "clr-wizard-btn-wrapper",
        "[attr.aria-hidden]": "isHidden"
      }
    }]
  }], function() {
    return [{
      type: WizardNavigationService
    }, {
      type: ButtonHubService
    }];
  }, {
    type: [{
      type: Input,
      args: ["type"]
    }],
    disabled: [{
      type: Input,
      args: ["clrWizardButtonDisabled"]
    }],
    hidden: [{
      type: Input,
      args: ["clrWizardButtonHidden"]
    }],
    wasClicked: [{
      type: Output,
      args: ["clrWizardButtonClicked"]
    }]
  });
})();
var CLR_WIZARD_DIRECTIVES = [ClrWizard, ClrWizardPage, ClrWizardStepnav, ClrWizardStepnavItem, ClrWizardButton, ClrWizardHeaderAction, ClrWizardTitle, ClrWizardPageTitle, ClrWizardPageNavTitle, ClrWizardPageButtons, ClrWizardPageHeaderActions];
var ClrWizardModule = class {
  constructor() {
    r24.addIcons(d11);
  }
};
ClrWizardModule.ɵfac = function ClrWizardModule_Factory(t161) {
  return new (t161 || ClrWizardModule)();
};
ClrWizardModule.ɵmod = ɵɵdefineNgModule({
  type: ClrWizardModule,
  declarations: [ClrWizard, ClrWizardPage, ClrWizardStepnav, ClrWizardStepnavItem, ClrWizardButton, ClrWizardHeaderAction, ClrWizardTitle, ClrWizardPageTitle, ClrWizardPageNavTitle, ClrWizardPageButtons, ClrWizardPageHeaderActions],
  imports: [CommonModule, ClrModalModule, ClrAlertModule],
  exports: [ClrWizard, ClrWizardPage, ClrWizardStepnav, ClrWizardStepnavItem, ClrWizardButton, ClrWizardHeaderAction, ClrWizardTitle, ClrWizardPageTitle, ClrWizardPageNavTitle, ClrWizardPageButtons, ClrWizardPageHeaderActions]
});
ClrWizardModule.ɵinj = ɵɵdefineInjector({
  imports: [CommonModule, ClrModalModule, ClrAlertModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClrWizardModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, ClrModalModule, ClrAlertModule],
      declarations: [CLR_WIZARD_DIRECTIVES],
      exports: [CLR_WIZARD_DIRECTIVES]
    }]
  }], function() {
    return [];
  }, null);
})();
var ClarityModule = class {
};
ClarityModule.ɵfac = function ClarityModule_Factory(t161) {
  return new (t161 || ClarityModule)();
};
ClarityModule.ɵmod = ɵɵdefineNgModule({
  type: ClarityModule,
  exports: [ClrEmphasisModule, ClrDataModule, ClrIconModule, ClrModalModule, ClrLoadingModule, ClrConditionalModule, ClrFocusOnViewInitModule, ClrButtonModule, ClrFormsModule, ClrLayoutModule, ClrPopoverModule, ClrWizardModule, ClrStepperModule, ClrSpinnerModule, ClrProgressBarModule, ClrPopoverModuleNext, ClrTimelineModule]
});
ClarityModule.ɵinj = ɵɵdefineInjector({
  imports: [ClrEmphasisModule, ClrDataModule, ClrIconModule, ClrModalModule, ClrLoadingModule, ClrConditionalModule, ClrFocusOnViewInitModule, ClrButtonModule, ClrFormsModule, ClrLayoutModule, ClrPopoverModule, ClrWizardModule, ClrStepperModule, ClrSpinnerModule, ClrProgressBarModule, ClrPopoverModuleNext, ClrTimelineModule]
});
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ClarityModule, [{
    type: NgModule,
    args: [{
      exports: [ClrEmphasisModule, ClrDataModule, ClrIconModule, ClrModalModule, ClrLoadingModule, ClrConditionalModule, ClrFocusOnViewInitModule, ClrButtonModule, ClrFormsModule, ClrLayoutModule, ClrPopoverModule, ClrWizardModule, ClrStepperModule, ClrSpinnerModule, ClrProgressBarModule, ClrPopoverModuleNext, ClrTimelineModule]
    }]
  }], null, null);
})();
var CLR_MENU_POSITIONS = ["bottom-left", "bottom-right", "top-left", "top-right", "left-bottom", "left-top", "right-bottom", "right-top"];
export {
  CHANGE_KEYS,
  CLR_ALERT_DIRECTIVES,
  CLR_BUTTON_GROUP_DIRECTIVES,
  CLR_DATAGRID_DIRECTIVES,
  CLR_DATEPICKER_DIRECTIVES,
  CLR_DROPDOWN_DIRECTIVES,
  CLR_ICON_DIRECTIVES,
  CLR_LAYOUT_DIRECTIVES,
  CLR_LOADING_BUTTON_DIRECTIVES,
  CLR_LOADING_DIRECTIVES,
  CLR_MENU_POSITIONS,
  CLR_MODAL_DIRECTIVES,
  CLR_NAVIGATION_DIRECTIVES,
  CLR_PROGRESS_BAR_DIRECTIVES,
  CLR_SIGNPOST_DIRECTIVES,
  CLR_SPINNER_DIRECTIVES,
  CLR_STACK_VIEW_DIRECTIVES,
  CLR_TABS_DIRECTIVES,
  CLR_TOOLTIP_DIRECTIVES,
  CLR_TREE_VIEW_DIRECTIVES,
  CLR_VERTICAL_NAV_DIRECTIVES,
  CLR_WIZARD_DIRECTIVES,
  CONDITIONAL_DIRECTIVES,
  CUSTOM_BUTTON_TYPES,
  CdsIconCustomTag,
  ClarityModule,
  ClrAbstractContainer,
  ClrAccordion,
  ClrAccordionContent,
  ClrAccordionDescription,
  ClrAccordionModule,
  ClrAccordionPanel,
  ClrAccordionTitle,
  ClrAlert,
  ClrAlertItem,
  ClrAlertModule,
  ClrAlertText,
  ClrAlerts,
  ClrAlertsPager,
  ClrAlignment,
  ClrAriaCurrentLink,
  ClrAxis,
  ClrButton,
  ClrButtonGroup,
  ClrButtonGroupModule,
  ClrButtonModule,
  ClrCalendar,
  ClrCheckbox,
  ClrCheckboxContainer,
  ClrCheckboxModule,
  ClrCheckboxWrapper,
  ClrCombobox,
  ClrComboboxContainer,
  ClrComboboxModule,
  ClrCommonFormsModule,
  ClrCommonStringsService,
  ClrConditionalModule,
  ClrControl,
  ClrControlContainer,
  ClrControlError,
  ClrControlHelper,
  ClrControlSuccess,
  ClrDataModule,
  ClrDatagrid,
  ClrDatagridActionBar,
  ClrDatagridActionOverflow,
  ClrDatagridCell,
  ClrDatagridColumn,
  ClrDatagridColumnSeparator,
  ClrDatagridColumnToggle,
  ClrDatagridColumnToggleButton,
  ClrDatagridDetail,
  ClrDatagridDetailBody,
  ClrDatagridDetailHeader,
  ClrDatagridFilter,
  ClrDatagridFooter,
  ClrDatagridHideableColumn,
  ClrDatagridItems,
  ClrDatagridModule,
  ClrDatagridPageSize,
  ClrDatagridPagination,
  ClrDatagridPlaceholder,
  ClrDatagridRow,
  ClrDatagridRowDetail,
  ClrDatagridSortOrder,
  ClrDatalist,
  ClrDatalistContainer,
  ClrDatalistInput,
  ClrDatalistModule,
  ClrDateContainer,
  ClrDateInput,
  ClrDateInputValidator,
  ClrDatepickerModule,
  ClrDatepickerViewManager,
  ClrDay,
  ClrDaypicker,
  ClrDestroyService,
  ClrDropdown,
  ClrDropdownItem,
  ClrDropdownMenu,
  ClrDropdownModule,
  ClrDropdownTrigger,
  ClrEmphasisModule,
  ClrExpandableAnimation,
  ClrFocusOnViewInit,
  ClrFocusOnViewInitModule,
  ClrForm,
  ClrFormLayout,
  ClrFormsModule,
  ClrHeader,
  ClrIconCustomTag,
  ClrIconModule,
  ClrIfActive,
  ClrIfDetail,
  ClrIfError,
  ClrIfExpanded,
  ClrIfOpen,
  ClrIfSuccess,
  ClrInput,
  ClrInputContainer,
  ClrInputModule,
  ClrLabel,
  ClrLayout,
  ClrLayoutModule,
  ClrLoading,
  ClrLoadingButton,
  ClrLoadingButtonModule,
  ClrLoadingModule,
  ClrLoadingState,
  ClrMainContainer,
  ClrMainContainerModule,
  ClrModal,
  ClrModalBody,
  ClrModalModule,
  ClrMonthpicker,
  ClrNavLevel,
  ClrNavigationModule,
  ClrOption,
  ClrOptionItems,
  ClrOptionSelected,
  ClrOptions,
  ClrPassword,
  ClrPasswordContainer,
  ClrPasswordModule,
  ClrPopoverAnchor,
  ClrPopoverContent,
  ClrPopoverEventsService,
  ClrPopoverHostDirective,
  ClrPopoverModule,
  ClrPopoverPositionService,
  ClrPopoverToggleService,
  ClrProgressBar,
  ClrProgressBarModule,
  ClrRadio,
  ClrRadioContainer,
  ClrRadioModule,
  ClrRadioWrapper,
  ClrRange,
  ClrRangeContainer,
  ClrRangeModule,
  ClrRecursiveForOf,
  ClrSelect,
  ClrSelectContainer,
  ClrSelectModule,
  ClrSelectedState,
  ClrSide,
  ClrSignpost,
  ClrSignpostContent,
  ClrSignpostModule,
  ClrSignpostTrigger,
  ClrSpinner,
  ClrSpinnerModule,
  ClrStackBlock,
  ClrStackContentInput,
  ClrStackHeader,
  ClrStackView,
  ClrStackViewCustomTags,
  ClrStackViewLabel,
  ClrStackViewModule,
  ClrStandaloneCdkTrapFocus,
  ClrStepButton,
  ClrStepButtonType,
  ClrStepper,
  ClrStepperModule,
  ClrStepperPanel,
  ClrStopEscapePropagationDirective,
  ClrTab,
  ClrTabContent,
  ClrTabLink,
  ClrTabOverflowContent,
  ClrTabs,
  ClrTabsModule,
  ClrTextarea,
  ClrTextareaContainer,
  ClrTextareaModule,
  ClrTimeline,
  ClrTimelineLayout,
  ClrTimelineModule,
  ClrTimelineStep,
  ClrTimelineStepDescription,
  ClrTimelineStepHeader,
  ClrTimelineStepState,
  ClrTimelineStepTitle,
  ClrTooltip,
  ClrTooltipContent,
  ClrTooltipModule,
  ClrTooltipTrigger,
  ClrTree,
  ClrTreeNode,
  ClrTreeNodeLink,
  ClrTreeViewModule,
  ClrVerticalNav,
  ClrVerticalNavGroup,
  ClrVerticalNavGroupChildren,
  ClrVerticalNavIcon,
  ClrVerticalNavLink,
  ClrVerticalNavModule,
  ClrWizard,
  ClrWizardButton,
  ClrWizardHeaderAction,
  ClrWizardModule,
  ClrWizardPage,
  ClrWizardPageButtons,
  ClrWizardPageHeaderActions,
  ClrWizardPageNavTitle,
  ClrWizardPageTitle,
  ClrWizardStepnav,
  ClrWizardStepnavItem,
  ClrWizardTitle,
  ClrYearpicker,
  DEFAULT_BUTTON_TYPES,
  DatagridNumericFilter,
  DatagridPropertyComparator,
  DatagridPropertyNumericFilter,
  DatagridPropertyStringFilter,
  DatagridStringFilter,
  EXPANDABLE_ANIMATION_DIRECTIVES,
  FOCUS_ON_VIEW_INIT,
  FOCUS_ON_VIEW_INIT_DIRECTIVES,
  IS_TOGGLE,
  IS_TOGGLE_PROVIDER,
  LoadingListener,
  MainContainerWillyWonka,
  NavDetectionOompaLoompa,
  TOGGLE_SERVICE,
  TOGGLE_SERVICE_PROVIDER,
  ToggleServiceFactory,
  WrappedFormControl,
  collapse,
  commonStringsDefault,
  fade,
  fadeSlide,
  isToggleFactory,
  slide,
  AccordionOompaLoompa as ÇlrAccordionOompaLoompa,
  AccordionWillyWonka as ÇlrAccordionWillyWonka,
  ActionableOompaLoompa as ÇlrActionableOompaLoompa,
  ActiveOompaLoompa as ÇlrActiveOompaLoompa,
  ClrPopoverCloseButton as ÇlrClrPopoverCloseButton,
  ClrPopoverModuleNext as ÇlrClrPopoverModuleNext,
  ClrPopoverOpenCloseButton as ÇlrClrPopoverOpenCloseButton,
  DatagridCellRenderer as ÇlrDatagridCellRenderer,
  DatagridDetailRegisterer as ÇlrDatagridDetailRegisterer,
  DatagridHeaderRenderer as ÇlrDatagridHeaderRenderer,
  DatagridMainRenderer as ÇlrDatagridMainRenderer,
  DatagridRowRenderer as ÇlrDatagridRowRenderer,
  ClrDatagridSelectionCellDirective as ÇlrDatagridSelectionCellDirective,
  DatagridWillyWonka as ÇlrDatagridWillyWonka,
  ExpandableOompaLoompa as ÇlrExpandableOompaLoompa,
  StepperOompaLoompa as ÇlrStepperOompaLoompa,
  StepperWillyWonka as ÇlrStepperWillyWonka,
  TabsWillyWonka as ÇlrTabsWillyWonka,
  WrappedCell as ÇlrWrappedCell,
  WrappedColumn as ÇlrWrappedColumn,
  WrappedRow as ÇlrWrappedRow
};
/*! Bundled license information:

@lit/reactive-element/development/css-tag.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/development/reactive-element.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/lit-html.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-element/development/lit-element.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/is-server.js:
  (**
   * @license
   * Copyright 2022 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/development/decorators/property.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directives/if-defined.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/development/directive.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/development/decorators/base.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/development/decorators/query.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@angular/forms/fesm2022/forms.mjs:
  (**
   * @license Angular v17.3.2
   * (c) 2010-2022 Google LLC. https://angular.io/
   * License: MIT
   *)
*/
//# sourceMappingURL=@clr_angular.js.map
